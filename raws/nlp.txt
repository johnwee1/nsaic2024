FUNDAMENTAL ALGORITHMS FOR
NLP

In the ﬁrst part of the book we introduce the fundamental suite of algorithmic
tools that make up the modern neural language model that is the heart of end-to-end
NLP systems. We begin with tokenization and preprocessing, as well as useful algo-
rithms like computing edit distance, and then proceed to the tasks of classiﬁcation,
logistic regression, neural networks, proceeding through feedforward networks, re-
current networks, and then transformers. We’ll also see the role of embeddings as a
model of word meaning.

CHAPTER

1 Introduction

[The last thing you ﬁgure out in writing a book is what to put ﬁrst.]

Pascal

3

4 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

CHAPTER

2 Regular Expressions, Text

Normalization, Edit Distance

I am unhappy.

I need some help, that much seems certain.

Perhaps I could learn to get along with my mother.

User:
ELIZA: DO YOU THINK COMING HERE WILL HELP YOU NOT TO BE UNHAPPY
User:
ELIZA: WHAT WOULD IT MEAN TO YOU IF YOU GOT SOME HELP
User:
ELIZA: TELL ME MORE ABOUT YOUR FAMILY
User:
ELIZA: WHO ELSE IN YOU FAMILY TAKES CARE OF YOU
User:
ELIZA: YOUR FATHER
User:

You are like my father in some ways.

My mother takes care of me.

My father.

ELIZA

chatbots

text
normalization

tokenization

Weizenbaum (1966)

The dialogue above is from ELIZA, an early natural language processing system
that could carry on a limited conversation with a user by imitating the responses of
a Rogerian psychotherapist (Weizenbaum, 1966). ELIZA is a surprisingly simple
program that uses pattern matching to recognize phrases like “I need X” and translate
them into suitable outputs like “What would it mean to you if you got X?”. This
simple technique succeeds in this domain because ELIZA doesn’t actually need to
know anything to mimic a Rogerian psychotherapist. As Weizenbaum notes, this is
one of the few dialogue genres where listeners can act as if they know nothing of the
world. ELIZA’s mimicry of human conversation was remarkably successful: many
people who interacted with ELIZA came to believe that it really understood them
and their problems, many continued to believe in ELIZA’s abilities even after the
program’s operation was explained to them (Weizenbaum, 1976), and even today
such chatbots are a fun diversion.

Of course modern conversational agents are much more than a diversion; they
can answer questions, book ﬂights, or ﬁnd restaurants, functions for which they rely
on a much more sophisticated understanding of the user’s intent, as we will see in
Chapter 15. Nonetheless, the simple pattern-based methods that powered ELIZA
and other chatbots play a crucial role in natural language processing.

We’ll begin with the most important tool for describing text patterns: the regular
expression. Regular expressions can be used to specify strings we might want to
extract from a document, from transforming “I need X” in ELIZA above, to deﬁning
strings like $199 or $24.99 for extracting tables of prices from a document.

We’ll then turn to a set of tasks collectively called text normalization, in which
regular expressions play an important part. Normalizing text means converting it
to a more convenient, standard form. For example, most of what we are going to
do with language relies on ﬁrst separating out or tokenizing words from running
text, the task of tokenization. English words are often separated from each other
by whitespace, but whitespace is not always sufﬁcient. New York and rock ’n’ roll
are sometimes treated as large words despite the fact that they contain spaces, while
sometimes we’ll need to separate I’m into the two words I and am. For processing
tweets or texts we’ll need to tokenize emoticons like :) or hashtags like #nlproc.

2.1

• REGULAR EXPRESSIONS

5

lemmatization

stemming

sentence
segmentation

Some languages, like Japanese, don’t have spaces between words, so word tokeniza-
tion becomes more difﬁcult.

Another part of text normalization is lemmatization, the task of determining
that two words have the same root, despite their surface differences. For example,
the words sang, sung, and sings are forms of the verb sing. The word sing is the
common lemma of these words, and a lemmatizer maps from all of these to sing.
Lemmatization is essential for processing morphologically complex languages like
Arabic. Stemming refers to a simpler version of lemmatization in which we mainly
just strip sufﬁxes from the end of the word. Text normalization also includes sen-
tence segmentation: breaking up a text into individual sentences, using cues like
periods or exclamation points.

Finally, we’ll need to compare words and other strings. We’ll introduce a metric
called edit distance that measures how similar two strings are based on the number
of edits (insertions, deletions, substitutions) it takes to change one string into the
other. Edit distance is an algorithm with applications throughout language process-
ing, from spelling correction to speech recognition to coreference resolution.

2.1 Regular Expressions

regular
expression

corpus

One of the unsung successes in standardization in computer science has been the
regular expression (often shortened to regex), a language for specifying text search
strings. This practical language is used in every computer language, word processor,
and text processing tools like the Unix tools grep or Emacs. Formally, a regular ex-
pression is an algebraic notation for characterizing a set of strings. Regular expres-
sions are particularly useful for searching in texts, when we have a pattern to search
for and a corpus of texts to search through. A regular expression search function
will search through the corpus, returning all texts that match the pattern. The corpus
can be a single document or a collection. For example, the Unix command-line tool
grep takes a regular expression and returns every line of the input document that
matches the expression.

A search can be designed to return every match on a line, if there are more than
one, or just the ﬁrst match. In the following examples we generally underline the
exact part of the pattern that matches the regular expression and show only the ﬁrst
match. We’ll show regular expressions delimited by slashes but note that slashes are
not part of the regular expressions.

Regular expressions come in many variants. We’ll be describing extended regu-
lar expressions; different regular expression parsers may only recognize subsets of
these, or treat some expressions slightly differently. Using an online regular expres-
sion tester is a handy way to test out your expressions and explore these variations.

concatenation

2.1.1 Basic Regular Expression Patterns

The simplest kind of regular expression is a sequence of simple characters; putting
characters in sequence is called concatenation. To search for woodchuck, we type
/woodchuck/. The expression /Buttercup/ matches any string containing the
substring Buttercup; grep with that expression would return the line I’m called lit-
tle Buttercup. The search string can consist of a single character (like /!/) or a
sequence of characters (like /urgl/) (see Fig. 2.1).

Regular expressions are case sensitive; lower case /s/ is distinct from upper

6 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

Regex
/woodchucks/
/a/
/!/
Figure 2.1 Some simple regex searches.

Example Patterns Matched
“interesting links to woodchucks and lemurs”
“Mary Ann stopped by Mona’s”
“You’ve left the burglar behind again!” said Nori

case /S/ (/s/ matches a lower case s but not an upper case S). This means that
the pattern /woodchucks/ will not match the string Woodchucks. We can solve this
problem with the use of the square braces [ and ]. The string of characters inside the
braces speciﬁes a disjunction of characters to match. For example, Fig. 2.2 shows
that the pattern /[wW]/ matches patterns containing either w or W.

Match

Regex
/[wW]oodchuck/ Woodchuck or woodchuck
/[abc]/
/[1234567890]/

‘a’, ‘b’, or ‘c’
any digit

Example Patterns
“Woodchuck”
“In uomini, in soldati”
“plenty of 7 to 5”

Figure 2.2 The use of the brackets [] to specify a disjunction of characters.

The regular expression /[1234567890]/ speciﬁes any single digit. While such
classes of characters as digits or letters are important building blocks in expressions,
they can get awkward (e.g., it’s inconvenient to specify

/[ABCDEFGHIJKLMNOPQRSTUVWXYZ]/

range

to mean “any capital letter”). In cases where there is a well-deﬁned sequence asso-
ciated with a set of characters, the brackets can be used with the dash (-) to specify
any one character in a range. The pattern /[2-5]/ speciﬁes any one of the charac-
ters 2, 3, 4, or 5. The pattern /[b-g]/ speciﬁes one of the characters b, c, d, e, f, or
g. Some other examples are shown in Fig. 2.3.

Regex
/[A-Z]/
/[a-z]/
/[0-9]/

Match
an upper case letter
a lower case letter
a single digit

Example Patterns Matched
“we should call it ‘Drenched Blossoms’ ”
“my beans were impatient to be hoed!”
“Chapter 1: Down the Rabbit Hole”

Figure 2.3 The use of the brackets [] plus the dash - to specify a range.

The square braces can also be used to specify what a single character cannot be,
by use of the caret ˆ. If the caret ˆ is the ﬁrst symbol after the open square brace [,
the resulting pattern is negated. For example, the pattern /[ˆa]/ matches any single
character (including special characters) except a. This is only true when the caret
is the ﬁrst symbol after the open square brace. If it occurs anywhere else, it usually
stands for a caret; Fig. 2.4 shows some examples.

Regex
/[ˆA-Z]/
/[ˆSs]/
/[ˆ.]/
/[eˆ]/
/aˆb/

Match (single characters)
not an upper case letter
neither ‘S’ nor ‘s’
not a period
either ‘e’ or ‘ˆ’
the pattern ‘aˆb’

Example Patterns Matched
“Oyfn pripetchik”
“I have no exquisite reason for’t”
“our resident Djinn”
“look up ˆ now”
“look up aˆ b now”

Figure 2.4 The caret ˆ for negation or just to mean ˆ. See below re: the backslash for escaping the period.

How can we talk about optional elements, like an optional s in woodchuck and
woodchucks? We can’t use the square brackets, because while they allow us to say

2.1

• REGULAR EXPRESSIONS

7

“s or S”, they don’t allow us to say “s or nothing”. For this we use the question mark
/?/, which means “the preceding character or nothing”, as shown in Fig. 2.5.

Regex
/woodchucks?/
/colou?r/

Example Patterns Matched
“woodchuck”
“color”
Figure 2.5 The question mark ? marks optionality of the previous expression.

Match
woodchuck or woodchucks
color or colour

We can think of the question mark as meaning “zero or one instances of the
previous character”. That is, it’s a way of specifying how many of something that
we want, something that is very important in regular expressions. For example,
consider the language of certain sheep, which consists of strings that look like the
following:

baa!
baaa!
baaaa!
baaaaa!
. . .

Kleene *

Kleene +

This language consists of strings with a b, followed by at least two a’s, followed
by an exclamation point. The set of operators that allows us to say things like “some
number of as” are based on the asterisk or *, commonly called the Kleene * (gen-
erally pronounced “cleany star”). The Kleene star means “zero or more occurrences
of the immediately previous character or regular expression”. So /a*/ means “any
string of zero or more as”. This will match a or aaaaaa, but it will also match the
empty string at the start of Off Minor since the string Off Minor starts with zero a’s.
So the regular expression for matching one or more a is /aa*/, meaning one a fol-
lowed by zero or more as. More complex patterns can also be repeated. So /[ab]*/
means “zero or more a’s or b’s” (not “zero or more right square braces”). This will
match strings like aaaa or ababab or bbbb.

For specifying multiple digits (useful for ﬁnding prices) we can extend /[0-9]/,
the regular expression for a single digit. An integer (a string of digits) is thus
/[0-9][0-9]*/. (Why isn’t it just /[0-9]*/?)

Sometimes it’s annoying to have to write the regular expression for digits twice,
so there is a shorter way to specify “at least one” of some character. This is the
Kleene +, which means “one or more occurrences of the immediately preceding
character or regular expression”. Thus, the expression /[0-9]+/ is the normal way
to specify “a sequence of digits”. There are thus two ways to specify the sheep
language: /baaa*!/ or /baa+!/.

One very important special character is the period (/./), a wildcard expression

that matches any single character (except a carriage return), as shown in Fig. 2.6.

Regex
/beg.n/

Match
any character between beg and n

Example Matches
begin, beg’n, begun

Figure 2.6 The use of the period . to specify any character.

The wildcard is often used together with the Kleene star to mean “any string of
characters”. For example, suppose we want to ﬁnd any line in which a particular
word, for example, aardvark, appears twice. We can specify this with the regular
expression /aardvark.*aardvark/.

anchors

Anchors are special characters that anchor regular expressions to particular places

8 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

in a string. The most common anchors are the caret ˆ and the dollar sign $. The caret
ˆ matches the start of a line. The pattern /ˆThe/ matches the word The only at the
start of a line. Thus, the caret ˆ has three uses: to match the start of a line, to in-
dicate a negation inside of square brackets, and just to mean a caret. (What are the
contexts that allow grep or Python to know which function a given caret is supposed
to have?) The dollar sign $ matches the end of a line. So the pattern (cid:32)$ is a useful
pattern for matching a space at the end of a line, and /ˆThe dog\.$/ matches a
line that contains only the phrase The dog. (We have to use the backslash here since
we want the . to mean “period” and not the wildcard.)

Regex
ˆ
$
\b
\B

Match
start of line
end of line
word boundary
non-word boundary

Figure 2.7 Anchors in regular expressions.

There are also two other anchors: \b matches a word boundary, and \B matches
a non-boundary. Thus, /\bthe\b/ matches the word the but not the word other.
More technically, a “word” for the purposes of a regular expression is deﬁned as any
sequence of digits, underscores, or letters; this is based on the deﬁnition of “words”
in programming languages. For example, /\b99\b/ will match the string 99 in
There are 99 bottles of beer on the wall (because 99 follows a space) but not 99 in
There are 299 bottles of beer on the wall (since 99 follows a number). But it will
match 99 in $99 (since 99 follows a dollar sign ($), which is not a digit, underscore,
or letter).

2.1.2 Disjunction, Grouping, and Precedence

Suppose we need to search for texts about pets; perhaps we are particularly interested
in cats and dogs. In such a case, we might want to search for either the string cat or
the string dog. Since we can’t use the square brackets to search for “cat or dog” (why
can’t we say /[catdog]/?), we need a new operator, the disjunction operator, also
called the pipe symbol |. The pattern /cat|dog/ matches either the string cat or
the string dog.

Sometimes we need to use this disjunction operator in the midst of a larger se-
quence. For example, suppose I want to search for information about pet ﬁsh for
my cousin David. How can I specify both guppy and guppies? We cannot simply
say /guppy|ies/, because that would match only the strings guppy and ies. This
is because sequences like guppy take precedence over the disjunction operator |.
To make the disjunction operator apply only to a speciﬁc pattern, we need to use the
parenthesis operators ( and ). Enclosing a pattern in parentheses makes it act like
a single character for the purposes of neighboring operators like the pipe | and the
Kleene*. So the pattern /gupp(y|ies)/ would specify that we meant the disjunc-
tion only to apply to the sufﬁxes y and ies.

The parenthesis operator ( is also useful when we are using counters like the
Kleene*. Unlike the | operator, the Kleene* operator applies by default only to
a single character, not to a whole sequence. Suppose we want to match repeated
instances of a string. Perhaps we have a line that has column labels of the form
Column 1 Column 2 Column 3. The expression /Column(cid:32)[0-9]+(cid:32)*/ will not
match any number of columns; instead, it will match a single column followed by

disjunction

precedence

2.1

• REGULAR EXPRESSIONS

9

any number of spaces! The star here applies only to the space (cid:32) that precedes it,
not to the whole sequence. With the parentheses, we could write the expression
/(Column(cid:32)[0-9]+(cid:32)*)*/ to match the word Column, followed by a number and
optional spaces, the whole pattern repeated zero or more times.

This idea that one operator may take precedence over another, requiring us to
sometimes use parentheses to specify what we mean, is formalized by the operator
precedence hierarchy for regular expressions. The following table gives the order
of RE operator precedence, from highest precedence to lowest precedence.

operator precedence:
Parenthesis
Counters
Sequences and anchors
Disjunction

()
* + ? {}

the ˆmy end$

|

Thus,

because

than sequences,
/the*/ matches theeeee but not thethe. Because sequences have a higher prece-
dence than disjunction, /the|any/ matches the or any but not thany or theny.

a higher precedence

counters have

Patterns can be ambiguous in another way. Consider the expression /[a-z]*/
when matching against the text once upon a time. Since /[a-z]*/ matches zero or
more letters, this expression could match nothing, or just the ﬁrst letter o, on, onc,
or once. In these cases regular expressions always match the largest string they can;
we say that patterns are greedy, expanding to cover as much of a string as they can.
There are, however, ways to enforce non-greedy matching, using another mean-
ing of the ? qualiﬁer. The operator *? is a Kleene star that matches as little text as
possible. The operator +? is a Kleene plus that matches as little text as possible.

greedy

non-greedy

*?

+?

2.1.3 A Simple Example

Suppose we wanted to write a RE to ﬁnd cases of the English article the. A simple
(but incorrect) pattern might be:

/the/

One problem is that this pattern will miss the word when it begins a sentence and
hence is capitalized (i.e., The). This might lead us to the following pattern:

/[tT]he/

But we will still incorrectly return texts with the embedded in other words (e.g.,
other or theology). So we need to specify that we want instances with a word bound-
ary on both sides:

/\b[tT]he\b/

Suppose we wanted to do this without the use of /\b/. We might want this since
/\b/ won’t treat underscores and numbers as word boundaries; but we might want
to ﬁnd the in some context where it might also have underlines or numbers nearby
(the or the25). We need to specify that we want instances in which there are no
alphabetic letters on either side of the the:

/[ˆa-zA-Z][tT]he[ˆa-zA-Z]/

But there is still one more problem with this pattern: it won’t ﬁnd the word the
when it begins a line. This is because the regular expression [ˆa-zA-Z], which

10 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

we used to avoid embedded instances of the, implies that there must be some single
(although non-alphabetic) character before the the. We can avoid this by specify-
ing that before the the we require either the beginning-of-line or a non-alphabetic
character, and the same at the end of the line:

/(ˆ|[ˆa-zA-Z])[tT]he([ˆa-zA-Z]|$)/

false positives

false negatives

The process we just went through was based on ﬁxing two kinds of errors: false
positives, strings that we incorrectly matched like other or there, and false nega-
tives, strings that we incorrectly missed, like The. Addressing these two kinds of
errors comes up again and again in implementing speech and language processing
systems. Reducing the overall error rate for an application thus involves two antag-
onistic efforts:

• Increasing precision (minimizing false positives)
• Increasing recall (minimizing false negatives)

We’ll come back to precision and recall with more precise deﬁnitions in Chapter 4.

2.1.4 More Operators

Figure 2.8 shows some aliases for common ranges, which can be used mainly to
save typing. Besides the Kleene * and Kleene + we can also use explicit numbers as
counters, by enclosing them in curly brackets. The regular expression /{3}/ means
“exactly 3 occurrences of the previous character or expression”. So /a\.{24}z/
will match a followed by 24 dots followed by z (but not a followed by 23 or 25 dots
followed by a z).

Regex
\d
\D
\w
\W
\s
\S

Expansion
[0-9]
[ˆ0-9]
[a-zA-Z0-9_]
[ˆ\w]
[(cid:32)\r\t\n\f]
[ˆ\s]

First Matches
Party(cid:32)of(cid:32)5
Blue(cid:32)moon

Match
any digit
any non-digit
any alphanumeric/underscore Daiyu
a non-alphanumeric
whitespace (space, tab)
Non-whitespace

!!!!
in Concord
in(cid:32)Concord

Figure 2.8 Aliases for common sets of characters.

A range of numbers can also be speciﬁed. So /{n,m}/ speciﬁes from n to m
occurrences of the previous char or expression, and /{n,}/ means at least n occur-
rences of the previous expression. REs for counting are summarized in Fig. 2.9.

Regex
*
+
?
{n}
{n,m}
{n,}
{,m}

Match
zero or more occurrences of the previous char or expression
one or more occurrences of the previous char or expression
zero or one occurrence of the previous char or expression
exactly n occurrences of the previous char or expression
from n to m occurrences of the previous char or expression
at least n occurrences of the previous char or expression
up to m occurrences of the previous char or expression

Figure 2.9 Regular expression operators for counting.

Finally, certain special characters are referred to by special notation based on the
backslash (\) (see Fig. 2.10). The most common of these are the newline character

newline

2.1

• REGULAR EXPRESSIONS

11

\n and the tab character \t. To refer to characters that are special themselves (like
., *, [, and \), precede them with a backslash, (i.e., /\./, /\*/, /\[/, and /\\/).

Regex
\*
\.
\?
\n
\t

Match
an asterisk “*”
a period “.”
a question mark
a newline
a tab

First Patterns Matched
“K*A*P*L*A*N”
“Dr. Livingston, I presume”
“Why don’t they come and lend a hand?”

Figure 2.10 Some characters that need to be backslashed.

2.1.5 A More Complex Example

Let’s try out a more signiﬁcant example of the power of REs. Suppose we want to
build an application to help a user buy a computer on the Web. The user might want
“any machine with at least 6 GHz and 500 GB of disk space for less than $1000”.
To do this kind of retrieval, we ﬁrst need to be able to look for expressions like 6
GHz or 500 GB or Mac or $999.99. In the rest of this section we’ll work out some
simple regular expressions for this task.

First, let’s complete our regular expression for prices. Here’s a regular expres-

sion for a dollar sign followed by a string of digits:

/$[0-9]+/

Note that the $ character has a different function here than the end-of-line function
we discussed earlier. Most regular expression parsers are smart enough to realize
that $ here doesn’t mean end-of-line. (As a thought experiment, think about how
regex parsers might ﬁgure out the function of $ from the context.)

Now we just need to deal with fractions of dollars. We’ll add a decimal point

and two digits afterwards:

/$[0-9]+\.[0-9][0-9]/

This pattern only allows $199.99 but not $199. We need to make the cents

optional and to make sure we’re at a word boundary:

/(ˆ|\W)$[0-9]+(\.[0-9][0-9])?\b/

One last catch! This pattern allows prices like $199999.99 which would be far

too expensive! We need to limit the dollars:

/(ˆ|\W)$[0-9]{0,3}(\.[0-9][0-9])?\b/

Further ﬁxes (like avoiding matching a dollar sign with no price after it) are left

as an exercise for the reader.

How about disk space? We’ll need to allow for optional fractions again (5.5 GB);
note the use of ? for making the ﬁnal s optional, and the use of /(cid:32)*/ to mean “zero
or more spaces” since there might always be extra spaces lying around:

/\b[0-9]+(\.[0-9]+)?(cid:32)*(GB|[Gg]igabytes?)\b/

Modifying this regular expression so that it only matches more than 500 GB is

left as an exercise for the reader.

12 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

2.1.6 Substitution, Capture Groups, and ELIZA

substitution

An important use of regular expressions is in substitutions. For example, the substi-
tution operator s/regexp1/pattern/ used in Python and in Unix commands like
vim or sed allows a string characterized by a regular expression to be replaced by
another string:

s/colour/color/

It is often useful to be able to refer to a particular subpart of the string matching
the ﬁrst pattern. For example, suppose we wanted to put angle brackets around all
integers in a text, for example, changing the 35 boxes to the <35> boxes. We’d
like a way to refer to the integer we’ve found so that we can easily add the brackets.
To do this, we put parentheses ( and ) around the ﬁrst pattern and use the number
operator \1 in the second pattern to refer back. Here’s how it looks:

s/([0-9]+)/<\1>/

The parenthesis and number operators can also specify that a certain string or
expression must occur twice in the text. For example, suppose we are looking for
the pattern “the Xer they were, the Xer they will be”, where we want to constrain
the two X’s to be the same string. We do this by surrounding the ﬁrst X with the
parenthesis operator, and replacing the second X with the number operator \1, as
follows:

/the (.*)er they were, the \1er they will be/

Here the \1 will be replaced by whatever string matched the ﬁrst item in paren-
theses. So this will match the bigger they were, the bigger they will be but not the
bigger they were, the faster they will be.

This use of parentheses to store a pattern in memory is called a capture group.
Every time a capture group is used (i.e., parentheses surround a pattern), the re-
sulting match is stored in a numbered register. If you match two different sets of
parentheses, \2 means whatever matched the second capture group. Thus

capture group

register

/the (.*)er they (.*), the \1er we \2/

will match the faster they ran, the faster we ran but not the faster they ran, the faster
we ate. Similarly, the third capture group is stored in \3, the fourth is \4, and so on.
Parentheses thus have a double function in regular expressions; they are used
to group terms for specifying the order in which operators should apply, and they
are used to capture something in a register. Occasionally we might want to use
parentheses for grouping, but don’t want to capture the resulting pattern in a register.
In that case we use a non-capturing group, which is speciﬁed by putting the special
commands ?: after the open parenthesis, in the form (?: pattern ).

non-capturing
group

/(?:some|a few) (people|cats) like some \1/

will match some cats like some cats but not some cats like some some.

Substitutions and capture groups are very useful in implementing simple chat-
bots like ELIZA (Weizenbaum, 1966). Recall that ELIZA simulates a Rogerian
psychologist by carrying on conversations like the following:

2.2

• WORDS

13

They’re always bugging us about something or other.

User1: Men are all alike.
ELIZA1: IN WHAT WAY
User2:
ELIZA2: CAN YOU THINK OF A SPECIFIC EXAMPLE
User3: Well, my boyfriend made me come here.
ELIZA3: YOUR BOYFRIEND MADE YOU COME HERE
User4:
He says I’m depressed much of the time.
ELIZA4: I AM SORRY TO HEAR YOU ARE DEPRESSED

ELIZA works by having a series or cascade of regular expression substitutions
each of which matches and changes some part of the input lines. After the input
is uppercased, substitutions change all instances of MY to YOUR, and I’M to YOU
ARE, and so on. That way when ELIZA repeats back part of the user utterance, it
will seem to be referring correctly to the user. The next set of substitutions matches
and replaces other patterns in the input. Here are some examples:

s/.* YOU ARE (depressed|sad) .*/I AM SORRY TO HEAR YOU ARE \1/
s/.* YOU ARE (depressed|sad) .*/WHY DO YOU THINK YOU ARE \1/
s/.* all .*/IN WHAT WAY/
s/.* always .*/CAN YOU THINK OF A SPECIFIC EXAMPLE/

Since multiple substitutions can apply to a given input, substitutions are assigned
a rank and applied in order. Creating patterns is the topic of Exercise 2.3, and we
return to the details of the ELIZA architecture in Chapter 15.

2.1.7 Lookahead Assertions

Finally, there will be times when we need to predict the future: look ahead in the
text to see if some pattern matches, but not yet advance the pointer we always keep
to where we are in the text, so that we can then deal with the pattern if it occurs, but
if it doesn’t we can check for something else instead.

These lookahead assertions make use of the (? syntax that we saw in the previ-
ous section for non-capture groups. The operator (?= pattern) is true if pattern
occurs, but is zero-width, i.e.
the match pointer doesn’t advance. The operator
(?! pattern) only returns true if a pattern does not match, but again is zero-width
and doesn’t advance the pointer. Negative lookahead is commonly used when we
are parsing some complex pattern but want to rule out a special case. For example
suppose we want to match, at the beginning of a line, any single word that doesn’t
start with “Volcano”. We can use negative lookahead to do this:

/ˆ(?!Volcano)[A-Za-z]+/

lookahead

zero-width

2.2 Words

corpus

corpora

Before we talk about processing words, we need to decide what counts as a word.
Let’s start by looking at one particular corpus (plural corpora), a computer-readable
collection of text or speech. For example the Brown corpus is a million-word col-
lection of samples from 500 written English texts from different genres (newspa-
per, ﬁction, non-ﬁction, academic, etc.), assembled at Brown University in 1963–64
(Kuˇcera and Francis, 1967). How many words are in the following Brown sentence?

14 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

utterance

disﬂuency

fragment

ﬁlled pause

word type

word instance

He stepped out into the hall, was delighted to encounter a water brother.

This sentence has 13 words if we don’t count punctuation marks as words, 15
if we count punctuation. Whether we treat period (“.”), comma (“,”), and so on as
words depends on the task. Punctuation is critical for ﬁnding boundaries of things
(commas, periods, colons) and for identifying some aspects of meaning (question
marks, exclamation marks, quotation marks). For some tasks, like part-of-speech
tagging or parsing or speech synthesis, we sometimes treat punctuation marks as if
they were separate words.

The Switchboard corpus of American English telephone conversations between
strangers was collected in the early 1990s; it contains 2430 conversations averaging
6 minutes each, totaling 240 hours of speech and about 3 million words (Godfrey
et al., 1992). Such corpora of spoken language introduce other complications with
regard to deﬁning words. Let’s look at one utterance from Switchboard; an utter-
ance is the spoken correlate of a sentence:

I do uh main- mainly business data processing

This utterance has two kinds of disﬂuencies. The broken-off word main- is
called a fragment. Words like uh and um are called ﬁllers or ﬁlled pauses. Should
we consider these to be words? Again, it depends on the application. If we are
building a speech transcription system, we might want to eventually strip out the
disﬂuencies.

But we also sometimes keep disﬂuencies around. Disﬂuencies like uh or um
are actually helpful in speech recognition in predicting the upcoming word, because
they may signal that the speaker is restarting the clause or idea, and so for speech
recognition they are treated as regular words. Because people use different disﬂu-
encies they can also be a cue to speaker identiﬁcation. In fact Clark and Fox Tree
(2002) showed that uh and um have different meanings. What do you think they are?
Perhaps most important, in thinking about what is a word, we need to distinguish
two ways of talking about words that will be useful throughout the book. Word types
are the number of distinct words in a corpus; if the set of words in the vocabulary
is V , the number of types is the vocabulary size
. Word instances are the total
|
number N of running words.1

V
|

If we ignore punctuation, the following Brown sentence has 16 instances and 14

types:

They picnicked by the pool, then lay back on the grass and looked at the stars.

We still have decisions to make! For example, should we consider a capitalized
string (like They) and one that is uncapitalized (like they) to be the same word type?
The answer is that it depends on the task! They and they might be lumped together
as the same type in some tasks, like speech recognition, where we might just care
about getting the words in order and don’t care about the formatting, while for other
tasks, such as deciding whether a particular word is a noun or verb (part-of-speech
tagging) or whether a word is a name of a person or location (named-entity tag-
ging), capitalization is a useful feature and is retained. Sometimes we keep around
two versions of a particular NLP model, one with capitalization and one without
capitalization.

How many words are there in English? When we speak about the number of
words in the language, we are generally referring to word types. Fig. 2.11 shows
the rough numbers of types and instances computed from some English corpora.

In earlier tradition, and occasionally still, you might see word instances referred to as word tokens, but

1
we now try to reserve the word token instead to mean the output of word tokenization algorithms.

Herdan’s Law

Heaps’ Law

lemma

wordform

Corpus
Shakespeare
Brown corpus
Switchboard telephone conversations
COCA
Google n-grams

2.3

• CORPORA

15

Instances = N Types =
V
|
|
884 thousand 31 thousand
1 million 38 thousand
2.4 million 20 thousand
2 million
440 million
13 million
1 trillion

Figure 2.11 Rough numbers of wordform types and instances for some English language
corpora. The largest, the Google n-grams corpus, contains 13 million types, but this count
only includes types appearing 40 or more times, so the true number would be much larger.

The larger the corpora we look at, the more word types we ﬁnd, and in fact this
and number of instances N is called
relationship between the number of types
Herdan’s Law (Herdan, 1960) or Heaps’ Law (Heaps, 1978) after its discoverers
(in linguistics and information retrieval respectively). It is shown in Eq. 2.1, where
k and β are positive constants, and 0 < β < 1.

V
|

|

= kNβ

V
|

|

(2.1)

The value of β depends on the corpus size and the genre, but at least for the large
corpora in Fig. 2.11, β ranges from .67 to .75. Roughly then we can say that the
vocabulary size for a text goes up signiﬁcantly faster than the square root of its
length in words.

It’s sometimes useful to make a further distinction. Consider inﬂected forms
like cats versus cat. We say these two words are different wordforms but have the
same lemma. A lemma is a set of lexical forms having the same stem, the same
major part-of-speech, and the same word sense. The wordform is the full inﬂected
or derived form of the word. The two wordforms cat and cats thus have the same
lemma, which we can represent as cat.

For morphologically complex languages like Arabic, we often need to deal with
lemmatization. For most tasks in English, however, wordforms are sufﬁcient, and
when we talk about words in this book we almost always mean wordsforms (al-
though we will discuss basic algorithms for lemmatization and the related task of
stemming below in Section 2.6). One of the situations even in English where we
talk about lemmas is when we measure the number of words in a dictionary. Dictio-
nary entries or boldface forms are a very rough approximation to (an upper bound
on) the number of lemmas (since some lemmas have multiple boldface forms). The
1989 edition of the Oxford English Dictionary had 615,000 entries.

Finally, we should note that in practice, for many NLP applications (for example
for neural language modeling) we don’t actually use words as our internal unit of
representation at all! We instead tokenize the input strings into tokens, which can
be words but can also be only parts of words. We’ll return to this tokenization
question when we introduce the BPE algorithm in Section 2.5.2.

2.3 Corpora

Words don’t appear out of nowhere. Any particular piece of text that we study
is produced by one or more speciﬁc speakers or writers, in a speciﬁc dialect of a
speciﬁc language, at a speciﬁc time, in a speciﬁc place, for a speciﬁc function.

Perhaps the most important dimension of variation is the language. NLP algo-
rithms are most useful when they apply across many languages. The world has 7097

16 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

AAE

MAE

code switching

datasheet

languages at the time of this writing, according to the online Ethnologue catalog
(Simons and Fennig, 2018). It is important to test algorithms on more than one lan-
guage, and particularly on languages with different properties; by contrast there is
an unfortunate current tendency for NLP algorithms to be developed or tested just
on English (Bender, 2019). Even when algorithms are developed beyond English,
they tend to be developed for the ofﬁcial languages of large industrialized nations
(Chinese, Spanish, Japanese, German etc.), but we don’t want to limit tools to just
these few languages. Furthermore, most languages also have multiple varieties, of-
ten spoken in different regions or by different social groups. Thus, for example,
if we’re processing text that uses features of African American English (AAE) or
African American Vernacular English (AAVE)—the variations of English used by
millions of people in African American communities (King 2020)—we must use
NLP tools that function with features of those varieties. Twitter posts might use fea-
tures often used by speakers of African American English, such as constructions like
iont (I don’t in Mainstream American English (MAE)), or talmbout corresponding
to MAE talking about, both examples that inﬂuence word segmentation (Blodgett
et al. 2016, Jones 2015).

It’s also quite common for speakers or writers to use multiple languages in a
single communicative act, a phenomenon called code switching. Code switching
is enormously common across the world; here are examples showing Spanish and
(transliterated) Hindi code switching with English (Solorio et al. 2014, Jurgens et al.
2017):

(2.2)

(2.3)

Por primera vez veo a @username actually being hateful! it was beautiful:)
[For the ﬁrst time I get to see @username actually being hateful! it was
beautiful:) ]
dost tha or ra- hega ... dont wory ... but dherya rakhe
[“he was and will remain a friend ... don’t worry ... but have faith”]

Another dimension of variation is the genre. The text that our algorithms must
process might come from newswire, ﬁction or non-ﬁction books, scientiﬁc articles,
It might come from spoken genres like telephone
Wikipedia, or religious texts.
conversations, business meetings, police body-worn cameras, medical interviews,
or transcripts of television shows or movies. It might come from work situations
like doctors’ notes, legal text, or parliamentary or congressional proceedings.

Text also reﬂects the demographic characteristics of the writer (or speaker): their
age, gender, race, socioeconomic class can all inﬂuence the linguistic properties of
the text we are processing.

And ﬁnally, time matters too. Language changes over time, and for some lan-

guages we have good corpora of texts from different historical periods.

Because language is so situated, when developing computational models for lan-
guage processing from a corpus, it’s important to consider who produced the lan-
guage, in what context, for what purpose. How can a user of a dataset know all these
details? The best way is for the corpus creator to build a datasheet (Gebru et al.,
2020) or data statement (Bender et al., 2021) for each corpus. A datasheet speciﬁes
properties of a dataset like:

Motivation: Why was the corpus collected, by whom, and who funded it?
Situation: When and in what situation was the text written/spoken? For example,
was there a task? Was the language originally spoken conversation, edited
text, social media communication, monologue vs. dialogue?

Language variety: What language (including dialect/region) was the corpus in?

2.4

• SIMPLE UNIX TOOLS FOR WORD TOKENIZATION

17

Speaker demographics: What was, e.g., the age or gender of the text’s authors?
Collection process: How big is the data? If it is a subsample how was it sampled?
Was the data collected with consent? How was the data pre-processed, and
what metadata is available?

Annotation process: What are the annotations, what are the demographics of the

annotators, how were they trained, how was the data annotated?
Distribution: Are there copyright or other intellectual property restrictions?

2.4 Simple Unix Tools for Word Tokenization

text
normalization

Before almost any natural language processing of a text, the text has to be normal-
ized, a task called text normalization. At least three tasks are commonly applied as
part of any normalization process:

1. Tokenizing (segmenting) words
2. Normalizing word formats
3. Segmenting sentences

In the next sections we walk through each of these tasks, but we’ll ﬁrst start with
an easy, if somewhat naive version of word tokenization and normalization (and fre-
quency computation) that can be accomplished for English solely in a single UNIX
command-line, inspired by Church (1994). We’ll make use of some Unix com-
mands: tr, used to systematically change particular characters in the input; sort,
which sorts input lines in alphabetical order; and uniq, which collapses and counts
adjacent identical lines.

For example let’s begin with the ‘complete words’ of Shakespeare in one ﬁle,
sh.txt. We can use tr to tokenize the words by changing every sequence of non-
alphabetic characters to a newline (’A-Za-z’ means alphabetic and the -c option
complements to non-alphabet, so together they mean to change every non-alphabetic
character into a newline. The -s (‘squeeze’) option is used to replace the result
of multiple consecutive changes into a single output, so a series of non-alphabetic
characters in a row would all be ‘squeezed’ into a single newline):

tr -sc ’A-Za-z’ ’\n’ < sh.txt

The output of this command will be:

THE
SONNETS
by
William
Shakespeare
From
fairest
creatures
We
...

Now that there is one word per line, we can sort the lines, and pass them to uniq

-c which will collapse and count them:

tr -sc ’A-Za-z’ ’\n’ < sh.txt | sort | uniq -c

18 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

with the following output:

1945 A
72 AARON
19 ABBESS
25 Aaron
6 Abate
1 Abates
5 Abbess
6 Abbey
3 Abbot
...

Alternatively, we can collapse all the upper case to lower case:

tr -sc ’A-Za-z’ ’\n’ < sh.txt | tr A-Z a-z | sort | uniq -c

whose output is

14725 a

97 aaron

1 abaissiez

10 abandon

2 abandoned
2 abase
1 abash
14 abate

3 abated
3 abatement
...

Now we can sort again to ﬁnd the frequent words. The -n option to sort means
to sort numerically rather than alphabetically, and the -r option means to sort in
reverse order (highest-to-lowest):

tr -sc ’A-Za-z’ ’\n’ < sh.txt | tr A-Z a-z | sort | uniq -c | sort -n -r

The results show that the most frequent words in Shakespeare, as in any other

corpus, are the short function words like articles, pronouns, prepositions:
27378 the
26084 and
22538 i
19771 to
17481 of
14725 a
13826 you
12489 my
11318 that
11112 in
...

Unix tools of this sort can be very handy in building quick word count statistics
for any corpus in English. While in some versions of Unix these command-line tools
also correctly handle Unicode characters and so can be used for many languages,
in general for handling most languages outside English we use more sophisticated
tokenization algorithms.

2.5 Word Tokenization

2.5

• WORD TOKENIZATION

19

tokenization

The simple UNIX tools above were ﬁne for getting rough word statistics but more
sophisticated algorithms are generally necessary for tokenization, the task of seg-
menting running text into words. There are roughly two classes of tokenization
algorithms. In top-down tokenization, we deﬁne a standard and implement rules
to implement that kind of tokenization. In bottom-up tokenization, we use simple
statistics of letter sequences to break up words into subword tokens.

2.5.1 Top-down (rule-based) tokenization

While the Unix command sequence just removed all the numbers and punctuation,
for most NLP applications we’ll need to keep these in our tokenization. We often
want to break off punctuation as a separate token; commas are a useful piece of infor-
mation for parsers, periods help indicate sentence boundaries. But we’ll often want
to keep the punctuation that occurs word internally, in examples like m.p.h., Ph.D.,
AT&T, and cap’n. Special characters and numbers will need to be kept in prices
($45.55) and dates (01/02/06); we don’t want to segment that price into separate
tokens of “45” and “55”. And there are URLs (https://www.stanford.edu),
Twitter hashtags (#nlproc), or email addresses (someone@cs.colorado.edu).

Number expressions introduce other complications as well; while commas nor-
mally appear at word boundaries, commas are used inside numbers in English, every
three digits: 555,500.50. Languages, and hence tokenization requirements, differ
on this; many continental European languages like Spanish, French, and German, by
contrast, use a comma to mark the decimal point, and spaces (or sometimes periods)
where English puts commas, for example, 555 500,50.

A tokenizer can also be used to expand clitic contractions that are marked by
apostrophes, for example, converting what’re to the two tokens what are, and
we’re to we are. A clitic is a part of a word that can’t stand on its own, and can only
occur when it is attached to another word. Some such contractions occur in other
alphabetic languages, including articles and pronouns in French (j’ai, l’homme).
Depending on the application, tokenization algorithms may also tokenize mul-
tiword expressions like New York or rock ’n’ roll as a single token, which re-
quires a multiword expression dictionary of some sort. Tokenization is thus inti-
mately tied up with named entity recognition, the task of detecting names, dates,
and organizations (Chapter 8).

One commonly used tokenization standard is known as the Penn Treebank to-
kenization standard, used for the parsed corpora (treebanks) released by the Lin-
guistic Data Consortium (LDC), the source of many useful datasets. This standard
separates out clitics (doesn’t becomes does plus n’t), keeps hyphenated words to-
gether, and separates out all punctuation (to save space we’re showing visible spaces
‘ ’ between tokens, although newlines is a more common output):

Input:

"The San Francisco-based restaurant," they said,
"doesn’t charge $10".

Output: " The San Francisco-based restaurant , " they said ,

" does n’t charge $ 10 " .

In practice, since tokenization needs to be run before any other language process-
ing, it needs to be very fast. The standard method for tokenization is therefore to use
deterministic algorithms based on regular expressions compiled into very efﬁcient

clitic

Penn Treebank
tokenization

20 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

ﬁnite state automata. For example, Fig. 2.12 shows an example of a basic regular
expression that can be used to tokenize English with the nltk.regexp tokenize
function of the Python-based Natural Language Toolkit (NLTK) (Bird et al. 2009;
https://www.nltk.org).

# set flag to allow verbose regexps

# abbreviations, e.g. U.S.A.

(?:[A-Z]\.)+
| \w+(?:-\w+)*
| \$?\d+(?:\.\d+)?%?
| \.\.\.
| [][.,;"’?():_‘-]

>>> text = ’That U.S.A. poster-print costs $12.40...’
>>> pattern = r’’’(?x)
...
...
...
...
...
... ’’’
>>> nltk.regexp_tokenize(text, pattern)
[’That’, ’U.S.A.’, ’poster-print’, ’costs’, ’$12.40’, ’...’]

# ellipsis
# these are separate tokens; includes ], [

# words with optional internal hyphens
# currency, percentages, e.g. $12.40, 82%

Figure 2.12 A Python trace of regular expression tokenization in the NLTK Python-based
natural language processing toolkit (Bird et al., 2009), commented for readability; the (?x)
verbose ﬂag tells Python to strip comments and whitespace. Figure from Chapter 3 of Bird
et al. (2009).

Carefully designed deterministic algorithms can deal with the ambiguities that
arise, such as the fact that the apostrophe needs to be tokenized differently when used
as a genitive marker (as in the book’s cover), a quotative as in ‘The other class’, she
said, or in clitics like they’re.

Word tokenization is more complex in languages like written Chinese, Japanese,
and Thai, which do not use spaces to mark potential word-boundaries. In Chinese,
for example, words are composed of characters (called hanzi in Chinese). Each
character generally represents a single unit of meaning (called a morpheme) and is
pronounceable as a single syllable. Words are about 2.4 characters long on average.
But deciding what counts as a word in Chinese is complex. For example, consider
the following sentence:
(2.4) 姚明进入总决赛

y´ao m´ıng j`ın r`u zˇong ju´e s`ai

“Yao Ming reaches the ﬁnals”

hanzi

As Chen et al. (2017b) point out, this could be treated as 3 words (‘Chinese Tree-
bank’ segmentation):
(2.5) 姚明

进入
reaches

总决赛
ﬁnals

YaoMing

or as 5 words (‘Peking University’ segmentation):
(2.6) 姚
Yao

进入
reaches

总
overall

明
Ming

决赛
ﬁnals

Finally, it is possible in Chinese simply to ignore words altogether and use characters
as the basic elements, treating the sentence as a series of 7 characters:
(2.7) 姚
Yao

决
decision

总
overall

明
Ming

赛
game

入
enter

进
enter

In fact, for most Chinese NLP tasks it turns out to work better to take characters
rather than words as input, since characters are at a reasonable semantic level for
most applications, and since most word standards, by contrast, result in a huge vo-
cabulary with large numbers of very rare words (Li et al., 2019b).

2.5

• WORD TOKENIZATION

21

word
segmentation

However, for Japanese and Thai the character is too small a unit, and so algo-
rithms for word segmentation are required. These can also be useful for Chinese
in the rare situations where word rather than character boundaries are required. The
standard segmentation algorithms for these languages use neural sequence mod-
els trained via supervised machine learning on hand-segmented training sets; we’ll
introduce sequence models in Chapter 8 and Chapter 9.

subwords

BPE

2.5.2 Byte-Pair Encoding: A Bottom-up Tokenization Algorithm

There is a third option to tokenizing text, one that is most commonly used by large
language models. Instead of deﬁning tokens as words (whether delimited by spaces
or more complex algorithms), or as characters (as in Chinese), we can use our data to
automatically tell us what the tokens should be. This is especially useful in dealing
with unknown words, an important problem in language processing. As we will
see in the next chapter, NLP algorithms often learn some facts about language from
one corpus (a training corpus) and then use these facts to make decisions about a
separate test corpus and its language. Thus if our training corpus contains, say the
words low, new, newer, but not lower, then if the word lower appears in our test
corpus, our system will not know what to do with it.

To deal with this unknown word problem, modern tokenizers automatically in-
duce sets of tokens that include tokens smaller than words, called subwords. Sub-
words can be arbitrary substrings, or they can be meaning-bearing units like the
morphemes -est or -er. (A morpheme is the smallest meaning-bearing unit of a lan-
guage; for example the word unlikeliest has the morphemes un-, likely, and -est.)
In modern tokenization schemes, most tokens are words, but some tokens are fre-
quently occurring morphemes or other subwords like -er. Every unseen word like
lower can thus be represented by some sequence of known subword units, such as
low and er, or even as a sequence of individual letters if necessary.

Most tokenization schemes have two parts: a token learner, and a token seg-
menter. The token learner takes a raw training corpus (sometimes roughly pre-
separated into words, for example by whitespace) and induces a vocabulary, a set
of tokens. The token segmenter takes a raw test sentence and segments it into the
tokens in the vocabulary. Two algorithms are widely used: byte-pair encoding
(Sennrich et al., 2016), and unigram language modeling (Kudo, 2018), There is
also a SentencePiece library that includes implementations of both of these (Kudo
and Richardson, 2018a), and people often use the name SentencePiece to simply
mean unigram language modeling tokenization.

In this section we introduce the simplest of the three, the byte-pair encoding or
BPE algorithm (Sennrich et al., 2016); see Fig. 2.13. The BPE token learner begins
with a vocabulary that is just the set of all individual characters. It then examines the
training corpus, chooses the two symbols that are most frequently adjacent (say ‘A’,
‘B’), adds a new merged symbol ‘AB’ to the vocabulary, and replaces every adjacent
’A’ ’B’ in the corpus with the new ‘AB’. It continues to count and merge, creating
new longer and longer character strings, until k merges have been done creating
k novel tokens; k is thus a parameter of the algorithm. The resulting vocabulary
consists of the original set of characters plus k new symbols.

The algorithm is usually run inside words (not merging across word boundaries),
so the input corpus is ﬁrst white-space-separated to give a set of strings, each corre-
, and its
sponding to the characters of a word, plus a special end-of-word symbol
counts. Let’s see its operation on the following tiny input corpus of 18 word tokens
with counts for each word (the word low appears 5 times, the word newer 6 times,

22 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

and so on), which would have a starting vocabulary of 11 letters:

vocabulary

, d, e, i, l, n, o, r, s, t, w

corpus
5
2
6
3
2

l o w
l o w e s t
n e w e r
w i d e r
n e w

The BPE algorithm ﬁrst counts all pairs of adjacent symbols: the most frequent
is the pair e r because it occurs in newer (frequency of 6) and wider (frequency of
3) for a total of 9 occurrences.2 We then merge these symbols, treating er as one
symbol, and count again:

vocabulary

, d, e, i, l, n, o, r, s, t, w, er

corpus
5
2
6
3
2
Now the most frequent pair is er

l o w
l o w e s t
n e w er
w i d er
n e w

, which we merge; our system has learned

that there should be a token for word-ﬁnal er, represented as er :

vocabulary

, d, e, i, l, n, o, r, s, t, w, er, er

corpus
5
2
6
3
2

l o w
l o w e s t
n e w er
w i d er
n e w

Next n e (total count of 8) get merged to ne:

vocabulary

, d, e, i, l, n, o, r, s, t, w, er, er , ne

corpus
5
2
6
3
2

l o w
l o w e s t
ne w er
w i d er
ne w

If we continue, the next merges are:

merge
(ne, w)
(l, o)
(lo, w)
(new, er )
(low,

)

current vocabulary

, d, e, i, l, n, o, r, s, t, w, er, er , ne, new
, d, e, i, l, n, o, r, s, t, w, er, er , ne, new, lo
, d, e, i, l, n, o, r, s, t, w, er, er , ne, new, lo, low
, d, e, i, l, n, o, r, s, t, w, er, er , ne, new, lo, low, newer
, d, e, i, l, n, o, r, s, t, w, er, er , ne, new, lo, low, newer , low

Once we’ve learned our vocabulary, the token segmenter is used to tokenize a
test sentence. The token segmenter just runs on the test data the merges we have
learned from the training data, greedily, in the order we learned them. (Thus the
frequencies in the test data don’t play a role, just the frequencies in the training
data). So ﬁrst we segment each test sentence word into characters. Then we apply
the ﬁrst rule: replace every instance of e r in the test corpus with er, and then the
in the test corpus with er , and so on.
second rule: replace every instance of er

2 Note that there can be ties; we could have instead chosen to merge r
frequency of 9.

ﬁrst, since that also has a

2.6

• WORD NORMALIZATION, LEMMATIZATION AND STEMMING

23

function BYTE-PAIR ENCODING(strings C, number of merges k) returns vocab V

all unique characters in C

V
←
for i = 1 to k do
tL, tR ←
tNEW ←
V
←
Replace each occurrence of tL, tR in C with tNEW

Most frequent pair of adjacent tokens in C
tL + tR
V + tNEW

# make new token by concatenating

# update the vocabulary

# and update the corpus

# initial set of tokens is characters
# merge tokens k times

return V

Figure 2.13 The token learner part of the BPE algorithm for taking a corpus broken up
into individual characters or bytes, and learning a vocabulary by iteratively merging tokens.
Figure adapted from Bostrom and Durrett (2020).

By the end, if the test corpus contained the character sequence n e w e r
, it
would be tokenized as a full word. But the characters of a new (unknown) word like
l o w e r

would be merged into the two tokens low er .

Of course in real settings BPE is run with many thousands of merges on a very
large input corpus. The result is that most words will be represented as full symbols,
and only the very rare words (and unknown words) will have to be represented by
their parts.

2.6 Word Normalization, Lemmatization and Stemming

normalization

case folding

Word normalization is the task of putting words/tokens in a standard format. The
simplest case of word normalization is case folding. Mapping everything to lower
case means that Woodchuck and woodchuck are represented identically, which is
very helpful for generalization in many tasks, such as information retrieval or speech
recognition. For sentiment analysis and other text classiﬁcation tasks, information
extraction, and machine translation, by contrast, case can be quite helpful and case
folding is generally not done. This is because maintaining the difference between,
for example, US the country and us the pronoun can outweigh the advantage in
generalization that case folding would have provided for other words.

Systems that use BPE or other kinds of bottom-up tokenization may do no fur-
ther word normalization. In other NLP systems, we may want to do further nor-
malizations, like choosing a single normal form for words with multiple forms like
USA and US or uh-huh and uhhuh. This standardization may be valuable, despite
the spelling information that is lost in the normalization process. For information
retrieval or information extraction about the US, we might want to see information
from documents whether they mention the US or the USA.

2.6.1 Lemmatization

For other natural language processing situations we also want two morphologically
different forms of a word to behave similarly. For example in web search, someone
may type the string woodchucks but a useful system might want to also return pages
that mention woodchuck with no s. This is especially common in morphologically
complex languages like Polish, where for example the word Warsaw has different
endings when it is the subject (Warszawa), or after a preposition like “in Warsaw” (w

24 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

lemmatization

morpheme

stem

afﬁx

stemming

Porter stemmer

Warszawie), or “to Warsaw” (do Warszawy), and so on. Lemmatization is the task
of determining that two words have the same root, despite their surface differences.
The words am, are, and is have the shared lemma be; the words dinner and dinners
both have the lemma dinner. Lemmatizing each of these forms to the same lemma
will let us ﬁnd all mentions of words in Polish like Warsaw. The lemmatized form
of a sentence like He is reading detective stories would thus be He be read detective
story.

How is lemmatization done? The most sophisticated methods for lemmatization
involve complete morphological parsing of the word. Morphology is the study of
the way words are built up from smaller meaning-bearing units called morphemes.
Two broad classes of morphemes can be distinguished: stems—the central mor-
pheme of the word, supplying the main meaning—and afﬁxes—adding “additional”
meanings of various kinds. So, for example, the word fox consists of one morpheme
(the morpheme fox) and the word cats consists of two: the morpheme cat and the
morpheme -s. A morphological parser takes a word like cats and parses it into the
two morphemes cat and s, or parses a Spanish word like amaren (‘if in the future
they would love’) into the morpheme amar ‘to love’, and the morphological features
3PL and future subjunctive.

Stemming: The Porter Stemmer

Lemmatization algorithms can be complex. For this reason we sometimes make
use of a simpler but cruder method, which mainly consists of chopping off word-
ﬁnal afﬁxes. This naive version of morphological analysis is called stemming. For
example, the Porter stemmer, a widely used stemming algorithm (Porter, 1980),
when applied to the following paragraph:

This was not the map we found in Billy Bones’s chest, but
an accurate copy, complete in all things-names and heights
and soundings-with the single exception of the red crosses
and the written notes.

produces the following stemmed output:

Thi wa not the map we found in Billi Bone s chest but an
accur copi complet in all thing name and height and sound
with the singl except of the red cross and the written note

The algorithm is based on series of rewrite rules run in series: the output of each
pass is fed as input to the next pass. Here are some sample rules (more details can
be found at https://tartarus.org/martin/PorterStemmer/):

ATIONAL

ING

SSES

→

→

→

ATE (e.g., relational
(cid:15)

→

relate)

if the stem contains a vowel (e.g., motoring

SS (e.g., grasses

grass)

→

motor)

→

Simple stemmers can be useful in cases where we need to collapse across differ-
ent variants of the same lemma. Nonetheless, they do tend to commit errors of both
over- and under-generalizing, as shown in the table below (Krovetz, 1993):

Errors of Commission
organization organ
doing
numerical
policy

doe
numerous
police

Errors of Omission
European Europe
analysis
analyzes
noise
noisy
sparse
sparsity

2.7 Sentence Segmentation

2.7

• SENTENCE SEGMENTATION

25

sentence
segmentation

Sentence segmentation is another important step in text processing. The most use-
ful cues for segmenting a text into sentences are punctuation, like periods, question
marks, and exclamation points. Question marks and exclamation points are rela-
tively unambiguous markers of sentence boundaries. Periods, on the other hand, are
more ambiguous. The period character “.” is ambiguous between a sentence bound-
ary marker and a marker of abbreviations like Mr. or Inc. The previous sentence that
you just read showed an even more complex case of this ambiguity, in which the ﬁnal
period of Inc. marked both an abbreviation and the sentence boundary marker. For
this reason, sentence tokenization and word tokenization may be addressed jointly.
In general, sentence tokenization methods work by ﬁrst deciding (based on rules
or machine learning) whether a period is part of the word or is a sentence-boundary
marker. An abbreviation dictionary can help determine whether the period is part
of a commonly used abbreviation; the dictionaries can be hand-built or machine-
learned (Kiss and Strunk, 2006), as can the ﬁnal sentence splitter. In the Stanford
CoreNLP toolkit (Manning et al., 2014), for example sentence splitting is rule-based,
a deterministic consequence of tokenization; a sentence ends when a sentence-ending
punctuation (., !, or ?) is not already grouped with other characters into a token (such
as for an abbreviation or number), optionally followed by additional ﬁnal quotes or
brackets.

2.8 Minimum Edit Distance

Much of natural language processing is concerned with measuring how similar two
strings are. For example in spelling correction, the user typed some erroneous
string—let’s say graffe–and we want to know what the user meant. The user prob-
ably intended a word that is similar to graffe. Among candidate similar words,
the word giraffe, which differs by only one letter from graffe, seems intuitively
to be more similar than, say grail or graf, which differ in more letters. Another
example comes from coreference, the task of deciding whether two strings such as
the following refer to the same entity:

Stanford President Marc Tessier-Lavigne
Stanford University President Marc Tessier-Lavigne

Again, the fact that these two strings are very similar (differing by only one word)
seems like useful evidence for deciding that they might be coreferent.

Edit distance gives us a way to quantify both of these intuitions about string sim-
ilarity. More formally, the minimum edit distance between two strings is deﬁned
as the minimum number of editing operations (operations like insertion, deletion,
substitution) needed to transform one string into another.

The gap between intention and execution, for example, is 5 (delete an i, substi-
tute e for n, substitute x for t, insert c, substitute u for n). It’s much easier to see
this by looking at the most important visualization for string distances, an alignment
between the two strings, shown in Fig. 2.14. Given two sequences, an alignment is
a correspondence between substrings of the two sequences. Thus, we say I aligns
with the empty string, N with E, and so on. Beneath the aligned strings is another
representation; a series of symbols expressing an operation list for converting the

minimum edit
distance

alignment

26 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

top string into the bottom string: d for deletion, s for substitution, i for insertion.

I N T E * N T I O N

| | | | | | | | | |
* E X E C U T I O N
i s
d s s

Figure 2.14 Representing the minimum edit distance between two strings as an alignment.
The ﬁnal row gives the operation list for converting the top string into the bottom string: d for
deletion, s for substitution, i for insertion.

We can also assign a particular cost or weight to each of these operations. The
Levenshtein distance between two sequences is the simplest weighting factor in
which each of the three operations has a cost of 1 (Levenshtein, 1966)—we assume
that the substitution of a letter for itself, for example, t for t, has zero cost. The Lev-
enshtein distance between intention and execution is 5. Levenshtein also proposed
an alternative version of his metric in which each insertion or deletion has a cost of
1 and substitutions are not allowed. (This is equivalent to allowing substitution, but
giving each substitution a cost of 2 since any substitution can be represented by one
insertion and one deletion). Using this version, the Levenshtein distance between
intention and execution is 8.

2.8.1 The Minimum Edit Distance Algorithm

How do we ﬁnd the minimum edit distance? We can think of this as a search task, in
which we are searching for the shortest path—a sequence of edits—from one string
to another.

dynamic
programming

Figure 2.15 Finding the edit distance viewed as a search problem

The space of all possible edits is enormous, so we can’t search naively. However,
lots of distinct edit paths will end up in the same state (string), so rather than recom-
puting all those paths, we could just remember the shortest path to a state each time
we saw it. We can do this by using dynamic programming. Dynamic program-
ming is the name for a class of algorithms, ﬁrst introduced by Bellman (1957), that
apply a table-driven method to solve problems by combining solutions to subprob-
lems. Some of the most commonly used algorithms in natural language processing
make use of dynamic programming, such as the Viterbi algorithm (Chapter 8) and
the CKY algorithm for parsing (Chapter 17).

The intuition of a dynamic programming problem is that a large problem can
be solved by properly combining the solutions to various subproblems. Consider
the shortest path of transformed words that represents the minimum edit distance
between the strings intention and execution shown in Fig. 2.16.

Imagine some string (perhaps it is exention) that is in this optimal path (whatever
it is). The intuition of dynamic programming is that if exention is in the optimal

n t e n t i o ni n t e c n t i o ni n x e n t i o ndelinssubsti n t e n t i o n2.8

• MINIMUM EDIT DISTANCE

27

minimum edit
distance
algorithm

Figure 2.16 Path from intention to execution.

operation list, then the optimal sequence must also include the optimal path from
intention to exention. Why? If there were a shorter path from intention to exention,
then we could use it instead, resulting in a shorter overall path, and the optimal
sequence wouldn’t be optimal, thus leading to a contradiction.

The minimum edit distance algorithm was named by Wagner and Fischer
(1974) but independently discovered by many people (see the Historical Notes sec-
tion of Chapter 8).

Let’s ﬁrst deﬁne the minimum edit distance between two strings. Given two
strings, the source string X of length n, and target string Y of length m, we’ll deﬁne
D[i, j] as the edit distance between X[1..i] and Y [1.. j], i.e., the ﬁrst i characters of X
and the ﬁrst j characters of Y . The edit distance between X and Y is thus D[n, m].

We’ll use dynamic programming to compute D[n, m] bottom up, combining so-
lutions to subproblems. In the base case, with a source substring of length i but an
empty target string, going from i characters to 0 requires i deletes. With a target
substring of length j but an empty source going from 0 characters to j characters
requires j inserts. Having computed D[i, j] for small i, j we then compute larger
D[i, j] based on previously computed smaller values. The value of D[i, j] is com-
puted by taking the minimum of the three possible paths through the matrix which
arrive there:

D[i, j] = min

D[i
−
D[i, j
D[i

−




−
1, j

1, j] + del-cost(source[i])
1] + ins-cost(target[ j])

1] + sub-cost(source[i], target[ j])

−

(2.8)

If we assume the version of Levenshtein distance in which the insertions and dele-
) = 1), and substitutions have a
) = del-cost(
tions each have a cost of 1 (ins-cost(
·
·
cost of 2 (except substitution of identical letters have zero cost), the computation for
D[i, j] becomes:



D[i, j] = min 


D[i
−
D[i, j

D[i

−

1, j] + 1
1] + 1

−
1, j

2;
0;

if source[i]
= target[ j]
if source[i] = target[ j]

1] +

−

(cid:26)

(2.9)

The algorithm is summarized in Fig. 2.17; Fig. 2.18 shows the results of applying
the algorithm to the distance between intention and execution with the version of
Levenshtein in Eq. 2.9.



Alignment Knowing the minimum edit distance is useful for algorithms like ﬁnd-
ing potential spelling error corrections. But the edit distance algorithm is important
in another way; with a small change, it can also provide the minimum cost align-
ment between two strings. Aligning two strings is useful throughout speech and

n t e n t i o ni n t e n t i o ne t e n t i o ne x e n t i o ne x e n u t i o ne x e c u t i o ndelete isubstitute n by esubstitute t by xinsert usubstitute n by c(cid:54)
28 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

function MIN-EDIT-DISTANCE(source, target) returns min-distance

LENGTH(source)
LENGTH(target)

n
m
Create a distance matrix D[n+1,m+1]

←
←

# Initialization: the zeroth row and column is the distance from the empty string
D[0,0] = 0
for each row i from 1 to n do

←

D[i,0]

D[i-1,0] + del-cost(source[i])

for each column j from 1 to m do

D[0,j]

D[0, j-1] + ins-cost(target[j])

←
# Recurrence relation:
for each row i from 1 to n do

D[i, j]

for each column j from 1 to m do
MIN( D[i
−
D[i
−
D[i, j

←

1, j] + del-cost(source[i]),
1, j

1] + sub-cost(source[i], target[j]),

−
1] + ins-cost(target[j]))

−

# Termination
return D[n,m]

Figure 2.17 The minimum edit distance algorithm, an example of the class of dynamic
x, ins-cost(x) = 1)
programming algorithms. The various costs can either be ﬁxed (e.g.,
or can be speciﬁc to the letter (to model the fact that some letters are more likely to be in-
serted than others). We assume that there is no cost for substituting a letter for itself (i.e.,
sub-cost(x, x) = 0).

∀

Src
\

#
0
1
2
3
4
5
6
7
8
9

e
1
2
3
4
3
4
5
6
7
8

Tar
#
i
n
t
e
n
t
i
o
n

c
4
5
6
7
6
7
8
9
10
11
Figure 2.18 Computation of minimum edit distance between intention and execution with
the algorithm of Fig. 2.17, using Levenshtein distance with cost of 1 for insertions or dele-
tions, 2 for substitutions.

e
3
4
5
6
5
6
7
8
9
10

u
5
6
7
8
7
8
9
10
11
12

n
9
8
7
8
9
10
11
10
9
8

i
7
6
7
8
9
10
9
8
9
10

t
6
7
8
7
8
9
8
9
10
11

o
8
7
8
9
10
11
10
9
8
9

x
2
3
4
5
4
5
6
7
8
9

language processing. In speech recognition, minimum edit distance alignment is
used to compute the word error rate (Chapter 16). Alignment plays a role in ma-
chine translation, in which sentences in a parallel corpus (a corpus with a text in two
languages) need to be matched to each other.

To extend the edit distance algorithm to produce an alignment, we can start by
visualizing an alignment as a path through the edit distance matrix. Figure 2.19
shows this path with boldfaced cells. Each boldfaced cell represents an alignment
of a pair of letters in the two strings. If two boldfaced cells occur in the same row,
there will be an insertion in going from the source to the target; two boldfaced cells

2.9

• SUMMARY

29

in the same column indicate a deletion.

Figure 2.19 also shows the intuition of how to compute this alignment path. The
computation proceeds in two steps. In the ﬁrst step, we augment the minimum edit
distance algorithm to store backpointers in each cell. The backpointer from a cell
points to the previous cell (or cells) that we came from in entering the current cell.
We’ve shown a schematic of these backpointers in Fig. 2.19. Some cells have mul-
tiple backpointers because the minimum extension could have come from multiple
previous cells. In the second step, we perform a backtrace. In a backtrace, we start
from the last cell (at the ﬁnal row and column), and follow the pointers back through
the dynamic programming matrix. Each complete path between the ﬁnal cell and the
initial cell is a minimum distance alignment. Exercise 2.7 asks you to modify the
minimum edit distance algorithm to store the pointers and compute the backtrace to
output an alignment.

backtrace

↑

↑

(cid:45)

←

←

←

←

←

←

←

←

←

←

←

(cid:45)

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

c
4
5
6
7
← 6
7
8
9
10
11

#
i
n ↑
t
↑
e
↑
n ↑
t
↑
i
↑
o ↑
n ↑

e
3
4
5
6
(cid:45)← 5
6
(cid:45)←↑
7
8
9
10

#
0
←
↑ 1 (cid:45)←↑
2
3
4
5
6
7
8
9

e
1
2
(cid:45)←↑
(cid:45)←↑ 3 (cid:45)←↑
4
(cid:45)←↑
3
4
5
6
7
8

x
2
3
4
(cid:45)←↑
(cid:45)←↑ 5 (cid:45)←↑
4
5
6
7
8
9

n
9
8
7
8
9
↑
10
11
10
9
(cid:45) 8
Figure 2.19 When entering a value in each cell, we mark which of the three neighboring
cells we came from with up to three arrows. After the table is full we compute an alignment
(minimum edit path) by using a backtrace, starting at the 8 in the lower-right corner and
following the arrows back. The sequence of bold cells represents one possible minimum cost
alignment between the two strings. Diagram design after Gusﬁeld (1997).

u
5
6
7
8
7
←↑
(cid:45)←↑ 8 (cid:45)←↑
9
(cid:45)←↑
10
11
12

o
8
7
8
9
10
11
10
9
←
←
(cid:45) 8 ←
9
↑

i
7
6
7
8
9
10
9
←
(cid:45) 8
9
↑
10

t
6
7
8
7
8
9
(cid:45) 8
9
↑
10
11

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

(cid:45)←↑

←↑

←↑

(cid:45)↑

←

(cid:45)

(cid:45)

←

↑

↑

↑

↑

↑

↑

↑

↑

While we worked our example with simple Levenshtein distance, the algorithm
in Fig. 2.17 allows arbitrary weights on the operations. For spelling correction, for
example, substitutions are more likely to happen between letters that are next to
each other on the keyboard. The Viterbi algorithm is a probabilistic extension of
minimum edit distance. Instead of computing the “minimum edit distance” between
two strings, Viterbi computes the “maximum probability alignment” of one string
with another. We’ll discuss this more in Chapter 8.

2.9 Summary

This chapter introduced a fundamental tool in language processing, the regular ex-
pression, and showed how to perform basic text normalization tasks including
word segmentation and normalization, sentence segmentation, and stemming.
We also introduced the important minimum edit distance algorithm for comparing
strings. Here’s a summary of the main points we covered about these ideas:

• The regular expression language is a powerful tool for pattern-matching.
• Basic operations in regular expressions include concatenation of symbols,
disjunction of symbols ([], |, and .), counters (*, +, and {n,m}), anchors

30 CHAPTER 2

• REGULAR EXPRESSIONS, TEXT NORMALIZATION, EDIT DISTANCE

(ˆ, $) and precedence operators ((,)).

• Word tokenization and normalization are generally done by cascades of

simple regular expression substitutions or ﬁnite automata.

• The Porter algorithm is a simple and efﬁcient way to do stemming, stripping
off afﬁxes. It does not have high accuracy but may be useful for some tasks.

• The minimum edit distance between two strings is the minimum number of
operations it takes to edit one into the other. Minimum edit distance can be
computed by dynamic programming, which also results in an alignment of
the two strings.

Bibliographical and Historical Notes

Kleene 1951; 1956 ﬁrst deﬁned regular expressions and the ﬁnite automaton, based
on the McCulloch-Pitts neuron. Ken Thompson was one of the ﬁrst to build regular
expressions compilers into editors for text searching (Thompson, 1968). His edi-
tor ed included a command “g/regular expression/p”, or Global Regular Expression
Print, which later became the Unix grep utility.

Text normalization algorithms have been applied since the beginning of the
ﬁeld. One of the earliest widely used stemmers was Lovins (1968). Stemming
was also applied early to the digital humanities, by Packard (1973), who built an
afﬁx-stripping morphological parser for Ancient Greek. Currently a wide vari-
ety of code for tokenization and normalization is available, such as the Stanford
Tokenizer (https://nlp.stanford.edu/software/tokenizer.shtml) or spe-
cialized tokenizers for Twitter (O’Connor et al., 2010), or for sentiment (http:
//sentiment.christopherpotts.net/tokenizing.html). See Palmer (2012)
for a survey of text preprocessing. NLTK is an essential tool that offers both useful
Python libraries (https://www.nltk.org) and textbook descriptions (Bird et al.,
2009) of many algorithms including text normalization and corpus interfaces.

For more on Herdan’s law and Heaps’ Law, see Herdan (1960, p. 28), Heaps
(1978), Egghe (2007) and Baayen (2001); Yasseri et al. (2012) discuss the relation-
ship with other measures of linguistic complexity. For more on edit distance, see the
excellent Gusﬁeld (1997). Our example measuring the edit distance from ‘intention’
to ‘execution’ was adapted from Kruskal (1983). There are various publicly avail-
able packages to compute edit distance, including Unix diff and the NIST sclite
program (NIST, 2005).

In his autobiography Bellman (1984) explains how he originally came up with

the term dynamic programming:

I decided therefore to use the word, “programming”.

“...The 1950s were not good years for mathematical research. [the]
Secretary of Defense ...had a pathological fear and hatred of the word,
I
research...
wanted to get across the idea that this was dynamic, this was multi-
stage... I thought, let’s ...
take a word that has an absolutely precise
meaning, namely dynamic... it’s impossible to use the word, dynamic,
in a pejorative sense. Try thinking of some combination that will pos-
sibly give it a pejorative meaning.
It’s impossible. Thus, I thought
dynamic programming was a good name. It was something not even a
Congressman could object to.”

Exercises

EXERCISES

31

2.1 Write regular expressions for the following languages.

1. the set of all alphabetic strings;
2. the set of all lower case alphabetic strings ending in a b;
3. the set of all strings from the alphabet a, b such that each a is immedi-

ately preceded by and immediately followed by a b;

2.2 Write regular expressions for the following languages. By “word”, we mean
an alphabetic string separated from other words by whitespace, any relevant
punctuation, line breaks, and so forth.

1. the set of all strings with two consecutive repeated words (e.g., “Hum-

bert Humbert” and “the the” but not “the bug” or “the big bug”);

2. all strings that start at the beginning of the line with an integer and that

end at the end of the line with a word;

3. all strings that have both the word grotto and the word raven in them
(but not, e.g., words like grottos that merely contain the word grotto);
4. write a pattern that places the ﬁrst word of an English sentence in a

register. Deal with punctuation.

2.3

Implement an ELIZA-like program, using substitutions such as those described
on page 13. You might want to choose a different domain than a Rogerian psy-
chologist, although keep in mind that you would need a domain in which your
program can legitimately engage in a lot of simple repetition.

2.4 Compute the edit distance (using insertion cost 1, deletion cost 1, substitution

cost 1) of “leda” to “deal”. Show your work (using the edit distance grid).

2.5

Figure out whether drive is closer to brief or to divers and what the edit dis-
tance is to each. You may use any version of distance that you like.

2.6 Now implement a minimum edit distance algorithm and use your hand-computed

results to check your code.

2.7 Augment the minimum edit distance algorithm to output an alignment; you

will need to store pointers and add a stage to compute the backtrace.

32 CHAPTER 3

• N-GRAM LANGUAGE MODELS

CHAPTER

3 N-gram Language Models

“You are uniformly charming!” cried he, with a smile of associating and now
and then I bowed and they perceived a chaise and four to wish for.

Random sentence generated from a Jane Austen trigram model

Predicting is difﬁcult—especially about the future, as the old quip goes. But how
about predicting something that seems much easier, like the next few words someone
is going to say? What word, for example, is likely to follow

Please turn your homework ...

Hopefully, most of you concluded that a very likely word is in, or possibly over,
but probably not refrigerator or the. In this chapter we formalize this intuition by
introducing models that assign a probability to each possible next word.

Models that assign probabilities to upcoming words, or sequences of words
in general, are called language models or LMs. Why would we want to predict
upcoming words? It turns out that the large language models that revolutionized
modern NLP are trained just by predicting words!! As we’ll see in chapters 7-10,
large language models learn an enormous amount about language solely from being
trained to predict upcoming words from neighboring words.

Language models can also assign a probability to an entire sentence. For exam-
ple, they can predict that the following sequence has a much higher probability of
appearing in a text:

all of a sudden I notice three guys standing on the sidewalk

than does this same set of words in a different order:

on guys all I of notice sidewalk three a sudden standing the

Why does it matter what the probability of a sentence is or how probable the
next word is? In many NLP applications we can use the probability as a way to
choose a better sentence or word over a less-appropriate one. For example we can
correct grammar or spelling errors like Their are two midterms, in which There was
mistyped as Their, or Everything has improve, in which improve should have been
improved. The phrase There are will be much more probable than Their are, and has
improved than has improve, allowing a language model to help users select the more
grammatical variant. Or for a speech recognizer to realize that you said I will be back
soonish and not I will be bassoon dish, it helps to know that back soonish is a much
more probable sequence. Language models can also help in augmentative and
alternative communication systems (Trnka et al. 2007, Kane et al. 2017). People
often use such AAC devices if they are physically unable to speak or sign but can
instead use eye gaze or other speciﬁc movements to select words from a menu. Word
prediction can be used to suggest likely words for the menu.

language model

LM

AAC

3.1

• N-GRAMS

33

n-gram

In this chapter we introduce the simplest kind of language model: the n-gram
language model. An n-gram is a sequence of n words: a 2-gram (which we’ll
call bigram) is a two-word sequence of words like “please turn”, “turn your”, or
”your homework”, and a 3-gram (a trigram) is a three-word sequence of words like
“please turn your”, or “turn your homework”. But we also (in a bit of terminological
ambiguity) use the word ‘n-gram’ to mean a probabilistic model that can estimate
the probability of a word given the n-1 previous words, and thereby also to assign
probabilities to entire sequences.

In later chapters we will introduce the much more powerful neural large lan-
guage models, based on the transformer architecture of Chapter 10. But because n-
grams have a remarkably simple and clear formalization, we begin our study of lan-
guage modeling with them, introducing major concepts that will play a role through-
out language modeling, concepts like training and test sets, perplexity, sampling,
and interpolation.

3.1 N-Grams

Let’s begin with the task of computing P(w
h), the probability of a word w given
|
some history h. Suppose the history h is “its water is so transparent that” and we
want to know the probability that the next word is the:

its water is so transparent that).
P(the
|

(3.1)

One way to estimate this probability is from relative frequency counts: take a
very large corpus, count the number of times we see its water is so transparent that,
and count the number of times this is followed by the. This would be answering the
question “Out of the times we saw the history h, how many times was it followed by
the word w”, as follows:

its water is so transparent that) =
P(the
|
C(its water is so transparent that the)
C(its water is so transparent that)

(3.2)

With a large enough corpus, such as the web, we can compute these counts and
estimate the probability from Eq. 3.2. You should pause now, go to the web, and
compute this estimate for yourself.

While this method of estimating probabilities directly from counts works ﬁne in
many cases, it turns out that even the web isn’t big enough to give us good estimates
in most cases. This is because language is creative; new sentences are created all the
time, and we won’t always be able to count entire sentences. Even simple extensions
of the example sentence may have counts of zero on the web (such as “Walden
Pond’s water is so transparent that the”; well, used to have counts of zero).

Similarly, if we wanted to know the joint probability of an entire sequence of
words like its water is so transparent, we could do it by asking “out of all possible
sequences of ﬁve words, how many of them are its water is so transparent?” We
would have to get the count of its water is so transparent and divide by the sum of
the counts of all possible ﬁve word sequences. That seems rather a lot to estimate!

For this reason, we’ll need to introduce more clever ways of estimating the prob-
ability of a word w given a history h, or the probability of an entire word sequence
W . Let’s start with a little formalizing of notation. To represent the probability of a

34 CHAPTER 3

• N-GRAM LANGUAGE MODELS

particular random variable Xi taking on the value “the”, or P(Xi = “the”), we will use
the simpliﬁcation P(the). We’ll represent a sequence of n words either as w1 . . . wn
or w1:n. Thus the expression w1:n
1, but we’ll also
be using the equivalent notation w<n, which can be read as “all the elements of w
from w1 up to and including wn
1. For the joint probability of each word in a se-
quence having a particular value P(X1 = w1, X2 = w2, X3 = w3, ..., Xn = wn) we’ll
use P(w1, w2, ..., wn).

1 means the string w1, w2, ..., wn

−

−

−

Now, how can we compute probabilities of entire sequences like P(w1, w2, ..., wn)?
One thing we can do is decompose this probability using the chain rule of proba-
bility:

P(X1...Xn) = P(X1)P(X2|
=
X1:k

X1)P(X3|
1)

n

P(Xk|

−

(cid:89)k=1

X1:2) . . . P(Xn|

X1:n

1)

−

Applying the chain rule to words, we get

P(w1:n) = P(w1)P(w2|
w1:k

w1)P(w3|
1)

=

n

P(wk|

−

(cid:89)k=1

w1:2) . . . P(wn|

w1:n

1)

−

(3.3)

(3.4)

The chain rule shows the link between computing the joint probability of a sequence
and computing the conditional probability of a word given previous words. Equa-
tion 3.4 suggests that we could estimate the joint probability of an entire sequence of
words by multiplying together a number of conditional probabilities. But using the
chain rule doesn’t really seem to help us! We don’t know any way to compute the
1).
exact probability of a word given a long sequence of preceding words, P(wn|
As we said above, we can’t just estimate by counting the number of times every word
occurs following every long string, because language is creative and any particular
context might have never occurred before!

w1:n

−

The intuition of the n-gram model is that instead of computing the probability of
a word given its entire history, we can approximate the history by just the last few
words.

The bigram model, for example, approximates the probability of a word given
1) by using only the conditional probability of the

w1:n

−

1). In other words, instead of computing the probability

all the previous words P(wn|
preceding word P(wn|
P(the

wn

−

Walden Pond’s water is so transparent that)
|

bigram

we approximate it with the probability

that)
P(the
|

When we use a bigram model to predict the conditional probability of the next word,
we are thus making the following approximation:

P(wn|

w1:n

1)

−

≈

P(wn|

wn

−

1)

(3.7)

Markov

The assumption that the probability of a word depends only on the previous word is
called a Markov assumption. Markov models are the class of probabilistic models
that assume we can predict the probability of some future unit without looking too

(3.5)

(3.6)

3.1

• N-GRAMS

35

n-gram

−

far into the past. We can generalize the bigram (which looks one word into the past)
to the trigram (which looks two words into the past) and thus to the n-gram (which
looks n

1 words into the past).

Let’s see a general equation for this n-gram approximation to the conditional
probability of the next word in a sequence. We’ll use N here to mean the n-gram
size, so N = 2 means bigrams and N = 3 means trigrams. Then we approximate the
probability of a word given its entire context as follows:

P(wn|
Given the bigram assumption for the probability of an individual word, we can com-
pute the probability of a complete word sequence by substituting Eq. 3.7 into Eq. 3.4:

P(wn|

w1:n

N+1:n

(3.8)

wn

1)

1)

≈

−

−

−

P(w1:n)

n

≈

(cid:89)k=1

P(wk|

wk

1)

−

(3.9)

maximum
likelihood
estimation

normalize

How do we estimate these bigram or n-gram probabilities? An intuitive way to
estimate probabilities is called maximum likelihood estimation or MLE. We get
the MLE estimate for the parameters of an n-gram model by getting counts from a
corpus, and normalizing the counts so that they lie between 0 and 1.1

For example, to compute a particular bigram probability of a word wn given a
1wn) and normal-
1:

1, we’ll compute the count of the bigram C(wn
previous word wn
−
ize by the sum of all the bigrams that share the same ﬁrst word wn

−

−

P(wn|

wn

−

1) =

1wn)

C(wn
−
w C(wn
−

1w)

(3.10)

We can simplify this equation, since the sum of all bigram counts that start with
(cid:80)
1 must be equal to the unigram count for that word wn
1 (the reader

a given word wn
should take a moment to be convinced of this):

−

−

P(wn|

wn

−

1) =

C(wn
−
C(wn

1wn)
1)

−

(3.11)

Let’s work through an example using a mini-corpus of three sentences. We’ll
ﬁrst need to augment each sentence with a special symbol <s> at the beginning
of the sentence, to give us the bigram context of the ﬁrst word. We’ll also need a
special end-symbol. </s>2

<s> I am Sam </s>
<s> Sam I am </s>
<s> I do not like green eggs and ham </s>

Here are the calculations for some of the bigram probabilities from this corpus

P(I|<s>) = 2
P(</s>|Sam) = 1

3 = .67

2 = 0.5

P(Sam|<s>) = 1
P(Sam|am) = 1

3 = .33
2 = .5

P(am|I) = 2
P(do|I) = 1

3 = .67
3 = .33

1 For probabilistic models, normalizing means dividing by some total count so that the resulting proba-
bilities fall between 0 and 1.
2 We need the end-symbol to make the bigram grammar a true probability distribution. Without an end-
symbol, instead of the sentence probabilities of all sentences summing to one, the sentence probabilities
for all sentences of a given length would sum to one. This model would deﬁne an inﬁnite set of probability
distributions, with one distribution per sentence length. See Exercise 3.5.

36 CHAPTER 3

• N-GRAM LANGUAGE MODELS

For the general case of MLE n-gram parameter estimation:

P(wn|

wn

−

N+1:n

−

1) =

C(wn

−
C(wn

N+1:n

−
N+1:n

−

1 wn)
1)

−

(3.12)

relative
frequency

Equation 3.12 (like Eq. 3.11) estimates the n-gram probability by dividing the
observed frequency of a particular sequence by the observed frequency of a preﬁx.
This ratio is called a relative frequency. We said above that this use of relative
frequencies as a way to estimate probabilities is an example of maximum likelihood
estimation or MLE. In MLE, the resulting parameter set maximizes the likelihood
M)). For example, suppose the
of the training set T given the model M (i.e., P(T
|
word Chinese occurs 400 times in a corpus of a million words like the Brown corpus.
What is the probability that a random word selected from some other text of, say,
400
a million words will be the word Chinese? The MLE of its probability is
1000000
or .0004. Now .0004 is not the best possible estimate of the probability of Chinese
occurring in all situations; it might turn out that in some other corpus or context
Chinese is a very unlikely word. But it is the probability that makes it most likely
that Chinese will occur 400 times in a million-word corpus. We present ways to
modify the MLE estimates slightly to get better probability estimates in Section 3.6.
Let’s move on to some examples from a slightly larger corpus than our 14-word
example above. We’ll use data from the now-defunct Berkeley Restaurant Project,
a dialogue system from the last century that answered questions about a database
of restaurants in Berkeley, California (Jurafsky et al., 1994). Here are some text-
normalized sample user queries (a sample of 9332 sentences is on the website):

can you tell me about any good cantonese restaurants close by
mid priced thai food is what i’m looking for
tell me about chez panisse
can you give me a listing of the kinds of food that are available
i’m looking for a good place to eat breakfast
when is caffe venezia open during the day

Figure 3.1 shows the bigram counts from a piece of a bigram grammar from the
Berkeley Restaurant Project. Note that the majority of the values are zero. In fact,
we have chosen the sample words to cohere with each other; a matrix selected from
a random set of eight words would be even more sparse.

i
want
to
eat
chinese
food
lunch
spend

i
5
2
2
0
1
15
2
1

want
827
0
0
0
0
0
0
0

to
0
608
4
2
0
15
0
1

eat
9
1
686
0
0
0
0
0

chinese
0
6
2
16
0
1
0
0

food
0
6
0
2
82
4
1
0

lunch
0
5
6
42
1
0
0
0

spend
2
1
211
0
0
0
0
0

Figure 3.1 Bigram counts for eight of the words (out of V = 1446) in the Berkeley Restau-
rant Project corpus of 9332 sentences. Zero counts are in gray.

Figure 3.2 shows the bigram probabilities after normalization (dividing each cell
in Fig. 3.1 by the appropriate unigram for its row, taken from the following set of
unigram probabilities):

3.1

• N-GRAMS

37

eat chinese food lunch spend

want to

i
2533 927

2417 746 158

1093 341

278

chinese

lunch
0

eat
0.0036 0
0.0011 0.0065

spend
food
0.00079
0
0.0065 0.0054 0.0011
0.0025 0.087

want
i
0.33
0.002
0.0022
0
0.00083 0
0
0
0
0
0
0

i
want
to
eat
chinese 0.0063
0.014
food
0.0059
lunch
0.0036
spend
Figure 3.2 Bigram probabilities for eight words in the Berkeley Restaurant Project corpus
of 9332 sentences. Zero probabilities are in gray.

0.00083 0
0.021
0
0.00092 0.0037 0
0.0029 0
0
0
0
0

0
0.0063 0
0
0
0

to
0
0.66
0.0017 0.28
0.0027 0
0
0
0
0.014
0
0
0.0036 0

0.0027 0.056
0.52

Here are a few other useful probabilities:

P(i|<s>) = 0.25
P(food|english) = 0.5

P(english|want) = 0.0011
P(</s>|food) = 0.68

Now we can compute the probability of sentences like I want English food or
I want Chinese food by simply multiplying the appropriate bigram probabilities to-
gether, as follows:

P(<s> i want english food </s>)

= P(i|<s>)P(want|i)P(english|want)

P(food|english)P(</s>|food)
0.68

.0011

0.5

×

×

= .25
.33
= .000031

×

×

We leave it as Exercise 3.2 to compute the probability of i want chinese food.
What kinds of linguistic phenomena are captured in these bigram statistics?
Some of the bigram probabilities above encode some facts that we think of as strictly
syntactic in nature, like the fact that what comes after eat is usually a noun or an
adjective, or that what comes after to is usually a verb. Others might be a fact about
the personal assistant task, like the high probability of sentences beginning with
the words I. And some might even be cultural rather than linguistic, like the higher
probability that people are looking for Chinese versus English food.

Some practical issues: Although for pedagogical purposes we have only described
bigram models, in practice we might use trigram models, which condition on the
previous two words rather than the previous word, or 4-gram or even 5-gram mod-
els, when there is sufﬁcient training data. Note that for these larger n-grams, we’ll
need to assume extra contexts to the left and right of the sentence end. For example,
to compute trigram probabilities at the very beginning of the sentence, we use two
pseudo-words for the ﬁrst trigram (i.e., P(I|<s><s>).

We always represent and compute language model probabilities in log format
as log probabilities. Since probabilities are (by deﬁnition) less than or equal to
1, the more probabilities we multiply together, the smaller the product becomes.
Multiplying enough n-grams together would result in numerical underﬂow. By using
log probabilities instead of raw probabilities, we get numbers that are not as small.

trigram

4-gram

5-gram

log
probabilities

38 CHAPTER 3

• N-GRAM LANGUAGE MODELS

Adding in log space is equivalent to multiplying in linear space, so we combine log
probabilities by adding them. The result of doing all computation and storage in log
space is that we only need to convert back into probabilities if we need to report
them at the end; then we can just take the exp of the logprob:

p1 ×

p2 ×

p3 ×

p4 = exp(log p1 + log p2 + log p3 + log p4)

(3.13)

In practice throughout this book, we’ll use log to mean natural log (ln) when the

base is not speciﬁed.

3.2 Evaluating Language Models: Training and Test Sets

extrinsic
evaluation

intrinsic
evaluation

training set
development
set
test set

The best way to evaluate the performance of a language model is to embed it in
an application and measure how much the application improves. Such end-to-end
evaluation is called extrinsic evaluation. Extrinsic evaluation is the only way to
know if a particular improvement in the language model (or any component) is really
going to help the task at hand. Thus for evaluating n-gram language models that are
a component of some task like speech recognition or machine translation, we can
compare the performance of two candidate language models by running the speech
recognizer or machine translator twice, once with each language model, and seeing
which gives the more accurate transcription.

Unfortunately, running big NLP systems end-to-end is often very expensive. In-
stead, it’s helpful to have a metric that can be used to quickly evaluate potential
improvements in a language model. An intrinsic evaluation metric is one that mea-
sures the quality of a model independent of any application. In the next section we’ll
introduce perplexity, which is the standard intrinsic metric for measuring language
model performance, both for simple n-gram language models and for the more so-
phisticated neural large language models of Chapter 10.

In order to evaluate any machine learning model, we need to have at least three

distinct data sets: the training set, the development set, and the test set.

The training set is the data we use to learn the parameters of our model; for
simple n-gram language models it’s the corpus from which we get the counts that
we normalize into the probabilities of the n-gram language model.

The test set is a different, held-out set of data, not overlapping with the training
set, that we use to evaluate the model. We need a separate test set to give us an
unbiased estimate of how well the model we trained can generalize when we apply
it to some new unknown dataset. A machine learning model that perfectly captured
the training data, but performed terribly on any other data, wouldn’t be much use
when it comes time to apply it to any new data or problem! We thus measure the
quality of an n-gram model by its performance on this unseen test set or test corpus.
How should we choose a training and test set? The test set should reﬂect the
language we want to use the model for. If we’re going to use our language model
for speech recognition of chemistry lectures, the test set should be text of chemistry
lectures. If we’re going to use it as part of a system for translating hotel booking re-
quests from Chinese to English, the test set should be text of hotel booking requests.
If we want our language model to be general purpose, then the test test should be
drawn from a wide variety of texts. In such cases we might collect a lot of texts
from different sources, and then divide it up into a training set and a test set. It’s
important to do the dividing carefully; if we’re building a general purpose model,

3.3

• EVALUATING LANGUAGE MODELS: PERPLEXITY

39

we don’t want the test set to consist of only text from one document, or one author,
since that wouldn’t be a good measure of general performance.

Thus if we are given a corpus of text and want to compare the performance of
two different n-gram models, we divide the data into training and test sets, and train
the parameters of both models on the training set. We can then compare how well
the two trained models ﬁt the test set.

But what does it mean to “ﬁt the test set”? The standard answer is simple:
whichever language model assigns a higher probability to the test set—which
means it more accurately predicts the test set—is a better model. Given two proba-
bilistic models, the better model is the one that has a tighter ﬁt to the test data or that
better predicts the details of the test data, and hence will assign a higher probability
to the test data.

Since our evaluation metric is based on test set probability, it’s important not to
let the test sentences into the training set. Suppose we are trying to compute the
probability of a particular “test” sentence. If our test sentence is part of the training
corpus, we will mistakenly assign it an artiﬁcially high probability when it occurs
in the test set. We call this situation training on the test set. Training on the test
set introduces a bias that makes the probabilities all look too high, and causes huge
inaccuracies in perplexity, the probability-based metric we introduce below.

Even if we don’t train on the test set, if we test our language model on it many
times after making different changes, we might implicitly tune to its characteristics,
by noticing which changes seem to make the model better. For this reason, we only
want to run our model on the test set once, or a very few number of times, once we
are sure our model is ready.

For this reason we normally instead have a third dataset called a development
test set or, devset. We do all our testing on this dataset until the very end, and then
we test on the test once to see how good our model is.

How do we divide our data into training, development, and test sets? We want
our test set to be as large as possible, since a small test set may be accidentally un-
representative, but we also want as much training data as possible. At the minimum,
we would want to pick the smallest test set that gives us enough statistical power
to measure a statistically signiﬁcant difference between two potential models. It’s
important that the dev set be drawn from the same kind of text as the test set, since
its goal is to measure how we would do on the test set.

development
test

3.3 Evaluating Language Models: Perplexity

perplexity

In practice we don’t use raw probability as our metric for evaluating language mod-
els, but a function of probability called perplexity. Perplexity is one of the most
important metrics in natural language processing, and we use it to evaluate neural
language models as well.

The perplexity (sometimes abbreviated as PP or PPL) of a language model on a
test set is the inverse probability of the test set (one over the probability of the test
set), normalized by the number of words. For this reason it’s sometimes called the
per-word perplexity. For a test set W = w1w2 . . . wN,:

40 CHAPTER 3

• N-GRAM LANGUAGE MODELS

perplexity(W ) = P(w1w2 . . . wN)−

1
N

(3.14)

= N
(cid:115)

1
P(w1w2 . . . wN)

Or we can use the chain rule to expand the probability of W :

(3.15)

perplexity(W ) = N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

N

1
w1 . . . wi

1)

P(wi|

−

(cid:89)i=1
Note that because of the inverse in Eq. 3.15, the higher the probability of the
word sequence, the lower the perplexity. Thus the lower the perplexity of a model on
the data, the better the model, and minimizing perplexity is equivalent to maximizing
the test set probability according to the language model. Why does perplexity use
the inverse probability? It turns out the inverse arises from the original deﬁnition
of perplexity from cross-entropy rate in information theory; for those interested,
the explanation is in the advanced section Section 3.9. Meanwhile, we just have to
remember that perplexity has an inverse relationship with probability.

The details of computing the perplexity of a test set W depends on which lan-
guage model we use. Here’s the perplexity of W with a unigram language model
(just the geometric mean of the unigram probabilities):

perplexity(W ) = N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

(cid:89)i=1

N

1
P(wi)

(3.16)

The perplexity of W computed with a bigram language model is still a geometric
mean, but now of the bigram probabilities:

N

1
P(wi|
wi

perplexity(W ) = N
(cid:118)
(cid:117)
(cid:117)
(cid:116)
What we generally use for word sequence in Eq. 3.15 or Eq. 3.17 is the entire
sequence of words in some test set. Since this sequence will cross many sentence
boundaries, if our vocabulary includes a between-sentence token <EOS> or separate
begin- and end-sentence markers <s> and </s> then we can include them in the
probability computation. If we do, then we also include one token per sentence in
the total count of word tokens N.3

(3.17)

(cid:89)i=1

1)

−

We mentioned above that perplexity is a function of both the text and the lan-
guage model: given a text W , different language models will have different perplex-
ities. Because of this, perplexity can be used to compare different n-gram models.
Let’s look at an example, in which we trained unigram, bigram, and trigram gram-
mars on 38 million words (including start-of-sentence tokens) from the Wall Street
Journal, using a 19,979 word vocabulary. We then computed the perplexity of each

3 For example if we use both begin and end tokens, we would include the end-of-sentence marker </s>
but not the beginning-of-sentence marker <s> in our count of N; This is because the end-sentence token is
followed directly by the begin-sentence token with probability almost 1, so we don’t want the probability
of that fake transition to inﬂuence our perplexity.

3.3

• EVALUATING LANGUAGE MODELS: PERPLEXITY

41

of these models on a test set of 1.5 million words, using Eq. 3.16 for unigrams,
Eq. 3.17 for bigrams, and the corresponding equation for trigrams. The table below
shows the perplexity of a 1.5 million word WSJ test set according to each of these
grammars.

Unigram Bigram Trigram

Perplexity 962

170

109

As we see above, the more information the n-gram gives us about the word
sequence, the higher the probability the n-gram will assign to the string. A trigram
model is less surprised than a unigram model because it has a better idea of what
words might come next, and so it assigns them a higher probability. And the higher
the probability, the lower the perplexity (since as Eq. 3.15 showed, perplexity is
related inversely to the likelihood of the test sequence according to the model). So a
lower perplexity can tell us that a language model is a better predictor of the words
in the test set.

Note that in computing perplexities, the n-gram model P must be constructed
without any knowledge of the test set or any prior knowledge of the vocabulary of
the test set. Any kind of knowledge of the test set can cause the perplexity to be
artiﬁcially low. The perplexity of two language models is only comparable if they
use identical vocabularies.

An (intrinsic) improvement in perplexity does not guarantee an (extrinsic) im-
provement in the performance of a language processing task like speech recognition
or machine translation. Nonetheless, because perplexity usually correlates with task
improvements, it is commonly used as a convenient evaluation metric. Still, when
possible a model’s improvement in perplexity should be conﬁrmed by an end-to-end
evaluation on a real task.

Advanced: Perplexity as Weighted Average Branching Factor

It turns out that perplexity can also be thought of as the weighted average branch-
ing factor of a language. The branching factor of a language is the number of
possible next words that can follow any word. If we have an artiﬁcial deterministic
language of integer numbers whose vocabulary consists of the 10 digits (zero, one,
two,..., nine), in which any digit can follow any other digit, then the branching factor
of that language is 10.

Let’s ﬁrst convince ourselves that if we compute the perplexity of this artiﬁcial
digit language we indeed get 10. Let’s suppose that (in training and in test) each
of the 10 digits occurs with exactly equal probability P = 1
10 . Now imagine a test
string of digits of length N, and, again, assume that in the training set all the digits
occurred with equal probability. By Eq. 3.15, the perplexity will be

perplexity(W ) = P(w1w2 . . . wN)−

1
N

N

1
N

)−

= (

1
10
1
10
= 10

=

1
−

(3.18)

But suppose that the number zero is really frequent and occurs far more often
than other numbers. Let’s say that 0 occur 91 times in the training set, and each of the
other digits occurred 1 time each. Now we see the following test set: 0 0 0 0 0 3 0 0 0

42 CHAPTER 3

• N-GRAM LANGUAGE MODELS

0. We should expect the perplexity of this test set to be lower since most of the time
the next number will be zero, which is very predictable, i.e. has a high probability.
Thus, although the branching factor is still 10, the perplexity or weighted branching
factor is smaller. We leave this exact calculation as exercise 3.12.

3.4 Sampling sentences from a language model

sampling

One important way to visualize what kind of knowledge a language model embodies
is to sample from it. Sampling from a distribution means to choose random points
according to their likelihood. Thus sampling from a language model—which rep-
resents a distribution over sentences—means to generate some sentences, choosing
each sentence according to its likelihood as deﬁned by the model. Thus we are more
likely to generate sentences that the model thinks have a high probability and less
likely to generate sentences that the model thinks have a low probability.

This technique of visualizing a language model by sampling was ﬁrst suggested
very early on by Shannon (1948) and Miller and Selfridge (1950). It’s simplest to
visualize how this works for the unigram case. Imagine all the words of the English
language covering the probability space between 0 and 1, each word covering an
interval proportional to its frequency. Fig. 3.3 shows a visualization, using a unigram
LM computed from the text of this book. We choose a random value between 0 and
1, ﬁnd that point on the probability line, and print the word whose interval includes
this chosen value. We continue choosing random numbers and generating words
until we randomly generate the sentence-ﬁnal token </s>.

Figure 3.3 A visualization of the sampling distribution for sampling sentences by repeat-
edly sampling unigrams. The blue bar represents the relative frequency of each word (we’ve
ordered them from most frequent to least frequent, but the choice of order is arbitrary). The
number line shows the cumulative probabilities. If we choose a random number between 0
and 1, it will fall in an interval corresponding to some word. The expectation for the random
number to fall in the larger intervals of one of the frequent words (the, of, a) is much higher
than in the smaller interval of one of the rare words (polyphonic).

We can use the same technique to generate bigrams by ﬁrst generating a ran-
dom bigram that starts with <s> (according to its bigram probability). Let’s say the
second word of that bigram is w. We next choose a random bigram starting with w
(again, drawn according to its bigram probability), and so on.

3.5 Generalization and Zeros

The n-gram model, like many statistical models, is dependent on the training corpus.
One implication of this is that the probabilities often encode speciﬁc facts about a

010.06the.060.03of0.02a0.02toin.09.11.13.15…however(p=.0003)polyphonicp=.0000018…0.02.66.99…3.5

• GENERALIZATION AND ZEROS

43

given training corpus. Another implication is that n-grams do a better and better job
of modeling the training corpus as we increase the value of N.

We can use the sampling method from the prior section to visualize both of
these facts! To give an intuition for the increasing power of higher-order n-grams,
Fig. 3.4 shows random sentences generated from unigram, bigram, trigram, and 4-
gram models trained on Shakespeare’s works.

1

gram

2

gram

3

gram

4

gram

–To him swallowed confess hear both. Which. Of save on trail for are ay device and
rote life have
–Hill he late speaks; or! a more to leg less ﬁrst you enter

–Why dost stand forth thy canopy, forsooth; he is this palpable hit the King Henry. Live
king. Follow.
–What means, sir. I confess she? then all sorts, he is trim, captain.

–Fly, and will rid me these news of price. Therefore the sadness of parting, as they say,
’tis done.
–This shall forbid it should be branded, if renown made it empty.

–King Henry. What! I will go seek the traitor Gloucester. Exeunt some of the watch. A
great banquet serv’d in;
–It cannot be but so.

Figure 3.4 Eight sentences randomly generated from four n-grams computed from Shakespeare’s works. All
characters were mapped to lower-case and punctuation marks were treated as words. Output is hand-corrected
for capitalization to improve readability.

The longer the context on which we train the model, the more coherent the sen-
tences. In the unigram sentences, there is no coherent relation between words or any
sentence-ﬁnal punctuation. The bigram sentences have some local word-to-word
coherence (especially if we consider that punctuation counts as a word). The tri-
gram and 4-gram sentences are beginning to look a lot like Shakespeare. Indeed, a
careful investigation of the 4-gram sentences shows that they look a little too much
like Shakespeare. The words It cannot be but so are directly from King John. This is
because, not to put the knock on Shakespeare, his oeuvre is not very large as corpora
go (N = 884, 647,V = 29, 066), and our n-gram probability matrices are ridiculously
sparse. There are V 2 = 844, 000, 000 possible bigrams alone, and the number of pos-
sible 4-grams is V 4 = 7
1017. Thus, once the generator has chosen the ﬁrst 3-gram
(It cannot be), there are only seven possible next words for the 4th element (but, I,
that, thus, this, and the period).

×

To get an idea of the dependence of a grammar on its training set, let’s look at an
n-gram grammar trained on a completely different corpus: the Wall Street Journal
(WSJ) newspaper. Shakespeare and the Wall Street Journal are both English, so
we might expect some overlap between our n-grams for the two genres. Fig. 3.5
shows sentences generated by unigram, bigram, and trigram grammars trained on
40 million words from WSJ.

Compare these examples to the pseudo-Shakespeare in Fig. 3.4. While they both
model “English-like sentences”, there is clearly no overlap in generated sentences,
and little overlap even in small phrases. Statistical models are likely to be pretty use-
less as predictors if the training sets and the test sets are as different as Shakespeare
and WSJ.

How should we deal with this problem when we build n-gram models? One step
is to be sure to use a training corpus that has a similar genre to whatever task we are
trying to accomplish. To build a language model for translating legal documents,

44 CHAPTER 3

• N-GRAM LANGUAGE MODELS

gram

were recession exchange new endorsed a acquire to six executives

1 Months the my and issue of year foreign new exchange’s september
2

Last December through the way to preserve the Hudson corporation N.
B. E. C. Taylor would seem to complete the major central planners one
point ﬁve percent of U. S. E. has already old M. X. corporation of living
on information such as more frequently ﬁshing to keep her
They also point to ninety nine point six billion dollars from two hundred
four oh six three percent of the rates of interest stores as Mexico and
Brazil on market conditions

3

gram

gram

Figure 3.5 Three sentences randomly generated from three n-gram models computed from
40 million words of the Wall Street Journal, lower-casing all characters and treating punctua-
tion as words. Output was then hand-corrected for capitalization to improve readability.

we need a training corpus of legal documents. To build a language model for a
question-answering system, we need a training corpus of questions.

It is equally important to get training data in the appropriate dialect or variety,
especially when processing social media posts or spoken transcripts. For exam-
ple some tweets will use features of African American English (AAE)— the name
for the many variations of language used in African American communities (King,
2020). Such features include words like ﬁnna—an auxiliary verb that marks imme-
diate future tense —that don’t occur in other varieties, or spellings like den for then,
in tweets like this one (Blodgett and O’Connor, 2017):

(3.19) Bored af den my phone ﬁnna die!!!

while tweets from English-based languages like Nigerian Pidgin have markedly dif-
ferent vocabulary and n-gram patterns from American English (Jurgens et al., 2017):

(3.20) @username R u a wizard or wat gan sef: in d mornin - u tweet, afternoon - u

tweet, nyt gan u dey tweet. beta get ur IT placement wiv twitter

Matching genres and dialects is still not sufﬁcient. Our models may still be
subject to the problem of sparsity. For any n-gram that occurred a sufﬁcient number
of times, we might have a good estimate of its probability. But because any corpus is
limited, some perfectly acceptable English word sequences are bound to be missing
from it. That is, we’ll have many cases of putative “zero probability n-grams” that
should really have some non-zero probability. Consider the words that follow the
bigram denied the in the WSJ Treebank3 corpus, together with their counts:

denied the allegations: 5
denied the speculation: 2
1
denied the rumors:
1
denied the report:

But suppose our test set has phrases like:

denied the offer
denied the loan

zeros

Our model will incorrectly estimate that the P(offer
These zeros—things that don’t ever occur in the training set but do occur in
the test set—are a problem for two reasons. First, their presence means we are
underestimating the probability of all sorts of words that might occur, which will
hurt the performance of any application we want to run on this data.

denied the) is 0!
|

Second, if the probability of any word in the test set is 0, the entire probability
of the test set is 0. By deﬁnition, perplexity is based on the inverse probability of the

3.6

• SMOOTHING

45

test set. Thus if some words have zero probability, we can’t compute perplexity at
all, since we can’t divide by 0!

What do we do about zeros? There are two solutions, depending on the kind of
zero. For words whose n-gram probability is zero because they occur in a novel test
set context, like the example of denied the offer above, we’ll introduce in Section 3.6
algorithms called smoothing or discounting. Smoothing algorithms shave off a bit
of probability mass from some more frequent events and give it to these unseen
events. But ﬁrst, let’s talk about an even more insidious form of zero: words that the
model has never seen before at all (in any context): unknown words!

Unknown Words

What do we do about words we have never seen before? Perhaps the word Jurafsky
simply did not occur in our training set, but pops up in the test set! We usually
disallow this situation by stipulating that we already know all the words that can
occur. In such a closed vocabulary system the test set can only contain words from
this known lexicon, and there will be no unknown words. This is what we do for the
neural language models of later chapters. For these models we use subword tokens
rather than words. With subword tokenization (like the BPE algorithm of Chapter 2)
any unknown word can be modeled as a sequence of smaller subwords, if necessary
by a sequence of individual letters, so we never have unknown words.

If our language model is using words instead of tokens, however, we have to
deal with unknown words, or out of vocabulary (OOV) words: words we haven’t
seen before. The percentage of OOV words that appear in the test set is called the
OOV rate. One way to create an open vocabulary system is to model potential
unknown words in the test set by adding a pseudo-word called <UNK>. Again, most
modern language models are closed vocabulary and don’t use an <UNK> token. But
when necessary, we can train <UNK> probabilities by turning the problem back into
a closed vocabulary one by choosing a ﬁxed vocabulary in advance:

1. Choose a vocabulary (word list) that is ﬁxed in advance.
2. Convert in the training set any word that is not in this set (any OOV word) to

the unknown word token <UNK> in a text normalization step.

3. Estimate the probabilities for <UNK> from its counts just like any other regular

word in the training set.

The exact choice of <UNK> has an effect on perplexity. A language model can
achieve low perplexity by choosing a small vocabulary and assigning the unknown
word a high probability. Thus perplexities can only be compared across language
models with <UNK> if they have the exact same vocabularies (Buck et al., 2014).

closed
vocabulary

OOV

open
vocabulary

3.6 Smoothing

What do we do with words that are in our vocabulary (they are not unknown words)
but appear in a test set in an unseen context (for example they appear after a word
they never appeared after in training)? To keep a language model from assigning
zero probability to these unseen events, we’ll have to shave off a bit of probability
mass from some more frequent events and give it to the events we’ve never seen.
This modiﬁcation is called smoothing or discounting. In this section and the fol-
lowing ones we’ll introduce a variety of ways to do smoothing: Laplace (add-one)

smoothing

discounting

46 CHAPTER 3

• N-GRAM LANGUAGE MODELS

smoothing, add-k smoothing, and stupid backoff. At the end of the chapter we
also summarize a more complex method, Kneser-Ney smoothing.

3.6.1 Laplace Smoothing

The simplest way to do smoothing is to add one to all the n-gram counts, before
we normalize them into probabilities. All the counts that used to be zero will now
have a count of 1, the counts of 1 will be 2, and so on. This algorithm is called
Laplace smoothing. Laplace smoothing does not perform well enough to be used
in modern n-gram models, but it usefully introduces many of the concepts that we
see in other smoothing algorithms, gives a useful baseline, and is also a practical
smoothing algorithm for other tasks like text classiﬁcation (Chapter 4).

Let’s start with the application of Laplace smoothing to unigram probabilities.
Recall that the unsmoothed maximum likelihood estimate of the unigram probability
of the word wi is its count ci normalized by the total number of word tokens N:

Laplace
smoothing

P(wi) =

ci
N

add-one

Laplace smoothing merely adds one to each count (hence its alternate name add-
one smoothing). Since there are V words in the vocabulary and each one was incre-
mented, we also need to adjust the denominator to take into account the extra V
observations. (What happens to our P values if we don’t increase the denominator?)

PLaplace(wi) =

ci + 1
N +V

(3.21)

Instead of changing both the numerator and denominator, it is convenient to
describe how a smoothing algorithm affects the numerator, by deﬁning an adjusted
count c∗. This adjusted count is easier to compare directly with the MLE counts and
can be turned into a probability like an MLE count by normalizing by N. To deﬁne
this count, since we are only changing the numerator in addition to adding 1 we’ll
also need to multiply by a normalization factor N

N+V :

c∗i = (ci + 1)

N
N +V

(3.22)

discounting

discount

We can now turn c∗i into a probability P∗i by normalizing by N.

A related way to view smoothing is as discounting (lowering) some non-zero
counts in order to get the probability mass that will be assigned to the zero counts.
Thus, instead of referring to the discounted counts c∗, we might describe a smooth-
ing algorithm in terms of a relative discount dc, the ratio of the discounted counts to
the original counts:

dc =

c∗
c

Now that we have the intuition for the unigram case, let’s smooth our Berkeley
Restaurant Project bigrams. Figure 3.6 shows the add-one smoothed counts for the
bigrams in Fig. 3.1.

Figure 3.7 shows the add-one smoothed probabilities for the bigrams in Fig. 3.2.
Recall that normal bigram probabilities are computed by normalizing each row of
counts by the unigram count:

3.6

• SMOOTHING

47

i
want
to
eat
chinese
food
lunch
spend

i
6
3
3
1
2
16
3
2

want
828
1
1
1
1
1
1
1

to
1
609
5
3
1
16
1
2

eat
10
2
687
1
1
1
1
1

chinese
1
7
3
17
1
2
1
1

food
1
7
1
3
83
5
2
1

lunch
1
6
7
43
2
1
1
1

spend
3
2
212
1
1
1
1
1

Figure 3.6 Add-one smoothed bigram counts for eight of the words (out of V = 1446) in
the Berkeley Restaurant Project corpus of 9332 sentences. Previously-zero counts are in gray.

P(wn|

wn

−

1) =

C(wn
−
C(wn

1wn)
1)

−

(3.23)

For add-one smoothed bigram counts, we need to augment the unigram count by

the number of total word types in the vocabulary V :

PLaplace(wn|

C(wn
−
w (C(wn
−
Thus, each of the unigram counts given in the previous section will need to be
augmented by V = 1446. The result is the smoothed bigram probabilities in Fig. 3.7.

1wn) + 1
1) +V

C(wn
−
C(wn

1wn) + 1

1w) + 1)

1) =

(3.24)

wn

(cid:80)

=

−

−

i
0.0015
0.0013
0.00078
0.00046
0.0012
0.0063
0.0017
0.0012

spend
eat
0.00075
0.0025
i
0.00084
0.00084
want
0.055
0.18
to
0.00046
0.00046
eat
0.00062
0.00062
chinese
0.00039
0.00039
food
0.00056
0.00056
lunch
spend
0.00058
0.00058
Figure 3.7 Add-one smoothed bigram probabilities for eight of the words (out of V = 1446) in the BeRP
corpus of 9332 sentences. Previously-zero probabilities are in gray.

want
0.21
0.00042
0.00026
0.00046
0.00062
0.00039
0.00056
0.00058

chinese
0.00025
0.0029
0.00078
0.0078
0.00062
0.00079
0.00056
0.00058

food
0.00025
0.0029
0.00026
0.0014
0.052
0.002
0.0011
0.00058

lunch
0.00025
0.0025
0.0018
0.02
0.0012
0.00039
0.00056
0.00058

to
0.00025
0.26
0.0013
0.0014
0.00062
0.0063
0.00056
0.0012

It is often convenient to reconstruct the count matrix so we can see how much a
smoothing algorithm has changed the original counts. These adjusted counts can be
computed by Eq. 3.25. Figure 3.8 shows the reconstructed counts.

−

−

−

1)

C(wn

c∗(wn

[C(wn

1wn) =

×
1) +V

1wn) + 1]
C(wn
Note that add-one smoothing has made a very big change to the counts. Com-
paring Fig. 3.8 to the original counts in Fig. 3.1, we can see that C(want to) changed
from 608 to 238! We can see this in probability space as well: P(to
want) decreases
|
from .66 in the unsmoothed case to .26 in the smoothed case. Looking at the dis-
count d (the ratio between new and old counts) shows us how strikingly the counts
for each preﬁx word have been reduced; the discount for the bigram want to is .39,
while the discount for Chinese food is .10, a factor of 10!

(3.25)

−

The sharp change in counts and probabilities occurs because too much probabil-

ity mass is moved to all the zeros.

48 CHAPTER 3

• N-GRAM LANGUAGE MODELS

i
3.8
1.2
1.9
0.34
0.2
6.9
0.57
0.32

i
want
to
eat
chinese
food
lunch
spend
Figure 3.8 Add-one reconstituted counts for eight words (of V = 1446) in the BeRP corpus
of 9332 sentences. Previously-zero counts are in gray.

chinese
0.64
2.7
1.9
5.8
0.098
0.86
0.19
0.16

spend
1.9
0.78
133
0.34
0.098
0.43
0.19
0.16

lunch
0.64
2.3
4.4
15
0.2
0.43
0.19
0.16

eat
6.4
0.78
430
0.34
0.098
0.43
0.19
0.16

want
527
0.39
0.63
0.34
0.098
0.43
0.19
0.16

to
0.64
238
3.1
1
0.098
6.9
0.19
0.32

food
0.64
2.7
0.63
1
8.2
2.2
0.38
0.16

3.6.2 Add-k smoothing

One alternative to add-one smoothing is to move a bit less of the probability mass
from the seen to the unseen events. Instead of adding 1 to each count, we add a frac-
tional count k (.5? .05? .01?). This algorithm is therefore called add-k smoothing.

add-k

P∗Add-k(wn|

wn

−

1) =

C(wn
−
C(wn

1wn) + k
1) + kV

−

(3.26)

Add-k smoothing requires that we have a method for choosing k; this can be
done, for example, by optimizing on a devset. Although add-k is useful for some
tasks (including text classiﬁcation), it turns out that it still doesn’t work well for
language modeling, generating counts with poor variances and often inappropriate
discounts (Gale and Church, 1994).

3.6.3 Backoff and Interpolation

The discounting we have been discussing so far can help solve the problem of zero
frequency n-grams. But there is an additional source of knowledge we can draw on.
If we are trying to compute P(wn|
1) but we have no examples of a particular
1wn, we can instead estimate its probability by using the bigram
trigram wn
2wn
1),
1). Similarly, if we don’t have counts to compute P(wn|
probability P(wn|
wn
we can look to the unigram P(wn).

2wn

wn

wn

−

−

−

−

−

−

backoff

interpolation

In other words, sometimes using less context is a good thing, helping to general-
ize more for contexts that the model hasn’t learned much about. There are two ways
to use this n-gram “hierarchy”. In backoff, we use the trigram if the evidence is
sufﬁcient, otherwise we use the bigram, otherwise the unigram. In other words, we
only “back off” to a lower-order n-gram if we have zero evidence for a higher-order
n-gram. By contrast, in interpolation, we always mix the probability estimates
from all the n-gram estimators, weighting and combining the trigram, bigram, and
unigram counts.

In simple linear interpolation, we combine different order n-grams by linearly
1) by
interpolating them. Thus, we estimate the trigram probability P(wn|
mixing together the unigram, bigram, and trigram probabilities, each weighted by a
λ :

2wn

wn

−

−

ˆP(wn|

wn

−

2wn

−

1) = λ1P(wn)
+λ2P(wn|
+λ3P(wn|

wn
wn

−

−

1)
2wn

1)

−

(3.27)

3.6

• SMOOTHING

49

The λ s must sum to 1, making Eq. 3.27 equivalent to a weighted average.
In a
slightly more sophisticated version of linear interpolation, each λ weight is com-
puted by conditioning on the context. This way, if we have particularly accurate
counts for a particular bigram, we assume that the counts of the trigrams based on
this bigram will be more trustworthy, so we can make the λ s for those trigrams
higher and thus give that trigram more weight in the interpolation. Equation 3.28
shows the equation for interpolation with context-conditioned weights:

ˆP(wn|

wn

−

−

2wn

1) = λ1(wn

2:n

−
+λ2(wn
−
+ λ3(wn

−
2:n

1)P(wn)
1)P(wn|
wn
−
1)P(wn|
wn

−

−
2:n

−

−

1)
2wn

1)

−

(3.28)

held-out

discount

Katz backoff

How are these λ values set? Both the simple interpolation and conditional interpo-
lation λ s are learned from a held-out corpus. A held-out corpus is an additional
training corpus, so-called because we hold it out from the training data, that we use
to set hyperparameters like these λ values. We do so by choosing the λ values that
maximize the likelihood of the held-out corpus. That is, we ﬁx the n-gram probabil-
ities and then search for the λ values that—when plugged into Eq. 3.27—give us the
highest probability of the held-out set. There are various ways to ﬁnd this optimal
set of λ s. One way is to use the EM algorithm, an iterative learning algorithm that
converges on locally optimal λ s (Jelinek and Mercer, 1980).

In a backoff n-gram model, if the n-gram we need has zero counts, we approx-
imate it by backing off to the (n-1)-gram. We continue backing off until we reach a
history that has some counts.

In order for a backoff model to give a correct probability distribution, we have
to discount the higher-order n-grams to save some probability mass for the lower
order n-grams. Just as with add-one smoothing, if the higher-order n-grams aren’t
discounted and we just used the undiscounted MLE probability, then as soon as we
replaced an n-gram which has zero probability with a lower-order n-gram, we would
be adding probability mass, and the total probability assigned to all possible strings
by the language model would be greater than 1! In addition to this explicit discount
factor, we’ll need a function α to distribute this probability mass to the lower order
n-grams.

This kind of backoff with discounting is also called Katz backoff. In Katz back-
off we rely on a discounted probability P∗ if we’ve seen this n-gram before (i.e., if
we have non-zero counts). Otherwise, we recursively back off to the Katz probabil-
ity for the shorter-history (n-1)-gram. The probability for a backoff n-gram PBO is
thus computed as follows:

PBO(wn|

wn

−

N+1:n

−

1) =




P∗(wn|
α(wn

−

wn

−

N+1:n

−

1),
1)PBO(wn|

N+1:n

−

wn

−

N+2:n

if C(wn

N+1:n) > 0

−

1),

−

otherwise.

(3.29)

Good-Turing



Katz backoff is often combined with a smoothing method called Good-Turing.
The combined Good-Turing backoff algorithm involves quite detailed computation
for estimating the Good-Turing smoothing and the P∗ and α values.

50 CHAPTER 3

• N-GRAM LANGUAGE MODELS

3.7 Huge Language Models and Stupid Backoff

By using text from the web or other enormous collections, it is possible to build
extremely large language models. The Web 1 Trillion 5-gram corpus released by
Google includes various large sets of n-grams, including 1-grams through 5-grams
from all the ﬁve-word sequences that appear at least 40 times from 1,024,908,267,229
words of text from publicly accessible Web pages in English (Franz and Brants,
2006). Google has also released Google Books Ngrams corpora with n-grams drawn
from their book collections, including another 800 billion tokens of n-grams from
Chinese, English, French, German, Hebrew, Italian, Russian, and Spanish (Lin et al.,
2012a). Smaller but more carefully curated n-gram corpora for English include
the million most frequent n-grams drawn from the COCA (Corpus of Contempo-
rary American English) 1 billion word corpus of American English (Davies, 2020).
COCA is a balanced corpus, meaning that it has roughly equal numbers of words
from different genres: web, newspapers, spoken conversation transcripts, ﬁction,
and so on, drawn from the period 1990-2019, and has the context of each n-gram as
well as labels for genre and provenance.

Some example 4-grams from the Google Web corpus:

4-gram
serve as the incoming
serve as the incubator
serve as the independent
serve as the index
serve as the indication
serve as the indicator
serve as the indicators

Count
92
99
794
223
72
120
45

Efﬁciency considerations are important when building language models that use
such large sets of n-grams. Rather than store each word as a string, it is generally
represented in memory as a 64-bit hash number, with the words themselves stored
on disk. Probabilities are generally quantized using only 4-8 bits (instead of 8-byte
ﬂoats), and n-grams are stored in reverse tries.

An n-gram language model can also be shrunk by pruning, for example only
storing n-grams with counts greater than some threshold (such as the count threshold
of 40 used for the Google n-gram release) or using entropy to prune less-important
n-grams (Stolcke, 1998). Another option is to build approximate language models
using techniques like Bloom ﬁlters (Talbot and Osborne 2007, Church et al. 2007).
Finally, efﬁcient language model toolkits like KenLM (Heaﬁeld 2011, Heaﬁeld et al.
2013) use sorted arrays, efﬁciently combine probabilities and backoffs in a single
value, and use merge sorts to efﬁciently build the probability tables in a minimal
number of passes through a large corpus.

Although with these toolkits it is possible to build web-scale language models
using advanced smoothing algorithms like the Kneser-Ney algorithm we will see in
Section 3.8, Brants et al. (2007) show that with very large language models a much
simpler algorithm may be sufﬁcient. The algorithm is called stupid backoff. Stupid
backoff gives up the idea of trying to make the language model a true probability dis-
tribution. There is no discounting of the higher-order probabilities. If a higher-order
n-gram has a zero count, we simply backoff to a lower order n-gram, weighed by a
ﬁxed (context-independent) weight. This algorithm does not produce a probability

Bloom ﬁlters

stupid backoff

3.8

• ADVANCED: KNESER-NEY SMOOTHING

51

distribution, so we’ll follow Brants et al. (2007) in referring to it as S:

count(wi
count(wi
λ S(wi|
wi

N+1 : i)
−
1)
N+1 : i
−
1)




S(wi|

wi

N+1 : i

1) =

−

−

−
N+2 : i
−
The backoff terminates in the unigram, which has score S(w) = count(w)
(2007) ﬁnd that a value of 0.4 worked well for λ .

otherwise



−

N

if count(wi

N+1 : i) > 0

−

(3.30)

. Brants et al.

3.8 Advanced: Kneser-Ney Smoothing

Kneser-Ney

A popular advanced n-gram smoothing method is the interpolated Kneser-Ney al-
gorithm (Kneser and Ney 1995, Chen and Goodman 1998).

3.8.1 Absolute Discounting

Kneser-Ney has its roots in a method called absolute discounting. Recall that dis-
counting of the counts for frequent n-grams is necessary to save some probability
mass for the smoothing algorithm to distribute to the unseen n-grams.

To see this, we can use a clever idea from Church and Gale (1991). Consider
an n-gram that has count 4. We need to discount this count by some amount. But
how much should we discount it? Church and Gale’s clever idea was to look at a
held-out corpus and just see what the count is for all those bigrams that had count
4 in the training set. They computed a bigram grammar from 22 million words of
AP newswire and then checked the counts of each of these bigrams in another 22
million words. On average, a bigram that occurred 4 times in the ﬁrst 22 million
words occurred 3.23 times in the next 22 million words. Fig. 3.9 from Church and
Gale (1991) shows these counts for bigrams with c from 0 to 9.

Bigram count in
training set
0
1
2
3
4
5
6
7
8
9

Bigram count in
heldout set
0.0000270
0.448
1.25
2.24
3.23
4.21
5.23
6.21
7.21
8.26

Figure 3.9 For all bigrams in 22 million words of AP newswire of count 0, 1, 2,...,9, the
counts of these bigrams in a held-out corpus also of 22 million words.

absolute
discounting

Notice in Fig. 3.9 that except for the held-out counts for 0 and 1, all the other
bigram counts in the held-out set could be estimated pretty well by just subtracting
0.75 from the count in the training set! Absolute discounting formalizes this intu-
ition by subtracting a ﬁxed (absolute) discount d from each count. The intuition is
that since we have good estimates already for the very high counts, a small discount

52 CHAPTER 3

• N-GRAM LANGUAGE MODELS

d won’t affect them much. It will mainly modify the smaller counts, for which we
don’t necessarily trust the estimate anyway, and Fig. 3.9 suggests that in practice this
discount is actually a good one for bigrams with counts 2 through 9. The equation
for interpolated absolute discounting applied to bigrams:

PAbsoluteDiscounting(wi|

wi

−

1) =

C(wi

1wi)
−
v C(wi

d
−
1 v)

−

+ λ (wi

1)P(wi)

−

(3.31)

The ﬁrst term is the discounted bigram, with 0
1, and the second term is the
(cid:80)
unigram with an interpolation weight λ . By inspection of Fig. 3.9, it looks like just
setting all the d values to .75 would work very well, or perhaps keeping a separate
second discount value of 0.5 for the bigrams with counts of 1. There are principled
methods for setting d; for example, Ney et al. (1994) set d as a function of n1 and
n2, the number of unigrams that have a count of 1 and a count of 2, respectively:

≤

≤

d

d =

n1
n1 + 2n2

(3.32)

3.8.2 Kneser-Ney Discounting

Kneser-Ney discounting (Kneser and Ney, 1995) augments absolute discounting
with a more sophisticated way to handle the lower-order unigram distribution. Con-
sider the job of predicting the next word in this sentence, assuming we are interpo-
lating a bigram and a unigram model.

I can’t see without my reading

.

The word glasses seems much more likely to follow here than, say, the word
Kong, so we’d like our unigram model to prefer glasses. But in fact it’s Kong that is
more common, since Hong Kong is a very frequent word. A standard unigram model
will assign Kong a higher probability than glasses. We would like to capture the
intuition that although Kong is frequent, it is mainly only frequent in the phrase Hong
Kong, that is, after the word Hong. The word glasses has a much wider distribution.
In other words, instead of P(w), which answers the question “How likely is
w?”, we’d like to create a unigram model that we might call PCONTINUATION, which
answers the question “How likely is w to appear as a novel continuation?”. How can
we estimate this probability of seeing the word w as a novel continuation, in a new
unseen context? The Kneser-Ney intuition is to base our estimate of PCONTINUATION
on the number of different contexts word w has appeared in, that is, the number of
bigram types it completes. Every bigram type was a novel continuation the ﬁrst time
it was seen. We hypothesize that words that have appeared in more contexts in the
past are more likely to appear in some new context as well. The number of times a
word w appears as a novel continuation can be expressed as:

PCONTINUATION(w) ∝

v : C(vw) > 0

}|

|{

(3.33)

To turn this count into a probability, we normalize by the total number of word
bigram types. In summary:

PCONTINUATION(w) =

|{

v : C(vw) > 0
(u(cid:48), w(cid:48)) : C(u(cid:48)w(cid:48)) > 0

}|

|{

}|

(3.34)

An equivalent formulation based on a different metaphor is to use the number of
word types seen to precede w (Eq. 3.33 repeated):

PCONTINUATION(w) ∝

v : C(vw) > 0

}|

|{

(3.35)

3.8

• ADVANCED: KNESER-NEY SMOOTHING

53

normalized by the number of words preceding all words, as follows:

PCONTINUATION(w) = |{

v : C(vw) > 0

}|
v : C(vw(cid:48)) > 0

w(cid:48) |{

}|

(3.36)

(cid:80)
A frequent word (Kong) occurring in only one context (Hong) will have a low con-
tinuation probability.

The ﬁnal equation for Interpolated Kneser-Ney smoothing for bigrams is then:

Interpolated
Kneser-Ney

PKN(wi|

wi

1) =

−

max(C(wi

−
C(wi

1wi)
1)

−

d, 0)

−

+ λ (wi

1)PCONTINUATION(wi)
−

(3.37)

The λ is a normalizing constant that is used to distribute the probability mass we’ve
discounted:

λ (wi

1) =

−

d
v C(wi

1v) |{

−

w : C(wi

1w) > 0

−

}|

(3.38)

The ﬁrst term,

d
v C(wi

(cid:80)
, is the normalized discount (the discount d, 0

d

1v)

≤
1, was introduced in the absolute discounting section above). The second term,
1 or, equiva-
|{
lently, the number of word types that we discounted; in other words, the number of
times we applied the normalized discount.

, is the number of word types that can follow wi

(cid:80)
1w) > 0

w : C(wi

}|

≤

−

−

−

The general recursive formulation is as follows:

PKN(wi|

wi

n+1:i

−

1) =

−

max(cKN(w i
−
v cKN(wi

n+1: i)

d, 0)

−
1 v)

−

n+1:i

−

+ λ (wi

n+1:i

−

1)PKN(wi|

wi

−

−

n+2:i

1)

−

(3.39)

(cid:80)

where the deﬁnition of the count cKN depends on whether we are counting the
highest-order n-gram being interpolated (for example trigram if we are interpolating
trigram, bigram, and unigram) or one of the lower-order n-grams (bigram or unigram
if we are interpolating trigram, bigram, and unigram):

) =
cKN(
·

count(
)
for the highest order
·
)
continuationcount(
·

for lower orders

(cid:26)

(3.40)

The continuation count of a string
that string

.
·

is the number of unique single word contexts for

·

At the termination of the recursion, unigrams are interpolated with the uniform

distribution, where the parameter (cid:15) is the empty string:

PKN(w) =

max(cKN(w)

d, 0)

−
cKN(w(cid:48))

w(cid:48)

+ λ ((cid:15))

1
V

(3.41)

modiﬁed
Kneser-Ney

If we want to include an unknown word <UNK>, it’s just included as a regular vo-
cabulary entry with count zero, and hence its probability will be a lambda-weighted
uniform distribution λ ((cid:15))
V .

The best performing version of Kneser-Ney smoothing is called modiﬁed Kneser-

(cid:80)

Ney smoothing, and is due to Chen and Goodman (1998). Rather than use a single
ﬁxed discount d, modiﬁed Kneser-Ney uses three different discounts d1, d2, and
d3+ for n-grams with counts of 1, 2 and three or more, respectively. See Chen and
Goodman (1998, p. 19) or Heaﬁeld et al. (2013) for the details.

54 CHAPTER 3

• N-GRAM LANGUAGE MODELS

3.9 Advanced: Perplexity’s Relation to Entropy

We introduced perplexity in Section 3.3 as a way to evaluate n-gram models on
a test set. A better n-gram model is one that assigns a higher probability to the
test data, and perplexity is a normalized version of the probability of the test set.
The perplexity measure actually arises from the information-theoretic concept of
cross-entropy, which explains otherwise mysterious properties of perplexity (why
the inverse probability, for example?) and its relationship to entropy. Entropy is a
measure of information. Given a random variable X ranging over whatever we are
predicting (words, letters, parts of speech, the set of which we’ll call χ) and with a
particular probability function, call it p(x), the entropy of the random variable X is:

Entropy

H(X) =

−

χ
x
(cid:88)
∈

p(x) log2 p(x)

(3.42)

The log can, in principle, be computed in any base. If we use log base 2, the

resulting value of entropy will be measured in bits.

One intuitive way to think about entropy is as a lower bound on the number of
bits it would take to encode a certain decision or piece of information in the optimal
coding scheme.

Consider an example from the standard information theory textbook Cover and
Thomas (1991). Imagine that we want to place a bet on a horse race but it is too
far to go all the way to Yonkers Racetrack, so we’d like to send a short message to
the bookie to tell him which of the eight horses to bet on. One way to encode this
message is just to use the binary representation of the horse’s number as the code;
thus, horse 1 would be 001, horse 2 010, horse 3 011, and so on, with horse 8 coded
as 000. If we spend the whole day betting and each horse is coded with 3 bits, on
average we would be sending 3 bits per race.

Can we do better? Suppose that the spread is the actual distribution of the bets

placed and that we represent it as the prior probability of each horse as follows:

Horse 5 1
Horse 1 1
64
2
Horse 6 1
Horse 2 1
64
4
Horse 7 1
Horse 3 1
64
8
16 Horse 8 1
Horse 4 1
64

The entropy of the random variable X that ranges over horses gives us a lower

bound on the number of bits and is

H(X) =

i=8

p(i) log2 p(i)

−

(cid:88)i=1
=
1
2 log2
−
= 2 bits

1
2 −

1
4 log2

1
4 −

1
8 log2

1
8 −

1
16 log2

1
16 −

4( 1

64 log2

1
64 )

(3.43)

A code that averages 2 bits per race can be built with short encodings for more
probable horses, and longer encodings for less probable horses. For example, we
could encode the most likely horse with the code 0, and the remaining horses as 10,
then 110, 1110, 111100, 111101, 111110, and 111111.

3.9

• ADVANCED: PERPLEXITY’S RELATION TO ENTROPY

55

What if the horses are equally likely? We saw above that if we used an equal-
length binary code for the horse numbers, each horse took 3 bits to code, so the
average was 3.
Is the entropy the same? In this case each horse would have a
probability of 1

8 . The entropy of the choice of horses is then

H(X) =

i=8

−

(cid:88)i=1

1
8

log2

1
8

=

−

log2

1
8

= 3 bits

(3.44)

Until now we have been computing the entropy of a single variable. But most
of what we will use entropy for involves sequences. For a grammar, for example,
w1, w2, . . . , wn}
we will be computing the entropy of some sequence of words W =
.
One way to do this is to have a variable that ranges over sequences of words. For
example we can compute the entropy of a random variable that ranges over all ﬁnite
sequences of words of length n in some language L as follows:

{

H(w1, w2, . . . , wn) =

p(w1 : n) log p(w1 : n)

(3.45)

−

L
(cid:88)w1 : n∈
We could deﬁne the entropy rate (we could also think of this as the per-word

entropy) as the entropy of this sequence divided by the number of words:

1
n

H(w1 : n) =

1
n

−

L
(cid:88)w1 : n∈

p(w1 : n) log p(w1 : n)

(3.46)

But to measure the true entropy of a language, we need to consider sequences of
inﬁnite length. If we think of a language as a stochastic process L that produces a
sequence of words, and allow W to represent the sequence of words w1, . . . , wn, then
L’s entropy rate H(L) is deﬁned as

H(L) = lim
∞
n
→

1
n

H(w1, w2, . . . , wn)

=

lim
∞
n
→

−

p(w1, . . . , wn) log p(w1, . . . , wn)

(3.47)

1
n

L
(cid:88)W
∈

The Shannon-McMillan-Breiman theorem (Algoet and Cover 1988, Cover and
Thomas 1991) states that if the language is regular in certain ways (to be exact, if it
is both stationary and ergodic),

H(L) = lim
→

n

∞ −

1
n

log p(w1w2 . . . wn)

(3.48)

That is, we can take a single sequence that is long enough instead of summing
over all possible sequences. The intuition of the Shannon-McMillan-Breiman the-
orem is that a long-enough sequence of words will contain in it many other shorter
sequences and that each of these shorter sequences will reoccur in the longer se-
quence according to their probabilities.

A stochastic process is said to be stationary if the probabilities it assigns to a
sequence are invariant with respect to shifts in the time index. In other words, the
probability distribution for words at time t is the same as the probability distribution
at time t + 1. Markov models, and hence n-grams, are stationary. For example, in
a bigram, Pi is dependent only on Pi
1. So if we shift our time index by x, Pi+x is
still dependent on Pi+x
1. But natural language is not stationary, since as we show

−

−

entropy rate

Stationary

56 CHAPTER 3

• N-GRAM LANGUAGE MODELS

cross-entropy

in Appendix D, the probability of upcoming words can be dependent on events that
were arbitrarily distant and time dependent. Thus, our statistical models only give
an approximation to the correct distributions and entropies of natural language.

To summarize, by making some incorrect but convenient simplifying assump-
tions, we can compute the entropy of some stochastic process by taking a very long
sample of the output and computing its average log probability.

Now we are ready to introduce cross-entropy. The cross-entropy is useful when
we don’t know the actual probability distribution p that generated some data.
It
allows us to use some m, which is a model of p (i.e., an approximation to p). The
cross-entropy of m on p is deﬁned by

H(p, m) = lim
n
→

∞ −

1
n

L
(cid:88)W
∈

p(w1, . . . , wn) log m(w1, . . . , wn)

(3.49)

That is, we draw sequences according to the probability distribution p, but sum

the log of their probabilities according to m.

Again, following the Shannon-McMillan-Breiman theorem, for a stationary er-

godic process:

H(p, m) = lim
n
→

∞ −

1
n

log m(w1w2 . . . wn)

(3.50)

This means that, as for entropy, we can estimate the cross-entropy of a model
m on some distribution p by taking a single sequence that is long enough instead of
summing over all possible sequences.

What makes the cross-entropy useful is that the cross-entropy H(p, m) is an up-

per bound on the entropy H(p). For any model m:

H(p)

≤

H(p, m)

(3.51)

This means that we can use some simpliﬁed model m to help estimate the true en-
tropy of a sequence of symbols drawn according to probability p. The more accurate
m is, the closer the cross-entropy H(p, m) will be to the true entropy H(p). Thus,
the difference between H(p, m) and H(p) is a measure of how accurate a model is.
Between two models m1 and m2, the more accurate model will be the one with the
lower cross-entropy. (The cross-entropy can never be lower than the true entropy, so
a model cannot err by underestimating the true entropy.)

We are ﬁnally ready to see the relation between perplexity and cross-entropy
as we saw it in Eq. 3.50. Cross-entropy is deﬁned in the limit as the length of the
observed word sequence goes to inﬁnity. We will need an approximation to cross-
entropy, relying on a (sufﬁciently long) sequence of ﬁxed length. This approxima-
1) on a sequence of words
tion to the cross-entropy of a model M = P(wi|
W is

N+1 : i

wi

−

−

H(W ) =

1
N

−

log P(w1w2 . . . wN)

(3.52)

perplexity

The perplexity of a model P on a sequence of words W is now formally deﬁned as
2 raised to the power of this cross-entropy:

3.10

• SUMMARY

57

Perplexity(W ) = 2H(W )

= P(w1w2 . . . wN)−

1
N

= N
(cid:115)

1
P(w1w2 . . . wN)

N

= N
(cid:118)
(cid:117)
(cid:117)
(cid:116)

(cid:89)i=1

3.10 Summary

1
w1 . . . wi

1)

−

P(wi|

(3.53)

This chapter introduced language modeling and the n-gram, one of the most widely
used tools in language processing.

• Language models offer a way to assign a probability to a sentence or other

sequence of words, and to predict a word from preceding words.

• n-grams are Markov models that estimate words from a ﬁxed window of pre-
vious words. n-gram probabilities can be estimated by counting in a corpus
and normalizing (the maximum likelihood estimate).

• n-gram language models are evaluated extrinsically in some task, or intrinsi-

cally using perplexity.

• The perplexity of a test set according to a language model is the geometric

mean of the inverse test set probability computed by the model.

• Smoothing algorithms provide a more sophisticated way to estimate the prob-
ability of n-grams. Commonly used smoothing algorithms for n-grams rely on
lower-order n-gram counts through backoff or interpolation.

• Both backoff and interpolation require discounting to create a probability dis-

tribution.

• Kneser-Ney smoothing makes use of the probability of a word being a novel
continuation. The interpolated Kneser-Ney smoothing algorithm mixes a
discounted probability with a lower-order continuation probability.

Bibliographical and Historical Notes

The underlying mathematics of the n-gram was ﬁrst proposed by Markov (1913),
who used what are now called Markov chains (bigrams and trigrams) to predict
whether an upcoming letter in Pushkin’s Eugene Onegin would be a vowel or a con-
sonant. Markov classiﬁed 20,000 letters as V or C and computed the bigram and
trigram probability that a given letter would be a vowel given the previous one or
two letters. Shannon (1948) applied n-grams to compute approximations to English
word sequences. Based on Shannon’s work, Markov models were commonly used in
engineering, linguistic, and psychological work on modeling word sequences by the
1950s. In a series of extremely inﬂuential papers starting with Chomsky (1956) and
including Chomsky (1957) and Miller and Chomsky (1963), Noam Chomsky argued
that “ﬁnite-state Markov processes”, while a possibly useful engineering heuristic,

58 CHAPTER 3

• N-GRAM LANGUAGE MODELS

were incapable of being a complete cognitive model of human grammatical knowl-
edge. These arguments led many linguists and computational linguists to ignore
work in statistical modeling for decades.

The resurgence of n-gram models came from Fred Jelinek and colleagues at the
IBM Thomas J. Watson Research Center, who were inﬂuenced by Shannon, and
James Baker at CMU, who was inﬂuenced by the prior, classiﬁed work of Leonard
Baum and colleagues on these topics at labs like IDA. Independently these two labs
successfully used n-grams in their speech recognition systems at the same time
(Baker 1975b, Jelinek et al. 1975, Baker 1975a, Bahl et al. 1983, Jelinek 1990).
The terms “language model” and “perplexity” were ﬁrst used for this technology by
the IBM group. Jelinek and his colleagues used the term language model in pretty
modern way, to mean the entire set of linguistic inﬂuences on word sequence prob-
abilities, including grammar, semantics, discourse, and even speaker characteristics,
rather than just the particular n-gram model itself.

Add-one smoothing derives from Laplace’s 1812 law of succession and was ﬁrst
applied as an engineering solution to the zero frequency problem by Jeffreys (1948)
based on an earlier Add-K suggestion by Johnson (1932). Problems with the add-
one algorithm are summarized in Gale and Church (1994).

A wide variety of different language modeling and smoothing techniques were
proposed in the 80s and 90s, including Good-Turing discounting—ﬁrst applied to the
n-gram smoothing at IBM by Katz (N´adas 1984, Church and Gale 1991)— Witten-
Bell discounting (Witten and Bell, 1991), and varieties of class-based n-gram mod-
els that used information about word classes. Starting in the late 1990s, Chen and
Goodman performed a number of carefully controlled experiments comparing differ-
ent discounting algorithms, cache models, class-based models, and other language
model parameters (Chen and Goodman 1999, Goodman 2006, inter alia). They
showed the advantages of Modiﬁed Interpolated Kneser-Ney, which became the
standard baseline for n-gram language modeling, especially because they showed
that caches and class-based models provided only minor additional improvement.
SRILM (Stolcke, 2002) and KenLM (Heaﬁeld 2011, Heaﬁeld et al. 2013) are pub-
licly available toolkits for building n-gram language models.

Modern language modeling is more commonly done with neural network lan-
guage models, which solve the major problems with n-grams: the number of param-
eters increases exponentially as the n-gram order increases, and n-grams have no
way to generalize from training to test set. Neural language models instead project
words into a continuous space in which words with similar contexts have similar
representations. We’ll introduce feedforward language models (Bengio et al. 2006,
Schwenk 2007) in Chapter 7, recurrent language models (Mikolov, 2012) in Chap-
ter 9, and transformer-based large language models in Chapter 10.

class-based
n-gram

Exercises

3.1 Write out the equation for trigram probability estimation (modifying Eq. 3.11).
Now write out all the non-zero trigram probabilities for the I am Sam corpus
on page 35.

3.2 Calculate the probability of the sentence i want chinese food. Give two
probabilities, one using Fig. 3.2 and the ‘useful probabilities’ just below it on
page 37, and another using the add-1 smoothed table in Fig. 3.7. Assume the
additional add-1 smoothed probabilities P(i|<s>) = 0.19 and P(</s>|food) =
0.40.

EXERCISES

59

3.3 Which of the two probabilities you computed in the previous exercise is higher,

unsmoothed or smoothed? Explain why.

3.4 We are given the following corpus, modiﬁed from the one in the chapter:

<s> I am Sam </s>
<s> Sam I am </s>
<s> I am Sam </s>
<s> I do not like green eggs and Sam </s>

Using a bigram language model with add-one smoothing, what is P(Sam
am)? Include <s> and </s> in your counts just like any other token.
Suppose we didn’t use the end-symbol </s>. Train an unsmoothed bigram
grammar on the following training corpus without using the end-symbol </s>:

|

3.5

<s> a b
<s> b b
<s> b a
<s> a a

Demonstrate that your bigram model does not assign a single probability dis-
tribution across all sentence lengths by showing that the sum of the probability
of the four possible 2 word sentences over the alphabet
is 1.0, and the
sum of the probability of all possible 3 word sentences over the alphabet
is also 1.0.

a,b
}
{

a,b
}

{

3.6

Suppose we train a trigram language model with add-one smoothing on a
given corpus. The corpus contains V word types. Express a formula for esti-
mating P(w3
w1,w2), where w3 is a word which follows the bigram (w1,w2),
|
in terms of various n-gram counts and V. Use the notation c(w1,w2,w3) to
denote the number of times that trigram (w1,w2,w3) occurs in the corpus, and
so on for bigrams and unigrams.

3.7 We are given the following corpus, modiﬁed from the one in the chapter:

<s> I am Sam </s>
<s> Sam I am </s>
<s> I am Sam </s>
<s> I do not like green eggs and Sam </s>

If we use linear interpolation smoothing between a maximum-likelihood bi-
gram model and a maximum-likelihood unigram model with λ1 = 1
2 and λ2 =
1
am)? Include <s> and </s> in your counts just like any
2 , what is P(Sam
|
other token.

3.8 Write a program to compute unsmoothed unigrams and bigrams.

3.9 Run your n-gram program on two different small corpora of your choice (you
might use email text or newsgroups). Now compare the statistics of the two
corpora. What are the differences in the most common unigrams between the
two? How about interesting differences in bigrams?

3.10 Add an option to your program to generate random sentences.

3.11 Add an option to your program to compute the perplexity of a test set.

3.12 You are given a training set of 100 numbers that consists of 91 zeros and 1
each of the other digits 1-9. Now we see the following test set: 0 0 0 0 0 3 0 0
0 0. What is the unigram perplexity?

60 CHAPTER 4

• NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT

CHAPTER

4 Naive Bayes, Text Classiﬁca-

tion, and Sentiment

Classiﬁcation lies at the heart of both human and machine intelligence. Deciding
what letter, word, or image has been presented to our senses, recognizing faces
or voices, sorting mail, assigning grades to homeworks; these are all examples of
assigning a category to an input. The potential challenges of this task are highlighted
by the fabulist Jorge Luis Borges (1964), who imagined classifying animals into:

(a) those that belong to the Emperor, (b) embalmed ones, (c) those that
are trained, (d) suckling pigs, (e) mermaids, (f) fabulous ones, (g) stray
dogs, (h) those that are included in this classiﬁcation, (i) those that
tremble as if they were mad, (j) innumerable ones, (k) those drawn with
a very ﬁne camel’s hair brush, (l) others, (m) those that have just broken
a ﬂower vase, (n) those that resemble ﬂies from a distance.

Many language processing tasks involve classiﬁcation, although luckily our classes

are much easier to deﬁne than those of Borges. In this chapter we introduce the naive
Bayes algorithm and apply it to text categorization, the task of assigning a label or
category to an entire text or document.

We focus on one common text categorization task, sentiment analysis, the ex-
traction of sentiment, the positive or negative orientation that a writer expresses
toward some object. A review of a movie, book, or product on the web expresses the
author’s sentiment toward the product, while an editorial or political text expresses
sentiment toward a candidate or political action. Extracting consumer or public sen-
timent is thus relevant for ﬁelds from marketing to politics.

The simplest version of sentiment analysis is a binary classiﬁcation task, and
the words of the review provide excellent cues. Consider, for example, the follow-
ing phrases extracted from positive and negative reviews of movies and restaurants.
Words like great, richly, awesome, and pathetic, and awful and ridiculously are very
informative cues:

+ ...zany characters and richly applied satire, and some great plot twists

It was pathetic. The worst part about it was the boxing scenes...

−
+ ...awesome caramel sauce and sweet toasty almonds. I love this place!

...awful pizza and ridiculously overpriced...

−

Spam detection is another important commercial application, the binary clas-
siﬁcation task of assigning an email to one of the two classes spam or not-spam.
Many lexical and other features can be used to perform this classiﬁcation. For ex-
ample you might quite reasonably be suspicious of an email containing phrases like
“online pharmaceutical” or “WITHOUT ANY COST” or “Dear Winner”.

text
categorization

sentiment
analysis

spam detection

language id

authorship
attribution

Another thing we might want to know about a text is the language it’s written
in. Texts on social media, for example, can be in any number of languages and
we’ll need to apply different processing. The task of language id is thus the ﬁrst
step in most language processing pipelines. Related text classiﬁcation tasks like au-
thorship attribution— determining a text’s author— are also relevant to the digital
humanities, social sciences, and forensic linguistics.

4.1

• NAIVE BAYES CLASSIFIERS

61

Finally, one of the oldest tasks in text classiﬁcation is assigning a library sub-
ject category or topic label to a text. Deciding whether a research paper concerns
epidemiology or instead, perhaps, embryology, is an important component of infor-
mation retrieval. Various sets of subject categories exist, such as the MeSH (Medical
Subject Headings) thesaurus. In fact, as we will see, subject category classiﬁcation
is the task for which the naive Bayes algorithm was invented in 1961 Maron (1961).
Classiﬁcation is essential for tasks below the level of the document as well.
We’ve already seen period disambiguation (deciding if a period is the end of a sen-
tence or part of a word), and word tokenization (deciding if a character should be
a word boundary). Even language modeling can be viewed as classiﬁcation: each
word can be thought of as a class, and so predicting the next word is classifying the
context-so-far into a class for each next word. A part-of-speech tagger (Chapter 8)
classiﬁes each occurrence of a word in a sentence as, e.g., a noun or a verb.

The goal of classiﬁcation is to take a single observation, extract some useful
features, and thereby classify the observation into one of a set of discrete classes.
One method for classifying text is to use rules handwritten by humans. Handwrit-
ten rule-based classiﬁers can be components of state-of-the-art systems in language
processing. But rules can be fragile, as situations or data change over time, and for
some tasks humans aren’t necessarily good at coming up with the rules.

The most common way of doing text classiﬁcation in language processing is
instead via supervised machine learning, the subject of this chapter. In supervised
learning, we have a data set of input observations, each associated with some correct
output (a ‘supervision signal’). The goal of the algorithm is to learn how to map
from a new observation to a correct output.

supervised
machine
learning

y1, y2, ..., yM}
{

and return a predicted class y

Formally, the task of supervised classiﬁcation is to take an input x and a ﬁxed
set of output classes Y =
Y . For
text classiﬁcation, we’ll sometimes talk about c (for “class”) instead of y as our
output variable, and d (for “document”) instead of x as our input variable. In the
supervised situation we have a training set of N documents that have each been hand-
(d1, c1), ...., (dN, cN)
. Our goal is to learn a classiﬁer that is
labeled with a class:
}
{
C, where C is
capable of mapping from a new document d to its correct class c
some set of useful document classes. A probabilistic classiﬁer additionally will tell
us the probability of the observation being in the class. This full distribution over
the classes can be useful information for downstream decisions; avoiding making
discrete decisions early on can be useful when combining systems.

∈

∈

Many kinds of machine learning algorithms are used to build classiﬁers. This
chapter introduces naive Bayes; the following one introduces logistic regression.
These exemplify two ways of doing classiﬁcation. Generative classiﬁers like naive
Bayes build a model of how a class could generate some input data. Given an ob-
servation, they return the class most likely to have generated the observation. Dis-
criminative classiﬁers like logistic regression instead learn what features from the
input are most useful to discriminate between the different possible classes. While
discriminative systems are often more accurate and hence more commonly used,
generative classiﬁers still have a role.

4.1 Naive Bayes Classiﬁers

naive Bayes
classiﬁer

In this section we introduce the multinomial naive Bayes classiﬁer, so called be-
cause it is a Bayesian classiﬁer that makes a simplifying (naive) assumption about

62 CHAPTER 4

• NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT

bag of words

how the features interact.

The intuition of the classiﬁer is shown in Fig. 4.1. We represent a text document
as if it were a bag of words, that is, an unordered set of words with their position
ignored, keeping only their frequency in the document. In the example in the ﬁgure,
instead of representing the word order in all the phrases like “I love this movie” and
“I would recommend it”, we simply note that the word I occurred 5 times in the
entire excerpt, the word it 6 times, the words love, recommend, and movie once, and
so on.

Figure 4.1
words is ignored (the bag-of-words assumption) and we make use of the frequency of each word.

Intuition of the multinomial naive Bayes classiﬁer applied to a movie review. The position of the

Naive Bayes is a probabilistic classiﬁer, meaning that for a document d, out of
all classes c
C the classiﬁer returns the class ˆc which has the maximum posterior
probability given the document. In Eq. 4.1 we use the hat notation ˆ to mean “our
estimate of the correct class”.

∈

ˆ

Bayesian
inference

ˆc = argmax

P(c

c

C

d)
|

(4.1)

∈
This idea of Bayesian inference has been known since the work of Bayes (1763),
and was ﬁrst applied to text classiﬁcation by Mosteller and Wallace (1964). The
intuition of Bayesian classiﬁcation is to use Bayes’ rule to transform Eq. 4.1 into
other probabilities that have some useful properties. Bayes’ rule is presented in
y) into
Eq. 4.2; it gives us a way to break down any conditional probability P(x
|
three other probabilities:

P(x

y) =
|

x)P(x)
P(y
|
P(y)

We can then substitute Eq. 4.2 into Eq. 4.1 to get Eq. 4.3:

ˆc = argmax
c
∈

C

P(c

d) = argmax
|

C

c
∈

P(d

c)P(c)
|
P(d)

(4.2)

(4.3)

ititititititIIIIIloverecommendmoviethethethethetototoandandandseenseenyetwouldwithwhowhimsicalwhilewhenevertimessweetseveralscenessatiricalromanticofmanageshumorhavehappyfunfriendfairydialoguebutconventionsareanyoneadventurealwaysagainaboutI love this movie! It's sweet, but with satirical humor. The dialogue is great and the adventure scenes are fun... It manages to be whimsical and romantic while laughing at the conventions of the fairy tale genre. I would recommend it to just about anyone. I've seen it several times, and I'm always happy to see it again whenever I have a friend who hasn't seen it yet!it Ithetoandseenyetwouldwhimsicaltimessweetsatiricaladventuregenrefairyhumorhavegreat…6 54332111111111111…4.1

• NAIVE BAYES CLASSIFIERS

63

We can conveniently simplify Eq. 4.3 by dropping the denominator P(d). This
is possible because we will be computing P(d
for each possible class. But P(d)
doesn’t change for each class; we are always asking about the most likely class for
the same document d, which must have the same probability P(d). Thus, we can
choose the class that maximizes this simpler formula:

c)P(c)
|
P(d)

ˆc = argmax
c
∈

C

d) = argmax
P(c
|

P(d

c)P(c)
|

(4.4)

C

c
∈

We call Naive Bayes a generative model because we can read Eq. 4.4 as stating
a kind of implicit assumption about how a document is generated: ﬁrst a class is
sampled from P(c), and then the words are generated by sampling from P(d
c). (In
|
fact we could imagine generating artiﬁcial documents, or at least their word counts,
by following this process). We’ll say more about this intuition of generative models
in Chapter 5.

prior
probability
likelihood

To return to classiﬁcation: we compute the most probable class ˆc given some
document d by choosing the class which has the highest product of two probabilities:
c):
the prior probability of the class P(c) and the likelihood of the document P(d
|

likelihood

prior

c)
|
(cid:122) (cid:125)(cid:124) (cid:123)
Without loss of generalization, we can represent a document d as a set of features

ˆc = argmax
c
∈

(4.5)

P(c)

(cid:122)(cid:125)(cid:124)(cid:123)

P(d

C

f1, f2, ..., fn:

prior

ˆc = argmax
c

likelihood
c)
P( f1, f2, ...., fn|
(cid:125)(cid:124)
(cid:122)
Unfortunately, Eq. 4.6 is still too hard to compute directly: without some sim-
plifying assumptions, estimating the probability of every possible combination of
features (for example, every possible set of words and positions) would require huge
numbers of parameters and impossibly large training sets. Naive Bayes classiﬁers
therefore make two simplifying assumptions.

(4.6)

P(c)

(cid:122)(cid:125)(cid:124)(cid:123)

(cid:123)

C

∈

The ﬁrst is the bag-of-words assumption discussed intuitively above: we assume
position doesn’t matter, and that the word “love” has the same effect on classiﬁcation
whether it occurs as the 1st, 20th, or last word in the document. Thus we assume
that the features f1, f2, ..., fn only encode word identity and not position.

The second is commonly called the naive Bayes assumption: this is the condi-
c) are independent given

tional independence assumption that the probabilities P( fi|
the class c and hence can be ‘naively’ multiplied as follows:

naive Bayes
assumption

c)
c) = P( f1|
The ﬁnal equation for the class chosen by a naive Bayes classiﬁer is thus:

P( f1, f2, ...., fn|

c)
P( fn|

c)
P( f2|

...

·

·

·

cNB = argmax

C

c
∈

P(c)

P( f

c)
|

F
(cid:89)f
∈

(4.7)

(4.8)

To apply the naive Bayes classiﬁer to text, we need to consider word positions, by
simply walking an index through every word position in the document:

positions

all word positions in test document

←

cNB = argmax

c

C

∈

P(c)

c)
P(wi|

positions

(cid:89)i
∈

(4.9)

64 CHAPTER 4

• NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT

Naive Bayes calculations, like calculations for language modeling, are done in log
space, to avoid underﬂow and increase speed. Thus Eq. 4.9 is generally instead
expressed1 as

cNB = argmax

C

c
∈

log P(c) +

c)
log P(wi|

positions

(cid:88)i
∈

(4.10)

By considering features in log space, Eq. 4.10 computes the predicted class as a lin-
ear function of input features. Classiﬁers that use a linear combination of the inputs
to make a classiﬁcation decision —like naive Bayes and also logistic regression—
are called linear classiﬁers.

linear
classiﬁers

4.2 Training the Naive Bayes Classiﬁer

c)? Let’s ﬁrst consider the maxi-
How can we learn the probabilities P(c) and P( fi|
mum likelihood estimate. We’ll simply use the frequencies in the data. For the class
prior P(c) we ask what percentage of the documents in our training set are in each
class c. Let Nc be the number of documents in our training data with class c and
Ndoc be the total number of documents. Then:

ˆP(c) =

Nc
Ndoc

(4.11)

c), we’ll assume a feature is just the existence of a word
To learn the probability P( fi|
c), which we compute as
in the document’s bag of words, and so we’ll want P(wi|
the fraction of times the word wi appears among all words in all documents of topic
c. We ﬁrst concatenate all documents with category c into one big “category c” text.
Then we use the frequency of wi in this concatenated document to give a maximum
likelihood estimate of the probability:

ˆP(wi|

c) =

count(wi, c)

w

V count(w, c)
∈

(4.12)

Here the vocabulary V consists of the union of all the word types in all classes, not
just the words in one class c.

(cid:80)

There is a problem, however, with maximum likelihood training. Imagine we
are trying to estimate the likelihood of the word “fantastic” given class positive, but
suppose there are no training documents that both contain the word “fantastic” and
are classiﬁed as positive. Perhaps the word “fantastic” happens to occur (sarcasti-
cally?) in the class negative. In such a case the probability for this feature will be
zero:

ˆP(“fantastic”
positive) =
|

count(“fantastic”, positive)
V count(w, positive)
∈

w

= 0

(4.13)

(cid:80)
But since naive Bayes naively multiplies all the feature likelihoods together, zero
probabilities in the likelihood term for any class will cause the probability of the
class to be zero, no matter the other evidence!

The simplest solution is the add-one (Laplace) smoothing introduced in Chap-
ter 3. While Laplace smoothing is usually replaced by more sophisticated smoothing

1

In practice throughout this book, we’ll use log to mean natural log (ln) when the base is not speciﬁed.

4.2

• TRAINING THE NAIVE BAYES CLASSIFIER

65

algorithms in language modeling, it is commonly used in naive Bayes text catego-
rization:

ˆP(wi|

c) =

count(wi, c) + 1
V (count(w, c) + 1)
∈

w

=

count(wi, c) + 1
V count(w, c)
∈

+

w

V
|

|

(4.14)

(cid:80)

Note once again that it is crucial that the vocabulary V consists of the union of all the
word types in all classes, not just the words in one class c (try to convince yourself
why this must be true; see the exercise at the end of the chapter).

(cid:0)(cid:80)

(cid:1)

unknown word

stop words

What do we do about words that occur in our test data but are not in our vocab-
ulary at all because they did not occur in any training document in any class? The
solution for such unknown words is to ignore them—remove them from the test
document and not include any probability for them at all.

Finally, some systems choose to completely ignore another class of words: stop
words, very frequent words like the and a. This can be done by sorting the vocabu-
lary by frequency in the training set, and deﬁning the top 10–100 vocabulary entries
as stop words, or alternatively by using one of the many predeﬁned stop word lists
available online. Then each instance of these stop words is simply removed from
both training and test documents as if it had never occurred. In most text classiﬁca-
tion applications, however, using a stop word list doesn’t improve performance, and
so it is more common to make use of the entire vocabulary and not use a stop word
list.

Fig. 4.2 shows the ﬁnal algorithm.

function TRAIN NAIVE BAYES(D, C) returns log P(c) and log P(w

c)
|

# Calculate P(c) terms

∈

for each class c

C
Ndoc = number of documents in D
Nc = number of documents from D in class c
logprior[c]

log

Nc
Ndoc

←
vocabulary of D

V
bigdoc[c]
←
for each word w in V

←

append(d) for d

count(w,c)

←

# of occurrences of w in bigdoc[c]

loglikelihood[w,c]

log

←

return logprior, loglikelihood, V

(cid:80)

∈

D with class c

# Calculate P(w

c) terms
|

count(w, c) + 1
w(cid:48) in V (count (w(cid:48), c) + 1)

function TEST NAIVE BAYES(testdoc, logprior, loglikelihood, C, V) returns best c

for each class c

C
∈
logprior[c]

←

sum[c]
for each position i in testdoc
testdoc[i]

word
←
if word

V

∈
sum[c]
return argmaxc sum[c]

←

sum[c]+ loglikelihood[word,c]

Figure 4.2 The naive Bayes algorithm, using add-1 smoothing. To use add-α smoothing
instead, change the +1 to +α for loglikelihood counts in training.

66 CHAPTER 4

• NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT

4.3 Worked example

Let’s walk through an example of training and testing naive Bayes with add-one
smoothing. We’ll use a sentiment analysis domain with the two classes positive
(+) and negative (-), and take the following miniature training and test documents
simpliﬁed from actual movie reviews.

Cat

Documents

Training -
-
-
+
+
?

Test

just plain boring
entirely predictable and lacks energy
no surprises and very few laughs
very powerful
the most fun ﬁlm of the summer
predictable with no fun

The prior P(c) for the two classes is computed via Eq. 4.11 as Nc
Ndoc

:

P(

) =

−

3
5

P(+) =

2
5

The word with doesn’t occur in the training set, so we drop it completely (as
mentioned above, we don’t use unknown word models for naive Bayes). The like-
lihoods from the training set for the remaining three words “predictable”, “no”, and
“fun”, are as follows, from Eq. 4.14 (computing the probabilities for the remainder
of the words in the training set is left as an exercise for the reader):

P(“predictable”

) =

|−

P(“no”

) =

|−

P(“fun”

) =

|−

1 + 1
14 + 20
1 + 1
14 + 20
0 + 1
14 + 20

P(“no”

+) =
P(“predictable”
|
0 + 1
9 + 20
1 + 1
9 + 20

+) =
|

+) =
|

P(“fun”

0 + 1
9 + 20

For the test sentence S = “predictable with no fun”, after removing the word ‘with’,
the chosen class, via Eq. 4.9, is therefore computed as follows:

P(

)P(S

−

) =

|−

P(+)P(S

+) =
|

2

1

3
5 ×
2
5 ×

×

2
1
343 = 6.1
×
1
2
293 = 3.2
×

×

5
10−

5
10−

×

×

The model thus predicts the class negative for the test sentence.

4.4 Optimizing for Sentiment Analysis

While standard naive Bayes text classiﬁcation can work well for sentiment analysis,
some small changes are generally employed that improve performance.

First, for sentiment classiﬁcation and a number of other text classiﬁcation tasks,
whether a word occurs or not seems to matter more than its frequency. Thus it often
improves performance to clip the word counts in each document at 1 (see the end

4.4

• OPTIMIZING FOR SENTIMENT ANALYSIS

67

binary naive
Bayes

of the chapter for pointers to these results). This variant is called binary multino-
mial naive Bayes or binary naive Bayes. The variant uses the same algorithm as
in Fig. 4.2 except that for each document we remove all duplicate words before con-
catenating them into the single big document during training and we also remove
duplicate words from test documents. Fig. 4.3 shows an example in which a set
of four documents (shortened and text-normalized for this example) are remapped
to binary, with the modiﬁed counts shown in the table on the right. The example
is worked without add-1 smoothing to make the differences clearer. Note that the
results counts need not be 1; the word great has a count of 2 even for binary naive
Bayes, because it appears in multiple documents.

Four original documents:

−

it was pathetic the worst part was the
boxing scenes
no plot twists or great scenes
−
+ and satire and great plot twists
+ great scenes great ﬁlm

After per-document binarization:

−

it was pathetic the worst part boxing
scenes
no plot twists or great scenes

−
+ and satire great plot twists
+ great scenes ﬁlm

NB

Binary
Counts Counts
+
2
and
0
boxing
1
ﬁlm
3
great
0
it
0
no
0
or
part
0
pathetic 0
1
plot
1
satire
1
scenes
0
the
1
twists
0
was
0
worst

+
1
0
1
2
0
0
0
0
0
1
1
1
0
1
0
0

−
0
1
0
1
1
1
1
1
1
1
0
2
2
1
2
1

−
0
1
0
1
1
1
1
1
1
1
0
2
1
1
1
1

Figure 4.3 An example of binarization for the binary naive Bayes algorithm.

A second important addition commonly made when doing text classiﬁcation for
sentiment is to deal with negation. Consider the difference between I really like this
movie (positive) and I didn’t like this movie (negative). The negation expressed by
didn’t completely alters the inferences we draw from the predicate like. Similarly,
negation can modify a negative word to produce a positive review (don’t dismiss this
ﬁlm, doesn’t let us get bored).

A very simple baseline that is commonly used in sentiment analysis to deal with
negation is the following: during text normalization, prepend the preﬁx NOT to
every word after a token of logical negation (n’t, not, no, never) until the next punc-
tuation mark. Thus the phrase

didn’t like this movie , but I

becomes

didn’t NOT_like NOT_this NOT_movie , but I

Newly formed ‘words’ like NOT like, NOT recommend will thus occur more of-
ten in negative document and act as cues for negative sentiment, while words like
NOT bored, NOT dismiss will acquire positive associations. We will return in Chap-
ter 20 to the use of parsing to deal more accurately with the scope relationship be-
tween these negation words and the predicates they modify, but this simple baseline
works quite well in practice.

68 CHAPTER 4

• NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT

sentiment
lexicons

General
Inquirer
LIWC

Finally, in some situations we might have insufﬁcient labeled training data to
train accurate naive Bayes classiﬁers using all words in the training set to estimate
positive and negative sentiment. In such cases we can instead derive the positive
and negative word features from sentiment lexicons, lists of words that are pre-
annotated with positive or negative sentiment. Four popular lexicons are the General
Inquirer (Stone et al., 1966), LIWC (Pennebaker et al., 2007), the opinion lexicon
of Hu and Liu (2004a) and the MPQA Subjectivity Lexicon (Wilson et al., 2005).

For example the MPQA subjectivity lexicon has 6885 words each marked for

whether it is strongly or weakly biased positive or negative. Some examples:

+ : admirable, beautiful, conﬁdent, dazzling, ecstatic, favor, glee, great
: awful, bad, bias, catastrophe, cheat, deny, envious, foul, harsh, hate

−

A common way to use lexicons in a naive Bayes classiﬁer is to add a feature
that is counted whenever a word from that lexicon occurs. Thus we might add a
feature called ‘this word occurs in the positive lexicon’, and treat all instances of
words in the lexicon as counts for that one feature, instead of counting each word
separately. Similarly, we might add as a second feature ‘this word occurs in the
negative lexicon’ of words in the negative lexicon. If we have lots of training data,
and if the test data matches the training data, using just two features won’t work as
well as using all the words. But when training data is sparse or not representative of
the test set, using dense lexicon features instead of sparse individual-word features
may generalize better.

We’ll return to this use of lexicons in Chapter 25, showing how these lexicons
can be learned automatically, and how they can be applied to many other tasks be-
yond sentiment classiﬁcation.

4.5 Naive Bayes for other text classiﬁcation tasks

spam detection

In the previous section we pointed out that naive Bayes doesn’t require that our
classiﬁer use all the words in the training data as features. In fact features in naive
Bayes can express any property of the input text we want.

Consider the task of spam detection, deciding if a particular piece of email is
an example of spam (unsolicited bulk email)—one of the ﬁrst applications of naive
Bayes to text classiﬁcation (Sahami et al., 1998).

A common solution here, rather than using all the words as individual features,
is to predeﬁne likely sets of words or phrases as features, combined with features
that are not purely linguistic. For example the open-source SpamAssassin tool2
predeﬁnes features like the phrase “one hundred percent guaranteed”, or the feature
mentions millions of dollars, which is a regular expression that matches suspiciously
large sums of money. But it also includes features like HTML has a low ratio of text
to image area, that aren’t purely linguistic and might require some sophisticated
computation, or totally non-linguistic features about, say, the path that the email
took to arrive. More sample SpamAssassin features:

• Email subject line is all capital letters
• Contains phrases of urgency like “urgent reply”
• Email subject line contains “online pharmaceutical”
• HTML has unbalanced “head” tags

2 https://spamassassin.apache.org

language id

4.6

• NAIVE BAYES AS A LANGUAGE MODEL

69

• Claims you can be removed from the list
For other tasks, like language id—determining what language a given piece
of text is written in—the most effective naive Bayes features are not words at all,
but character n-grams, 2-grams (‘zw’) 3-grams (‘nya’, ‘ Vo’), or 4-grams (‘ie z’,
‘thei’), or, even simpler byte n-grams, where instead of using the multibyte Unicode
character representations called codepoints, we just pretend everything is a string of
raw bytes. Because spaces count as a byte, byte n-grams can model statistics about
the beginning or ending of words. A widely used naive Bayes system, langid.py
(Lui and Baldwin, 2012) begins with all possible n-grams of lengths 1-4, using fea-
ture selection to winnow down to the most informative 7000 ﬁnal features.

Language ID systems are trained on multilingual text, such as Wikipedia (Wiki-
pedia text in 68 different languages was used in (Lui and Baldwin, 2011)), or newswire.
To make sure that this multilingual text correctly reﬂects different regions, dialects,
and socioeconomic classes, systems also add Twitter text in many languages geo-
tagged to many regions (important for getting world English dialects from countries
with large Anglophone populations like Nigeria or India), Bible and Quran transla-
tions, slang websites like Urban Dictionary, corpora of African American Vernacular
English (Blodgett et al., 2016), and so on (Jurgens et al., 2017).

4.6 Naive Bayes as a Language Model

As we saw in the previous section, naive Bayes classiﬁers can use any sort of fea-
ture: dictionaries, URLs, email addresses, network features, phrases, and so on. But
if, as in the previous section, we use only individual word features, and we use all
of the words in the text (not a subset), then naive Bayes has an important similar-
ity to language modeling. Speciﬁcally, a naive Bayes model can be viewed as a
set of class-speciﬁc unigram language models, in which the model for each class
instantiates a unigram language model.

Since the likelihood features from the naive Bayes model assign a probability to

each word P(word

c), the model also assigns a probability to each sentence:
|

P(s

c) =
|

c)
P(wi|

(4.15)

positions
Thus consider a naive Bayes model with the classes positive (+) and negative (-)

(cid:89)i
∈

and the following model parameters:

-)
|

P(w
w
0.1
I
love 0.1
this 0.01
fun 0.05
ﬁlm 0.1
...
...

+) P(w
|
0.2
0.001
0.01
0.005
0.1
...

Each of the two columns above instantiates a language model that can assign a

probability to the sentence “I love this fun ﬁlm”:

+) = 0.1
P(“I love this fun ﬁlm”
|
) = 0.2
P(“I love this fun ﬁlm”

|−

0.1
×
0.001

×

×

×
0.01

×
0.005

×

×

0.01

0.05

0.1 = 0.0000005

0.1 = .0000000010

×

70 CHAPTER 4

• NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT

As it happens, the positive model assigns a higher probability to the sentence:
neg). Note that this is just the likelihood part of the naive Bayes
pos) > P(s
P(s
|
|
model; once we multiply in the prior a full naive Bayes model might well make a
different classiﬁcation decision.

4.7 Evaluation: Precision, Recall, F-measure

gold labels

confusion
matrix

To introduce the methods for evaluating text classiﬁcation, let’s ﬁrst consider some
simple binary detection tasks. For example, in spam detection, our goal is to label
every text as being in the spam category (“positive”) or not in the spam category
(“negative”). For each item (email document) we therefore need to know whether
our system called it spam or not. We also need to know whether the email is actually
spam or not, i.e. the human-deﬁned labels for each document that we are trying to
match. We will refer to these human labels as the gold labels.

Or imagine you’re the CEO of the Delicious Pie Company and you need to know
what people are saying about your pies on social media, so you build a system that
detects tweets concerning Delicious Pie. Here the positive class is tweets about
Delicious Pie and the negative class is all other tweets.

In both cases, we need a metric for knowing how well our spam detector (or
pie-tweet-detector) is doing. To evaluate any system for detecting things, we start
by building a confusion matrix like the one shown in Fig. 4.4. A confusion matrix
is a table for visualizing how an algorithm performs with respect to the human gold
labels, using two dimensions (system output and gold labels), and each cell labeling
a set of possible outcomes. In the spam detection case, for example, true positives
are documents that are indeed spam (indicated by human-created gold labels) that
our system correctly said were spam. False negatives are documents that are indeed
spam but our system incorrectly labeled as non-spam.

To the bottom right of the table is the equation for accuracy, which asks what
percentage of all the observations (for the spam or pie examples that means all emails
or tweets) our system labeled correctly. Although accuracy might seem a natural
metric, we generally don’t use it for text classiﬁcation tasks. That’s because accuracy
doesn’t work well when the classes are unbalanced (as indeed they are with spam,
which is a large majority of email, or with tweets, which are mainly not about pie).

Figure 4.4 A confusion matrix for visualizing how well a binary classiﬁcation system per-
forms against gold standard labels.

To make this more explicit, imagine that we looked at a million tweets, and
let’s say that only 100 of them are discussing their love (or hatred) for our pie,

true positivefalse negativefalse positivetrue negativegold positivegold negativesystempositivesystemnegativegold standard labelssystemoutputlabelsrecall = tptp+fnprecision = tptp+fpaccuracy = tp+tntp+fp+tn+fn4.7

• EVALUATION: PRECISION, RECALL, F-MEASURE

71

while the other 999,900 are tweets about something completely unrelated. Imagine a
simple classiﬁer that stupidly classiﬁed every tweet as “not about pie”. This classiﬁer
would have 999,900 true negatives and only 100 false negatives for an accuracy of
999,900/1,000,000 or 99.99%! What an amazing accuracy level! Surely we should
be happy with this classiﬁer? But of course this fabulous ‘no pie’ classiﬁer would
be completely useless, since it wouldn’t ﬁnd a single one of the customer comments
we are looking for. In other words, accuracy is not a good metric when the goal is
to discover something that is rare, or at least not completely balanced in frequency,
which is a very common situation in the world.

That’s why instead of accuracy we generally turn to two other metrics shown in
Fig. 4.4: precision and recall. Precision measures the percentage of the items that
the system detected (i.e., the system labeled as positive) that are in fact positive (i.e.,
are positive according to the human gold labels). Precision is deﬁned as

precision

Precision =

true positives
true positives + false positives

recall

Recall measures the percentage of items actually present in the input that were

correctly identiﬁed by the system. Recall is deﬁned as

Recall =

true positives
true positives + false negatives

Precision and recall will help solve the problem with the useless “nothing is
pie” classiﬁer. This classiﬁer, despite having a fabulous accuracy of 99.99%, has
a terrible recall of 0 (since there are no true positives, and 100 false negatives, the
recall is 0/100). You should convince yourself that the precision at ﬁnding relevant
tweets is equally problematic. Thus precision and recall, unlike accuracy, emphasize
true positives: ﬁnding the things that we are supposed to be looking for.

There are many ways to deﬁne a single metric that incorporates aspects of both
precision and recall. The simplest of these combinations is the F-measure (van
Rijsbergen, 1975) , deﬁned as:

F-measure

Fβ =

(β 2 + 1)PR
β 2P + R

The β parameter differentially weights the importance of recall and precision,
based perhaps on the needs of an application. Values of β > 1 favor recall, while
values of β < 1 favor precision. When β = 1, precision and recall are equally bal-
anced; this is the most frequently used metric, and is called Fβ =1 or just F1:

F1

2PR
P + R
F-measure comes from a weighted harmonic mean of precision and recall. The
harmonic mean of a set of numbers is the reciprocal of the arithmetic mean of recip-
rocals:

(4.16)

F1 =

HarmonicMean(a1, a2, a3, a4, ..., an) =

n
+ 1
a3

1
a1

+ 1
a2

+ ... + 1
an

(4.17)

and hence F-measure is

F =

1
P + (1

α 1

α) 1
R

−

or

with β 2 =

(cid:18)

α

1

−
α

(cid:19)

F =

(β 2 + 1)PR
β 2P + R

(4.18)

72 CHAPTER 4

• NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT

Harmonic mean is used because the harmonic mean of two values is closer to the
minimum of the two values than the arithmetic mean is. Thus it weighs the lower of
the two numbers more heavily, which is more conservative in this situation.

4.7.1 Evaluating with more than two classes

Up to now we have been describing text classiﬁcation tasks with only two classes.
But lots of classiﬁcation tasks in language processing have more than two classes.
For sentiment analysis we generally have 3 classes (positive, negative, neutral) and
even more classes are common for tasks like part-of-speech tagging, word sense
disambiguation, semantic role labeling, emotion detection, and so on. Luckily the
naive Bayes algorithm is already a multi-class classiﬁcation algorithm.

Figure 4.5 Confusion matrix for a three-class categorization task, showing for each pair of
classes (c1, c2), how many documents from c1 were (in)correctly assigned to c2.

But we’ll need to slightly modify our deﬁnitions of precision and recall. Con-
sider the sample confusion matrix for a hypothetical 3-way one-of email catego-
rization decision (urgent, normal, spam) shown in Fig. 4.5. The matrix shows, for
example, that the system mistakenly labeled one spam document as urgent, and we
have shown how to compute a distinct precision and recall value for each class. In
order to derive a single metric that tells us how well the system is doing, we can com-
bine these values in two ways. In macroaveraging, we compute the performance
for each class, and then average over classes. In microaveraging, we collect the de-
cisions for all classes into a single confusion matrix, and then compute precision and
recall from that table. Fig. 4.6 shows the confusion matrix for each class separately,
and shows the computation of microaveraged and macroaveraged precision.

As the ﬁgure shows, a microaverage is dominated by the more frequent class (in
this case spam), since the counts are pooled. The macroaverage better reﬂects the
statistics of the smaller classes, and so is more appropriate when performance on all
the classes is equally important.

macroaveraging
microaveraging

4.8 Test sets and Cross-validation

The training and testing procedure for text classiﬁcation follows what we saw with
language modeling (Section 3.2): we use the training set to train the model, then use
the development test set (also called a devset) to perhaps tune some parameters,

development
test set
devset

851060urgentnormalgold labelssystemoutputrecallu = 88+5+3precisionu= 88+10+115030200spamurgentnormalspam3recalln = recalls = precisionn= 605+60+50precisions= 2003+30+2006010+60+302001+50+2004.9

• STATISTICAL SIGNIFICANCE TESTING

73

Figure 4.6 Separate confusion matrices for the 3 classes from the previous ﬁgure, showing the pooled confu-
sion matrix and the microaveraged and macroaveraged precision.

cross-validation

folds

10-fold
cross-validation

and in general decide what the best model is. Once we come up with what we think
is the best model, we run it on the (hitherto unseen) test set to report its performance.
While the use of a devset avoids overﬁtting the test set, having a ﬁxed train-
ing set, devset, and test set creates another problem: in order to save lots of data
for training, the test set (or devset) might not be large enough to be representative.
Wouldn’t it be better if we could somehow use all our data for training and still use
all our data for test? We can do this by cross-validation.

In cross-validation, we choose a number k, and partition our data into k disjoint
subsets called folds. Now we choose one of those k folds as a test set, train our
classiﬁer on the remaining k
1 folds, and then compute the error rate on the test
set. Then we repeat with another fold as the test set, again training on the other k
1
folds. We do this sampling process k times and average the test set error rate from
these k runs to get an average error rate. If we choose k = 10, we would train 10
different models (each on 90% of our data), test the model 10 times, and average
these 10 values. This is called 10-fold cross-validation.

−

−

The only problem with cross-validation is that because all the data is used for
testing, we need the whole corpus to be blind; we can’t examine any of the data
to suggest possible features and in general see what’s going on, because we’d be
peeking at the test set, and such cheating would cause us to overestimate the perfor-
mance of our system. However, looking at the corpus to understand what’s going
on is important in designing NLP systems! What to do? For this reason, it is com-
mon to create a ﬁxed training set and test set, then do 10-fold cross-validation inside
the training set, but compute error rate the normal way in the test set, as shown in
Fig. 4.7.

4.9 Statistical Signiﬁcance Testing

In building systems we often need to compare the performance of two systems. How
can we know if the new system we just built is better than our old one? Or better
than some other system described in the literature? This is the domain of statistical
hypothesis testing, and in this section we introduce tests for statistical signiﬁcance
for NLP classiﬁers, drawing especially on the work of Dror et al. (2020) and Berg-
Kirkpatrick et al. (2012).

Suppose we’re comparing the performance of classiﬁers A and B on a metric M

8811340trueurgenttruenotsystemurgentsystemnot604055212truenormaltruenotsystemnormalsystemnot200513383truespamtruenotsystemspamsystemnot2689999635trueyestruenosystemyessystemnoprecision =8+118= .42precision =200+33200= .86precision =60+5560= .52microaverageprecision268+99268= .73=macroaverageprecision3.42+.52+.86= .60=PooledClass 3: SpamClass 2: NormalClass 1: Urgent74 CHAPTER 4

• NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT

effect size

Figure 4.7

10-fold cross-validation

such as F1, or accuracy. Perhaps we want to know if our logistic regression senti-
ment classiﬁer A (Chapter 5) gets a higher F1 score than our naive Bayes sentiment
classiﬁer B on a particular test set x. Let’s call M(A, x) the score that system A gets
on test set x, and δ (x) the performance difference between A and B on x:

δ (x) = M(A, x)

M(B, x)

−

(4.19)

We would like to know if δ (x) > 0, meaning that our logistic regression classiﬁer
has a higher F1 than our naive Bayes classiﬁer on X. δ (x) is called the effect size;
a bigger δ means that A seems to be way better than B; a small δ means A seems to
be only a little better.

Why don’t we just check if δ (x) is positive? Suppose we do, and we ﬁnd that
the F1 score of A is higher than B’s by .04. Can we be certain that A is better? We
cannot! That’s because A might just be accidentally better than B on this particular x.
We need something more: we want to know if A’s superiority over B is likely to hold
again if we checked another test set x(cid:48), or under some other set of circumstances.

In the paradigm of statistical hypothesis testing, we test this by formalizing two

hypotheses.

H0 : δ (x)
0
H1 : δ (x) > 0

≤

(4.20)

null hypothesis

p-value

The hypothesis H0, called the null hypothesis, supposes that δ (x) is actually nega-
tive or zero, meaning that A is not better than B. We would like to know if we can
conﬁdently rule out this hypothesis, and instead support H1, that A is better.

We do this by creating a random variable X ranging over all test sets. Now we
ask how likely is it, if the null hypothesis H0 was correct, that among these test sets
we would encounter the value of δ (x) that we found, if we repeated the experiment
a great many times. We formalize this likelihood as the p-value: the probability,
assuming the null hypothesis H0 is true, of seeing the δ (x) that we saw or one even
greater

P(δ (X)

δ (x)
H0 is true)
|
So in our example, this p-value is the probability that we would see δ (x) assuming
A is not better than B. If δ (x) is huge (let’s say A has a very respectable F1 of .9
and B has a terrible F1 of only .2 on x), we might be surprised, since that would be

(4.21)

≥

Training Iterations13452678910DevDevDevDevDevDevDevDevDevDevTrainingTrainingTrainingTrainingTrainingTrainingTrainingTrainingTrainingTrainingTrainingTest SetTestingstatistically
signiﬁcant

approximate
randomization

paired

bootstrap test

bootstrapping

4.9

• STATISTICAL SIGNIFICANCE TESTING

75

extremely unlikely to occur if H0 were in fact true, and so the p-value would be low
(unlikely to have such a large δ if A is in fact not better than B). But if δ (x) is very
small, it might be less surprising to us even if H0 were true and A is not really better
than B, and so the p-value would be higher.

A very small p-value means that the difference we observed is very unlikely
under the null hypothesis, and we can reject the null hypothesis. What counts as very
small? It is common to use values like .05 or .01 as the thresholds. A value of .01
means that if the p-value (the probability of observing the δ we saw assuming H0 is
true) is less than .01, we reject the null hypothesis and assume that A is indeed better
than B. We say that a result (e.g., “A is better than B”) is statistically signiﬁcant if
the δ we saw has a probability that is below the threshold and we therefore reject
this null hypothesis.

How do we compute this probability we need for the p-value? In NLP we gen-
erally don’t use simple parametric tests like t-tests or ANOVAs that you might be
familiar with. Parametric tests make assumptions about the distributions of the test
statistic (such as normality) that don’t generally hold in our cases. So in NLP we
usually use non-parametric tests based on sampling: we artiﬁcially create many ver-
sions of the experimental setup. For example, if we had lots of different test sets x(cid:48)
we could just measure all the δ (x(cid:48)) for all the x(cid:48). That gives us a distribution. Now
we set a threshold (like .01) and if we see in this distribution that 99% or more of
those deltas are smaller than the delta we observed, i.e., that p-value(x)—the proba-
bility of seeing a δ (x) as big as the one we saw—is less than .01, then we can reject
the null hypothesis and agree that δ (x) was a sufﬁciently surprising difference and
A is really a better algorithm than B.

There are two common non-parametric tests used in NLP: approximate ran-
domization (Noreen, 1989) and the bootstrap test. We will describe bootstrap
below, showing the paired version of the test, which again is most common in NLP.
Paired tests are those in which we compare two sets of observations that are aligned:
each observation in one set can be paired with an observation in another. This hap-
pens naturally when we are comparing the performance of two systems on the same
test set; we can pair the performance of system A on an individual observation xi
with the performance of system B on the same xi.

4.9.1 The Paired Bootstrap Test

The bootstrap test (Efron and Tibshirani, 1993) can apply to any metric; from pre-
cision, recall, or F1 to the BLEU metric used in machine translation. The word
bootstrapping refers to repeatedly drawing large numbers of samples with replace-
ment (called bootstrap samples) from an original set. The intuition of the bootstrap
test is that we can create many virtual test sets from an observed test set by repeat-
edly sampling from it. The method only makes the assumption that the sample is
representative of the population.

Consider a tiny text classiﬁcation example with a test set x of 10 documents. The
ﬁrst row of Fig. 4.8 shows the results of two classiﬁers (A and B) on this test set,
with each document labeled by one of the four possibilities: (A and B both right,
both wrong, A right and B wrong, A wrong and B right); a slash through a letter
((cid:19)B) means that that classiﬁer got the answer wrong. On the ﬁrst document both A
and B get the correct class (AB), while on the second document A got it right but B
got it wrong (A(cid:19)B). If we assume for simplicity that our metric is accuracy, A has an
accuracy of .70 and B of .50, so δ (x) is .20.

Now we create a large number b (perhaps 105) of virtual test sets x(i), each of size

76 CHAPTER 4

• NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT

n = 10. Fig. 4.8 shows a couple of examples. To create each virtual test set x(i), we
repeatedly (n = 10 times) select a cell from row x with replacement. For example, to
create the ﬁrst cell of the ﬁrst virtual test set x(1), if we happened to randomly select
the second cell of the x row; we would copy the value A(cid:19)B into our new cell, and
move on to create the second cell of x(1), each time sampling (randomly choosing)
from the original x with replacement.

2

8

3

6

5

9

4

10 A% B% δ ()
1
7
AB A(cid:19)(cid:19)B AB (cid:0)(cid:0)AB A(cid:19)(cid:19)B (cid:0)(cid:0)AB A(cid:19)(cid:19)B AB (cid:0)(cid:0)A(cid:19)(cid:19)B A(cid:19)(cid:19)B .70 .50 .20
x
x(1) A(cid:19)(cid:19)B AB A(cid:19)(cid:19)B (cid:0)(cid:0)AB (cid:0)(cid:0)AB A(cid:19)(cid:19)B (cid:0)(cid:0)AB AB (cid:0)(cid:0)A(cid:19)(cid:19)B AB .60 .60 .00
x(2) A(cid:19)(cid:19)B AB (cid:0)(cid:0)A(cid:19)(cid:19)B (cid:0)(cid:0)AB (cid:0)(cid:0)AB AB (cid:0)(cid:0)AB A(cid:19)(cid:19)B AB AB .60 .70 -.10
...
x(b)
Figure 4.8 The paired bootstrap test: Examples of b pseudo test sets x(i) being created
from an initial true test set x. Each pseudo test set is created by sampling n = 10 times with
replacement; thus an individual sample is a single cell, a document with its gold label and
the correct or incorrect performance of classiﬁers A and B. Of course real test sets don’t have
only 10 examples, and b needs to be large as well.

Now that we have the b test sets, providing a sampling distribution, we can do
statistics on how often A has an accidental advantage. There are various ways to
compute this advantage; here we follow the version laid out in Berg-Kirkpatrick
et al. (2012). Assuming H0 (A isn’t better than B), we would expect that δ (X), esti-
mated over many test sets, would be zero; a much higher value would be surprising,
since H0 speciﬁcally assumes A isn’t better than B. To measure exactly how surpris-
ing our observed δ (x) is, we would in other circumstances compute the p-value by
counting over many test sets how often δ (x(i)) exceeds the expected zero value by
δ (x) or more:

p-value(x) =

b

1

δ (x(i))

1
b

(cid:88)i=1

δ (x)

0

≥

−

(cid:17)

(cid:16)
(We use the notation 1(x) to mean “1 if x is true, and 0 otherwise”.) However,
although it’s generally true that the expected value of δ (X) over many test sets,
(again assuming A isn’t better than B) is 0, this isn’t true for the bootstrapped test
sets we created. That’s because we didn’t draw these samples from a distribution
with 0 mean; we happened to create them from the original test set x, which happens
to be biased (by .20) in favor of A. So to measure how surprising is our observed
δ (x), we actually compute the p-value by counting over many test sets how often
δ (x(i)) exceeds the expected value of δ (x) by δ (x) or more:

p-value(x) =

1
b

b

1

δ (x(i))

(cid:88)i=1
b

(cid:16)

1

δ (x(i))

≥

=

1
b

δ (x)

−

≥

δ (x)

(cid:17)

2δ (x)

(4.22)

(cid:16)
So if for example we have 10,000 test sets x(i) and a threshold of .01, and in only 47
of the test sets do we ﬁnd that A is accidentally better δ (x(i))
2δ (x), the resulting
p-value of .0047 is smaller than .01, indicating that the delta we found, δ (x) is indeed

≥

(cid:17)

(cid:88)i=1

4.10

• AVOIDING HARMS IN CLASSIFICATION

77

sufﬁciently surprising and unlikely to have happened by accident, and we can reject
the null hypothesis and conclude A is better than B.

function BOOTSTRAP(test set x, num of samples b) returns p-value(x)

Calculate δ (x) # how much better does algorithm A do than B on x
s = 0
for i = 1 to b do

for j = 1 to n do

# Draw a bootstrap sample x(i) of size n

Select a member of x at random and add it to x(i)

Calculate δ (x(i)) # how much better does algorithm A do than B on x(i)
s
←
p-value(x)
return p-value(x)

# on what % of the b samples did algorithm A beat expectations?
# if very few did, our observed δ is probably not accidental

s + 1 if δ (x(i))
s
b

2δ (x)

≥

≈

Figure 4.9 A version of the paired bootstrap algorithm after Berg-Kirkpatrick et al. (2012).

The full algorithm for the bootstrap is shown in Fig. 4.9. It is given a test set x, a
number of samples b, and counts the percentage of the b bootstrap test sets in which
(i)) > 2δ (x). This percentage then acts as a one-sided empirical p-value
δ (x∗

4.10 Avoiding Harms in Classiﬁcation

representational
harms

toxicity
detection

It is important to avoid harms that may result from classiﬁers, harms that exist both
for naive Bayes classiﬁers and for the other classiﬁcation algorithms we introduce
in later chapters.

One class of harms is representational harms (Crawford 2017, Blodgett et al.
2020), harms caused by a system that demeans a social group, for example by per-
petuating negative stereotypes about them. For example Kiritchenko and Moham-
mad (2018) examined the performance of 200 sentiment analysis systems on pairs of
sentences that were identical except for containing either a common African Amer-
ican ﬁrst name (like Shaniqua) or a common European American ﬁrst name (like
Stephanie), chosen from the Caliskan et al. (2017) study discussed in Chapter 6.
They found that most systems assigned lower sentiment and more negative emotion
to sentences with African American names, reﬂecting and perpetuating stereotypes
that associate African Americans with negative emotions (Popp et al., 2003).

In other tasks classiﬁers may lead to both representational harms and other
harms, such as censorship. For example the important text classiﬁcation task of
toxicity detection is the task of detecting hate speech, abuse, harassment, or other
kinds of toxic language. While the goal of such classiﬁers is to help reduce societal
harm, toxicity classiﬁers can themselves cause harms. For example, researchers have
shown that some widely used toxicity classiﬁers incorrectly ﬂag as being toxic sen-
tences that are non-toxic but simply mention minority identities like women (Park
et al., 2018), blind people (Hutchinson et al., 2020) or gay people (Dixon et al., 2018;
Dias Oliva et al., 2021), or simply use linguistic features characteristic of varieties
like African-American Vernacular English (Sap et al. 2019, Davidson et al. 2019).
Such false positive errors, if employed by toxicity detection systems without human
oversight, could lead to the censoring of discourse by or about these groups.

These model problems can be caused by biases or other problems in the training

78 CHAPTER 4

• NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT

model card

data; in general, machine learning systems replicate and even amplify the biases
in their training data. But these problems can also be caused by the labels (for
example due to biases in the human labelers), by the resources used (like lexicons,
or model components like pretrained embeddings), or even by model architecture
(like what the model is trained to optimize). While the mitigation of these biases
(for example by carefully considering the training data sources) is an important area
of research, we currently don’t have general solutions. For this reason it’s important,
when introducing any NLP model, to study these kinds of factors and make them
clear. One way to do this is by releasing a model card (Mitchell et al., 2019) for
each version of a model. A model card documents a machine learning model with
information like:

• training algorithms and parameters
• training data sources, motivation, and preprocessing
• evaluation data sources, motivation, and preprocessing
• intended use and users
• model performance across different demographic or other groups and envi-

ronmental situations

4.11 Summary

This chapter introduced the naive Bayes model for classiﬁcation and applied it to
the text categorization task of sentiment analysis.

• Many language processing tasks can be viewed as tasks of classiﬁcation.
• Text categorization, in which an entire text is assigned a class from a ﬁnite set,
includes such tasks as sentiment analysis, spam detection, language identi-
ﬁcation, and authorship attribution.

• Sentiment analysis classiﬁes a text as reﬂecting the positive or negative orien-

tation (sentiment) that a writer expresses toward some object.

• Naive Bayes is a generative model that makes the bag-of-words assumption
(position doesn’t matter) and the conditional independence assumption (words
are conditionally independent of each other given the class)

• Naive Bayes with binarized features seems to work better for many text clas-

siﬁcation tasks.

• Classiﬁers are evaluated based on precision and recall.
• Classiﬁers are trained using distinct training, dev, and test sets, including the

use of cross-validation in the training set.

• Statistical signiﬁcance tests should be used to determine whether we can be

conﬁdent that one version of a classiﬁer is better than another.

• Designers of classiﬁers should carefully consider harms that may be caused
by the model, including its training data and other components, and report
model characteristics in a model card.

Bibliographical and Historical Notes

Multinomial naive Bayes text classiﬁcation was proposed by Maron (1961) at the
RAND Corporation for the task of assigning subject categories to journal abstracts.

BIBLIOGRAPHICAL AND HISTORICAL NOTES

79

His model introduced most of the features of the modern form presented here, ap-
proximating the classiﬁcation task with one-of categorization, and implementing
add-δ smoothing and information-based feature selection.

The conditional independence assumptions of naive Bayes and the idea of Bayes-
ian analysis of text seems to have arisen multiple times. The same year as Maron’s
paper, Minsky (1961) proposed a naive Bayes classiﬁer for vision and other arti-
ﬁcial intelligence problems, and Bayesian techniques were also applied to the text
classiﬁcation task of authorship attribution by Mosteller and Wallace (1963). It had
long been known that Alexander Hamilton, John Jay, and James Madison wrote
the anonymously-published Federalist papers in 1787–1788 to persuade New York
to ratify the United States Constitution. Yet although some of the 85 essays were
clearly attributable to one author or another, the authorship of 12 were in dispute
between Hamilton and Madison. Mosteller and Wallace (1963) trained a Bayesian
probabilistic model of the writing of Hamilton and another model on the writings
of Madison, then computed the maximum-likelihood author for each of the disputed
essays. Naive Bayes was ﬁrst applied to spam detection in Heckerman et al. (1998).
Metsis et al. (2006), Pang et al. (2002), and Wang and Manning (2012) show
that using boolean attributes with multinomial naive Bayes works better than full
counts. Binary multinomial naive Bayes is sometimes confused with another variant
of naive Bayes that also uses a binary representation of whether a term occurs in
a document: Multivariate Bernoulli naive Bayes. The Bernoulli variant instead
estimates P(w
c) as the fraction of documents that contain a term, and includes a
|
probability for whether a term is not in a document. McCallum and Nigam (1998)
and Wang and Manning (2012) show that the multivariate Bernoulli variant of naive
Bayes doesn’t work as well as the multinomial algorithm for sentiment or other text
tasks.

There are a variety of sources covering the many kinds of text classiﬁcation
tasks. For sentiment analysis see Pang and Lee (2008), and Liu and Zhang (2012).
Stamatatos (2009) surveys authorship attribute algorithms. On language identiﬁca-
tion see Jauhiainen et al. (2019); Jaech et al. (2016) is an important early neural
system. The task of newswire indexing was often used as a test case for text classi-
ﬁcation algorithms, based on the Reuters-21578 collection of newswire articles.

See Manning et al. (2008) and Aggarwal and Zhai (2012) on text classiﬁcation;
classiﬁcation in general is covered in machine learning textbooks (Hastie et al. 2001,
Witten and Frank 2005, Bishop 2006, Murphy 2012).

Non-parametric methods for computing statistical signiﬁcance were used ﬁrst in
NLP in the MUC competition (Chinchor et al., 1993), and even earlier in speech
recognition (Gillick and Cox 1989, Bisani and Ney 2004). Our description of the
bootstrap draws on the description in Berg-Kirkpatrick et al. (2012). Recent work
has focused on issues including multiple test sets and multiple metrics (Søgaard et al.
2014, Dror et al. 2017).

Feature selection is a method of removing features that are unlikely to generalize
well. Features are generally ranked by how informative they are about the classiﬁca-
tion decision. A very common metric, information gain, tells us how many bits of
information the presence of the word gives us for guessing the class. Other feature
selection metrics include χ 2, pointwise mutual information, and GINI index; see
Yang and Pedersen (1997) for a comparison and Guyon and Elisseeff (2003) for an
introduction to feature selection.

information
gain

80 CHAPTER 4

• NAIVE BAYES, TEXT CLASSIFICATION, AND SENTIMENT

Exercises

4.1 Assume the following likelihoods for each word being part of a positive or

negative movie review, and equal prior probabilities for each class.

pos neg
0.09 0.16
I
always 0.07 0.06
like
0.29 0.06
foreign 0.04 0.15
0.08 0.11
ﬁlms

What class will Naive bayes assign to the sentence “I always like foreign
ﬁlms.”?

4.2 Given the following short movie reviews, each labeled with a genre, either

comedy or action:

comedy

1. fun, couple, love, love
2. fast, furious, shoot action
3. couple, ﬂy, fast, fun, fun comedy
4. furious, shoot, shoot, fun action
5. ﬂy, fast, shoot, love action

and a new document D:

fast, couple, shoot, ﬂy

compute the most likely class for D. Assume a naive Bayes classiﬁer and use
add-1 smoothing for the likelihoods.

4.3

Train two models, multinomial naive Bayes and binarized naive Bayes, both
with add-1 smoothing, on the following document counts for key sentiment
words, with positive or negative class assigned as noted.

doc “good” “poor” “great” (class)
d1. 3
d2. 0
d3. 1
d4. 1
d5. 0

pos
pos
neg
neg
neg

0
1
3
5
2

3
2
0
2
0

Use both naive Bayes models to assign a class (pos or neg) to this sentence:

A good, good plot and great characters, but poor acting.

Recall from page 65 that with naive Bayes text classiﬁcation, we simply ig-
nore (throw out) any word that never occurred in the training document. (We
don’t throw out words that appear in some classes but not others; that’s what
add-one smoothing is for.) Do the two models agree or disagree?

CHAPTER

5 Logistic Regression

logistic
regression

“And how do you know that these ﬁne begonias are not of equal importance?”
Hercule Poirot, in Agatha Christie’s The Mysterious Affair at Styles

Detective stories are as littered with clues as texts are with words. Yet for the
poor reader it can be challenging to know how to weigh the author’s clues in order
to make the crucial classiﬁcation task: deciding whodunnit.

In this chapter we introduce an algorithm that is admirably suited for discovering
the link between features or cues and some particular outcome: logistic regression.
Indeed, logistic regression is one of the most important analytic tools in the social
and natural sciences. In natural language processing, logistic regression is the base-
line supervised machine learning algorithm for classiﬁcation, and also has a very
close relationship with neural networks. As we will see in Chapter 7, a neural net-
work can be viewed as a series of logistic regression classiﬁers stacked on top of
each other. Thus the classiﬁcation and machine learning techniques introduced here
will play an important role throughout the book.

Logistic regression can be used to classify an observation into one of two classes
(like ‘positive sentiment’ and ‘negative sentiment’), or into one of many classes.
Because the mathematics for the two-class case is simpler, we’ll describe this special
case of logistic regression ﬁrst in the next few sections, and then brieﬂy summarize
the use of multinomial logistic regression for more than two classes in Section 5.3.
We’ll introduce the mathematics of logistic regression in the next few sections.

But let’s begin with some high-level issues.

Generative and Discriminative Classiﬁers: The most important difference be-
tween naive Bayes and logistic regression is that logistic regression is a discrimina-
tive classiﬁer while naive Bayes is a generative classiﬁer.
These are two very different frameworks for how
to build a machine learning model. Consider a visual
metaphor:
imagine we’re trying to distinguish dog
images from cat images. A generative model would
have the goal of understanding what dogs look like
and what cats look like. You might literally ask such
a model to ‘generate’, i.e., draw, a dog. Given a test
image, the system then asks whether it’s the cat model or the dog model that better
ﬁts (is less surprised by) the image, and chooses that as its label.

A discriminative model, by contrast, is only try-
ing to learn to distinguish the classes (perhaps with-
out learning much about them). So maybe all the
dogs in the training data are wearing collars and the
cats aren’t. If that one feature neatly separates the
classes, the model is satisﬁed.
If you ask such a
model what it knows about cats all it can say is that
they don’t wear collars.

82 CHAPTER 5

• LOGISTIC REGRESSION

More formally, recall that the naive Bayes assigns a class c to a document d not

d) but by computing a likelihood and a prior
by directly computing P(c
|

ˆc = argmax
c

C

∈

likelihood

prior

P(d

c)
|
(cid:122) (cid:125)(cid:124) (cid:123)

P(c)

(cid:122)(cid:125)(cid:124)(cid:123)

(5.1)

generative
model

discriminative
model

A generative model like naive Bayes makes use of this likelihood term, which
expresses how to generate the features of a document if we knew it was of class c.

By contrast a discriminative model in this text categorization scenario attempts
d). Perhaps it will learn to assign a high weight to document
to directly compute P(c
|
features that directly improve its ability to discriminate between possible classes,
even if it couldn’t generate an example of one of the classes.

Components of a probabilistic machine learning classiﬁer: Like naive Bayes,
logistic regression is a probabilistic classiﬁer that makes use of supervised machine
learning. Machine learning classiﬁers require a training corpus of m input/output
pairs (x(i), y(i)). (We’ll use superscripts in parentheses to refer to individual instances
in the training set—for sentiment classiﬁcation each instance might be an individual
document to be classiﬁed.) A machine learning system for classiﬁcation then has
four components:

1. A feature representation of the input. For each input observation x(i), this
will be a vector of features [x1, x2, ..., xn]. We will generally refer to feature
i for input x( j) as x( j)
, sometimes simpliﬁed as xi, but we will also see the
notation fi, fi(x), or, for multiclass classiﬁcation, fi(c, x).

i

2. A classiﬁcation function that computes ˆy, the estimated class, via p(y

x). In
|
the next section we will introduce the sigmoid and softmax tools for classiﬁ-
cation.

3. An objective function for learning, usually involving minimizing error on

training examples. We will introduce the cross-entropy loss function.

4. An algorithm for optimizing the objective function. We introduce the stochas-

tic gradient descent algorithm.

Logistic regression has two phases:

training: We train the system (speciﬁcally the weights w and b) using stochastic

gradient descent and the cross-entropy loss.

x) and return the higher probability
test: Given a test example x we compute p(y
|

label y = 1 or y = 0.

5.1 The sigmoid function

The goal of binary logistic regression is to train a classiﬁer that can make a binary
decision about the class of a new input observation. Here we introduce the sigmoid
classiﬁer that will help us make this decision.

Consider a single input observation x, which we will represent by a vector of fea-
tures [x1, x2, ..., xn] (we’ll show sample features in the next subsection). The classiﬁer
output y can be 1 (meaning the observation is a member of the class) or 0 (the ob-
servation is not a member of the class). We want to know the probability P(y = 1
x)
|
that this observation is a member of the class. So perhaps the decision is “positive

5.1

• THE SIGMOID FUNCTION

83

sentiment” versus “negative sentiment”, the features represent counts of words in a
x) is the probability that the document has positive sentiment,
document, P(y = 1
|
x) is the probability that the document has negative sentiment.
and P(y = 0
|
Logistic regression solves this task by learning, from a training set, a vector of
weights and a bias term. Each weight wi is a real number, and is associated with one
of the input features xi. The weight wi represents how important that input feature
is to the classiﬁcation decision, and can be positive (providing evidence that the in-
stance being classiﬁed belongs in the positive class) or negative (providing evidence
that the instance being classiﬁed belongs in the negative class). Thus we might
expect in a sentiment task the word awesome to have a high positive weight, and
abysmal to have a very negative weight. The bias term, also called the intercept, is
another real number that’s added to the weighted inputs.

To make a decision on a test instance—after we’ve learned the weights in training—

the classiﬁer ﬁrst multiplies each xi by its weight wi, sums up the weighted features,
and adds the bias term b. The resulting single number z expresses the weighted sum
of the evidence for the class.

z =

n

wixi

(cid:32)

(cid:33)

+ b

(5.2)

(cid:88)i=1
In the rest of the book we’ll represent such sums using the dot product notation
from linear algebra. The dot product of two vectors a and b, written as a
b, is the
sum of the products of the corresponding elements of each vector. (Notice that we
represent vectors using the boldface notation b). Thus the following is an equivalent
formation to Eq. 5.2:

·

bias term

intercept

dot product

z = w

x + b

·

(5.3)

But note that nothing in Eq. 5.3 forces z to be a legal probability, that is, to lie
between 0 and 1. In fact, since weights are real-valued, the output might even be
negative; z ranges from

∞ to ∞.

−

Figure 5.1 The sigmoid function σ (z) = 1
1+e−
(0, 1). It is nearly linear around 0 but outlier values get squashed toward 0 or 1.

z takes a real value and maps it to the range

sigmoid

logistic
function

To create a probability, we’ll pass z through the sigmoid function, σ (z). The
sigmoid function (named because it looks like an s) is also called the logistic func-
tion, and gives logistic regression its name. The sigmoid has the following equation,
shown graphically in Fig. 5.1:

σ (z) =

1
1 + e−

z =

1

1 + exp (

z)

−

(5.4)

(For the rest of the book, we’ll use the notation exp(x) to mean ex.) The sigmoid
has a number of advantages; it takes a real-valued number and maps it into the range

84 CHAPTER 5

• LOGISTIC REGRESSION

(0, 1), which is just what we want for a probability. Because it is nearly linear around
0 but ﬂattens toward the ends, it tends to squash outlier values toward 0 or 1. And
it’s differentiable, which as we’ll see in Section 5.10 will be handy for learning.

We’re almost there. If we apply the sigmoid to the sum of the weighted features,
we get a number between 0 and 1. To make it a probability, we just need to make
sure that the two cases, p(y = 1) and p(y = 0), sum to 1. We can do this as follows:

P(y = 1) = σ (w

·

x + b)
1
(w

=

1 + exp (

x + b))

P(y = 0) = 1

σ (w

−

·

·
−
x + b)
1
(w
−
x + b))
·
(w

·

−

·

x + b))

x + b))

= 1

=

1 + exp (
(w

−
exp (
−
1 + exp (

The sigmoid function has the property

(5.5)

(5.6)

p :

(5.7)

−
so we could also have expressed P(y = 0) as σ (

−

1

σ (x) = σ (

x)

(w

x + b)).

−

·

logit

Finally, one terminological point. The input to the sigmoid function, the score
x + b from (5.3), is often called the logit. This is because the logit function

z = w
is the inverse of the sigmoid. The logit function is the log of the odds ratio p
1
−

·

logit(p) = σ −

1(p) = ln

p

−

1

p

Using the term logit for z is a way of reminding us that by using the sigmoid to turn
∞ to ∞) into a probability, we are implicitly interpreting z as
z (which ranges from
not just any real-valued number, but as speciﬁcally a log odds.

−

5.2 Classiﬁcation with Logistic Regression

The sigmoid function from the prior section thus gives us a way to take an instance
x).
x and compute the probability P(y = 1
|

How do we make a decision about which class to apply to a test instance x? For
x) is more than .5, and no otherwise.
a given x, we say yes if the probability P(y = 1
|
We call .5 the decision boundary:

decision
boundary

decision(x) =

1 if P(y = 1
x) > 0.5
|
0 otherwise

(cid:26)

Let’s have some examples of applying logistic regression as a classiﬁer for language
tasks.

5.2.1 Sentiment Classiﬁcation

Suppose we are doing binary sentiment classiﬁcation on movie review text, and
we would like to know whether to assign the sentiment class + or
to a review

−

5.2

• CLASSIFICATION WITH LOGISTIC REGRESSION

85

document doc. We’ll represent each input observation by the 6 features x1 . . . x6 of
the input shown in the following table; Fig. 5.2 shows the features in a sample mini
test document.

Var Deﬁnition
x1
x2

count(positive lexicon words
count(negative lexicon words

x3

x4

x5

x6

1 if “no”
∈
0 otherwise

doc

(cid:26)
count(1st and 2nd pronouns

1 if “!”
0 otherwise

∈

doc

(cid:26)
ln(word count of doc)

doc)
doc)

∈
∈

Value in Fig. 5.2
3
2

doc)

∈

1

3

0

ln(66) = 4.19

Let’s assume for the moment that we’ve already learned a real-valued weight for

Figure 5.2 A sample mini test document showing the extracted features in the vector x.

−

−

5.0,

each of these features, and that the 6 weights corresponding to the 6 features are
[2.5,
1.2, 0.5, 2.0, 0.7], while b = 0.1. (We’ll discuss in the next section how
the weights are learned.) The weight w1, for example indicates how important a
feature the number of positive lexicon words (great, nice, enjoyable, etc.)
is to
a positive sentiment decision, while w2 tells us the importance of negative lexicon
words. Note that w1 = 2.5 is positive, while w2 =
5.0, meaning that negative words
are negatively associated with a positive sentiment decision, and are about twice as
important as positive words.

−

x) and P(
Given these 6 features and the input review x, P(+
|

−|

x) can be com-

puted using Eq. 5.5:

x) = σ (w
x) = P(y = 1
p(+
|
|

·

x + b)
5.0,

−

= σ ([2.5,
= σ (.833)
= 0.70

1.2, 0.5, 2.0, 0.7]

−

·

[3, 2, 1, 3, 0, 4.19] + 0.1)

(5.8)

p(

x) = 1
x) = P(y = 0
|

−|

σ (w

x + b)

·

−
= 0.30

5.2.2 Other classiﬁcation tasks and features

period
disambiguation

Logistic regression is commonly applied to all sorts of NLP tasks, and any property
of the input can be a feature. Consider the task of period disambiguation: deciding

 It's hokey . There are virtually no surprises , and the writing is second-rate . So why was it so enjoyable  ? For one thing , the cast is great . Another nice touch is the music . I was overcome with the urge to get off the couch and start dancing .  It sucked me in , and it'll do the same to you  .x1=3x6=4.19x3=1x4=3x5=0x2=286 CHAPTER 5

• LOGISTIC REGRESSION

if a period is the end of a sentence or part of a word, by classifying each period
into one of two classes EOS (end-of-sentence) and not-EOS. We might use features
like x1 below expressing that the current word is lower case (perhaps with a positive
weight), or that the current word is in our abbreviations dictionary (“Prof.”) (perhaps
with a negative weight). A feature can also express a quite complex combination of
properties. For example a period following an upper case word is likely to be an
EOS, but if the word itself is St. and the previous word is capitalized, then the
period is likely part of a shortening of the word street.

x1 =

x2 =

x3 =

(cid:26)

(cid:26)

(cid:26)

1 if “Case(wi) = Lower”
0 otherwise
1 if “wi ∈
0 otherwise

AcronymDict”

1 if “wi = St. & Case(wi
0 otherwise

−

1) = Cap”

feature
interactions

feature
templates

standardize

z-score

Designing features: Features are generally designed by examining the training
set with an eye to linguistic intuitions and the linguistic literature on the domain. A
careful error analysis on the training set or devset of an early version of a system
often provides insights into features.

For some tasks it is especially helpful to build complex features that are combi-
nations of more primitive features. We saw such a feature for period disambiguation
above, where a period on the word St. was less likely to be the end of the sentence
if the previous word was capitalized. For logistic regression and naive Bayes these
combination features or feature interactions have to be designed by hand.

For many tasks (especially when feature values can reference speciﬁc words)
we’ll need large numbers of features. Often these are created automatically via fea-
ture templates, abstract speciﬁcations of features. For example a bigram template
for period disambiguation might create a feature for every pair of words that occurs
before a period in the training set. Thus the feature space is sparse, since we only
have to create a feature if that n-gram exists in that position in the training set. The
feature is generally created as a hash from the string descriptions. A user description
of a feature as, “bigram(American breakfast)” is hashed into a unique integer i that
becomes the feature number fi.

In order to avoid the extensive human effort of feature design, recent research in
NLP has focused on representation learning: ways to learn features automatically
in an unsupervised way from the input. We’ll introduce methods for representation
learning in Chapter 6 and Chapter 7.

Scaling input features: When different input features have extremely different
ranges of values, it’s common to rescale them so they have comparable ranges. We
standardize input values by centering them to result in a zero mean and a standard
deviation of one (this transformation is sometimes called the z-score). That is, if µi
is the mean of the values of feature xi across the m observations in the input dataset,
and σi is the standard deviation of the values of features xi across the input dataset,
we can replace each feature xi by a new feature x(cid:48)i computed as follows:

µi =

1
m

m

x( j)
i

(cid:88)j=1

m

(cid:88)j=1 (cid:16)

x( j)
i −

µi

2

(cid:17)

1
m

(cid:118)
(cid:117)
(cid:117)
(cid:116)

σi =

x(cid:48)i =

µi

xi −
σi

(5.9)

5.2

• CLASSIFICATION WITH LOGISTIC REGRESSION

87

normalize

Alternatively, we can normalize the input features values to lie between 0 and 1:

x(cid:48)i =

xi −
max(xi)

min(xi)

min(xi)

−

(5.10)

Having input data with comparable range is useful when comparing values across
features. Data scaling is especially important in large neural networks, since it helps
speed up gradient descent.

5.2.3 Processing many examples at once

We’ve shown the equations for logistic regression for a single example. But in prac-
tice we’ll of course want to process an entire test set with many examples. Let’s
suppose we have a test set consisting of m test examples each of which we’d like
to classify. We’ll continue to use the notation from page 82, in which a superscript
value in parentheses refers to the example index in some set of data (either for train-
ing or for test). So in this case each test example x(i) has a feature vector x(i),
1

i
One way to compute each output value ˆy(i) is just to have a for-loop, and compute

m. (As usual, we’ll represent vectors and matrices in bold.)

≤

≤

each test example one at a time:

foreach x(i)

in input [x(1), x(2), ..., x(m)]
x(i) + b)

y(i) = σ (w

(5.11)

·
For the ﬁrst 3 test examples, then, we would be separately computing the pre-

dicted ˆy(i) as follows:

P(y(1) = 1
P(y(2) = 1
P(y(3) = 1

x(1)) = σ (w
|
x(2)) = σ (w
|
x(3)) = σ (w
|

·

·

·

x(1) + b)
x(2) + b)
x(3) + b)

But it turns out that we can slightly modify our original equation Eq. 5.5 to do
this much more efﬁciently. We’ll use matrix arithmetic to assign a class to all the
examples with one matrix operation!

First, we’ll pack all the input feature vectors for each input x into a single input
matrix X, where each row i is a row vector consisting of the feature vector for in-
put example x(i) (i.e., the vector x(i)). Assuming each example has f features and
weights, X will therefore be a matrix of shape [m

f ], as follows:



X =



(5.12)

x(1)
2
x(2)
2
x(3)
2

x(1)
1
x(2)
1
x(3)
1
. . .







×
. . . x(1)
f
. . . x(2)
f
. . . x(3)
f







Now if we introduce b as a vector of length m which consists of the scalar bias
term b repeated m times, b = [b, b, ..., b], and ˆy = [ ˆy(1), ˆy(2)..., ˆy(m)] as the vector of
outputs (one scalar ˆy(i) for each input x(i) and its feature vector x(i)), and represent
the weight vector w as a column vector, we can compute all the outputs with a single
matrix multiplication and one addition:

y = Xw + b

(5.13)

88 CHAPTER 5

• LOGISTIC REGRESSION

You should convince yourself that Eq. 5.13 computes the same thing as our for-loop
in Eq. 5.11. For example ˆy(1), the ﬁrst entry of the output vector y, will correctly be:

ˆy(1) = [x(1)

1 , x(1)

2 , ..., x(1)

f

]

[w1, w2, ..., w f ] + b

·
Note that we had to reorder X and w from the order they appeared in in Eq. 5.5 to
make the multiplications come out properly. Here is Eq. 5.13 again with the shapes
shown:

(5.14)

y = X
(m
1)

×

(m

×

w + b
1) (m

×

×

f )( f

1)

(5.15)

Modern compilers and compute hardware can compute this matrix operation
very efﬁciently, making the computation much faster, which becomes important
when training or testing on very large datasets.

5.2.4 Choosing a classiﬁer

Logistic regression has a number of advantages over naive Bayes. Naive Bayes has
overly strong conditional independence assumptions. Consider two features which
are strongly correlated; in fact, imagine that we just add the same feature f1 twice.
Naive Bayes will treat both copies of f1 as if they were separate, multiplying them
both in, overestimating the evidence. By contrast, logistic regression is much more
robust to correlated features; if two features f1 and f2 are perfectly correlated, re-
gression will simply assign part of the weight to w1 and part to w2. Thus when
there are many correlated features, logistic regression will assign a more accurate
probability than naive Bayes. So logistic regression generally works better on larger
documents or datasets and is a common default.

Despite the less accurate probabilities, naive Bayes still often makes the correct
classiﬁcation decision. Furthermore, naive Bayes can work extremely well (some-
times even better than logistic regression) on very small datasets (Ng and Jordan,
2002) or short documents (Wang and Manning, 2012). Furthermore, naive Bayes is
easy to implement and very fast to train (there’s no optimization step). So it’s still a
reasonable approach to use in some situations.

5.3 Multinomial logistic regression

multinomial
logistic
regression

Sometimes we need more than two classes. Perhaps we might want to do 3-way
sentiment classiﬁcation (positive, negative, or neutral). Or we could be assigning
some of the labels we will introduce in Chapter 8, like the part of speech of a word
(choosing from 10, 30, or even 50 different parts of speech), or the named entity
type of a phrase (choosing from tags like person, location, organization).

In such cases we use multinomial logistic regression, also called softmax re-
gression (in older NLP literature you will sometimes see the name maxent classi-
ﬁer). In multinomial logistic regression we want to label each observation with a
class k from a set of K classes, under the stipulation that only one of these classes is
the correct one (sometimes called hard classiﬁcation; an observation can not be in
multiple classes). Let’s use the following representation: the output y for each input
x will be a vector of length K. If class c is the correct class, we’ll set yc = 1, and
set all the other elements of y to be 0, i.e., yc = 1 and y j = 0
= c. A vector like

j

∀

(cid:54)
5.3

• MULTINOMIAL LOGISTIC REGRESSION

89

this y, with one value=1 and the rest 0, is called a one-hot vector. The job of the
classiﬁer is to produce an estimate vector ˆy. For each class k, the value ˆyk will be
x).
the classiﬁer’s estimate of the probability p(yk = 1
|

5.3.1 Softmax

softmax

The multinomial logistic classiﬁer uses a generalization of the sigmoid, called the
x). The softmax function takes a vector
softmax function, to compute p(yk = 1
|
z = [z1, z2, ..., zK] of K arbitrary values and maps them to a probability distribution,
with each value in the range [0,1], and all the values summing to 1. Like the sigmoid,
it is an exponential function.

For a vector z of dimensionality K, the softmax is deﬁned as:

softmax(zi) =

exp (zi)
K
j=1 exp (z j)

1

i

≤

≤

K

(5.16)

The softmax of an input vector z = [z1, z2, ..., zK] is thus a vector itself:

(cid:80)

softmax(z) =

exp (z1)
K
i=1 exp (zi)

,

exp (z2)
K
i=1 exp (zi)

, ...,

exp (zK)
K
i=1 exp (zi) (cid:35)

(cid:34)

(5.17)

The denominator
Thus for example given a vector:

(cid:80)

(cid:80)

K
i=1 exp (zi) is used to normalize all the values into probabilities.

(cid:80)

(cid:80)

z = [0.6, 1.1,

1.5, 1.2, 3.2,

−

1.1]

−

the resulting (rounded) softmax(z) is

[0.055, 0.090, 0.006, 0.099, 0.74, 0.010]

Like the sigmoid, the softmax has the property of squashing values toward 0 or 1.
Thus if one of the inputs is larger than the others, it will tend to push its probability
toward 1, and suppress the probabilities of the smaller inputs.

Finally, note that, just as for the sigmoid, we refer to z, the vector of scores that

is the input to the softmax, as logits (see (5.7).

5.3.2 Applying softmax in logistic regression

When we apply softmax for logistic regression, the input will (just as for the sig-
moid) be the dot product between a weight vector w and an input vector x (plus a
bias). But now we’ll need separate weight vectors wk and bias bk for each of the K
classes. The probability of each of our output classes ˆyk can thus be computed as:

x) =
p(yk = 1
|

x + bk)

x + b j)

K

exp (wk ·
exp (w j ·

(cid:88)j=1

(5.18)

The form of Eq. 5.18 makes it seem that we would compute each output sep-
arately. Instead, it’s more common to set up the equation for more efﬁcient com-
putation by modern vector processing hardware. We’ll do this by representing the
set of K weight vectors as a weight matrix W and a bias vector b. Each row k of

90 CHAPTER 5

• LOGISTIC REGRESSION

W corresponds to the vector of weights wk. W thus has shape [K
f ], for K the
number of output classes and f the number of input features. The bias vector b has
one value for each of the K output classes. If we represent the weights in this way,
we can compute ˆy, the vector of output probabilities for each of the K classes, by a
single elegant equation:

×

ˆy = softmax(Wx + b)

(5.19)

If you work out the matrix arithmetic, you can see that the estimated score of
the ﬁrst output class ˆy1 (before we take the softmax) will correctly turn out to be
x + b1.
w1 ·
Fig. 5.3 shows an intuition of the role of the weight vector versus weight matrix
in the computation of the output class probabilities for binary versus multinomial
logistic regression.

Binary Logistic Regression

Multinomial Logistic Regression

Figure 5.3 Binary versus multinomial logistic regression. Binary logistic regression uses a
single weight vector w, and has a scalar output ˆy. In multinomial logistic regression we have
K separate weight vectors corresponding to the K classes, all packed into a single weight
matrix W, and a vector output ˆy.

w[f ⨉1]Outputsigmoid[1⨉f]Input wordsp(+) = 1- p(-)…y^xyInput featurevector [scalar]positive lexiconwords = 1count of “no” = 0wordcount=3x1x2x3xfdessert   was    greatWeight vectorW[f⨉1]Outputsoftmax[K⨉f]Input wordsp(+)…y1^y2^y3^xyInput featurevector [K⨉1]positive lexiconwords = 1count of “no” = 0wordcount=3x1x2x3xfdessert   was    greatp(-)p(neut)Weight matrixThese f red weightsare a row of W correspondingto weight vector w3,(= weights for class 3)5.4

• LEARNING IN LOGISTIC REGRESSION

91

5.3.3 Features in Multinomial Logistic Regression

Features in multinomial logistic regression act like features in binary logistic regres-
sion, with the difference mentioned above that we’ll need separate weight vectors
and biases for each of the K classes. Recall our binary exclamation point feature x5
from page 85:

x5 =

(cid:26)

1 if “!”
0 otherwise

∈

doc

In binary classiﬁcation a positive weight w5 on a feature inﬂuences the classiﬁer
toward y = 1 (positive sentiment) and a negative weight inﬂuences it toward y = 0
(negative sentiment) with the absolute value indicating how important the feature
is. For multinomial logistic regression, by contrast, with separate weights for each
class, a feature can be evidence for or against each individual class.

In 3-way multiclass sentiment classiﬁcation, for example, we must assign each
document one of the 3 classes +,
, or 0 (neutral). Now a feature related to excla-
mation marks might have a negative weight for 0 documents, and a positive weight
for + or

documents:

−

−

Feature Deﬁnition
1 if “!”
0 otherwise

f5(x)

∈

doc

(cid:26)

w5,+ w5,

−

3.5

3.1

w5,0

5.3

−

Because these feature weights are dependent both on the input text and the output
class, we sometimes make this dependence explicit and represent the features them-
selves as f (x, y): a function of both the input and the class. Using such a notation
f5(x) above could be represented as three features f5(x, +), f5(x,
), and f5(x, 0),
each of which has a single weight. We’ll use this kind of notation in our description
of the CRF in Chapter 8.

−

5.4 Learning in Logistic Regression

How are the parameters of the model, the weights w and bias b, learned? Logistic
regression is an instance of supervised classiﬁcation in which we know the correct
label y (either 0 or 1) for each observation x. What the system produces via Eq. 5.5
is ˆy, the system’s estimate of the true y. We want to learn parameters (meaning w
and b) that make ˆy for each training observation as close as possible to the true y.

This requires two components that we foreshadowed in the introduction to the
chapter. The ﬁrst is a metric for how close the current label ( ˆy) is to the true gold
label y. Rather than measure similarity, we usually talk about the opposite of this:
the distance between the system output and the gold output, and we call this distance
the loss function or the cost function. In the next section we’ll introduce the loss
function that is commonly used for logistic regression and also for neural networks,
the cross-entropy loss.

The second thing we need is an optimization algorithm for iteratively updating
the weights so as to minimize this loss function. The standard algorithm for this is
gradient descent; we’ll introduce the stochastic gradient descent algorithm in the
following section.

loss

92 CHAPTER 5

• LOGISTIC REGRESSION

We’ll describe these algorithms for the simpler case of binary logistic regres-
sion in the next two sections, and then turn to multinomial logistic regression in
Section 5.8.

5.5 The cross-entropy loss function

We need a loss function that expresses, for an observation x, how close the classiﬁer
x + b)) is to the correct output (y, which is 0 or 1). We’ll call this:
output ( ˆy = σ (w

·

L( ˆy, y) = How much ˆy differs from the true y

(5.20)

cross-entropy
loss

We do this via a loss function that prefers the correct class labels of the train-
ing examples to be more likely. This is called conditional maximum likelihood
estimation: we choose the parameters w, b that maximize the log probability of
the true y labels in the training data given the observations x. The resulting loss
function is the negative log likelihood loss, generally called the cross-entropy loss.
Let’s derive this loss function, applied to a single observation x. We’d like to
learn weights that maximize the probability of the correct label p(y
x). Since there
|
are only two discrete outcomes (1 or 0), this is a Bernoulli distribution, and we can
express the probability p(y
x) that our classiﬁer produces for one observation as the
|
following (keeping in mind that if y = 1, Eq. 5.21 simpliﬁes to ˆy; if y = 0, Eq. 5.21
simpliﬁes to 1

ˆy):

−

x) = ˆy y (1
p(y
|

−

y
ˆy)1
−

(5.21)

Now we take the log of both sides. This will turn out to be handy mathematically,
and doesn’t hurt us; whatever values maximize a probability will also maximize the
log of the probability:

log p(y

x) = log
|

ˆy y (1
−
= y log ˆy + (1
(cid:2)

y
ˆy)1
−
y) log(1
(cid:3)

−

ˆy)

−

(5.22)

Eq. 5.22 describes a log likelihood that should be maximized. In order to turn this
into a loss function (something that we need to minimize), we’ll just ﬂip the sign on
Eq. 5.22. The result is the cross-entropy loss LCE:

LCE( ˆy, y) =

x) =
log p(y
|

−

−

[y log ˆy + (1

y) log(1

ˆy)]

−

−

(5.23)

Finally, we can plug in the deﬁnition of ˆy = σ (w

x + b):

·

LCE( ˆy, y) =

[y log σ (w

x + b) + (1

y) log (1

σ (w

·

−

−

·

−

x + b))]

(5.24)

Let’s see if this loss function does the right thing for our example from Fig. 5.2. We
want the loss to be smaller if the model’s estimate is close to correct, and bigger if
the model is confused. So ﬁrst let’s suppose the correct gold label for the sentiment
example in Fig. 5.2 is positive, i.e., y = 1. In this case our model is doing well, since
from Eq. 5.8 it indeed gave the example a higher probability of being positive (.70)
than negative (.30). If we plug σ (w
x + b) = .70 and y = 1 into Eq. 5.24, the right
side of the equation drops out, leading to the following loss (we’ll use log to mean

·

natural log when the base is not speciﬁed):

5.6

• GRADIENT DESCENT

93

LCE( ˆy, y) =
=

=

=

[y log σ (w
[log σ (w

−

−

x + b) + (1
·
x + b)]
·
log(.70)
.36

−

y) log (1

σ (w

·

−

x + b))]

−

By contrast, let’s pretend instead that the example in Fig. 5.2 was actually negative,
i.e., y = 0 (perhaps the reviewer went on to say “But bottom line, the movie is
terrible! I beg you not to see it!”). In this case our model is confused and we’d want
x + b) = .31 from Eq. 5.8
the loss to be higher. Now if we plug y = 0 and 1
−
into Eq. 5.24, the left side of the equation drops out:

σ (w

·

LCE( ˆy, y) =
=

=

=

[y log σ (w

−

x + b)+(1

·

−

y) log (1

σ (w

x + b))]

−
[log (1
−
log (.30)

−
σ (w

·
x + b))]

·

−
1.2

Sure enough, the loss for the ﬁrst classiﬁer (.36) is less than the loss for the second
classiﬁer (1.2).

Why does minimizing this negative log probability do what we want? A perfect
classiﬁer would assign probability 1 to the correct outcome (y = 1 or y = 0) and
probability 0 to the incorrect outcome. That means if y equals 1, the higher ˆy is (the
closer it is to 1), the better the classiﬁer; the lower ˆy is (the closer it is to 0), the
ˆy is (closer to 1), the better
worse the classiﬁer. If y equals 0, instead, the higher 1
the classiﬁer. The negative log of ˆy (if the true y equals 1) or 1
ˆy (if the true y
equals 0) is a convenient loss metric since it goes from 0 (negative log of 1, no loss)
to inﬁnity (negative log of 0, inﬁnite loss). This loss function also ensures that as
the probability of the correct answer is maximized, the probability of the incorrect
answer is minimized; since the two sum to one, any increase in the probability of the
correct answer is coming at the expense of the incorrect answer. It’s called the cross-
entropy loss, because Eq. 5.22 is also the formula for the cross-entropy between the
true probability distribution y and our estimated distribution ˆy.

−

−

Now we know what we want to minimize; in the next section, we’ll see how to

ﬁnd the minimum.

5.6 Gradient Descent

Our goal with gradient descent is to ﬁnd the optimal weights: minimize the loss
function we’ve deﬁned for the model. In Eq. 5.25 below, we’ll explicitly represent
the fact that the loss function L is parameterized by the weights, which we’ll refer
to in machine learning in general as θ (in the case of logistic regression θ = w, b).
So the goal is to ﬁnd the set of weights which minimizes the loss function, averaged
over all examples:

ˆθ = argmin

θ

1
m

m

LCE( f (x(i); θ ), y(i))

(5.25)

(cid:88)i=1
How shall we ﬁnd the minimum of this (or any) loss function? Gradient descent is a
method that ﬁnds a minimum of a function by ﬁguring out in which direction (in the

94 CHAPTER 5

• LOGISTIC REGRESSION

convex

space of the parameters θ ) the function’s slope is rising the most steeply, and moving
in the opposite direction. The intuition is that if you are hiking in a canyon and trying
to descend most quickly down to the river at the bottom, you might look around
yourself 360 degrees, ﬁnd the direction where the ground is sloping the steepest,
and walk downhill in that direction.

For logistic regression, this loss function is conveniently convex. A convex func-
tion has at most one minimum; there are no local minima to get stuck in, so gradient
descent starting from any point is guaranteed to ﬁnd the minimum. (By contrast,
the loss for multi-layer neural networks is non-convex, and gradient descent may
get stuck in local minima for neural network training and never ﬁnd the global opti-
mum.)

Although the algorithm (and the concept of gradient) are designed for direction
vectors, let’s ﬁrst consider a visualization of the case where the parameter of our
system is just a single scalar w, shown in Fig. 5.4.

Given a random initialization of w at some value w1, and assuming the loss
function L happened to have the shape in Fig. 5.4, we need the algorithm to tell us
whether at the next iteration we should move left (making w2 smaller than w1) or
right (making w2 bigger than w1) to reach the minimum.

Figure 5.4 The ﬁrst step in iteratively ﬁnding the minimum of this loss function, by moving
w in the reverse direction from the slope of the function. Since the slope is negative, we need
to move w in a positive direction, to the right. Here superscripts are used for learning steps,
so w1 means the initial value of w (which is 0), w2 the value at the second step, and so on.

gradient

learning rate

The gradient descent algorithm answers this question by ﬁnding the gradient
of the loss function at the current point and moving in the opposite direction. The
gradient of a function of many variables is a vector pointing in the direction of the
greatest increase in a function. The gradient is a multi-variable generalization of the
slope, so for a function of one variable like the one in Fig. 5.4, we can informally
think of the gradient as the slope. The dotted line in Fig. 5.4 shows the slope of this
hypothetical loss function at point w = w1. You can see that the slope of this dotted
line is negative. Thus to ﬁnd the minimum, gradient descent tells us to go in the
opposite direction: moving w in a positive direction.

The magnitude of the amount to move in gradient descent is the value of the
slope d
dw L( f (x; w), y) weighted by a learning rate η. A higher (faster) learning
rate means that we should move w more on each step. The change we make in our
parameter is the learning rate times the gradient (or the slope, in our single-variable

wLoss0w1wminslope of loss at w1 is negative(goal)one stepof gradientdescent5.6

• GRADIENT DESCENT

95

example):

wt+1 = wt

d
dw

η

−

L( f (x; w), y)

(5.26)

Now let’s extend the intuition from a function of one scalar variable w to many
variables, because we don’t just want to move left or right, we want to know where
in the N-dimensional space (of the N parameters that make up θ ) we should move.
The gradient is just such a vector; it expresses the directional components of the
sharpest slope along each of those N dimensions. If we’re just imagining two weight
dimensions (say for one weight w and one bias b), the gradient might be a vector with
two orthogonal components, each of which tells us how much the ground slopes in
the w dimension and in the b dimension. Fig. 5.5 shows a visualization of the value
of a 2-dimensional gradient vector taken at the red point.

In an actual logistic regression, the parameter vector w is much longer than 1 or
2, since the input feature vector x can be quite long, and we need a weight wi for
each xi. For each dimension/variable wi in w (plus the bias b), the gradient will have
a component that tells us the slope with respect to that variable. In each dimension
wi, we express the slope as a partial derivative ∂
of the loss function. Essentially
∂ wi
we’re asking: “How much would a small change in that variable wi inﬂuence the
total loss function L?”

Formally, then, the gradient of a multi-variable function f is a vector in which
each component expresses the partial derivative of f with respect to one of the vari-
ables. We’ll use the inverted Greek delta symbol ∇ to refer to the gradient, and
represent ˆy as f (x; θ ) to make the dependence on θ more obvious:

∇L( f (x; θ ), y) =








The ﬁnal equation for updating θ based on the gradient is thus













∂
∂ w1
∂
∂ w2

L( f (x; θ ), y)
L( f (x; θ ), y)
...
∂
L( f (x; θ ), y)
∂ wn
∂
∂ b L( f (x; θ ), y)

θ t+1 = θ t

−

η∇L( f (x; θ ), y)

(5.27)

(5.28)

Figure 5.5 Visualization of the gradient vector at the red point in two dimensions w and
b, showing a red arrow in the x-y plane pointing in the direction we will go to look for the
minimum: the opposite direction of the gradient (recall that the gradient points in the direction
of increase not decrease).

Cost(w,b)wb96 CHAPTER 5

• LOGISTIC REGRESSION

5.6.1 The Gradient for Logistic Regression

In order to update θ , we need a deﬁnition for the gradient ∇L( f (x; θ ), y). Recall that
for logistic regression, the cross-entropy loss function is:

LCE( ˆy, y) =

[y log σ (w

x + b) + (1

y) log (1

σ (w

·

−

−

·

−

x + b))]

(5.29)

It turns out that the derivative of this function for one observation vector x is Eq. 5.30
(the interested reader can see Section 5.10 for the derivation of this equation):

∂ LCE( ˆy, y)
∂ w j

= [σ (w

x + b)

y]x j

−

·
y)x j

= ( ˆy

−

You’ll also sometimes see this equation in the equivalent form:

∂ LCE( ˆy, y)
∂ w j

=

(y

−

−

ˆy)x j

(5.30)

(5.31)

hyperparameter

Note in these equations that the gradient with respect to a single weight w j rep-
resents a very intuitive value: the difference between the true y and our estimated
ˆy = σ (w
x + b) for that observation, multiplied by the corresponding input value
x j.

·

5.6.2 The Stochastic Gradient Descent Algorithm

Stochastic gradient descent is an online algorithm that minimizes the loss function
by computing its gradient after each training example, and nudging θ in the right
direction (the opposite direction of the gradient). (An “online algorithm” is one that
processes its input example by example, rather than waiting until it sees the entire
input.) Fig. 5.6 shows the algorithm.

The learning rate η is a hyperparameter that must be adjusted. If it’s too high,
the learner will take steps that are too large, overshooting the minimum of the loss
function. If it’s too low, the learner will take steps that are too small, and take too
long to get to the minimum. It is common to start with a higher learning rate and then
slowly decrease it, so that it is a function of the iteration k of training; the notation
ηk can be used to mean the value of the learning rate at iteration k.

We’ll discuss hyperparameters in more detail in Chapter 7, but in short, they are
a special kind of parameter for any machine learning model. Unlike regular param-
eters of a model (weights like w and b), which are learned by the algorithm from
the training set, hyperparameters are special parameters chosen by the algorithm
designer that affect how the algorithm works.

5.6.3 Working through an example

Let’s walk through a single step of the gradient descent algorithm. We’ll use a
simpliﬁed version of the example in Fig. 5.2 as it sees a single observation x, whose
correct value is y = 1 (this is a positive review), and with a feature vector x = [x1, x2]
consisting of these two features:

x1 = 3
x2 = 2

(count of positive lexicon words)

(count of negative lexicon words)

5.6

• GRADIENT DESCENT

97

function STOCHASTIC GRADIENT DESCENT(L(), f (), x, y) returns θ

# where: L is the loss function
#
#
#

f is a function parameterized by θ
x is the set of training inputs x(1), x(2), ..., x(m)
y is the set of training outputs (labels) y(1), y(2), ..., y(m)

0

θ
repeat til done # see caption

←
For each training tuple (x(i), y(i)) (in random order)

1. Optional (for reporting):

Compute ˆy (i) = f (x(i); θ )
Compute the loss L( ˆy (i), y(i)) # How far off is ˆy(i) from the true output y(i)?

# How are we doing on this tuple?
# What is our estimated output ˆy?

2. g
3. θ
return θ

←
←

∇θ L( f (x(i); θ ), y(i))
θ

η g

−

# How should we move θ to maximize loss?
# Go the other way instead

Figure 5.6 The stochastic gradient descent algorithm. Step 1 (computing the loss) is used
mainly to report how well we are doing on the current tuple; we don’t need to compute the
loss in order to compute the gradient. The algorithm can terminate when it converges (or
when the gradient norm < (cid:15)), or when progress halts (for example when the loss starts going
up on a held-out set).

Let’s assume the initial weights and bias in θ 0 are all set to 0, and the initial learning
rate η is 0.1:

w1 = w2 = b = 0

η = 0.1

The single update step requires that we compute the gradient, multiplied by the
learning rate

θ t+1 = θ t

−

η∇θ L( f (x(i); θ ), y(i))

In our mini example there are three parameters, so the gradient vector has 3 dimen-
sions, for w1, w2, and b. We can compute the ﬁrst gradient as follows:

∇w,bL = 




∂ LCE( ˆy,y)
∂ w1
∂ LCE( ˆy,y)
∂ w2
∂ LCE( ˆy,y)
∂ b

=








(σ (w
(σ (w
σ (w

x + b)
·
x + b)
·
x + b)

y)x1
−
y)x2
−
y
−

·

=





(σ (0)
(σ (0)
σ (0)

1)x1
−
1)x2
−
1
−

=





=





0.5x1
0.5x2
0.5

−
−
−

1.5
1.0
0.5

−
−
−






Now that we have a gradient, we compute the new parameter vector θ 1 by moving
θ 0 in the opposite direction from the gradient:













w1
w2
b

1.5
1.0
0.5

.15
.1
.05

θ 1 =

−
−
−
So after one step of gradient descent, the weights have shifted to be: w1 = .15,
w2 = .1, and b = .05.

−

=

























η

Note that this observation x happened to be a positive example. We would expect
that after seeing more negative examples with high counts of negative words, that
the weight w2 would shift to have a negative value.

98 CHAPTER 5

• LOGISTIC REGRESSION

5.6.4 Mini-batch training

batch training

mini-batch

Stochastic gradient descent is called stochastic because it chooses a single random
example at a time, moving the weights so as to improve performance on that single
example. That can result in very choppy movements, so it’s common to compute the
gradient over batches of training instances rather than a single instance.

For example in batch training we compute the gradient over the entire dataset.
By seeing so many examples, batch training offers a superb estimate of which di-
rection to move the weights, at the cost of spending a lot of time processing every
single example in the training set to compute this perfect direction.

A compromise is mini-batch training: we train on a group of m examples (per-
haps 512, or 1024) that is less than the whole dataset. (If m is the size of the dataset,
then we are doing batch gradient descent; if m = 1, we are back to doing stochas-
tic gradient descent.) Mini-batch training also has the advantage of computational
efﬁciency. The mini-batches can easily be vectorized, choosing the size of the mini-
batch based on the computational resources. This allows us to process all the exam-
ples in one mini-batch in parallel and then accumulate the loss, something that’s not
possible with individual or batch training.

We just need to deﬁne mini-batch versions of the cross-entropy loss function
we deﬁned in Section 5.5 and the gradient in Section 5.6.1. Let’s extend the cross-
entropy loss for one example from Eq. 5.23 to mini-batches of size m. We’ll continue
to use the notation that x(i) and y(i) mean the ith training features and training label,
respectively. We make the assumption that the training examples are independent:

log p(training labels) = log

m

p(y(i)

m

(cid:89)i=1
log p(y(i)

x(i))
|

x(i))
|

=

=

(cid:88)i=1
m

−

(cid:88)i=1

LCE( ˆy(i), y(i))

(5.32)

Now the cost function for the mini-batch of m examples is the average loss for each
example:

Cost( ˆy, y) =

1
m

=

−

m

LCE( ˆy(i), y(i))

(cid:88)i=1
m
1
m

(cid:88)i=1

y(i) log σ (w

·

x(i) + b) + (1

−

y(i)) log

1

(cid:16)

σ (w

−

·

x(i) + b)
(cid:17)

(5.33)

The mini-batch gradient is the average of the individual gradients from Eq. 5.30:

∂Cost( ˆy, y)
∂ w j

=

1
m

m

σ (w

(cid:88)i=1 (cid:104)

x(i) + b)

·

−

y(i)

x(i)
j

(cid:105)

(5.34)

Instead of using the sum notation, we can more efﬁciently compute the gradient
in its matrix form, following the vectorization we saw on page 87, where we have
a matrix X of size [m
f ] representing the m inputs in the batch, and a vector y of
size [m

1] representing the correct outputs:

×

×

5.7 Regularization

5.7

• REGULARIZATION

99

∂Cost( ˆy, y)
∂ w

=

=

1
m
1
m

(cid:124)
y)

X

(ˆy

−

(σ (Xw + b)

(cid:124)
y)

X

−

(5.35)

Numquam ponenda est pluralitas sine necessitate
‘Plurality should never be proposed unless needed’
William of Occam

overﬁtting

generalize

regularization

L2
regularization

There is a problem with learning weights that make the model perfectly match the
training data. If a feature is perfectly predictive of the outcome because it happens
to only occur in one class, it will be assigned a very high weight. The weights for
features will attempt to perfectly ﬁt details of the training set, in fact too perfectly,
modeling noisy factors that just accidentally correlate with the class. This problem is
called overﬁtting. A good model should be able to generalize well from the training
data to the unseen test set, but a model that overﬁts will have poor generalization.

To avoid overﬁtting, a new regularization term R(θ ) is added to the objective
function in Eq. 5.25, resulting in the following objective for a batch of m exam-
ples (slightly rewritten from Eq. 5.25 to be maximizing log probability rather than
minimizing loss, and removing the 1

m term which doesn’t affect the argmax):

m

ˆθ = argmax

log P(y(i)

θ

(cid:88)i=1

x(i))
|

−

αR(θ )

(5.36)

The new regularization term R(θ ) is used to penalize large weights. Thus a setting
of the weights that matches the training data perfectly— but uses many weights with
high values to do so—will be penalized more than a setting that matches the data a
little less well, but does so using smaller weights. There are two common ways to
compute this regularization term R(θ ). L2 regularization is a quadratic function of
the weight values, named because it uses the (square of the) L2 norm of the weight
||2, is the same as the Euclidean distance of the vector θ
θ
values. The L2 norm,
||
from the origin. If θ consists of n weights, then:

R(θ ) =

θ

||

2
2 =
||

n

θ 2
j

(cid:88)j=1

The L2 regularized objective function becomes:

ˆθ = argmax

θ

m

(cid:34)

(cid:88)i=1

log P(y(i)

x(i))
|

(cid:35) −

α

n

θ 2
j

(cid:88)j=1

(5.37)

(5.38)

L1
regularization

L1 regularization is a linear function of the weight values, named after the L1 norm
W
||1, the sum of the absolute values of the weights, or Manhattan distance (the

||

100 CHAPTER 5

• LOGISTIC REGRESSION

Manhattan distance is the distance you’d have to walk between two points in a city
with a street grid like New York):

R(θ ) =

θ

||

||1 =

n

(cid:88)i=1

θi|
|

The L1 regularized objective function becomes:

ˆθ = argmax

θ

m

(cid:34)

(cid:88)i=1

log P(y(i)

x(i))
|

(cid:35) −

α

n

(cid:88)j=1

θ j|
|

(5.39)

(5.40)

lasso

ridge

These kinds of regularization come from statistics, where L1 regularization is called
lasso regression (Tibshirani, 1996) and L2 regularization is called ridge regression,
and both are commonly used in language processing. L2 regularization is easier to
optimize because of its simple derivative (the derivative of θ 2 is just 2θ ), while
L1 regularization is more complex (the derivative of
is non-continuous at zero).
But while L2 prefers weight vectors with many small weights, L1 prefers sparse
solutions with some larger weights but many more weights set to zero. Thus L1
regularization leads to much sparser weight vectors, that is, far fewer features.

θ
|

|

Both L1 and L2 regularization have Bayesian interpretations as constraints on
the prior of how weights should look. L1 regularization can be viewed as a Laplace
prior on the weights. L2 regularization corresponds to assuming that weights are
distributed according to a Gaussian distribution with mean µ = 0. In a Gaussian
or normal distribution, the further away a value is from the mean, the lower its
probability (scaled by the variance σ ). By using a Gaussian prior on the weights, we
are saying that weights prefer to have the value 0. A Gaussian for a weight θ j is

1

2πσ 2
j

exp

(cid:32)−

µ j)2

(θ j −
2σ 2
j

(cid:33)

(5.41)

If we multiply each weight by a Gaussian prior on the weight, we are thus maximiz-
ing the following constraint:

(cid:113)

ˆθ = argmax

θ

m

(cid:89)i=1

P(y(i)

x(i))
|

×

n

(cid:89)j=1

1

2πσ 2
j

exp

(cid:32)−

µ j)2

(θ j −
2σ 2
j

(cid:33)

(5.42)

which in log space, with µ = 0, and assuming 2σ 2 = 1, corresponds to

(cid:113)

m

ˆθ = argmax

log P(y(i)

(cid:88)i=1
which is in the same form as Eq. 5.38.

θ

x(i))
|

−

α

n

θ 2
j

(cid:88)j=1

(5.43)

5.8 Learning in Multinomial Logistic Regression

The loss function for multinomial logistic regression generalizes the loss function
for binary logistic regression from 2 to K classes. Recall that that the cross-entropy
loss for binary logistic regression (repeated from Eq. 5.23) is:

LCE( ˆy, y) =

x) =
log p(y
|

−

−

[y log ˆy + (1

y) log(1

ˆy)]

−

−

(5.44)

5.8

• LEARNING IN MULTINOMIAL LOGISTIC REGRESSION

101

The loss function for multinomial logistic regression generalizes the two terms in
Eq. 5.44 (one that is non-zero when y = 1 and one that is non-zero when y = 0) to
K terms. As we mentioned above, for multinomial regression we’ll represent both y
and ˆy as vectors. The true label y is a vector with K elements, each corresponding
to a class, with yc = 1 if the correct class is c, with all other elements of y being 0.
And our classiﬁer will produce an estimate vector with K elements ˆy, each element
x).
ˆyk of which represents the estimated probability p(yk = 1
|

The loss function for a single example x, generalizing from binary logistic re-
gression, is the sum of the logs of the K output classes, each weighted by their
probability yk (Eq. 5.45). This turns out to be just the negative log probability of the
correct class c (Eq. 5.46):

LCE(ˆy, y) =

=

=

=

−

−

−

−

K

yk log ˆyk

(cid:88)k=1
log ˆyc,

(where c is the correct class)

(5.45)

(5.46)

(where c is the correct class)

x)
log ˆp(yc = 1
|
exp (wc
K
j=1 exp (wj

log

·

x + bc)

x + b j)

·

(c is the correct class)

(5.47)

negative log
likelihood loss

(cid:80)

How did we get from Eq. 5.45 to Eq. 5.46? Because only one class (let’s call it c) is
the correct one, the vector y takes the value 1 only for this value of k, i.e., has yc = 1
and y j = 0
= c. That means the terms in the sum in Eq. 5.45 will all be 0 except
for the term corresponding to the true class c. Hence the cross-entropy loss is simply
the log of the output probability corresponding to the correct class, and we therefore
also call Eq. 5.46 the negative log likelihood loss.

∀

j

−

Of course for gradient descent we don’t need the loss, we need its gradient. The
gradient for a single example turns out to be very similar to the gradient for binary
y)x, that we saw in Eq. 5.30. Let’s consider one piece of the
logistic regression, ( ˆy
gradient, the derivative for a single weight. For each class k, the weight of the ith
element of input x is wk,i. What is the partial derivative of the loss with respect to
wk,i? This derivative turns out to be just the difference between the true value for the
class k (which is either 1 or 0) and the probability the classiﬁer outputs for class k,
weighted by the value of the input xi corresponding to the ith element of the weight
vector for class k:

∂ LCE
∂ wk,i

=

=

=

ˆyk)xi

(yk −
−
(yk −
−
yk −

− (cid:32)

x))xi
p(yk = 1
|
exp (wk
K
j=1 exp (wj

·

x + bk)

x + b j) (cid:33)

·

xi

(5.48)

We’ll return to this case of the gradient for softmax regression when we introduce
neural networks in Chapter 7, and at that time we’ll also discuss the derivation of
this gradient in equations Eq. 7.33–Eq. 7.41.

(cid:80)

(cid:54)
102 CHAPTER 5

• LOGISTIC REGRESSION

5.9

Interpreting models

interpretable

Often we want to know more than just the correct classiﬁcation of an observation.
We want to know why the classiﬁer made the decision it did. That is, we want our
decision to be interpretable. Interpretability can be hard to deﬁne strictly, but the
core idea is that as humans we should know why our algorithms reach the conclu-
sions they do. Because the features to logistic regression are often human-designed,
one way to understand a classiﬁer’s decision is to understand the role each feature
plays in the decision. Logistic regression can be combined with statistical tests (the
likelihood ratio test, or the Wald test); investigating whether a particular feature is
signiﬁcant by one of these tests, or inspecting its magnitude (how large is the weight
w associated with the feature?) can help us interpret why the classiﬁer made the
decision it makes. This is enormously important for building transparent models.

Furthermore, in addition to its use as a classiﬁer, logistic regression in NLP and
many other ﬁelds is widely used as an analytic tool for testing hypotheses about the
effect of various explanatory variables (features). In text classiﬁcation, perhaps we
want to know if logically negative words (no, not, never) are more likely to be asso-
ciated with negative sentiment, or if negative reviews of movies are more likely to
discuss the cinematography. However, in doing so it’s necessary to control for po-
tential confounds: other factors that might inﬂuence sentiment (the movie genre, the
year it was made, perhaps the length of the review in words). Or we might be study-
ing the relationship between NLP-extracted linguistic features and non-linguistic
outcomes (hospital readmissions, political outcomes, or product sales), but need to
control for confounds (the age of the patient, the county of voting, the brand of the
product). In such cases, logistic regression allows us to test whether some feature is
associated with some outcome above and beyond the effect of other features.

5.10 Advanced: Deriving the Gradient Equation

In this section we give the derivation of the gradient of the cross-entropy loss func-
tion LCE for logistic regression. Let’s start with some quick calculus refreshers.
First, the derivative of ln(x):

d
dx

ln(x) =

1
x

Second, the (very elegant) derivative of the sigmoid:

dσ (z)
dz

= σ (z)(1

σ (z))

−

(5.49)

(5.50)

chain rule

Finally, the chain rule of derivatives. Suppose we are computing the derivative
of a composite function f (x) = u(v(x)). The derivative of f (x) is the derivative of
u(x) with respect to v(x) times the derivative of v(x) with respect to x:

d f
dx

=

du
dv ·

dv
dx

(5.51)

First, we want to know the derivative of the loss function with respect to a single

weight w j (we’ll need to compute it for each weight, and for the bias):

∂ LCE
∂ w j

=

=

∂
∂ w j −
∂
∂ w j

−

(cid:20)

[y log σ (w

x + b) + (1

y log σ (w

x + b) +

·

·

5.11

• SUMMARY

103

y) log (1

σ (w

·

−

x + b))]

y) log [1

(1

−

σ (w

−

·

x + b)]
(cid:21)
(5.52)

−
∂
∂ w j

Next, using the chain rule, and relying on the derivative of log:

∂ LCE
∂ w j

=

−

σ (w

y
x + b)

·

∂
∂ w j

σ (w

·

x + b)

1
−
σ (w
·

y
x + b)

∂
∂ w j

1

−

−

1

−

σ (w

·

x + b)

(5.53)

Rearranging terms:

∂ LCE
∂ w j

=

y
x + b) −

·

1
−
σ (w
·

y
x + b)

(cid:21)

∂
∂ w j

1

−

σ (w

−

(cid:20)

σ (w

·

x + b)

(5.54)

And now plugging in the derivative of the sigmoid, and using the chain rule one
more time, we end up with Eq. 5.55:

∂ LCE
∂ w j

=

=

σ (w

−

(cid:20)

·

−

σ (w

(cid:20)
[y

=
−
−
= [σ (w

·
σ (w
·
x + b)

·

x + b)
σ (w
·
x + b)
σ (w

·

σ (w
y
·
−
x + b)[1
−
σ (w
y
·
−
x + b)[1
−
x + b)]x j
y]x j

−

x + b)]

x + b)]

σ (w

σ (w

·

·

(cid:21)

(cid:21)

x + b)[1

x + b)[1

σ (w

σ (w

·

·

−

−

x + b)]

∂ (w

x + b)

·
∂ w j

x + b)]x j

(5.55)

5.11 Summary

This chapter introduced the logistic regression model of classiﬁcation.

• Logistic regression is a supervised machine learning classiﬁer that extracts
real-valued features from the input, multiplies each by a weight, sums them,
and passes the sum through a sigmoid function to generate a probability. A
threshold is used to make a decision.

• Logistic regression can be used with two classes (e.g., positive and negative
sentiment) or with multiple classes (multinomial logistic regression, for ex-
ample for n-ary text classiﬁcation, part-of-speech labeling, etc.).

• Multinomial logistic regression uses the softmax function to compute proba-

bilities.

• The weights (vector w and bias b) are learned from a labeled training set via a

loss function, such as the cross-entropy loss, that must be minimized.

• Minimizing this loss function is a convex optimization problem, and iterative

algorithms like gradient descent are used to ﬁnd the optimal weights.

• Regularization is used to avoid overﬁtting.
• Logistic regression is also one of the most useful analytic tools, because of its

ability to transparently study the importance of individual features.

104 CHAPTER 5

• LOGISTIC REGRESSION

Bibliographical and Historical Notes

Logistic regression was developed in the ﬁeld of statistics, where it was used for
the analysis of binary data by the 1960s, and was particularly common in medicine
(Cox, 1969). Starting in the late 1970s it became widely used in linguistics as one
of the formal foundations of the study of linguistic variation (Sankoff and Labov,
1979).

Nonetheless, logistic regression didn’t become common in natural language pro-
cessing until the 1990s, when it seems to have appeared simultaneously from two
directions. The ﬁrst source was the neighboring ﬁelds of information retrieval and
speech processing, both of which had made use of regression, and both of which
lent many other statistical techniques to NLP. Indeed a very early use of logistic
regression for document routing was one of the ﬁrst NLP applications to use (LSI)
embeddings as word representations (Sch¨utze et al., 1995).

At the same time in the early 1990s logistic regression was developed and ap-
plied to NLP at IBM Research under the name maximum entropy modeling or
maxent (Berger et al., 1996), seemingly independent of the statistical literature. Un-
der that name it was applied to language modeling (Rosenfeld, 1996), part-of-speech
tagging (Ratnaparkhi, 1996), parsing (Ratnaparkhi, 1997), coreference resolution
(Kehler, 1997b), and text classiﬁcation (Nigam et al., 1999).

More on classiﬁcation can be found in machine learning textbooks (Hastie et al.

2001, Witten and Frank 2005, Bishop 2006, Murphy 2012).

maximum
entropy

Exercises

CHAPTER

6 Vector Semantics and

Embeddings

荃者所以在鱼，得鱼而忘荃 Nets are for ﬁsh;

言者所以在意，得意而忘言 Words are for meaning;

Once you get the ﬁsh, you can forget the net.

Once you get the meaning, you can forget the words
庄子(Zhuangzi), Chapter 26

The asphalt that Los Angeles is famous for occurs mainly on its freeways. But
in the middle of the city is another patch of asphalt, the La Brea tar pits, and this
asphalt preserves millions of fossil bones from the last of the Ice Ages of the Pleis-
tocene Epoch. One of these fossils is the Smilodon, or saber-toothed tiger, instantly
recognizable by its long canines. Five million years ago or so, a completely different
saber-tooth tiger called Thylacosmilus lived
in Argentina and other parts of South Amer-
ica. Thylacosmilus was a marsupial whereas
Smilodon was a placental mammal, but Thy-
lacosmilus had the same long upper canines
and, like Smilodon, had a protective bone
ﬂange on the lower jaw. The similarity of
these two mammals is one of many examples
of parallel or convergent evolution, in which particular contexts or environments
lead to the evolution of very similar structures in different species (Gould, 1980).

The role of context is also important in the similarity of a less biological kind
of organism: the word. Words that occur in similar contexts tend to have similar
meanings. This link between similarity in how words are distributed and similarity
in what they mean is called the distributional hypothesis. The hypothesis was
ﬁrst formulated in the 1950s by linguists like Joos (1950), Harris (1954), and Firth
(1957), who noticed that words which are synonyms (like oculist and eye-doctor)
tended to occur in the same environment (e.g., near words like eye or examined)
with the amount of meaning difference between two words “corresponding roughly
to the amount of difference in their environments” (Harris, 1954, 157).

In this chapter we introduce vector semantics, which instantiates this linguistic
hypothesis by learning representations of the meaning of words, called embeddings,
directly from their distributions in texts. These representations are used in every nat-
ural language processing application that makes use of meaning, and the static em-
beddings we introduce here underlie the more powerful dynamic or contextualized
embeddings like BERT that we will see in Chapter 11.

These word representations are also the ﬁrst example in this book of repre-
sentation learning, automatically learning useful representations of the input text.
Finding such self-supervised ways to learn representations of the input, instead of
creating representations by hand via feature engineering, is an important focus of
NLP research (Bengio et al., 2013).

distributional
hypothesis

vector
semantics
embeddings

representation
learning

106 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

6.1 Lexical Semantics

Let’s begin by introducing some basic principles of word meaning. How should
we represent the meaning of a word? In the n-gram models of Chapter 3, and in
classical NLP applications, our only representation of a word is as a string of letters,
or an index in a vocabulary list. This representation is not that different from a
tradition in philosophy, perhaps you’ve seen it in introductory logic classes, in which
the meaning of words is represented by just spelling the word with small capital
letters; representing the meaning of “dog” as DOG, and “cat” as CAT, or by using an
apostrophe (DOG’).

Representing the meaning of a word by capitalizing it is a pretty unsatisfactory
model. You might have seen a version of a joke due originally to semanticist Barbara
Partee (Carlson, 1977):

Q: What’s the meaning of life?
A: LIFE’

Surely we can do better than this! After all, we’ll want a model of word meaning
to do all sorts of things for us. It should tell us that some words have similar mean-
ings (cat is similar to dog), others are antonyms (cold is the opposite of hot), some
have positive connotations (happy) while others have negative connotations (sad). It
should represent the fact that the meanings of buy, sell, and pay offer differing per-
spectives on the same underlying purchasing event. (If I buy something from you,
you’ve probably sold it to me, and I likely paid you.) More generally, a model of
word meaning should allow us to draw inferences to address meaning-related tasks
like question-answering or dialogue.

In this section we summarize some of these desiderata, drawing on results in the
linguistic study of word meaning, which is called lexical semantics; we’ll return to
and expand on this list in Chapter 23 and Chapter 24.

Lemmas and Senses Let’s start by looking at how one word (we’ll choose mouse)
might be deﬁned in a dictionary (simpliﬁed from the online dictionary WordNet):
mouse (N)
1.
2.

any of numerous small rodents...
a hand-operated device that controls a cursor...

Here the form mouse is the lemma, also called the citation form. The form
mouse would also be the lemma for the word mice; dictionaries don’t have separate
deﬁnitions for inﬂected forms like mice. Similarly sing is the lemma for sing, sang,
sung. In many languages the inﬁnitive form is used as the lemma for the verb, so
Spanish dormir “to sleep” is the lemma for duermes “you sleep”. The speciﬁc forms
sung or carpets or sing or duermes are called wordforms.

As the example above shows, each lemma can have multiple meanings; the
lemma mouse can refer to the rodent or the cursor control device. We call each
of these aspects of the meaning of mouse a word sense. The fact that lemmas can
be polysemous (have multiple senses) can make interpretation difﬁcult (is someone
who types “mouse info” into a search engine looking for a pet or a tool?). Chap-
ter 11 and Chapter 23 will discuss the problem of polysemy, and introduce word
sense disambiguation, the task of determining which sense of a word is being used
in a particular context.

Synonymy One important component of word meaning is the relationship be-
tween word senses. For example when one word has a sense whose meaning is

lexical
semantics

lemma

citation form

wordform

synonym

identical to a sense of another word, or nearly identical, we say the two senses of
those two words are synonyms. Synonyms include such pairs as

6.1

• LEXICAL SEMANTICS

107

principle of
contrast

similarity

couch/sofa vomit/throw up ﬁlbert/hazelnut car/automobile

A more formal deﬁnition of synonymy (between words rather than senses) is that
two words are synonymous if they are substitutable for one another in any sentence
without changing the truth conditions of the sentence, the situations in which the
sentence would be true.

While substitutions between some pairs of words like car / automobile or wa-
ter / H2O are truth preserving, the words are still not identical in meaning. Indeed,
probably no two words are absolutely identical in meaning. One of the fundamental
tenets of semantics, called the principle of contrast (Girard 1718, Br´eal 1897, Clark
1987), states that a difference in linguistic form is always associated with some dif-
ference in meaning. For example, the word H2O is used in scientiﬁc contexts and
would be inappropriate in a hiking guide—water would be more appropriate— and
this genre difference is part of the meaning of the word. In practice, the word syn-
onym is therefore used to describe a relationship of approximate or rough synonymy.

Word Similarity While words don’t have many synonyms, most words do have
lots of similar words. Cat is not a synonym of dog, but cats and dogs are certainly
similar words. In moving from synonymy to similarity, it will be useful to shift from
talking about relations between word senses (like synonymy) to relations between
words (like similarity). Dealing with words avoids having to commit to a particular
representation of word senses, which will turn out to simplify our task.

The notion of word similarity is very useful in larger semantic tasks. Knowing
how similar two words are can help in computing how similar the meaning of two
phrases or sentences are, a very important component of tasks like question answer-
ing, paraphrasing, and summarization. One way of getting values for word similarity
is to ask humans to judge how similar one word is to another. A number of datasets
have resulted from such experiments. For example the SimLex-999 dataset (Hill
et al., 2015) gives values on a scale from 0 to 10, like the examples below, which
range from near-synonyms (vanish, disappear) to pairs that scarcely seem to have
anything in common (hole, agreement):

9.8

vanish disappear
belief
muscle bone
modest ﬂexible
hole

impression 5.95
3.65
0.98

agreement 0.3

relatedness

association

semantic ﬁeld

Word Relatedness The meaning of two words can be related in ways other than
similarity. One such class of connections is called word relatedness (Budanitsky
and Hirst, 2006), also traditionally called word association in psychology.

Consider the meanings of the words coffee and cup. Coffee is not similar to cup;
they share practically no features (coffee is a plant or a beverage, while a cup is a
manufactured object with a particular shape). But coffee and cup are clearly related;
they are associated by co-participating in an everyday event (the event of drinking
coffee out of a cup). Similarly scalpel and surgeon are not similar but are related
eventively (a surgeon tends to make use of a scalpel).

One common kind of relatedness between words is if they belong to the same
semantic ﬁeld. A semantic ﬁeld is a set of words which cover a particular semantic
domain and bear structured relations with each other. For example, words might be

108 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

topic models

semantic frame

related by being in the semantic ﬁeld of hospitals (surgeon, scalpel, nurse, anes-
thetic, hospital), restaurants (waiter, menu, plate, food, chef), or houses (door, roof,
kitchen, family, bed). Semantic ﬁelds are also related to topic models, like Latent
Dirichlet Allocation, LDA, which apply unsupervised learning on large sets of texts
to induce sets of associated words from text. Semantic ﬁelds and topic models are
very useful tools for discovering topical structure in documents.

In Chapter 23 we’ll introduce more relations between senses like hypernymy or

IS-A, antonymy (opposites) and meronymy (part-whole relations).

Semantic Frames and Roles Closely related to semantic ﬁelds is the idea of a
semantic frame. A semantic frame is a set of words that denote perspectives or
participants in a particular type of event. A commercial transaction, for example,
is a kind of event in which one entity trades money to another entity in return for
some good or service, after which the good changes hands or perhaps the service is
performed. This event can be encoded lexically by using verbs like buy (the event
from the perspective of the buyer), sell (from the perspective of the seller), pay
(focusing on the monetary aspect), or nouns like buyer. Frames have semantic roles
(like buyer, seller, goods, money), and words in a sentence can take on these roles.
Knowing that buy and sell have this relation makes it possible for a system to
know that a sentence like Sam bought the book from Ling could be paraphrased as
Ling sold the book to Sam, and that Sam has the role of the buyer in the frame and
Ling the seller. Being able to recognize such paraphrases is important for question
answering, and can help in shifting perspective for machine translation.

connotations

sentiment

Connotation Finally, words have affective meanings or connotations. The word
connotation has different meanings in different ﬁelds, but here we use it to mean the
aspects of a word’s meaning that are related to a writer or reader’s emotions, senti-
ment, opinions, or evaluations. For example some words have positive connotations
(wonderful) while others have negative connotations (dreary). Even words whose
meanings are similar in other ways can vary in connotation; consider the difference
in connotations between fake, knockoff, forgery, on the one hand, and copy, replica,
reproduction on the other, or innocent (positive connotation) and naive (negative
connotation). Some words describe positive evaluation (great, love) and others neg-
ative evaluation (terrible, hate). Positive or negative evaluation language is called
sentiment, as we saw in Chapter 4, and word sentiment plays a role in important
tasks like sentiment analysis, stance detection, and applications of NLP to the lan-
guage of politics and consumer reviews.

Early work on affective meaning (Osgood et al., 1957) found that words varied

along three important dimensions of affective meaning:

valence: the pleasantness of the stimulus

arousal: the intensity of emotion provoked by the stimulus

dominance: the degree of control exerted by the stimulus

Thus words like happy or satisﬁed are high on valence, while unhappy or an-
noyed are low on valence. Excited is high on arousal, while calm is low on arousal.
Controlling is high on dominance, while awed or inﬂuenced are low on dominance.
Each word is thus represented by three numbers, corresponding to its value on each
of the three dimensions:

6.2

• VECTOR SEMANTICS

109

Valence Arousal Dominance

courageous 8.05
music
7.67
heartbreak 2.45
6.71
cub

5.5
5.57
5.65
3.95

7.38
6.5
3.58
4.24

Osgood et al. (1957) noticed that in using these 3 numbers to represent the
meaning of a word, the model was representing each word as a point in a three-
dimensional space, a vector whose three dimensions corresponded to the word’s
rating on the three scales. This revolutionary idea that word meaning could be rep-
resented as a point in space (e.g., that part of the meaning of heartbreak can be
represented as the point [2.45, 5.65, 3.58]) was the ﬁrst expression of the vector se-
mantics models that we introduce next.

6.2 Vector Semantics

vector
semantics

Vector semantics is the standard way to represent word meaning in NLP, helping
us model many of the aspects of word meaning we saw in the previous section. The
roots of the model lie in the 1950s when two big ideas converged: Osgood’s 1957
idea mentioned above to use a point in three-dimensional space to represent the
connotation of a word, and the proposal by linguists like Joos (1950), Harris (1954),
and Firth (1957) to deﬁne the meaning of a word by its distribution in language
use, meaning its neighboring words or grammatical environments. Their idea was
that two words that occur in very similar distributions (whose neighboring words are
similar) have similar meanings.

For example, suppose you didn’t know the meaning of the word ongchoi (a re-

cent borrowing from Cantonese) but you see it in the following contexts:

(6.1) Ongchoi is delicious sauteed with garlic.
(6.2) Ongchoi is superb over rice.
(6.3) ...ongchoi leaves with salty sauces...

And suppose that you had seen many of these context words in other contexts:

(6.4) ...spinach sauteed with garlic over rice...
(6.5) ...chard stems and leaves are delicious...
(6.6) ...collard greens and other salty leafy greens

The fact that ongchoi occurs with words like rice and garlic and delicious and
salty, as do words like spinach, chard, and collard greens might suggest that ongchoi
is a leafy green similar to these other leafy greens.1 We can do the same thing
computationally by just counting words in the context of ongchoi.

The idea of vector semantics is to represent a word as a point in a multidimen-
sional semantic space that is derived (in ways we’ll see) from the distributions of
word neighbors. Vectors for representing words are called embeddings (although
the term is sometimes more strictly applied only to dense vectors like word2vec
(Section 6.8), rather than sparse tf-idf or PPMI vectors (Section 6.3-Section 6.6)).
The word “embedding” derives from its mathematical sense as a mapping from one
space or structure to another, although the meaning has shifted; see the end of the
chapter.

1

It’s in fact Ipomoea aquatica, a relative of morning glory sometimes called water spinach in English.

embeddings

110 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

Figure 6.1 A two-dimensional (t-SNE) projection of embeddings for some words and
phrases, showing that words with similar meanings are nearby in space. The original 60-
dimensional embeddings were trained for sentiment analysis. Simpliﬁed from Li et al. (2015)
with colors added for explanation.

Fig. 6.1 shows a visualization of embeddings learned for sentiment analysis,
showing the location of selected words projected down from 60-dimensional space
into a two dimensional space. Notice the distinct regions containing positive words,
negative words, and neutral function words.

The ﬁne-grained model of word similarity of vector semantics offers enormous
power to NLP applications. NLP applications like the sentiment classiﬁers of Chap-
ter 4 or Chapter 5 depend on the same words appearing in the training and test sets.
But by representing words as embeddings, classiﬁers can assign sentiment as long as
it sees some words with similar meanings. And as we’ll see, vector semantic models
can be learned automatically from text without supervision.

In this chapter we’ll introduce the two most commonly used models. In the tf-idf
model, an important baseline, the meaning of a word is deﬁned by a simple function
of the counts of nearby words. We will see that this method results in very long
vectors that are sparse, i.e. mostly zeros (since most words simply never occur in
the context of others). We’ll introduce the word2vec model family for construct-
ing short, dense vectors that have useful semantic properties. We’ll also introduce
the cosine, the standard way to use embeddings to compute semantic similarity, be-
tween two words, two sentences, or two documents, an important tool in practical
applications like question answering, summarization, or automatic essay grading.

6.3 Words and Vectors

“The most important attributes of a vector in 3-space are

”
Location, Location, Location
}
Randall Munroe, https://xkcd.com/2358/

{

Vector or distributional models of meaning are generally based on a co-occurrence

matrix, a way of representing how often words co-occur. We’ll look at two popular
matrices: the term-document matrix and the term-term matrix.

6.3.1 Vectors and documents

term-document
matrix

In a term-document matrix, each row represents a word in the vocabulary and each
column represents a document from some collection of documents. Fig. 6.2 shows a
small selection from a term-document matrix showing the occurrence of four words
in four plays by Shakespeare. Each cell in this matrix represents the number of times

goodnicebadworstnot goodwonderfulamazingterriﬁcdislikeworsevery goodincredibly goodfantasticincredibly badnowyouithatwithbyto’sareisathan6.3

• WORDS AND VECTORS

111

a particular word (deﬁned by the row) occurs in a particular document (deﬁned by
the column). Thus fool appeared 58 times in Twelfth Night.

As You Like It
1
114
36
20

battle
good
fool
wit
Figure 6.2 The term-document matrix for four words in four Shakespeare plays. Each cell
contains the number of times the (row) word occurs in the (column) document.

Twelfth Night
0
80
58
15

Julius Caesar
7
62
1
2

Henry V
13
89
4
3

vector space
model

vector

vector space

dimension

The term-document matrix of Fig. 6.2 was ﬁrst deﬁned as part of the vector
space model of information retrieval (Salton, 1971). In this model, a document is
represented as a count vector, a column in Fig. 6.3.

To review some basic linear algebra, a vector is, at heart, just a list or array of
numbers. So As You Like It is represented as the list [1,114,36,20] (the ﬁrst column
vector in Fig. 6.3) and Julius Caesar is represented as the list [7,62,1,2] (the third
column vector). A vector space is a collection of vectors, characterized by their
dimension. In the example in Fig. 6.3, the document vectors are of dimension 4,
just so they ﬁt on the page; in real term-document matrices, the vectors representing
each document would have dimensionality

V
|
The ordering of the numbers in a vector space indicates different dimensions on
which documents vary. Thus the ﬁrst dimension for both these vectors corresponds
to the number of times the word battle occurs, and we can compare each dimension,
noting for example that the vectors for As You Like It and Twelfth Night have similar
values (1 and 0, respectively) for the ﬁrst dimension.

, the vocabulary size.
|

battle
good
fool
wit

As You Like It
1
114
36
20

Twelfth Night
0
80
58
15

Julius Caesar
7
62
1
2

Henry V
13
89
4
3

Figure 6.3 The term-document matrix for four words in four Shakespeare plays. The red
boxes show that each document is represented as a column vector of length four.

We can think of the vector for a document as a point in

-dimensional space;
|
thus the documents in Fig. 6.3 are points in 4-dimensional space. Since 4-dimensional
spaces are hard to visualize, Fig. 6.4 shows a visualization in two dimensions; we’ve
arbitrarily chosen the dimensions corresponding to the words battle and fool.

V
|

Term-document matrices were originally deﬁned as a means of ﬁnding similar
documents for the task of document information retrieval. Two documents that are
similar will tend to have similar words, and if two documents have similar words
their column vectors will tend to be similar. The vectors for the comedies As You
Like It [1,114,36,20] and Twelfth Night [0,80,58,15] look a lot more like each other
(more fools and wit than battles) than they look like Julius Caesar [7,62,1,2] or
Henry V [13,89,4,3]. This is clear with the raw numbers; in the ﬁrst dimension
(battle) the comedies have low numbers and the others have high numbers, and we
can see it visually in Fig. 6.4; we’ll see very shortly how to quantify this intuition
more formally.

A real term-document matrix, of course, wouldn’t just have 4 rows and columns,
let alone 2. More generally, the term-document matrix has
rows (one for each
word type in the vocabulary) and D columns (one for each document in the collec-

V
|

|

112 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

Figure 6.4 A spatial visualization of the document vectors for the four Shakespeare play
documents, showing just two of the dimensions, corresponding to the words battle and fool.
The comedies have high values for the fool dimension and low values for the battle dimension.

information
retrieval

tion); as we’ll see, vocabulary sizes are generally in the tens of thousands, and the
number of documents can be enormous (think about all the pages on the web).

Information retrieval (IR) is the task of ﬁnding the document d from the D
documents in some collection that best matches a query q. For IR we’ll therefore also
represent a query by a vector, also of length
, and we’ll need a way to compare
|
two vectors to ﬁnd how similar they are. (Doing IR will also require efﬁcient ways
to store and manipulate these vectors by making use of the convenient fact that these
vectors are sparse, i.e., mostly zeros).

V
|

Later in the chapter we’ll introduce some of the components of this vector com-

parison process: the tf-idf term weighting, and the cosine similarity metric.

6.3.2 Words as vectors: document dimensions

row vector

We’ve seen that documents can be represented as vectors in a vector space. But
vector semantics can also be used to represent the meaning of words. We do this
by associating each word with a word vector— a row vector rather than a column
vector, hence with different dimensions, as shown in Fig. 6.5. The four dimensions
of the vector for fool, [36,58,1,4], correspond to the four Shakespeare plays. Word
counts in the same four dimensions are used to form the vectors for the other 3
words: wit, [20,15,2,3]; battle, [1,0,7,13]; and good [114,80,62,89].

battle
good
fool
wit

As You Like It
1
114
36
20

Twelfth Night
0
80
58
15

Julius Caesar
7
62
1
2

Henry V
13
89
4
3

Figure 6.5 The term-document matrix for four words in four Shakespeare plays. The red
boxes show that each word is represented as a row vector of length four.

For documents, we saw that similar documents had similar vectors, because sim-
ilar documents tend to have similar words. This same principle applies to words:
similar words have similar vectors because they tend to occur in similar documents.
The term-document matrix thus lets us represent the meaning of a word by the doc-
uments it tends to occur in.

51015202530510Henry V [4,13]As You Like It [36,1]Julius Caesar [1,7]battle foolTwelfth Night [58,0]1540354045505560word-word
matrix

6.3.3 Words as vectors: word dimensions

6.3

• WORDS AND VECTORS

113

An alternative to using the term-document matrix to represent words as vectors of
document counts, is to use the term-term matrix, also called the word-word ma-
trix or the term-context matrix, in which the columns are labeled by words rather
than documents. This matrix is thus of dimensionality
and each cell records
the number of times the row (target) word and the column (context) word co-occur
in some context in some training corpus. The context could be the document, in
which case the cell represents the number of times the two words appear in the same
document. It is most common, however, to use smaller contexts, generally a win-
dow around the word, for example of 4 words to the left and 4 words to the right,
in which case the cell represents the number of times (in some training corpus) the
column word occurs in such a
4 word window around the row word. Here are four
examples of words in their windows:

|×|

V
|

±

V

|

is traditionally followed by cherry

pie, a traditional dessert
often mixed, such as strawberry rhubarb pie. Apple pie

computer peripherals and personal digital

assistants. These devices usually

a computer. This includes information available on the internet

If we then take every occurrence of each word (say strawberry) and count the
context words around it, we get a word-word co-occurrence matrix. Fig. 6.6 shows a
simpliﬁed subset of the word-word co-occurrence matrix for these four words com-
puted from the Wikipedia corpus (Davies, 2015).

aardvark
0
0
0
0

...
...
...
...
...

computer
2
0
1670
3325

cherry
strawberry
digital
information
Figure 6.6 Co-occurrence vectors for four words in the Wikipedia corpus, showing six of
the dimensions (hand-picked for pedagogical purposes). The vector for digital is outlined in
red. Note that a real vector would have vastly more dimensions and thus be much sparser.

sugar
25
19
4
13

...
...
...
...
...

result
9
1
85
378

data
8
0
1683
3982

pie
442
60
5
5

Note in Fig. 6.6 that the two words cherry and strawberry are more similar to
each other (both pie and sugar tend to occur in their window) than they are to other
words like digital; conversely, digital and information are more similar to each other
than, say, to strawberry. Fig. 6.7 shows a spatial visualization.

Figure 6.7 A spatial visualization of word vectors for digital and information, showing just
two of the dimensions, corresponding to the words data and computer.

Note that

, the dimensionality of the vector, is generally the size of the vo-
|
cabulary, often between 10,000 and 50,000 words (using the most frequent words

V
|

100020003000400010002000digital [1683,1670]computer datainformation [3982,3325] 30004000114 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

in the training corpus; keeping words after about the most frequent 50,000 or so is
generally not helpful). Since most of these numbers are zero these are sparse vector
representations; there are efﬁcient algorithms for storing and computing with sparse
matrices.

Now that we have some intuitions, let’s move on to examine the details of com-

puting word similarity. Afterwards we’ll discuss methods for weighting cells.

6.4 Cosine for measuring similarity

To measure similarity between two target words v and w, we need a metric that
takes two vectors (of the same dimensionality, either both with words as dimensions,
) and gives
hence of length
|
a measure of their similarity. By far the most common similarity metric is the cosine
of the angle between the vectors.

, or both with documents as dimensions, of length
|

D
|

V
|

The cosine—like most measures for vector similarity used in NLP—is based on

the dot product operator from linear algebra, also called the inner product:

dot product

inner product

dot product(v, w) = v

w =

·

N

(cid:88)i=1

viwi = v1w1 + v2w2 + ... + vNwN

(6.7)

The dot product acts as a similarity metric because it will tend to be high just when
the two vectors have large values in the same dimensions. Alternatively, vectors that
have zeros in different dimensions—orthogonal vectors—will have a dot product of
0, representing their strong dissimilarity.

This raw dot product, however, has a problem as a similarity metric: it favors

vector length

long vectors. The vector length is deﬁned as

N

=

v
|

v2
i

|

(cid:88)i=1

(cid:118)
(cid:117)
(cid:117)
(cid:116)
The dot product is higher if a vector is longer, with higher values in each dimension.
More frequent words have longer vectors, since they tend to co-occur with more
words and have higher co-occurrence values with each of them. The raw dot product
thus will be higher for frequent words. But this is a problem; we’d like a similarity
metric that tells us how similar two words are regardless of their frequency.

(6.8)

We modify the dot product to normalize for the vector length by dividing the
dot product by the lengths of each of the two vectors. This normalized dot product
turns out to be the same as the cosine of the angle between the two vectors, following
from the deﬁnition of the dot product between two vectors a and b:

b
a
|
|
= cos θ

||

a
a
a
|

·
||

b =
·
b
b
|

cos θ

(6.9)

cosine

The cosine similarity metric between two vectors v and w thus can be computed as:

6.5

• TF-IDF: WEIGHING TERMS IN THE VECTOR

115

cosine(v, w) =

v
v
|

w
w

·
||

|

=

N

viwi

(cid:88)i=1
N

(cid:118)
(cid:117)
(cid:117)
(cid:116)

(cid:88)i=1

v2
i (cid:118)
(cid:117)
(cid:117)
(cid:116)

(6.10)

N

w2
i

(cid:88)i=1

unit vector

For some applications we pre-normalize each vector, by dividing it by its length,
creating a unit vector of length 1. Thus we could compute a unit vector from a by
dividing it by

a
. For unit vectors, the dot product is the same as the cosine.
|
|

The cosine value ranges from 1 for vectors pointing in the same direction, through
0 for orthogonal vectors, to -1 for vectors pointing in opposite directions. But since
raw frequency values are non-negative, the cosine for these vectors ranges from 0–1.
Let’s see how the cosine computes which of the words cherry or digital is closer
in meaning to information, just using raw counts from the following shortened table:

cherry
digital
information

pie data computer
442
5
5

8
1683
3982

2
1670
3325

cos(cherry, information) =

cos(digital, information) =

442

5 + 8

3982 + 2

3325

∗

∗

∗

√4422 + 82 + 22√52 + 39822 + 33252
3325

3982 + 1670

5 + 1683

5

∗

∗

√52 + 16832 + 16702√52 + 39822 + 33252

= .018

∗

= .996

The model decides that information is way closer to digital than it is to cherry, a

result that seems sensible. Fig. 6.8 shows a visualization.

Figure 6.8 A (rough) graphical demonstration of cosine similarity, showing vectors for
three words (cherry, digital, and information) in the two dimensional space deﬁned by counts
of the words computer and pie nearby. The ﬁgure doesn’t show the cosine, but it highlights the
angles; note that the angle between digital and information is smaller than the angle between
cherry and information. When two vectors are more similar, the cosine is larger but the angle
is smaller; the cosine has its maximum (1) when the angle between two vectors is smallest
(0◦); the cosine of all other angles is less than 1.

6.5 TF-IDF: Weighing terms in the vector

The co-occurrence matrices above represent each cell by frequencies, either of words
with documents (Fig. 6.5), or words with other words (Fig. 6.6). But raw frequency

50010001500200025003000500digitalcherryinformationDimension 1: ‘pie’Dimension 2: ‘computer’116 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

is not the best measure of association between words. Raw frequency is very skewed
and not very discriminative. If we want to know what kinds of contexts are shared
by cherry and strawberry but not by digital and information, we’re not going to get
good discrimination from words like the, it, or they, which occur frequently with
all sorts of words and aren’t informative about any particular word. We saw this
also in Fig. 6.3 for the Shakespeare corpus; the dimension for the word good is not
very discriminative between plays; good is simply a frequent word and has roughly
equivalent high frequencies in each of the plays.

It’s a bit of a paradox. Words that occur nearby frequently (maybe pie nearby
cherry) are more important than words that only appear once or twice. Yet words
that are too frequent—ubiquitous, like the or good— are unimportant. How can we
balance these two conﬂicting constraints?

There are two common solutions to this problem: in this section we’ll describe
the tf-idf weighting, usually used when the dimensions are documents. In the next
we introduce the PPMI algorithm (usually used when the dimensions are words).

The tf-idf weighting (the ‘-’ here is a hyphen, not a minus sign) is the product

of two terms, each term capturing one of these two intuitions:

term frequency

The ﬁrst is the term frequency (Luhn, 1957): the frequency of the word t in the

document d. We can just use the raw count as the term frequency:

tft, d = count(t, d)

(6.11)

More commonly we squash the raw frequency a bit, by using the log10 of the fre-
quency instead. The intuition is that a word appearing 100 times in a document
doesn’t make that word 100 times more likely to be relevant to the meaning of the
document. We also need to do something special with counts of 0, since we can’t
take the log of 0.2

tft, d =

1 + log10 count(t, d)
0

(cid:40)

if count(t, d) > 0
otherwise

(6.12)

If we use log weighting, terms which occur 0 times in a document would have tf = 0,
1 times in a document tf = 1 + log10(1) = 1 + 0 = 1, 10 times in a document tf =
1 + log10(10) = 2, 100 times tf = 1 + log10(100) = 3, 1000 times tf = 4, and so on.
The second factor in tf-idf is used to give a higher weight to words that occur
only in a few documents. Terms that are limited to a few documents are useful
for discriminating those documents from the rest of the collection; terms that occur
frequently across the entire collection aren’t as helpful. The document frequency
dft of a term t is the number of documents it occurs in. Document frequency is
not the same as the collection frequency of a term, which is the total number of
times the word appears in the whole collection in any document. Consider in the
collection of Shakespeare’s 37 plays the two words Romeo and action. The words
have identical collection frequencies (they both occur 113 times in all the plays) but
very different document frequencies, since Romeo only occurs in a single play. If
our goal is to ﬁnd documents about the romantic tribulations of Romeo, the word
Romeo should be highly weighted, but not action:

Collection Frequency Document Frequency

Romeo 113
113
action

1
31

2 We can also use this alternative formulation, which we have used in earlier editions:
log10(count(t, d) + 1)

tft, d =

document
frequency

6.5

• TF-IDF: WEIGHING TERMS IN THE VECTOR

117

idf

We emphasize discriminative words like Romeo via the inverse document fre-
quency or idf term weight (Sparck Jones, 1972). The idf is deﬁned using the frac-
tion N/dft , where N is the total number of documents in the collection, and dft is
the number of documents in which term t occurs. The fewer documents in which a
term occurs, the higher this weight. The lowest weight of 1 is assigned to terms that
occur in all the documents. It’s usually clear what counts as a document: in Shake-
speare we would use a play; when processing a collection of encyclopedia articles
like Wikipedia, the document is a Wikipedia page; in processing newspaper articles,
the document is a single article. Occasionally your corpus might not have appropri-
ate document divisions and you might need to break up the corpus into documents
yourself for the purposes of computing idf.

Because of the large number of documents in many collections, this measure
too is usually squashed with a log function. The resulting deﬁnition for inverse
document frequency (idf) is thus

idft = log10

N
dft (cid:19)

(cid:18)

(6.13)

Here are some idf values for some words in the Shakespeare corpus, ranging from
extremely informative words which occur in only one play like Romeo, to those that
occur in a few like salad or Falstaff, to those which are very common like fool or so
common as to be completely non-discriminative since they occur in all 37 plays like
good or sweet.3

Word
Romeo
salad
Falstaff
forest
battle
wit
fool
good
sweet

df
1
2
4
12
21
34
36
37
37

idf
1.57
1.27
0.967
0.489
0.246
0.037
0.012
0
0

tf-idf

The tf-idf weighted value wt, d for word t in document d thus combines term

frequency tft, d (deﬁned either by Eq. 6.11 or by Eq. 6.12) with idf from Eq. 6.13:

wt, d = tft, d ×

idft

(6.14)

Fig. 6.9 applies tf-idf weighting to the Shakespeare term-document matrix in Fig. 6.2,
using the tf equation Eq. 6.12. Note that the tf-idf values for the dimension corre-
sponding to the word good have now all become 0; since this word appears in every
document, the tf-idf weighting leads it to be ignored. Similarly, the word fool, which
appears in 36 out of the 37 plays, has a much lower weight.

The tf-idf weighting is the way for weighting co-occurrence matrices in infor-
mation retrieval, but also plays a role in many other aspects of natural language
processing. It’s also a great baseline, the simple thing to try ﬁrst. We’ll look at other
weightings like PPMI (Positive Pointwise Mutual Information) in Section 6.6.

3 Sweet was one of Shakespeare’s favorite adjectives, a fact probably related to the increased use of
sugar in European recipes around the turn of the 16th century (Jurafsky, 2014, p. 175).

118 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

Twelfth Night
0
0
0.033
0.081

As You Like It
0.246
0
0.030
0.085

battle
good
fool
wit
Figure 6.9 A tf-idf weighted term-document matrix for four words in four Shakespeare
plays, using the counts in Fig. 6.2. For example the 0.085 value for wit in As You Like It is
the product of tf = 1 + log10(20) = 2.301 and idf = .037. Note that the idf weighting has
eliminated the importance of the ubiquitous word good and vastly reduced the impact of the
almost-ubiquitous word fool.

Julius Caesar
0.454
0
0.0012
0.048

Henry V
0.520
0
0.0019
0.054

6.6 Pointwise Mutual Information (PMI)

An alternative weighting function to tf-idf, PPMI (positive pointwise mutual infor-
mation), is used for term-term-matrices, when the vector dimensions correspond to
words rather than documents. PPMI draws on the intuition that the best way to weigh
the association between two words is to ask how much more the two words co-occur
in our corpus than we would have a priori expected them to appear by chance.

Pointwise mutual information (Fano, 1961)4 is one of the most important con-
cepts in NLP. It is a measure of how often two events x and y occur, compared with
what we would expect if they were independent:

pointwise
mutual
information

I(x, y) = log2

P(x, y)
P(x)P(y)

(6.16)

The pointwise mutual information between a target word w and a context word

c (Church and Hanks 1989, Church and Hanks 1990) is then deﬁned as:

PMI(w, c) = log2

P(w, c)
P(w)P(c)

(6.17)

The numerator tells us how often we observed the two words together (assuming
we compute probability by using the MLE). The denominator tells us how often
we would expect the two words to co-occur assuming they each occurred indepen-
dently; recall that the probability of two independent events both occurring is just
the product of the probabilities of the two events. Thus, the ratio gives us an esti-
mate of how much more the two words co-occur than we expect by chance. PMI is
a useful tool whenever we need to ﬁnd words that are strongly associated.

PMI values range from negative to positive inﬁnity. But negative PMI values
(which imply things are co-occurring less often than we would expect by chance)
tend to be unreliable unless our corpora are enormous. To distinguish whether
6 occur together less often than
two words whose individual probability is each 10−
chance, we would need to be certain that the probability of the two occurring to-
12, and this kind of granularity would require an
gether is signiﬁcantly less than 10−
enormous corpus. Furthermore it’s not clear whether it’s even possible to evaluate
such scores of ‘unrelatedness’ with human judgments. For this reason it is more

4 PMI is based on the mutual information between two random variables X and Y , deﬁned as:

I(X,Y ) =

(cid:88)

(cid:88)

x

y

P(x, y) log2

P(x, y)
P(x)P(y)

(6.15)

In a confusion of terminology, Fano used the phrase mutual information to refer to what we now call
pointwise mutual information and the phrase expectation of the mutual information for what we now call
mutual information

6.6

• POINTWISE MUTUAL INFORMATION (PMI)

119

PPMI

common to use Positive PMI (called PPMI) which replaces all negative PMI values
with zero (Church and Hanks 1989, Dagan et al. 1993, Niwa and Nitta 1994)5:

PPMI(w, c) = max(log2

P(w, c)
P(w)P(c)

, 0)

(6.18)

More formally, let’s assume we have a co-occurrence matrix F with W rows (words)
and C columns (contexts), where fi j gives the number of times word wi occurs with
context c j. This can be turned into a PPMI matrix where PPMIi j gives the PPMI
value of word wi with context c j (which we can also express as PPMI(wi, c j) or
PPMI(w = i, c = j)) as follows:

pi j =

fi j
C
j=1 fi j

W
i=1

, pi

∗

=

C
j=1 fi j
C
j=1 fi j

W
(cid:80)
i=1

, p
∗

j =

W
i=1 fi j
C
j=1 fi j

W
i=1
(cid:80)

(cid:80)

(cid:80)

(cid:80)

(cid:80)

(cid:80)

(cid:80)

PPMIi j = max(log2

pi j
p
∗

pi
∗

j

, 0)

(6.19)

(6.20)

Let’s see some PPMI calculations. We’ll use Fig. 6.10, which repeats Fig. 6.6 plus
all the count marginals, and let’s pretend for ease of calculation that these are the
only words/contexts that matter.

cherry
strawberry
digital
information

computer
2
0
1670
3325

data
8
0
1683
3982

result
9
1
85
378

pie
442
60
5
5

sugar
25
19
4
13

count(w)
486
80
3447
7703

4997

count(context)
Figure 6.10 Co-occurrence counts for four words in 5 contexts in the Wikipedia corpus,
together with the marginals, pretending for the purpose of this calculation that no other word-
s/contexts matter.

11716

5673

512

473

61

Thus for example we could compute PPMI(information,data), assuming we pre-
tended that Fig. 6.6 encompassed all the relevant word contexts/dimensions, as fol-
lows:

P(w=information, c=data) =

P(w=information) =

P(c=data) =

3982
11716
7703
11716
5673
11716

= .3399

= .6575

= .4842

PPMI(information,data) = log2(.3399/(.6575

.4842)) = .0944

∗

Fig. 6.11 shows the joint probabilities computed from the counts in Fig. 6.10, and
Fig. 6.12 shows the PPMI values. Not surprisingly, cherry and strawberry are highly
associated with both pie and sugar, and data is mildly associated with information.
PMI has the problem of being biased toward infrequent events; very rare words
tend to have very high PMI values. One way to reduce this bias toward low frequency

5 Positive PMI also cleanly solves the problem of what to do with zero counts, using 0 to replace the

∞ from log(0).

−

120 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

p(w,context)

cherry
strawberry
digital
information

computer
0.0002
0.0000
0.1425
0.2838

data
0.0007
0.0000
0.1436
0.3399

result
0.0008
0.0001
0.0073
0.0323

pie
0.0377
0.0051
0.0004
0.0004

sugar
0.0021
0.0016
0.0003
0.0011

p(w)
p(w)
0.0415
0.0068
0.2942
0.6575

0.0404
p(context)
Figure 6.11 Replacing the counts in Fig. 6.6 with joint probabilities, showing the marginals
in the right column and the bottom row.

0.0052

0.4265

0.4842

0.0437

data
0
0
0.01
0.09

computer
0
0
0.18
0.02

result
0
0
0
0.28

pie
4.38
4.10
0
0

cherry
strawberry
digital
information
Figure 6.12 The PPMI matrix showing the association between words and context words,
computed from the counts in Fig. 6.11. Note that most of the 0 PPMI values are ones that had
a negative PMI; for example PMI(cherry,computer) = -6.7, meaning that cherry and computer
co-occur on Wikipedia less often than we would expect by chance, and with PPMI we replace
negative values by zero.

sugar
3.30
5.51
0
0

events is to slightly change the computation for P(c), using a different function Pα (c)
that raises the probability of the context word to the power of α:

PPMIα (w, c) = max(log2

P(w, c)
P(w)Pα (c)

, 0)

Pα (c) =

count(c)α
c count(c)α

(6.21)

(6.22)

Levy et al. (2015) found that a setting of α = 0.75 improved performance of
embeddings on a wide range of tasks (drawing on a similar weighting used for skip-
grams described below in Eq. 6.32). This works because raising the count to α =
0.75 increases the probability assigned to rare contexts, and hence lowers their PMI
(Pα (c) > P(c) when c is rare).

(cid:80)

Another possible solution is Laplace smoothing: Before computing PMI, a small
constant k (values of 0.1-3 are common) is added to each of the counts, shrinking
(discounting) all the non-zero values. The larger the k, the more the non-zero counts
are discounted.

6.7 Applications of the tf-idf or PPMI vector models

In summary, the vector semantics model we’ve described so far represents a target
word as a vector with dimensions corresponding either to the documents in a large
collection (the term-document matrix) or to the counts of words in some neighboring
window (the term-term matrix). The values in each dimension are counts, weighted
by tf-idf (for term-document matrices) or PPMI (for term-term matrices), and the
vectors are sparse (since most values are zero).

The model computes the similarity between two words x and y by taking the
cosine of their tf-idf or PPMI vectors; high cosine, high similarity. This entire model

6.8

• WORD2VEC

121

is sometimes referred to as the tf-idf model or the PPMI model, after the weighting
function.

The tf-idf model of meaning is often used for document functions like deciding
if two documents are similar. We represent a document by taking the vectors of
all the words in the document, and computing the centroid of all those vectors.
The centroid is the multidimensional version of the mean; the centroid of a set of
vectors is a single vector that has the minimum sum of squared distances to each of
the vectors in the set. Given k word vectors w1, w2, ..., wk, the centroid document
vector d is:

centroid

document
vector

d =

w1 + w2 + ... + wk
k

(6.23)

Given two documents, we can then compute their document vectors d1 and d2, and
estimate the similarity between the two documents by cos(d1, d2). Document sim-
ilarity is also useful for all sorts of applications; information retrieval, plagiarism
detection, news recommender systems, and even for digital humanities tasks like
comparing different versions of a text to see which are similar to each other.

Either the PPMI model or the tf-idf model can be used to compute word simi-
larity, for tasks like ﬁnding word paraphrases, tracking changes in word meaning, or
automatically discovering meanings of words in different corpora. For example, we
can ﬁnd the 10 most similar words to any target word w by computing the cosines
between w and each of the V

1 other words, sorting, and looking at the top 10.

−

6.8 Word2vec

In the previous sections we saw how to represent a word as a sparse, long vector with
dimensions corresponding to words in the vocabulary or documents in a collection.
We now introduce a more powerful word representation: embeddings, short dense
vectors. Unlike the vectors we’ve seen so far, embeddings are short, with number
of dimensions d ranging from 50-1000, rather than the much larger vocabulary size
or number of documents D we’ve seen. These d dimensions don’t have a clear
V
|
interpretation. And the vectors are dense: instead of vector entries being sparse,
mostly-zero counts or functions of counts, the values will be real-valued numbers
that can be negative.

|

It turns out that dense vectors work better in every NLP task than sparse vectors.
While we don’t completely understand all the reasons for this, we have some intu-
itions. Representing words as 300-dimensional dense vectors requires our classiﬁers
to learn far fewer weights than if we represented words as 50,000-dimensional vec-
tors, and the smaller parameter space possibly helps with generalization and avoid-
ing overﬁtting. Dense vectors may also do a better job of capturing synonymy.
For example, in a sparse vector representation, dimensions for synonyms like car
and automobile dimension are distinct and unrelated; sparse vectors may thus fail
to capture the similarity between a word with car as a neighbor and a word with
automobile as a neighbor.

In this section we introduce one method for computing embeddings: skip-gram
with negative sampling, sometimes called SGNS. The skip-gram algorithm is one
of two algorithms in a software package called word2vec, and so sometimes the
algorithm is loosely referred to as word2vec (Mikolov et al. 2013a, Mikolov et al.
2013b). The word2vec methods are fast, efﬁcient to train, and easily available on-

skip-gram

SGNS

word2vec

122 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

static
embeddings

self-supervision

line with code and pretrained embeddings. Word2vec embeddings are static em-
beddings, meaning that the method learns one ﬁxed embedding for each word in the
vocabulary. In Chapter 11 we’ll introduce methods for learning dynamic contextual
embeddings like the popular family of BERT representations, in which the vector
for each word is different in different contexts.

The intuition of word2vec is that instead of counting how often each word w oc-
curs near, say, apricot, we’ll instead train a classiﬁer on a binary prediction task: “Is
word w likely to show up near apricot?” We don’t actually care about this prediction
task; instead we’ll take the learned classiﬁer weights as the word embeddings.

The revolutionary intuition here is that we can just use running text as implicitly
supervised training data for such a classiﬁer; a word c that occurs near the target
word apricot acts as gold ‘correct answer’ to the question “Is word c likely to show
up near apricot?” This method, often called self-supervision, avoids the need for
any sort of hand-labeled supervision signal. This idea was ﬁrst proposed in the task
of neural language modeling, when Bengio et al. (2003) and Collobert et al. (2011)
showed that a neural language model (a neural network that learned to predict the
next word from prior words) could just use the next word in running text as its
supervision signal, and could be used to learn an embedding representation for each
word as part of doing this prediction task.

We’ll see how to do neural networks in the next chapter, but word2vec is a
much simpler model than the neural network language model, in two ways. First,
word2vec simpliﬁes the task (making it binary classiﬁcation instead of word pre-
diction). Second, word2vec simpliﬁes the architecture (training a logistic regression
classiﬁer instead of a multi-layer neural network with hidden layers that demand
more sophisticated training algorithms). The intuition of skip-gram is:

1. Treat the target word and a neighboring context word as positive examples.
2. Randomly sample other words in the lexicon to get negative samples.
3. Use logistic regression to train a classiﬁer to distinguish those two cases.
4. Use the learned weights as the embeddings.

6.8.1 The classiﬁer

Let’s start by thinking about the classiﬁcation task, and then turn to how to train.
Imagine a sentence like the following, with a target word apricot, and assume we’re
using a window of

2 context words:

±
... lemon,

a [tablespoon of apricot jam,
c2

c3

c1

w

a] pinch ...
c4

Our goal is to train a classiﬁer such that, given a tuple (w, c) of a target word
w paired with a candidate context word c (for example (apricot, jam), or perhaps
(apricot, aardvark)) it will return the probability that c is a real context word (true
for jam, false for aardvark):

The probability that word c is not a real context word for w is just 1 minus

w, c)
P(+
|

(6.24)

Eq. 6.24:

−
How does the classiﬁer compute the probability P? The intuition of the skip-
gram model is to base this probability on embedding similarity: a word is likely to

−|

P(

w, c) = 1

w, c)
P(+
|

(6.25)

6.8

• WORD2VEC

123

occur near the target if its embedding vector is similar to the target embedding. To
compute similarity between these dense embeddings, we rely on the intuition that
two vectors are similar if they have a high dot product (after all, cosine is just a
normalized dot product). In other words:

Similarity(w, c)

c

w

(6.26)

≈
w is not a probability, it’s just a number ranging from

The dot product c
∞ to ∞
(since the elements in word2vec embeddings can be negative, the dot product can be
negative). To turn the dot product into a probability, we’ll use the logistic or sigmoid
function σ (x), the fundamental core of logistic regression:

−

·

·

σ (x) =

1

1 + exp (

x)

−

(6.27)

We model the probability that word c is a real context word for target word w as:

w, c) = σ (c
P(+
|

·

w) =

1
1 + exp (

c
−

w)

·

(6.28)

The sigmoid function returns a number between 0 and 1, but to make it a probability
we’ll also need the total probability of the two possible events (c is a context word,
and c isn’t a context word) to sum to 1. We thus estimate the probability that word c
is not a real context word for w as:

P(

w, c) = 1

−|

−
= σ (

w, c)
P(+
|
w) =

c
−

·

1

1 + exp (c

w)

·

(6.29)

Equation 6.28 gives us the probability for one word, but there are many context
words in the window. Skip-gram makes the simplifying assumption that all context
words are independent, allowing us to just multiply their probabilities:

w, c1:L) =
P(+
|

w, c1:L) =
log P(+
|

σ (ci

w)

·

L

(cid:89)i=1
L

log σ (ci

w)

·

(cid:88)i=1

(6.30)

(6.31)

In summary, skip-gram trains a probabilistic classiﬁer that, given a test target word
w and its context window of L words c1:L, assigns a probability based on how similar
this context window is to the target word. The probability is based on applying the
logistic (sigmoid) function to the dot product of the embeddings of the target word
with each context word. To compute this probability, we just need embeddings for
each target word and context word in the vocabulary.

Fig. 6.13 shows the intuition of the parameters we’ll need. Skip-gram actually
stores two embeddings for each word, one for the word as a target, and one for the
word considered as context. Thus the parameters we need to learn are two matrices
W and C, each containing an embedding for every one of the
words in the
vocabulary V .6 Let’s now turn to learning these embeddings (which is the real goal
of training this classiﬁer in the ﬁrst place).

V
|

|

In principle the target matrix and the context matrix could use different vocabularies, but we’ll simplify

6
by assuming one shared vocabulary V .

124 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

Figure 6.13 The embeddings learned by the skipgram model. The algorithm stores two
embeddings for each word, the target embedding (sometimes called the input embedding)
and the context embedding (sometimes called the output embedding). The parameter θ that
vectors, each of dimension d, formed by concate-
V
the algorithm learns is thus a matrix of 2
|
|
nating two matrices, the target embeddings W and the context+noise embeddings C.

6.8.2 Learning skip-gram embeddings

The learning algorithm for skip-gram embeddings takes as input a corpus of text,
and a chosen vocabulary size N. It begins by assigning a random embedding vector
for each of the N vocabulary words, and then proceeds to iteratively shift the em-
bedding of each word w to be more like the embeddings of words that occur nearby
in texts, and less like the embeddings of words that don’t occur nearby. Let’s start
by considering a single piece of training data:

... lemon,

a [tablespoon of apricot jam,
c2

c1

c3

w

a] pinch ...
c4

This example has a target word w (apricot), and 4 context words in the L =

window, resulting in 4 positive training instances (on the left below):

2
±

positive examples +
cpos
w
tablespoon

apricot
apricot of
apricot
apricot a

jam

negative examples -

w

cneg

cneg

w
apricot aardvark apricot seven
apricot my
apricot where
apricot coaxial

apricot forever
apricot dear
apricot

if

For training a binary classiﬁer we also need negative examples. In fact skip-
gram with negative sampling (SGNS) uses more negative examples than positive
examples (with the ratio between them set by a parameter k). So for each of these
(w, cpos) training instances we’ll create k negative samples, each consisting of the
target w plus a ‘noise word’ cneg. A noise word is a random word from the lexicon,
constrained not to be the target word w. The right above shows the setting where
k = 2, so we’ll have 2 negative examples in the negative training set
for each
positive example w, cpos.

−

The noise words are chosen according to their weighted unigram frequency
pα (w), where α is a weight. If we were sampling according to unweighted fre-
quency p(w), it would mean that with unigram probability p(“the”) we would choose
the word the as a noise word, with unigram probability p(“aardvark”) we would
choose aardvark, and so on. But in practice it is common to set α = .75, i.e. use the

1WCaardvarkzebrazebraaardvarkapricotapricot|V||V|+12V& =target wordscontext & noisewords……1..d……6.8

• WORD2VEC

125

weighting p

3
4 (w):

Pα (w) =

count(w)α

count(w(cid:48))α

w(cid:48)

(6.32)

(cid:80)

Setting α = .75 gives better performance because it gives rare noise words slightly
higher probability: for rare words, Pα (w) > P(w). To illustrate this intuition, it
might help to work out the probabilities for an example with two events, P(a) = .99
and P(b) = .01:

Pα (a) =

Pα (b) =

.99.75

.99.75 + .01.75 = .97

.01.75

.99.75 + .01.75 = .03

(6.33)

Given the set of positive and negative training instances, and an initial set of embed-
dings, the goal of the learning algorithm is to adjust those embeddings to

• Maximize the similarity of the target word, context word pairs (w, cpos) drawn

from the positive examples

• Minimize the similarity of the (w, cneg) pairs from the negative examples.

If we consider one word/context pair (w, cpos) with its k noise words cneg1...cnegk ,
we can express these two goals as the following loss function L to be minimized
); here the ﬁrst term expresses that we want the classiﬁer to assign the
(hence the
real context word cpos a high probability of being a neighbor, and the second term
expresses that we want to assign each of the noise words cnegi a high probability of
being a non-neighbor, all multiplied because we assume independence:

−

k

LCE =

log

−

w, cpos)
P(+
|

(cid:34)

P(

w, cnegi)
(cid:35)

−|

(cid:89)i=1

k

=

=

=

w, cpos) +
log P(+
|

− (cid:34)

(cid:88)i=1
k

log P(

w, cnegi)
(cid:35)

−|

w, cpos) +
log P(+
|

− (cid:34)

(cid:88)i=1
k

log

1

w, cnegi)
P(+
|

−

(cid:0)

(cid:1)

(cid:35)

log σ (cpos ·

− (cid:34)

w) +

log σ (

cnegi ·
−

w)

(cid:35)

(cid:88)i=1

(6.34)

That is, we want to maximize the dot product of the word with the actual context
words, and minimize the dot products of the word with the k negative sampled non-
neighbor words.

We minimize this loss function using stochastic gradient descent. Fig. 6.14

shows the intuition of one step of learning.

To get the gradient, we need to take the derivative of Eq. 6.34 with respect to
the different embeddings. It turns out the derivatives are the following (we leave the

126 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

Intuition of one step of gradient descent. The skip-gram model tries to shift
Figure 6.14
embeddings so the target embeddings (here for apricot) are closer to (have a higher dot prod-
uct with) context embeddings for nearby words (here jam) and further from (lower dot product
with) context embeddings for noise words that don’t occur nearby (here Tolstoy and matrix).

proof as an exercise at the end of the chapter):

∂ LCE
∂ cpos
∂ LCE
∂ cneg

∂ LCE
∂ w

= [σ (cpos ·

w)

−

1]w

= [σ (cneg ·

w)]w

= [σ (cpos ·

w)

−

1]cpos +

k

[σ (cnegi ·

(cid:88)i=1

w)]cnegi

(6.35)

(6.36)

(6.37)

The update equations going from time step t to t + 1 in stochastic gradient descent
are thus:

ct+1
pos = ct
ct+1
neg = ct

pos −
neg −

η[σ (ct
η[σ (ct

pos ·
neg ·

1]wt

wt )
−
wt )]wt

wt+1 = wt

η

−

(cid:34)

[σ (ct

pos ·

wt )

−

1]ct

pos +

(6.38)

(6.39)

(6.40)

wt )]ct

negi(cid:35)

k

[σ (ct

negi ·

(cid:88)i=1

target
embedding
context
embedding

Just as in logistic regression, then, the learning algorithm starts with randomly ini-
tialized W and C matrices, and then walks through the training corpus using gradient
descent to move W and C so as to minimize the loss in Eq. 6.34 by making the up-
dates in (Eq. 6.38)-(Eq. 6.40).

Recall that the skip-gram model learns two separate embeddings for each word i:
the target embedding wi and the context embedding ci, stored in two matrices, the
target matrix W and the context matrix C. It’s common to just add them together,
representing word i with the vector wi + ci. Alternatively we can throw away the C
matrix and just represent each word i by the vector wi.

As with the simple count-based methods like tf-idf, the context window size L
affects the performance of skip-gram embeddings, and experiments often tune the
parameter L on a devset.

WCmove apricot and jam closer,increasing cpos (cid:122) waardvarkmove apricot and matrix apartdecreasing cneg1 (cid:122) w“…apricot jam…”wzebrazebraaardvarkjamapricotcposmatrixTolstoymove apricot and Tolstoy apartdecreasing cneg2 (cid:122) w!cneg1cneg2k=2fasttext

6.9

• VISUALIZING EMBEDDINGS

127

6.8.3 Other kinds of static embeddings

There are many kinds of static embeddings. An extension of word2vec, fasttext
(Bojanowski et al., 2017), addresses a problem with word2vec as we have presented
it so far: it has no good way to deal with unknown words—words that appear in
a test corpus but were unseen in the training corpus. A related problem is word
sparsity, such as in languages with rich morphology, where some of the many forms
for each noun and verb may only occur rarely. Fasttext deals with these problems
by using subword models, representing each word as itself plus a bag of constituent
n-grams, with special boundary symbols < and > added to each word. For example,
with n = 3 the word where would be represented by the sequence <where> plus the
character n-grams:

<wh, whe, her, ere, re>

Then a skipgram embedding is learned for each constituent n-gram, and the word
where is represented by the sum of all of the embeddings of its constituent n-grams.
Unknown words can then be presented only by the sum of the constituent n-grams.
A fasttext open-source library, including pretrained embeddings for 157 languages,
is available at https://fasttext.cc.

Another very widely used static embedding model is GloVe (Pennington et al.,
2014), short for Global Vectors, because the model is based on capturing global
corpus statistics. GloVe is based on ratios of probabilities from the word-word co-
occurrence matrix, combining the intuitions of count-based models like PPMI while
also capturing the linear structures used by methods like word2vec.

It turns out that dense embeddings like word2vec actually have an elegant math-
ematical relationship with sparse embeddings like PPMI, in which word2vec can be
seen as implicitly optimizing a shifted version of a PPMI matrix (Levy and Gold-
berg, 2014c).

6.9 Visualizing Embeddings

“I see well in many dimensions as long as the dimensions are around two.”

The late economist Martin Shubik

Visualizing embeddings is an important goal in helping understand, apply, and
improve these models of word meaning. But how can we visualize a (for example)
100-dimensional vector?

The simplest way to visualize the meaning of a word
w embedded in a space is to list the most similar words to
w by sorting the vectors for all words in the vocabulary by
their cosine with the vector for w. For example the 7 closest
words to frog using a particular embeddings computed with
the GloVe algorithm are: frogs, toad, litoria, leptodactyli-
dae, rana, lizard, and eleutherodactylus (Pennington et al.,
2014).

Yet another visualization method is to use a clustering
algorithm to show a hierarchical representation of which
words are similar to others in the embedding space. The
uncaptioned ﬁgure on the left uses hierarchical clustering
of some embedding vectors for nouns as a visualization

Rohde,Gonnerman,PlautModelingWordMeaningUsingLexicalCo-OccurrenceHEADHANDFACEDOGAMERICACATEYEEUROPEFOOTCHINAFRANCECHICAGOARMFINGERNOSELEGRUSSIAMOUSEAFRICAATLANTAEARSHOULDERASIACOWBULLPUPPYLIONHAWAIIMONTREALTOKYOTOEMOSCOWTOOTHNASHVILLEBRAZILWRISTKITTENANKLETURTLEOYSTERFigure8:Multidimensionalscalingforthreenounclasses.WRISTANKLESHOULDERARMLEGHANDFOOTHEADNOSEFINGERTOEFACEEAREYETOOTHDOGCATPUPPYKITTENCOWMOUSETURTLEOYSTERLIONBULLCHICAGOATLANTAMONTREALNASHVILLETOKYOCHINARUSSIAAFRICAASIAEUROPEAMERICABRAZILMOSCOWFRANCEHAWAIIFigure9:Hierarchicalclusteringforthreenounclassesusingdistancesbasedonvectorcorrelations.20128 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

method (Rohde et al., 2006).

Probably the most common visualization method, how-
ever, is to project the 100 dimensions of a word down into 2
dimensions. Fig. 6.1 showed one such visualization, as does
Fig. 6.16, using a projection method called t-SNE (van der

Maaten and Hinton, 2008).

6.10 Semantic properties of embeddings

In this section we brieﬂy summarize some of the semantic properties of embeddings
that have been studied.

Different types of similarity or association: One parameter of vector semantic
models that is relevant to both sparse tf-idf vectors and dense word2vec vectors is
the size of the context window used to collect counts. This is generally between 1
and 10 words on each side of the target word (for a total context of 2-20 words).

The choice depends on the goals of the representation. Shorter context windows
tend to lead to representations that are a bit more syntactic, since the information is
coming from immediately nearby words. When the vectors are computed from short
context windows, the most similar words to a target word w tend to be semantically
similar words with the same parts of speech. When vectors are computed from long
context windows, the highest cosine words to a target word w tend to be words that
are topically related but not similar.

±

For example Levy and Goldberg (2014a) showed that using skip-gram with a
2, the most similar words to the word Hogwarts (from the Harry Potter
window of
series) were names of other ﬁctional schools: Sunnydale (from Buffy the Vampire
Slayer) or Evernight (from a vampire series). With a window of
5, the most similar
words to Hogwarts were other words topically related to the Harry Potter series:
Dumbledore, Malfoy, and half-blood.

±

ﬁrst-order
co-occurrence

second-order
co-occurrence

parallelogram
model

It’s also often useful to distinguish two kinds of similarity or association between
words (Sch¨utze and Pedersen, 1993). Two words have ﬁrst-order co-occurrence
(sometimes called syntagmatic association) if they are typically nearby each other.
Thus wrote is a ﬁrst-order associate of book or poem. Two words have second-order
co-occurrence (sometimes called paradigmatic association) if they have similar
neighbors. Thus wrote is a second-order associate of words like said or remarked.

Analogy/Relational Similarity: Another semantic property of embeddings is their
ability to capture relational meanings. In an important early vector space model of
cognition, Rumelhart and Abrahamson (1973) proposed the parallelogram model
for solving simple analogy problems of the form a is to b as a* is to what?. In
such problems, a system is given a problem like apple:tree::grape:?, i.e., apple is
, and must ﬁll in the word vine. In the parallelogram
to tree as grape is to
model, illustrated in Fig. 6.15, the vector from the word apple to the word tree (=
#   »
#        »
tree
grape); the nearest word to that point
−
is returned.

#       »
apple) is added to the vector for grape (

In early work with sparse embeddings, scholars showed that sparse vector mod-
els of meaning could solve such analogy problems (Turney and Littman, 2005),
but the parallelogram method received more modern attention because of its suc-
cess with word2vec or GloVe vectors (Mikolov et al. 2013c, Levy and Goldberg
2014b, Pennington et al. 2014). For example, the result of the expression

#     »
king

−

6.10

• SEMANTIC PROPERTIES OF EMBEDDINGS

129

Figure 6.15 The parallelogram model for analogy problems (Rumelhart and Abrahamson,
1973): the location of

#     »
vine can be found by subtracting

#   »
tree and adding

#       »
grape.

#            »
woman is a vector close to

#     »
#     »
man +
Italy results
#         »
in a vector that is close to
Rome. The embedding model thus seems to be extract-
ing representations of relations like MALE-FEMALE, or CAPITAL-CITY-OF, or even
COMPARATIVE/SUPERLATIVE, as shown in Fig. 6.16 from GloVe.

#         »
queen. Similarly,

#           »
France +

−

#       »
apple from
#      »
Paris

(a)

(b)

Figure 6.16 Relational properties of the GloVe vector space, shown by projecting vectors onto two dimen-
sions.
(b) offsets seem to capture comparative and superlative
morphology (Pennington et al., 2014).

#            »
woman is close to

#     »
man +

#        »
queen.

#     »
king

(a)

−

For a a : b :: a∗ : b∗ problem, meaning the algorithm is given vectors a, b, and

a∗ and must ﬁnd b∗, the parallelogram method is thus:
ˆb∗ = argmin

distance(x, b

a + a∗)

x

−

(6.41)

with some distance function, such as Euclidean distance.

There are some caveats. For example, the closest value returned by the paral-
lelogram algorithm in word2vec or GloVe embedding spaces is usually not in fact
b* but one of the 3 input words or their morphological variants (i.e., cherry:red ::
potato:x returns potato or potatoes instead of brown), so these must be explicitly
excluded. Furthermore while embedding spaces perform well if the task involves
frequent words, small distances, and certain relations (like relating countries with
their capitals or verbs/nouns with their inﬂected forms), the parallelogram method
with embeddings doesn’t work as well for other relations (Linzen 2016, Gladkova
et al. 2016, Schluter 2018, Ethayarajh et al. 2019a), and indeed Peterson et al. (2020)
argue that the parallelogram method is in general too simple to model the human
cognitive process of forming analogies of this kind.

treeapplegrapevine130 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

6.10.1 Embeddings and Historical Semantics

Embeddings can also be a useful tool for studying how meaning changes over time,
by computing multiple embedding spaces, each from texts written in a particular
time period. For example Fig. 6.17 shows a visualization of changes in meaning in
English words over the last two centuries, computed by building separate embed-
ding spaces for each decade from historical corpora like Google n-grams (Lin et al.,
2012b) and the Corpus of Historical American English (Davies, 2012).

Figure 6.17 A t-SNE visualization of the semantic change of 3 words in English using
word2vec vectors. The modern sense of each word, and the grey context words, are com-
puted from the most recent (modern) time-point embedding space. Earlier points are com-
puted from earlier historical embedding spaces. The visualizations show the changes in the
word gay from meanings related to “cheerful” or “frolicsome” to referring to homosexuality,
the development of the modern “transmission” sense of broadcast from its original sense of
sowing seeds, and the pejoration of the word awful as it shifted from meaning “full of awe”
to meaning “terrible or appalling” (Hamilton et al., 2016b).

6.11 Bias and Embeddings

In addition to their ability to learn word meaning from text, embeddings, alas,
also reproduce the implicit biases and stereotypes that were latent in the text. As
the prior section just showed, embeddings can roughly model relational similar-
ity: ‘queen’ as the closest word to ‘king’ - ‘man’ + ‘woman’ implies the analogy
man:woman::king:queen. But these same embedding analogies also exhibit gender
stereotypes. For example Bolukbasi et al. (2016) ﬁnd that the closest occupation
to ‘computer programmer’ - ‘man’ + ‘woman’ in word2vec embeddings trained on
news text is ‘homemaker’, and that the embeddings similarly suggest the analogy
‘father’ is to ‘doctor’ as ‘mother’ is to ‘nurse’. This could result in what Crawford
(2017) and Blodgett et al. (2020) call an allocational harm, when a system allo-
cates resources (jobs or credit) unfairly to different groups. For example algorithms
that use embeddings as part of a search for hiring potential programmers or doctors
might thus incorrectly downweight documents with women’s names.

It turns out that embeddings don’t just reﬂect the statistics of their input, but also
amplify bias; gendered terms become more gendered in embedding space than they
were in the input text statistics (Zhao et al. 2017, Ethayarajh et al. 2019b, Jia et al.
2020), and biases are more exaggerated than in actual labor employment statistics
(Garg et al., 2018).

Embeddings also encode the implicit associations that are a property of human
reasoning. The Implicit Association Test (Greenwald et al., 1998) measures peo-

allocational
harm

bias
ampliﬁcation

CHAPTER5.DYNAMICSOCIALREPRESENTATIONSOFWORDMEANING79Figure5.1:Two-dimensionalvisualizationofsemanticchangeinEnglishusingSGNSvectors(seeSection5.8forthevisualizationalgorithm).A,Thewordgayshiftedfrommeaning“cheerful”or“frolicsome”toreferringtohomosexuality.A,Intheearly20thcenturybroadcastreferredto“castingoutseeds”;withtheriseoftelevisionandradioitsmeaningshiftedto“transmittingsignals”.C,Awfulunderwentaprocessofpejoration,asitshiftedfrommeaning“fullofawe”tomeaning“terribleorappalling”[212].thatadverbials(e.g.,actually)haveageneraltendencytoundergosubjectiﬁcationwheretheyshiftfromobjectivestatementsabouttheworld(e.g.,“Sorry,thecarisactuallybroken”)tosubjectivestatements(e.g.,“Ican’tbelieveheactuallydidthat”,indicatingsurprise/disbelief).5.2.2ComputationallinguisticstudiesTherearealsoanumberofrecentworksanalyzingsemanticchangeusingcomputationalmethods.[200]uselatentsemanticanalysistoanalyzehowwordmeaningsbroadenandnarrowovertime.[113]userawco-occurrencevectorstoperformanumberofhistoricalcase-studiesonsemanticchange,and[252]performasimilarsetofsmall-scalecase-studiesusingtemporaltopicmodels.[87]constructpoint-wisemutualinformation-basedembeddingsandfoundthatsemanticchangesuncoveredbytheirmethodhadreasonableagreementwithhumanjudgments.[129]and[119]use“neural”word-embeddingmethodstodetectlinguisticchangepoints.Finally,[257]analyzehistoricalco-occurrencestotestwhethersynonymstendtochangeinsimilarways.representational
harm

debiasing

6.12

• EVALUATING VECTOR MODELS

131

ple’s associations between concepts (like ‘ﬂowers’ or ‘insects’) and attributes (like
‘pleasantness’ and ‘unpleasantness’) by measuring differences in the latency with
which they label words in the various categories.7 Using such methods, people
in the United States have been shown to associate African-American names with
unpleasant words (more than European-American names), male names more with
mathematics and female names with the arts, and old people’s names with unpleas-
ant words (Greenwald et al. 1998, Nosek et al. 2002a, Nosek et al. 2002b). Caliskan
et al. (2017) replicated all these ﬁndings of implicit associations using GloVe vectors
and cosine similarity instead of human latencies. For example African-American
names like ‘Leroy’ and ‘Shaniqua’ had a higher GloVe cosine with unpleasant words
while European-American names (‘Brad’, ‘Greg’, ‘Courtney’) had a higher cosine
with pleasant words. These problems with embeddings are an example of a repre-
sentational harm (Crawford 2017, Blodgett et al. 2020), which is a harm caused by
a system demeaning or even ignoring some social groups. Any embedding-aware al-
gorithm that made use of word sentiment could thus exacerbate bias against African
Americans.

Recent research focuses on ways to try to remove these kinds of biases, for
example by developing a transformation of the embedding space that removes gen-
der stereotypes but preserves deﬁnitional gender (Bolukbasi et al. 2016, Zhao et al.
2017) or changing the training procedure (Zhao et al., 2018b). However, although
these sorts of debiasing may reduce bias in embeddings, they do not eliminate it
(Gonen and Goldberg, 2019), and this remains an open problem.

Historical embeddings are also being used to measure biases in the past. Garg
et al. (2018) used embeddings from historical texts to measure the association be-
tween embeddings for occupations and embeddings for names of various ethnici-
ties or genders (for example the relative cosine similarity of women’s names versus
men’s to occupation words like ‘librarian’ or ‘carpenter’) across the 20th century.
They found that the cosines correlate with the empirical historical percentages of
women or ethnic groups in those occupations. Historical embeddings also repli-
cated old surveys of ethnic stereotypes; the tendency of experimental participants in
1933 to associate adjectives like ‘industrious’ or ‘superstitious’ with, e.g., Chinese
ethnicity, correlates with the cosine between Chinese last names and those adjectives
using embeddings trained on 1930s text. They also were able to document historical
gender biases, such as the fact that embeddings for adjectives related to competence
(‘smart’, ‘wise’, ‘thoughtful’, ‘resourceful’) had a higher cosine with male than fe-
male words, and showed that this bias has been slowly decreasing since 1960. We
return in later chapters to this question about the role of bias in natural language
processing.

6.12 Evaluating Vector Models

The most important evaluation metric for vector models is extrinsic evaluation on
tasks, i.e., using vectors in an NLP task and seeing whether this improves perfor-
mance over some other model.

7 Roughly speaking, if humans associate ‘ﬂowers’ with ‘pleasantness’ and ‘insects’ with ‘unpleasant-
ness’, when they are instructed to push a green button for ‘ﬂowers’ (daisy, iris, lilac) and ‘pleasant words’
(love, laughter, pleasure) and a red button for ‘insects’ (ﬂea, spider, mosquito) and ‘unpleasant words’
(abuse, hatred, ugly) they are faster than in an incongruous condition where they push a red button for
‘ﬂowers’ and ‘unpleasant words’ and a green button for ‘insects’ and ‘pleasant words’.

132 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

Nonetheless it is useful to have intrinsic evaluations. The most common metric
is to test their performance on similarity, computing the correlation between an
algorithm’s word similarity scores and word similarity ratings assigned by humans.
WordSim-353 (Finkelstein et al., 2002) is a commonly used set of ratings from 0
to 10 for 353 noun pairs; for example (plane, car) had an average score of 5.77.
SimLex-999 (Hill et al., 2015) is a more difﬁcult dataset that quantiﬁes similarity
(cup, mug) rather than relatedness (cup, coffee), and including both concrete and
abstract adjective, noun and verb pairs. The TOEFL dataset is a set of 80 questions,
each consisting of a target word with 4 additional word choices; the task is to choose
which is the correct synonym, as in the example: Levied is closest in meaning to:
imposed, believed, requested, correlated (Landauer and Dumais, 1997). All of these
datasets present words without context.

Slightly more realistic are intrinsic similarity tasks that include context. The
Stanford Contextual Word Similarity (SCWS) dataset (Huang et al., 2012) and the
Word-in-Context (WiC) dataset (Pilehvar and Camacho-Collados, 2019) offer richer
evaluation scenarios. SCWS gives human judgments on 2,003 pairs of words in their
sentential context, while WiC gives target words in two sentential contexts that are
either in the same or different senses; see Chapter 23. The semantic textual similarity
task (Agirre et al. 2012, Agirre et al. 2015) evaluates the performance of sentence-
level similarity algorithms, consisting of a set of pairs of sentences, each pair with
human-labeled similarity scores.

Another task used for evaluation is the analogy task, discussed on page 128,
where the system has to solve problems of the form a is to b as a* is to b*, given a, b,
and a* and having to ﬁnd b* (Turney and Littman, 2005). A number of sets of tuples
have been created for this task, (Mikolov et al. 2013a, Mikolov et al. 2013c, Glad-
kova et al. 2016), covering morphology (city:cities::child:children), lexicographic
relations (leg:table::spout:teapot) and encyclopedia relations (Beijing:China::Dublin:Ireland),
some drawing from the SemEval-2012 Task 2 dataset of 79 different relations (Jur-
gens et al., 2012).

All embedding algorithms suffer from inherent variability. For example because
of randomness in the initialization and the random negative sampling, algorithms
like word2vec may produce different results even from the same dataset, and in-
dividual documents in a collection may strongly impact the resulting embeddings
(Tian et al. 2016, Hellrich and Hahn 2016, Antoniak and Mimno 2018). When em-
beddings are used to study word associations in particular corpora, therefore, it is
best practice to train multiple embeddings with bootstrap sampling over documents
and average the results (Antoniak and Mimno, 2018).

6.13 Summary

• In vector semantics, a word is modeled as a vector—a point in high-dimensional
space, also called an embedding. In this chapter we focus on static embed-
dings, where each word is mapped to a ﬁxed embedding.

• Vector semantic models fall into two classes: sparse and dense. In sparse
models each dimension corresponds to a word in the vocabulary V and cells
are functions of co-occurrence counts. The term-document matrix has a
row for each word (term) in the vocabulary and a column for each document.
The word-context or term-term matrix has a row for each (target) word in

BIBLIOGRAPHICAL AND HISTORICAL NOTES

133

the vocabulary and a column for each context term in the vocabulary. Two
sparse weightings are common: the tf-idf weighting which weights each cell
by its term frequency and inverse document frequency, and PPMI (point-
wise positive mutual information), which is most common for word-context
matrices.

• Dense vector models have dimensionality 50–1000. Word2vec algorithms
like skip-gram are a popular way to compute dense embeddings. Skip-gram
trains a logistic regression classiﬁer to compute the probability that two words
are ‘likely to occur nearby in text’. This probability is computed from the dot
product between the embeddings for the two words.

• Skip-gram uses stochastic gradient descent to train the classiﬁer, by learning
embeddings that have a high dot product with embeddings of words that occur
nearby and a low dot product with noise words.

• Other important embedding algorithms include GloVe, a method based on

ratios of word co-occurrence probabilities.

• Whether using sparse or dense vectors, word and document similarities are
computed by some function of the dot product between vectors. The cosine
of two vectors—a normalized dot product—is the most popular such metric.

Bibliographical and Historical Notes

The idea of vector semantics arose out of research in the 1950s in three distinct
ﬁelds: linguistics, psychology, and computer science, each of which contributed a
fundamental aspect of the model.

The idea that meaning is related to the distribution of words in context was
widespread in linguistic theory of the 1950s, among distributionalists like Zellig
Harris, Martin Joos, and J. R. Firth, and semioticians like Thomas Sebeok. As Joos
(1950) put it,

the linguist’s “meaning” of a morpheme. . . is by deﬁnition the set of conditional
probabilities of its occurrence in context with all other morphemes.

The idea that the meaning of a word might be modeled as a point in a multi-
dimensional semantic space came from psychologists like Charles E. Osgood, who
had been studying how people responded to the meaning of words by assigning val-
ues along scales like happy/sad or hard/soft. Osgood et al. (1957) proposed that the
meaning of a word in general could be modeled as a point in a multidimensional
Euclidean space, and that the similarity of meaning between two words could be
modeled as the distance between these points in the space.

A ﬁnal intellectual source in the 1950s and early 1960s was the ﬁeld then called
mechanical indexing, now known as information retrieval. In what became known
as the vector space model for information retrieval (Salton 1971, Sparck Jones
1986), researchers demonstrated new ways to deﬁne the meaning of words in terms
of vectors (Switzer, 1965), and reﬁned methods for word similarity based on mea-
sures of statistical association between words like mutual information (Giuliano,
1965) and idf (Sparck Jones, 1972), and showed that the meaning of documents
could be represented in the same vector spaces used for words. Around the same
time, (Cordier, 1965) showed that factor analysis of word association probabilities
could be used to form dense vector representations of words.

mechanical
indexing

134 CHAPTER 6

• VECTOR SEMANTICS AND EMBEDDINGS

semantic
feature

SVD

Some of the philosophical underpinning of the distributional way of thinking
came from the late writings of the philosopher Wittgenstein, who was skeptical of
the possibility of building a completely formal theory of meaning deﬁnitions for
each word, suggesting instead that “the meaning of a word is its use in the language”
(Wittgenstein, 1953, PI 43). That is, instead of using some logical language to deﬁne
each word, or drawing on denotations or truth values, Wittgenstein’s idea is that we
should deﬁne a word by how it is used by people in speaking and understanding in
their day-to-day interactions, thus preﬁguring the movement toward embodied and
experiential models in linguistics and NLP (Glenberg and Robertson 2000, Lake and
Murphy 2021, Bisk et al. 2020, Bender and Koller 2020).

More distantly related is the idea of deﬁning words by a vector of discrete fea-
tures, which has roots at least as far back as Descartes and Leibniz (Wierzbicka 1992,
Wierzbicka 1996). By the middle of the 20th century, beginning with the work of
Hjelmslev (Hjelmslev, 1969) (originally 1943) and ﬂeshed out in early models of
generative grammar (Katz and Fodor, 1963), the idea arose of representing mean-
ing with semantic features, symbols that represent some sort of primitive meaning.
For example words like hen, rooster, or chick, have something in common (they all
describe chickens) and something different (their age and sex), representable as:

+female, +chicken, +adult
hen
rooster -female, +chicken, +adult
chick

+chicken, -adult

The dimensions used by vector models of meaning to deﬁne words, however, are
only abstractly related to this idea of a small ﬁxed number of hand-built dimensions.
Nonetheless, there has been some attempt to show that certain dimensions of em-
bedding models do contribute some speciﬁc compositional aspect of meaning like
these early semantic features.

The use of dense vectors to model word meaning, and indeed the term embed-
ding, grew out of the latent semantic indexing (LSI) model (Deerwester et al.,
1988) recast as LSA (latent semantic analysis) (Deerwester et al., 1990). In LSA
singular value decomposition—SVD— is applied to a term-document matrix (each
cell weighted by log frequency and normalized by entropy), and then the ﬁrst 300
dimensions are used as the LSA embedding. Singular Value Decomposition (SVD)
is a method for ﬁnding the most important dimensions of a data set, those dimen-
sions along which the data varies the most. LSA was then quickly widely applied:
as a cognitive model Landauer and Dumais (1997), and for tasks like spell check-
ing (Jones and Martin, 1997), language modeling (Bellegarda 1997, Coccaro and
Jurafsky 1998, Bellegarda 2000) morphology induction (Schone and Jurafsky 2000,
Schone and Jurafsky 2001b), multiword expressions (MWEs) (Schone and Juraf-
sky, 2001a), and essay grading (Rehder et al., 1998). Related models were simul-
taneously developed and applied to word sense disambiguation by Sch¨utze (1992b).
LSA also led to the earliest use of embeddings to represent words in a probabilis-
tic classiﬁer, in the logistic regression document router of Sch¨utze et al. (1995).
The idea of SVD on the term-term matrix (rather than the term-document matrix)
as a model of meaning for NLP was proposed soon after LSA by Sch¨utze (1992b).
Sch¨utze applied the low-rank (97-dimensional) embeddings produced by SVD to the
task of word sense disambiguation, analyzed the resulting semantic space, and also
suggested possible techniques like dropping high-order dimensions. See Sch¨utze
(1997).

A number of alternative matrix models followed on from the early SVD work,
including Probabilistic Latent Semantic Indexing (PLSI) (Hofmann, 1999), Latent

EXERCISES

135

Dirichlet Allocation (LDA) (Blei et al., 2003), and Non-negative Matrix Factoriza-
tion (NMF) (Lee and Seung, 1999).

The LSA community seems to have ﬁrst used the word “embedding” in Landauer
et al. (1997), in a variant of its mathematical meaning as a mapping from one space
or mathematical structure to another. In LSA, the word embedding seems to have
described the mapping from the space of sparse count vectors to the latent space of
SVD dense vectors. Although the word thus originally meant the mapping from one
space to another, it has metonymically shifted to mean the resulting dense vector in
the latent space, and it is in this sense that we currently use the word.

By the next decade, Bengio et al. (2003) and Bengio et al. (2006) showed that
neural language models could also be used to develop embeddings as part of the task
of word prediction. Collobert and Weston (2007), Collobert and Weston (2008), and
Collobert et al. (2011) then demonstrated that embeddings could be used to represent
word meanings for a number of NLP tasks. Turian et al. (2010) compared the value
of different kinds of embeddings for different NLP tasks. Mikolov et al. (2011)
showed that recurrent neural nets could be used as language models. The idea of
simplifying the hidden layer of these neural net language models to create the skip-
gram (and also CBOW) algorithms was proposed by Mikolov et al. (2013a). The
negative sampling training algorithm was proposed in Mikolov et al. (2013b). There
are numerous surveys of static embeddings and their parameterizations (Bullinaria
and Levy 2007, Bullinaria and Levy 2012, Lapesa and Evert 2014, Kiela and Clark
2014, Levy et al. 2015).

See Manning et al. (2008) for a deeper understanding of the role of vectors in in-
formation retrieval, including how to compare queries with documents, more details
on tf-idf, and issues of scaling to very large datasets. See Kim (2019) for a clear and
comprehensive tutorial on word2vec. Cruse (2004) is a useful introductory linguistic
text on lexical semantics.

Exercises

136 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

CHAPTER

7 Neural Networks and Neural

Language Models

feedforward

deep learning

“[M]achines of this character can behave in a very complicated manner when
the number of units is large.”

Alan Turing (1948) “Intelligent Machines”, page 6

Neural networks are a fundamental computational tool for language process-
ing, and a very old one. They are called neural because their origins lie in the
McCulloch-Pitts neuron (McCulloch and Pitts, 1943), a simpliﬁed model of the
biological neuron as a kind of computing element that could be described in terms
of propositional logic. But the modern use in language processing no longer draws
on these early biological inspirations.

Instead, a modern neural network is a network of small computing units, each
of which takes a vector of input values and produces a single output value. In this
chapter we introduce the neural net applied to classiﬁcation. The architecture we
introduce is called a feedforward network because the computation proceeds iter-
atively from one layer of units to the next. The use of modern neural nets is often
called deep learning, because modern networks are often deep (have many layers).
Neural networks share much of the same mathematics as logistic regression. But
neural networks are a more powerful classiﬁer than logistic regression, and indeed a
minimal neural network (technically one with a single ‘hidden layer’) can be shown
to learn any function.

Neural net classiﬁers are different from logistic regression in another way. With
logistic regression, we applied the regression classiﬁer to many different tasks by
developing many rich kinds of feature templates based on domain knowledge. When
working with neural networks, it is more common to avoid most uses of rich hand-
derived features, instead building neural networks that take raw words as inputs
and learn to induce features as part of the process of learning to classify. We saw
examples of this kind of representation learning for embeddings in Chapter 6. Nets
that are very deep are particularly good at representation learning. For that reason
deep neural nets are the right tool for tasks that offer sufﬁcient data to learn features
automatically.

In this chapter we’ll introduce feedforward networks as classiﬁers, and also ap-
ply them to the simple task of language modeling: assigning probabilities to word
sequences and predicting upcoming words. In subsequent chapters we’ll introduce
many other aspects of neural models, such as recurrent neural networks (Chap-
ter 9), the Transformer (Chapter 10), and masked language modeling (Chapter 11).

7.1 Units

7.1

• UNITS

137

bias term

vector

activation

The building block of a neural network is a single computational unit. A unit takes
a set of real valued numbers as input, performs some computation on them, and
produces an output.

At its heart, a neural unit is taking a weighted sum of its inputs, with one addi-
tional term in the sum called a bias term. Given a set of inputs x1...xn, a unit has
a set of corresponding weights w1...wn and a bias b, so the weighted sum z can be
represented as:

z = b +

wixi

(7.1)

(cid:88)i

Often it’s more convenient to express this weighted sum using vector notation; recall
from linear algebra that a vector is, at heart, just a list or array of numbers. Thus
we’ll talk about z in terms of a weight vector w, a scalar bias b, and an input vector
x, and we’ll replace the sum with the convenient dot product:

z = w

x + b

·

(7.2)

As deﬁned in Eq. 7.2, z is just a real valued number.

Finally, instead of using z, a linear function of x, as the output, neural units
apply a non-linear function f to z. We will refer to the output of this function as
the activation value for the unit, a. Since we are just modeling a single unit, the
activation for the node is in fact the ﬁnal output of the network, which we’ll generally
call y. So the value y is deﬁned as:

y = a = f (z)

We’ll discuss three popular non-linear functions f () below (the sigmoid, the tanh,
and the rectiﬁed linear unit or ReLU) but it’s pedagogically convenient to start with
the sigmoid function since we saw it in Chapter 5:

sigmoid

y = σ (z) =

1
z
1 + e−

(7.3)

The sigmoid (shown in Fig. 7.1) has a number of advantages; it maps the output
into the range (0, 1), which is useful in squashing outliers toward 0 or 1. And it’s
differentiable, which as we saw in Section 5.10 will be handy for learning.

Figure 7.1 The sigmoid function takes a real value and maps it to the range (0, 1). It is
nearly linear around 0 but outlier values get squashed toward 0 or 1.

Substituting Eq. 7.2 into Eq. 7.3 gives us the output of a neural unit:

y = σ (w

x + b) =

·

1 + exp(

1
(w

−

x + b))

·

(7.4)

138 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

Fig. 7.2 shows a ﬁnal schematic of a basic neural unit. In this example the unit
takes 3 input values x1, x2, and x3, and computes a weighted sum, multiplying each
value by a weight (w1, w2, and w3, respectively), adds them to a bias term b, and then
passes the resulting sum through a sigmoid function to result in a number between 0
and 1.

Figure 7.2 A neural unit, taking 3 inputs x1, x2, and x3 (and a bias b that we represent as a
weight for an input clamped at +1) and producing an output y. We include some convenient
intermediate variables: the output of the summation, z, and the output of the sigmoid, a. In
this case the output of the unit y is the same as a, but in deeper networks we’ll reserve y to
mean the ﬁnal output of the entire network, leaving a as the activation of an individual node.

Let’s walk through an example just to get an intuition. Let’s suppose we have a

unit with the following weight vector and bias:

w = [0.2, 0.3, 0.9]
b = 0.5

What would this unit do with the following input vector:

x = [0.5, 0.6, 0.1]

The resulting output y would be:

y = σ (w

x + b) =

·

1
(w
1 + e−

x+b)
·

=

1
.9+.5)
.3+.1
.2+.6
(.5
∗
∗
∗

1 + e−

=

1
1 + e−

0.87 = .70

tanh

In practice, the sigmoid is not commonly used as an activation function. A function
that is very similar but almost always better is the tanh function shown in Fig. 7.3a;
tanh is a variant of the sigmoid that ranges from -1 to +1:

y = tanh(z) =

z
ez
e−
−
z
ez + e−

(7.5)

ReLU

The simplest activation function, and perhaps the most commonly used, is the rec-
tiﬁed linear unit, also called the ReLU, shown in Fig. 7.3b. It’s just the same as z
when z is positive, and 0 otherwise:

y = ReLU(z) = max(z, 0)

(7.6)

These activation functions have different properties that make them useful for differ-
ent language applications or network architectures. For example, the tanh function
has the nice properties of being smoothly differentiable and mapping outlier values
toward the mean. The rectiﬁer function, on the other hand, has nice properties that

x1x2x3yw1w2w3∑bσ+1za7.2

• THE XOR PROBLEM 139

(a)

(b)

Figure 7.3 The tanh and ReLU activation functions.

saturated

vanishing
gradient

result from it being very close to linear. In the sigmoid or tanh functions, very high
values of z result in values of y that are saturated, i.e., extremely close to 1, and have
derivatives very close to 0. Zero derivatives cause problems for learning, because as
we’ll see in Section 7.5, we’ll train networks by propagating an error signal back-
wards, multiplying gradients (partial derivatives) from each layer of the network;
gradients that are almost 0 cause the error signal to get smaller and smaller until it is
too small to be used for training, a problem called the vanishing gradient problem.
Rectiﬁers don’t have this problem, since the derivative of ReLU for high values of z
is 1 rather than very close to 0.

7.2 The XOR problem

Early in the history of neural networks it was realized that the power of neural net-
works, as with the real neurons that inspired them, comes from combining these
units into larger networks.

One of the most clever demonstrations of the need for multi-layer networks was
the proof by Minsky and Papert (1969) that a single neural unit cannot compute
some very simple functions of its input. Consider the task of computing elementary
logical functions of two inputs, like AND, OR, and XOR. As a reminder, here are
the truth tables for those functions:

AND
x1 x2 y
0
0
0
0
1
0
0
0
1
1
1
1

OR
x1 x2 y
0
0
0
1
1
0
1
0
1
1
1
1

XOR
x1 x2 y
0
0
0
1
1
0
1
0
1
0
1
1

perceptron

This example was ﬁrst shown for the perceptron, which is a very simple neural
unit that has a binary output and does not have a non-linear activation function. The
output y of a perceptron is 0 or 1, and is computed as follows (using the same weight
w, input x, and bias b as in Eq. 7.2):

y =

0,
1,

if w
if w

·
·

(cid:26)

x + b
0
x + b > 0

≤

(7.7)

140 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

It’s very easy to build a perceptron that can compute the logical AND and OR

functions of its binary inputs; Fig. 7.4 shows the necessary weights.

(a)

(b)

Figure 7.4 The weights w and bias b for perceptrons for computing logical functions. The
inputs are shown as x1 and x2 and the bias as a special node with value +1 which is multiplied
with the bias weight b. (a) logical AND, with weights w1 = 1 and w2 = 1 and bias weight
b =
1. (b) logical OR, with weights w1 = 1 and w2 = 1 and bias weight b = 0. These
weights/biases are just one from an inﬁnite number of possible sets of weights and biases that
would implement the functions.

−

It turns out, however, that it’s not possible to build a perceptron to compute

logical XOR! (It’s worth spending a moment to give it a try!)

decision
boundary

linearly
separable

The intuition behind this important result relies on understanding that a percep-
tron is a linear classiﬁer. For a two-dimensional input x1 and x2, the perceptron
equation, w1x1 + w2x2 + b = 0 is the equation of a line. (We can see this by putting
b/w2).) This line acts as a
it in the standard linear format: x2 = (
decision boundary in two-dimensional space in which the output 0 is assigned to all
inputs lying on one side of the line, and the output 1 to all input points lying on the
other side of the line. If we had more than 2 inputs, the decision boundary becomes
a hyperplane instead of a line, but the idea is the same, separating the space into two
categories.

w1/w2)x1 + (

−

−

Fig. 7.5 shows the possible logical inputs (00, 01, 10, and 11) and the line drawn
by one possible set of parameters for an AND and an OR classiﬁer. Notice that there
is simply no way to draw a line that separates the positive cases of XOR (01 and 10)
from the negative cases (00 and 11). We say that XOR is not a linearly separable
function. Of course we could draw a boundary with a curve, or some other function,
but not a single line.

7.2.1 The solution: neural networks

While the XOR function cannot be calculated by a single perceptron, it can be cal-
culated by a layered network of perceptron units. Rather than see this with networks
of simple perceptrons, however, let’s see how to compute XOR using two layers of
ReLU-based units following Goodfellow et al. (2016). Fig. 7.6 shows a ﬁgure with
the input being processed by two layers of neural units. The middle layer (called
h) has two units, and the output layer (called y) has one unit. A set of weights and
biases are shown that allows the network to correctly compute the XOR function.

Let’s walk through what happens with the input x = [0, 0]. If we multiply each
input value by the appropriate weight, sum, and then add the bias b, we get the vector
[0, -1], and we then apply the rectiﬁed linear transformation to give the output of the
h layer as [0, 0]. Now we once again multiply by the weights, sum, and add the
bias (0 in this case) resulting in the value 0. The reader should work through the
computation of the remaining 3 possible input pairs to see that the resulting y values
are 1 for the inputs [0, 1] and [1, 0] and 0 for [0, 0] and [1, 1].

x1x2+1-111x1x2+10117.2

• THE XOR PROBLEM 141

Figure 7.5 The functions AND, OR, and XOR, represented with input x1 on the x-axis and input x2 on the
y-axis. Filled circles represent perceptron outputs of 1, and white circles perceptron outputs of 0. There is no
way to draw a line that correctly separates the two categories for XOR. Figure styled after Russell and Norvig
(2002).

Figure 7.6 XOR solution after Goodfellow et al. (2016). There are three ReLU units, in
two layers; we’ve called them h1, h2 (h for “hidden layer”) and y1. As before, the numbers
on the arrows represent the weights w for each unit, and we represent the bias b as a weight
on a unit clamped to +1, with the bias weights/units in gray.

It’s also instructive to look at the intermediate results, the outputs of the two
hidden nodes h1 and h2. We showed in the previous paragraph that the h vector for
the inputs x = [0, 0] was [0, 0]. Fig. 7.7b shows the values of the h layer for all
4 inputs. Notice that hidden representations of the two input points x = [0, 1] and
x = [1, 0] (the two cases with XOR output = 1) are merged to the single point h =
[1, 0]. The merger makes it easy to linearly separate the positive and negative cases
of XOR. In other words, we can view the hidden layer of the network as forming a
representation of the input.

In this example we just stipulated the weights in Fig. 7.6. But for real examples
the weights for neural networks are learned automatically using the error backprop-
agation algorithm to be introduced in Section 7.5. That means the hidden layers will
learn to form useful representations. This intuition, that neural networks can auto-
matically learn useful representations of the input, is one of their key advantages,
and one that we will return to again and again in later chapters.

0011x1x20011x1x20011x1x2a)  x1 AND x2b)  x1 OR x2c)  x1 XOR x2?x1x2h1h2y1+11-1111-201+10142 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

Figure 7.7 The hidden layer forming a new representation of the input.
(b) shows the
representation of the hidden layer, h, compared to the original input representation x in (a).
Notice that the input point [0, 1] has been collapsed with the input point [1, 0], making it
possible to linearly separate the positive and negative cases of XOR. After Goodfellow et al.
(2016).

7.3 Feedforward Neural Networks

feedforward
network

multi-layer
perceptrons
MLP

hidden layer

fully-connected

Let’s now walk through a slightly more formal presentation of the simplest kind of
neural network, the feedforward network. A feedforward network is a multilayer
network in which the units are connected with no cycles; the outputs from units in
each layer are passed to units in the next higher layer, and no outputs are passed
back to lower layers. (In Chapter 9 we’ll introduce networks with cycles, called
recurrent neural networks.)

For historical reasons multilayer networks, especially feedforward networks, are
sometimes called multi-layer perceptrons (or MLPs); this is a technical misnomer,
since the units in modern multilayer networks aren’t perceptrons (perceptrons are
purely linear, but modern networks are made up of units with non-linearities like
sigmoids), but at some point the name stuck.

Simple feedforward networks have three kinds of nodes:

input units, hidden

units, and output units.

Fig. 7.8 shows a picture. The input layer x is a vector of simple scalar values just

as we saw in Fig. 7.2.

The core of the neural network is the hidden layer h formed of hidden units hi,
each of which is a neural unit as described in Section 7.1, taking a weighted sum of
its inputs and then applying a non-linearity. In the standard architecture, each layer
is fully-connected, meaning that each unit in each layer takes as input the outputs
from all the units in the previous layer, and there is a link between every pair of units
from two adjacent layers. Thus each hidden unit sums over all the input units.

Recall that a single hidden unit has as parameters a weight vector and a bias. We
represent the parameters for the entire hidden layer by combining the weight vector
and bias for each unit i into a single weight matrix W and a single bias vector b for
the whole layer (see Fig. 7.8). Each element W ji of the weight matrix W represents
the weight of the connection from the ith input unit xi to the jth hidden unit h j.

The advantage of using a single matrix W for the weights of the entire layer is
that now the hidden layer computation for a feedforward network can be done very
efﬁciently with simple matrix operations. In fact, the computation only has three

0011x1x2a) The original x space0011h1h22b) The new (linearly separable) h space7.3

• FEEDFORWARD NEURAL NETWORKS

143

Figure 7.8 A simple 2-layer feedforward network, with one hidden layer, one output layer,
and one input layer (the input layer is usually not counted when enumerating layers).

steps: multiplying the weight matrix by the input vector x, adding the bias vector b,
and applying the activation function g (such as the sigmoid, tanh, or ReLU activation
function deﬁned above).

The output of the hidden layer, the vector h, is thus the following (for this exam-

ple we’ll use the sigmoid function σ as our activation function):

h = σ (Wx + b)

(7.8)

Notice that we’re applying the σ function here to a vector, while in Eq. 7.3 it was
applied to a scalar. We’re thus allowing σ (
), and indeed any activation function
·
), to apply to a vector element-wise, so g[z1, z2, z3] = [g(z1), g(z2), g(z3)].
g(
·
Let’s introduce some constants to represent the dimensionalities of these vectors
and matrices. We’ll refer to the input layer as layer 0 of the network, and have n0
represent the number of inputs, so x is a vector of real numbers of dimension n0,
Rn0, a column vector of dimensionality [n0, 1]. Let’s call the
or more formally x
hidden layer layer 1 and the output layer layer 2. The hidden layer has dimensional-
Rn1 (since each hidden unit can take a different bias
ity n1, so h
value). And the weight matrix W has dimensionality W

∈
Rn1 and also b

n0, i.e. [n1, n0].

∈

∈

Rn1×

Take a moment to convince yourself that the matrix multiplication in Eq. 7.8 will

∈

compute the value of each h j as σ

n0
i=1 W jixi + b j

.

As we saw in Section 7.2, the resulting value h (for hidden but also for hypoth-
esis) forms a representation of the input. The role of the output layer is to take
this new representation h and compute a ﬁnal output. This output could be a real-
valued number, but in many cases the goal of the network is to make some sort of
classiﬁcation decision, and so we will focus on the case of classiﬁcation.

(cid:0)(cid:80)

(cid:1)

If we are doing a binary task like sentiment classiﬁcation, we might have a sin-
gle output node, and its scalar value y is the probability of positive versus negative
sentiment. If we are doing multinomial classiﬁcation, such as assigning a part-of-
speech tag, we might have one output node for each potential part-of-speech, whose
output value is the probability of that part-of-speech, and the values of all the output
nodes must sum to one. The output layer is thus a vector y that gives a probability
distribution across the output nodes.

Let’s see how this happens. Like the hidden layer, the output layer has a weight
matrix (let’s call it U), but some models don’t include a bias vector b in the output

x1x2xn0……+1b…UWinput layerhidden layeroutput layerh1y1y2yn2h2h3hn1144 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

layer, so we’ll simplify by eliminating the bias vector in this example. The weight
matrix is multiplied by its input vector (h) to produce the intermediate output z:

z = Uh

∈
n1, and element Ui j is the weight from unit j in the hidden layer to unit i in the

∈

Rn2, weight matrix U has dimensionality U

There are n2 output nodes, so z
Rn2×
output layer.

normalizing

softmax

However, z can’t be the output of the classiﬁer, since it’s a vector of real-valued
numbers, while what we need for classiﬁcation is a vector of probabilities. There is
a convenient function for normalizing a vector of real values, by which we mean
converting it to a vector that encodes a probability distribution (all the numbers lie
between 0 and 1 and sum to 1): the softmax function that we saw on page 89 of
Chapter 5. More generally for any vector z of dimensionality d, the softmax is
deﬁned as:

softmax(zi) =

exp(zi)
d
j=1 exp(z j)

1

i

≤

≤

d

Thus for example given a vector

(cid:80)

z = [0.6, 1.1,

1.5, 1.2, 3.2,

−

1.1],

−

(7.9)

(7.10)

the softmax function will normalize it to a probability distribution (shown rounded):

softmax(z) = [0.055, 0.090, 0.0067, 0.10, 0.74, 0.010]

(7.11)

You may recall that we used softmax to create a probability distribution from a
vector of real-valued numbers (computed from summing weights times features) in
the multinomial version of logistic regression in Chapter 5.

That means we can think of a neural network classiﬁer with one hidden layer
as building a vector h which is a hidden layer representation of the input, and then
running standard multinomial logistic regression on the features that the network
develops in h. By contrast, in Chapter 5 the features were mainly designed by hand
via feature templates. So a neural network is like multinomial logistic regression,
but (a) with many layers, since a deep neural network is like layer after layer of lo-
gistic regression classiﬁers; (b) with those intermediate layers having many possible
activation functions (tanh, ReLU, sigmoid) instead of just sigmoid (although we’ll
continue to use σ for convenience to mean any activation function); (c) rather than
forming the features by feature templates, the prior layers of the network induce the
feature representations themselves.

Here are the ﬁnal equations for a feedforward network with a single hidden layer,
which takes an input vector x, outputs a probability distribution y, and is parameter-
ized by weight matrices W and U and a bias vector b:

h = σ (Wx + b)
z = Uh
y = softmax(z)

(7.12)

∈

n0, U

Rn1×

Rn1,
And just to remember the shapes of all our variables, x
∈
Rn2. We’ll call this network a 2-
W
layer network (we traditionally don’t count the input layer when numbering layers,
but do count the output layer). So by this terminology logistic regression is a 1-layer
network.

n1, and the output vector y

Rn1, b

Rn0, h

Rn2×

∈

∈

∈

∈

7.3

• FEEDFORWARD NEURAL NETWORKS

145

7.3.1 More details on feedforward networks

Let’s now set up some notation to make it easier to talk about deeper networks of
depth more than 2. We’ll use superscripts in square brackets to mean layer num-
bers, starting at 0 for the input layer. So W[1] will mean the weight matrix for the
(ﬁrst) hidden layer, and b[1] will mean the bias vector for the (ﬁrst) hidden layer. n j
) to stand for the activation
will mean the number of units at layer j. We’ll use g(
·
function, which will tend to be ReLU or tanh for intermediate layers and softmax
for output layers. We’ll use a[i] to mean the output from layer i, and z[i] to mean the
combination of weights and biases W[i]a[i
1] + b[i]. The 0th layer is for inputs, so
−
we’ll refer to the inputs x more generally as a[0].

Thus we can re-represent our 2-layer net from Eq. 7.12 as follows:

z[1] = W[1]a[0] + b[1]
a[1] = g[1](z[1])
z[2] = W[2]a[1] + b[2]
a[2] = g[2](z[2])

ˆy = a[2]

(7.13)

Note that with this notation, the equations for the computation done at each layer are
the same. The algorithm for computing the forward step in an n-layer feedforward
network, given the input vector a[0] is thus simply:

for i in 1,...,n

z[i] = W[i] a[i
−
a[i] = g[i](z[i])

1] + b[i]

ˆy = a[n]

) are generally different at the ﬁnal layer. Thus g[2]
The activation functions g(
·
might be softmax for multinomial classiﬁcation or sigmoid for binary classiﬁcation,
) at the internal layers.
while ReLU or tanh might be the activation function g(
·

It’s often useful to have a name for the ﬁnal set of activations right before the ﬁnal
softmax. So however many layers we have, we’ll generally call the unnormalized
values in the ﬁnal vector z[n], the vector of scores right before the ﬁnal softmax, the
logits (see (5.7).

logits

The need for non-linear activation functions One of the reasons we use non-
linear activation functions for each layer in a neural network is that if we did not, the
resulting network is exactly equivalent to a single-layer network. Let’s see why this
is true. Imagine the ﬁrst two layers of such a network of purely linear layers:

z[1] = W[1]x + b[1]
z[2] = W[2]z[1] + b[2]

We can rewrite the function that the network is computing as:

z[2] = W[2]z[1] + b[2]

= W[2](W[1]x + b[1]) + b[2]
= W[2]W[1]x + W[2]b[1] + b[2]
= W(cid:48)x + b(cid:48)

(7.14)

This generalizes to any number of layers. So without non-linear activation functions,
a multilayer network is just a notational variant of a single layer network with a

146 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

different set of weights, and we lose all the representational power of multilayer
networks.

In describing networks, we will often use a slightly sim-
Replacing the bias unit
pliﬁed notation that represents exactly the same function without referring to an ex-
plicit bias node b. Instead, we add a dummy node a0 to each layer whose value will
always be 1. Thus layer 0, the input layer, will have a dummy node a[0]
0 = 1, layer 1
will have a[1]
0 = 1, and so on. This dummy node still has an associated weight, and
that weight represents the bias value b. For example instead of an equation like

we’ll use:

h = σ (Wx + b)

h = σ (Wx)

(7.15)

(7.16)

But now instead of our vector x having n0 values: x = x1, . . . , xn0, it will have n0 +
1 values, with a new 0th dummy value x0 = 1: x = x0, . . . , xn0. And instead of
computing each h j as follows:

h j = σ

n0

(cid:32)

(cid:88)i=1

Wji xi + b j

,

(cid:33)

(7.17)

we’ll instead use:

h j = σ

n0

Wji xi

(cid:32)

(cid:33)

(cid:88)i=0
where the value Wj0 replaces what had been b j. Fig. 7.9 shows a visualization.

,

(7.18)

(a)

(b)

Figure 7.9 Replacing the bias node (shown in a) with x0 (b).

We’ll continue showing the bias as b when we go over the learning algorithm
in Section 7.5, but then we’ll switch to this simpliﬁed notation without explicit bias
terms for the rest of the book.

x1x2xn0……+1b…UWh1y1y2yn2h2h3hn1x1x2xn0……x0=1…UWh1y1y2yn2h2h3hn17.4

• FEEDFORWARD NETWORKS FOR NLP: CLASSIFICATION

147

7.4 Feedforward networks for NLP: Classiﬁcation

Let’s see how to apply feedforward networks to NLP tasks! In this section we’ll
look at classiﬁcation tasks like sentiment analysis; in the next section we’ll introduce
neural language modeling.

Let’s begin with a simple 2-layer sentiment classiﬁer. You might imagine taking
our logistic regression classiﬁer from Chapter 5, which corresponds to a 1-layer net-
work, and just adding a hidden layer. The input element xi could be scalar features
like those in Fig. 5.2, e.g., x1 = count(words
doc), x2 = count(positive lexicon
doc, and so on. And the output layer ˆy could have
words
two nodes (one each for positive and negative), or 3 nodes (positive, negative, neu-
tral), in which case ˆy1 would be the estimated probability of positive sentiment, ˆy2
the probability of negative and ˆy3 the probability of neutral. The resulting equations
would be just what we saw above for a 2-layer network (as always, we’ll continue
to use the σ to stand for any non-linearity, whether sigmoid, ReLU or other).

doc), x3 = 1 if “no”

∈

∈

∈

(each xi is a hand-designed feature)

x = [x1, x2, ...xN]
h = σ (Wx + b)
z = Uh
ˆy = softmax(z)

(7.19)

Fig. 7.10 shows a sketch of this architecture. As we mentioned earlier, adding this
hidden layer to our logistic regression classiﬁer allows the network to represent the
non-linear interactions between features. This alone might give us a better sentiment
classiﬁer.

Figure 7.10 Feedforward network sentiment analysis using traditional hand-built features
of the input text.

Most applications of neural networks for NLP do something different, however.
Instead of using hand-built human-engineered features as the input to our classiﬁer,
we draw on deep learning’s ability to learn features from the data by representing
words as embeddings, like the word2vec or GloVe embeddings we saw in Chapter 6.
There are various ways to represent an input for classiﬁcation. One simple baseline
is to apply some sort of pooling function to the embeddings of all the words in the

pooling

UW[n⨉1]Hidden layerOutput layersoftmax[dh⨉n][dh⨉1][3⨉dh]Input wordsp(+)h1h2h3hdh…y1^y2^y3^xhyInput layer n=3 features[3⨉1]x1x2x3dessertwasgreatpositive lexiconwords = 1count of “no” = 0wordcount=3p(-)p(neut)148 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

input. For example, for a text with n input words/tokens w1, ..., wn, we can turn the
n embeddings e(w1), ..., e(wn) (each of dimensionality d) into a single embedding
also of dimensionality d by just summing the embeddings, or by taking their mean
(summing and then dividing by n):

xmean =

1
n

n

e(wi)

(7.20)

(cid:88)i=1
There are many other options, like taking the element-wise max. The element-wise
max of a set of n vectors is a new vector whose kth element is the max of the kth
elements of all the n vectors. Here are the equations for this classiﬁer assuming
mean pooling; the architecture is sketched in Fig. 7.11:

x = mean(e(w1), e(w2), . . . , e(wn))
h = σ (Wx + b)
z = Uh
ˆy = softmax(z)

(7.21)

Figure 7.11 Feedforward network sentiment analysis using a pooled embedding of the in-
put words.

While Eq. 7.21 shows how to classify a single example x, in practice we want
to efﬁciently classify an entire test set of m examples. We do this by vectoring the
process, just as we saw with logistic regression; instead of using for-loops to go
through each example, we’ll use matrix multiplication to do the entire computation
of an entire test set at once. First, we pack all the input feature vectors for each input
x into a single input matrix X, with each row i a row vector consisting of the pooled
embedding for input example x(i) (i.e., the vector x(i)). If the dimensionality of our
pooled input embedding is d, X will be a matrix of shape [m

d].
We will then need to slightly modify Eq. 7.21. X is of shape [m

d] and W is of
d], so we’ll have to reorder how we multiply X and W and transpose W
dh]. The bias vector b
dh] will now have to be replicated into a matrix of shape
dh]. We’ll need to similarly reorder the next step and transpose U. Finally, our
do], where do is

shape [dh ×
so they correctly multiply to yield a matrix H of shape [m
from Eq. 7.21 of shape [1
[m
output matrix ˆY will be of shape [m

3] (or more generally [m

×

×

×

×

×

×

×

UW[d⨉1]Hidden layerOutput layersoftmax[dh⨉d][dh⨉1][3⨉dh]Input wordsp(+)embedding for“great”embedding for“dessert”h1h2h3hdh…y1^y2^y3^xhyInput layer pooled embedding[3⨉1]pooling+dessertwasgreatembedding for“was”p(-)p(neut)7.5

• TRAINING NEURAL NETS

149

the number of output classes), with each row i of our output matrix ˆY consisting of
the output vector ˆy(i).‘ Here are the ﬁnal equations for computing the output class
distribution for an entire test set:

+ b)

H = σ (XW(cid:124)
Z = HU(cid:124)
ˆY = softmax(Z)

(7.22)

pretraining

The idea of using word2vec or GloVe embeddings as our input representation—
and more generally the idea of relying on another algorithm to have already learned
an embedding representation for our input words—is called pretraining. Using
pretrained embedding representations, whether simple static word embeddings like
word2vec or the much more powerful contextual embeddings we’ll introduce in
Chapter 11, is one of the central ideas of deep learning. (It’s also possible, how-
ever, to train the word embeddings as part of an NLP task; we’ll talk about how to
do this in Section 7.7 in the context of the neural language modeling task.)

7.5 Training Neural Nets

A feedforward neural net is an instance of supervised machine learning in which we
know the correct output y for each observation x. What the system produces, via
Eq. 7.13, is ˆy, the system’s estimate of the true y. The goal of the training procedure
is to learn parameters W[i] and b[i] for each layer i that make ˆy for each training
observation as close as possible to the true y.

In general, we do all this by drawing on the methods we introduced in Chapter 5
for logistic regression, so the reader should be comfortable with that chapter before
proceeding.

First, we’ll need a loss function that models the distance between the system
output and the gold output, and it’s common to use the loss function used for logistic
regression, the cross-entropy loss.

Second, to ﬁnd the parameters that minimize this loss function, we’ll use the

gradient descent optimization algorithm introduced in Chapter 5.

Third, gradient descent requires knowing the gradient of the loss function, the
vector that contains the partial derivative of the loss function with respect to each
of the parameters.
In logistic regression, for each observation we could directly
compute the derivative of the loss function with respect to an individual w or b. But
for neural networks, with millions of parameters in many layers, it’s much harder to
see how to compute the partial derivative of some weight in layer 1 when the loss
is attached to some much later layer. How do we partial out the loss over all those
intermediate layers? The answer is the algorithm called error backpropagation or
backward differentiation.

7.5.1 Loss function

cross-entropy
loss

The cross-entropy loss that is used in neural networks is the same one we saw for
logistic regression. If the neural network is being used as a binary classiﬁer, with
the sigmoid at the ﬁnal layer, the loss function is the same logistic regression loss
we saw in Eq. 5.23:

LCE ( ˆy, y) =

x) =
log p(y
|

−

−

[y log ˆy + (1

y) log(1

ˆy)]

−

−

(7.23)

150 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

If we are using the network to classify into 3 or more classes, the loss function is
exactly the same as the loss for multinomial regression that we saw in Chapter 5 on
page 101. Let’s brieﬂy summarize the explanation here for convenience. First, when
we have more than 2 classes we’ll need to represent both y and ˆy as vectors. Let’s
assume we’re doing hard classiﬁcation, where only one class is the correct one.
The true label y is then a vector with K elements, each corresponding to a class,
with yc = 1 if the correct class is c, with all other elements of y being 0. Recall that
a vector like this, with one value equal to 1 and the rest 0, is called a one-hot vector.
And our classiﬁer will produce an estimate vector with K elements ˆy, each element
x).
ˆyk of which represents the estimated probability p(yk = 1
|

The loss function for a single example x is the negative sum of the logs of the K

output classes, each weighted by their probability yk:

LCE (ˆy, y) =

−

K

yk log ˆyk

(7.24)

(cid:88)k=1
We can simplify this equation further; let’s ﬁrst rewrite the equation using the func-
tion 1
which evaluates to 1 if the condition in the brackets is true and to 0 oth-
erwise. This makes it more obvious that the terms in the sum in Eq. 7.24 will be 0
except for the term corresponding to the true class for which yk = 1:

{}

negative log
likelihood loss

LCE (ˆy, y) =

K

1

−

yk = 1
}
{

log ˆyk

(cid:88)k=1
In other words, the cross-entropy loss is simply the negative log of the output proba-
bility corresponding to the correct class, and we therefore also call this the negative
log likelihood loss:

LCE (ˆy, y) =

log ˆyc

−

(where c is the correct class)

(7.25)

Plugging in the softmax formula from Eq. 7.9, and with K the number of classes:

LCE (ˆy, y) =

log

−

exp(zc)
K
j=1 exp(z j)

7.5.2 Computing the Gradient

(cid:80)

(where c is the correct class)

(7.26)

How do we compute the gradient of this loss function? Computing the gradient
requires the partial derivative of the loss function with respect to each parameter.
For a network with one weight layer and sigmoid output (which is what logistic
regression is), we could simply use the derivative of the loss that we used for logistic
regression in Eq. 7.27 (and derived in Section 5.10):

∂ LCE (ˆy, y)
∂ w j

y) x j

= ( ˆy

−
= (σ (w

x + b)

y) x j

−

·

(7.27)

Or for a network with one weight layer and softmax output (=multinomial logistic
regression), we could use the derivative of the softmax loss from Eq. 5.48, shown

7.5

• TRAINING NEURAL NETS

151

for a particular weight wk and input xi

∂ LCE(ˆy, y)
∂ wk,i

=

=

=

ˆyk)xi

(yk −
−
(yk −
−
yk −

− (cid:32)

x))xi
p(yk = 1
|
exp (wk
K
j=1 exp (wj

·

x + bk)

x + b j) (cid:33)

·

xi

(7.28)

error back-
propagation

(cid:80)
But these derivatives only give correct updates for one weight layer: the last one!
For deep networks, computing the gradients for each weight is much more complex,
since we are computing the derivative with respect to weight parameters that appear
all the way back in the very early layers of the network, even though the loss is
computed only at the very end of the network.

The solution to computing this gradient is an algorithm called error backprop-
agation or backprop (Rumelhart et al., 1986). While backprop was invented spe-
cially for neural networks, it turns out to be the same as a more general procedure
called backward differentiation, which depends on the notion of computation
graphs. Let’s see how that works in the next subsection.

7.5.3 Computation Graphs

A computation graph is a representation of the process of computing a mathematical
expression, in which the computation is broken down into separate operations, each
of which is modeled as a node in a graph.

Consider computing the function L(a, b, c) = c(a + 2b). If we make each of the
component addition and multiplication operations explicit, and add names (d and e)
for the intermediate outputs, the resulting series of computations is:

∗

d = 2
b
e = a + d
L = c
e

∗

We can now represent this as a graph, with nodes for each operation, and di-
rected edges showing the outputs from each operation as the inputs to the next, as
in Fig. 7.12. The simplest use of computation graphs is to compute the value of
the function with some given inputs. In the ﬁgure, we’ve assumed the inputs a = 3,
b = 1, c =
2, and we’ve shown the result of the forward pass to compute the re-
sult L(3, 1,
2) =
10. In the forward pass of a computation graph, we apply each
operation left to right, passing the outputs of each computation as the input to the
next node.

−
−

−

7.5.4 Backward differentiation on computation graphs

The importance of the computation graph comes from the backward pass, which
is used to compute the derivatives that we’ll need for the weight update. In this
example our goal is to compute the derivative of the output function L with respect
to each of the input variables, i.e., ∂ L
∂ a tells us how
much a small change in a affects L.

∂ c . The derivative ∂ L

∂ b , and ∂ L

∂ a , ∂ L

chain rule

Backwards differentiation makes use of the chain rule in calculus, so let’s re-
mind ourselves of that. Suppose we are computing the derivative of a composite

152 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

Figure 7.12 Computation graph for the function L(a, b, c) = c(a+2b), with values for input
nodes a = 3, b = 1, c =

2, showing the forward pass computation of L.

−

function f (x) = u(v(x)). The derivative of f (x) is the derivative of u(x) with respect
to v(x) times the derivative of v(x) with respect to x:

d f
dx

=

du
dv ·

dv
dx

(7.29)

The chain rule extends to more than two functions. If computing the derivative of a
composite function f (x) = u(v(w(x))), the derivative of f (x) is:

d f
dx

=

du
dv ·

dv
dw ·

dw
dx

(7.30)

The intuition of backward differentiation is to pass gradients back from the ﬁnal
node to all the nodes in the graph. Fig. 7.13 shows part of the backward computation
at one node e. Each node takes an upstream gradient that is passed in from its parent
node to the right, and for each of its inputs computes a local gradient (the gradient
of its output with respect to its input), and uses the chain rule to multiply these two
to compute a downstream gradient to be passed on to the next earlier node.

Figure 7.13 Each node (like e here) takes an upstream gradient, multiplies it by the local
gradient (the gradient of its output with respect to its input), and uses the chain rule to compute
a downstream gradient to be passed on to a prior node. A node may have multiple local
gradients if it has multiple inputs.

Let’s now compute the 3 derivatives we need. Since in the computation graph

L = ce, we can directly compute the derivative ∂ L
∂ c :

For the other two, we’ll need to use the chain rule:

∂ L
∂ c

= e

∂ L
∂ a
∂ L
∂ b

=

=

∂ L
∂ e
∂ L
∂ e

∂ e
∂ a
∂ e
∂ d

∂ d
∂ b

(7.31)

(7.32)

e=a+dd = 2bL=cea=3b=1c=-2e=5d=2L=-10forward passabcedLed∂L∂d∂L∂e=∂e∂d∂L∂e∂e∂dupstream gradientdownstream gradientlocal gradient7.5

• TRAINING NEURAL NETS

153

Eq. 7.32 and Eq. 7.31 thus require ﬁve intermediate derivatives: ∂ L
∂ d , and
∂ d
∂ b , which are as follows (making use of the fact that the derivative of a sum is the
sum of the derivatives):

∂ e , ∂ L

∂ a , ∂ e

∂ c , ∂ e

L = ce :

e = a + d :

d = 2b :

∂ L
∂ c
∂ e
∂ d

= e

= 1

∂ L
∂ e
∂ e
∂ a
∂ d
∂ b

= c,

= 1,

= 2

In the backward pass, we compute each of these partials along each edge of the
graph from right to left, using the chain rule just as we did above. Thus we begin by
computing the downstream gradients from node L, which are ∂ L
∂ c . For node e,
we then multiply this upstream gradient ∂ L
∂ e by the local gradient (the gradient of the
output with respect to the input), ∂ e
∂ d to get the output we send back to node d: ∂ L
∂ d .
And so on, until we have annotated the graph all the way to all the input variables.
The forward pass conveniently already will have computed the values of the forward
intermediate variables we need (like d and e) to compute these derivatives. Fig. 7.14
shows the backward pass.

∂ e and ∂ L

Figure 7.14 Computation graph for the function L(a, b, c) = c(a + 2b), showing the backward pass computa-
tion of ∂ L

∂ a , ∂ L

∂ b , and ∂ L
∂ c .

Backward differentiation for a neural network

Of course computation graphs for real neural networks are much more complex.
Fig. 7.15 shows a sample computation graph for a 2-layer neural network with n0 =
2, n1 = 2, and n2 = 1, assuming binary classiﬁcation and hence using a sigmoid
output unit for simplicity. The function that the computation graph is computing is:

z[1] = W[1]x + b[1]
a[1] = ReLU(z[1])
z[2] = W[2]a[1] + b[2]
a[2] = σ (z[2])
ˆy = a[2]

(7.33)

e=d+ad = 2bL=cea=3b=1e=5d=2L=-10 abc∂L=5∂c∂L=-2∂e∂e=1∂d∂d=2∂b∂e=1∂abackward passc=-2∂L=-2∂e∂L=5∂c∂L∂d=-2∂e∂d∂L∂e=∂L∂a=-2∂e∂a∂L∂e=∂L∂b=-4∂d∂b∂L∂d=154 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

For the backward pass we’ll also need to compute the loss L. The loss function

for binary sigmoid output from Eq. 7.23 is

LCE ( ˆy, y) =

[y log ˆy + (1

−

Our output ˆy = a[2], so we can rephrase this as

y) log(1

ˆy)]

−

−

LCE (a[2], y) =

y log a[2] + (1

y) log(1

−

−

a[2])
(cid:105)

−

(cid:104)

(7.34)

(7.35)

Figure 7.15 Sample computation graph for a simple 2-layer neural net (= 1 hidden layer) with two input units
and 2 hidden units. We’ve adjusted the notation a bit to avoid long equations in the nodes by just mentioning
[1]
the function that is being computed, and the resulting variable name. Thus the * to the right of node w
11 means
[1]
11 is to be multiplied by x1, and the node z[1] = + means that the value of z[1] is computed by summing

that w

the three nodes that feed into it (the two products, and the bias term b

[1]
i ).

The weights that need updating (those for which we need to know the partial
derivative of the loss function) are shown in teal. In order to do the backward pass,
we’ll need to know the derivatives of all the functions in the graph. We already saw
in Section 5.10 the derivative of the sigmoid σ :

dσ (z)
dz

= σ (z)(1

σ (z))

−

(7.36)

We’ll also need the derivatives of each of the other activation functions. The

derivative of tanh is:

d tanh(z)
dz
The derivative of the ReLU is

tanh2(z)

= 1

−

d ReLU(z)
dz

=

0 f or z < 0
1 f or z
0

≥

(cid:26)

(7.37)

(7.38)

We’ll give the start of the computation, computing the derivative of the loss
∂ z (and leaving the rest of the computation as an

function L with respect to z, or ∂ L
exercise for the reader). By the chain rule:

∂ L
∂ z

=

∂ L
∂ a[2]

∂ a[2]
∂ z

(7.39)

z[2] = +a[2] = σ a[1] = ReLUz[1] = +b[1]****x1x2a[1] = ReLUz[1] = +b[1]**w[2]11w[1]11w[1]12w[1]21w[1]22b[2]w[2]12L (a[2],y)12111227.5

• TRAINING NEURAL NETS

155

So let’s ﬁrst compute ∂ L

∂ a[2] , taking the derivative of Eq. 7.35, repeated here:

LCE (a[2], y) =

∂ L
∂ a[2]

=

=

=

−

(cid:104)

y log a[2] + (1

−
∂ log(a[2])

y) log(1

−

y

− (cid:32)(cid:32)

∂ a[2] (cid:33)

+ (1

−

y)

a[2])
(cid:105)
∂ log(1

−
∂ a[2]

a[2])

(cid:33)

y

1
a[2]

+

−

−

(cid:18)(cid:18)
y
a[2]

(cid:18)

1
a[2]

−

1)

(
−

(cid:19)

(7.40)

+ (1

y)

1

−

(cid:19)
y
1

1
−
a[2]
−

(cid:19)

Next, by the derivative of the sigmoid:

∂ a[2]
∂ z

= a[2](1

a[2])

−

Finally, we can use the chain rule:

∂ L
∂ z

=

∂ L
∂ a[2]

∂ a[2]
∂ z

=

−
(cid:18)
= a[2]

y
a[2]

+

y

−

y
1

1
−
a[2]
−

(cid:19)

a[2](1

a[2])

−

(7.41)

Continuing the backward computation of the gradients (next by passing the gra-
1 and the two product nodes, and so on, back to all the teal nodes), is

dients over b[2]
left as an exercise for the reader.

7.5.5 More details on learning

Optimization in neural networks is a non-convex optimization problem, more com-
plex than for logistic regression, and for that and other reasons there are many best
practices for successful learning.

For logistic regression we can initialize gradient descent with all the weights and
biases having the value 0. In neural networks, by contrast, we need to initialize the
weights with small random numbers. It’s also helpful to normalize the input values
to have 0 mean and unit variance.

Various forms of regularization are used to prevent overﬁtting. One of the most
important is dropout: randomly dropping some units and their connections from
the network during training (Hinton et al. 2012, Srivastava et al. 2014). Tuning
of hyperparameters is also important. The parameters of a neural network are the
weights W and biases b; those are learned by gradient descent. The hyperparameters
are things that are chosen by the algorithm designer; optimal values are tuned on a
devset rather than by gradient descent learning on the training set. Hyperparameters
include the learning rate η, the mini-batch size, the model architecture (the number
of layers, the number of hidden nodes per layer, the choice of activation functions),
how to regularize, and so on. Gradient descent itself also has many architectural
variants such as Adam (Kingma and Ba, 2015).

Finally, most modern neural networks are built using computation graph for-
malisms that make it easy and natural to do gradient computation and parallelization

dropout

hyperparameter

156 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

on vector-based GPUs (Graphic Processing Units). PyTorch (Paszke et al., 2017)
and TensorFlow (Abadi et al., 2015) are two of the most popular. The interested
reader should consult a neural network textbook for further details; some sugges-
tions are at the end of the chapter.

7.6 Feedforward Neural Language Modeling

As our second application of feedforward networks, let’s consider language mod-
eling: predicting upcoming words from prior words. Neural language modeling—
based on the transformer architecture that we will see in Chapter 10—is the algo-
rithm the underlies all of modern NLP. In this section and the next we’ll introduce a
simpler version of neural language models for feedforward networks, an algorithm
ﬁrst introduced by Bengio et al. (2003). The feedforward language model introduces
many of the important concepts of neural language modeling, concepts we’ll return
to as we describe more powerful models inChapter 9 and Chapter 10.

Neural language models have many advantages over the n-gram language mod-
els of Chapter 3. Compared to n-gram models, neural language models can handle
much longer histories, can generalize better over contexts of similar words, and are
more accurate at word-prediction. On the other hand, neural net language models
are much more complex, are slower and need more energy to train, and are less inter-
pretable than n-gram models, so for some smaller tasks an n-gram language model
is still the right tool.

A feedforward neural language model (LM) is a feedforward network that takes
as input at time t a representation of some number of previous words (wt
2,
etc.) and outputs a probability distribution over possible next words. Thus—like the
n-gram LM—the feedforward neural LM approximates the probability of a word
given the entire prior context P(wt |
1
previous words:

1) by approximating based on the N

1, wt

w1:t

−

−

−

−

−

−

≈

1)

P(wt |

w1, . . . , wt

N+1, . . . , wt

P(wt |
wt
In the following examples we’ll use a 4-gram example, so we’ll show a neural net to
estimate the probability P(wt = i
wt
|

Neural language models represent words in this prior context by their embed-
dings, rather than just by their word identity as used in n-gram language models.
Using embeddings allows neural language models to generalize better to unseen
data. For example, suppose we’ve seen this sentence in training:

(7.42)

3, wt

2, wt

1).

1)

−

−

−

−

I have to make sure that the cat gets fed.

but have never seen the words “gets fed” after the word “dog”. Our test set has the
preﬁx “I forgot to make sure that the dog gets”. What’s the next word? An n-gram
language model will predict “fed” after “that the cat gets”, but not after “that the dog
gets”. But a neural LM, knowing that “cat” and “dog” have similar embeddings, will
be able to generalize from the “cat” context to assign a high enough probability to
“fed” even after seeing “dog”.

7.6.1 Forward inference in the neural language model

forward
inference

Let’s walk through forward inference or decoding for neural language models.
Forward inference is the task, given an input, of running a forward pass on the

one-hot vector

7.6

• FEEDFORWARD NEURAL LANGUAGE MODELING

157

network to produce a probability distribution over possible outputs, in this case next
words.

We ﬁrst represent each of the N previous words as a one-hot vector of length
V
, i.e., with one dimension for each word in the vocabulary. A one-hot vector is
|
|
a vector that has one element equal to 1—in the dimension corresponding to that
word’s index in the vocabulary— while all the other elements are set to zero. Thus
in a one-hot representation for the word “toothpaste”, supposing it is V5, i.e., index
5 in the vocabulary, x5 = 1, and xi = 0
i
∀

= 5, as shown here:

[0 0 0 0 1 0 0 ... 0 0 0 0]
... |V|

1 2 3 4 5 6 7 ...

−

−

1, wt

2, and wt

The feedforward neural language model (sketched in Fig. 7.17) has a moving
window that can see N words into the past. We’ll let N equal 3, so the 3 words
wt
3 are each represented as a one-hot vector. We then multiply
these one-hot vectors by the embedding matrix E. The embedding weight matrix E
has a column for each word, each a column vector of d dimensions, and hence has
dimensionality d
. Multiplying by a one-hot vector that has only one non-zero
|
element xi = 1 simply selects out the relevant column vector for word i, resulting in
the embedding for word i, as shown in Fig. 7.16.

× |

V

−

Figure 7.16 Selecting the embedding vector for word V5 by multiplying the embedding
matrix E with a one-hot vector with a 1 in index 5.

The 3 resulting embedding vectors are concatenated to produce e, the embedding
layer. This is followed by a hidden layer and an output layer whose softmax produces
a probability distribution over words. For example y42, the value of output node 42,
is the probability of the next word wt being V42, the vocabulary word with index 42
(which is the word ‘ﬁsh’ in our example).

Here’s the algorithm in detail for our mini example:

1. Select three embeddings from E: Given the three previous words, we look
up their indices, create 3 one-hot vectors, and then multiply each by the em-
bedding matrix E. Consider wt
3. The one-hot vector for ‘for’ (index 35) is
multiplied by the embedding matrix E, to give the ﬁrst part of the ﬁrst hidden
layer, the embedding layer. Since each column of the input matrix E is an
embedding for a word, and the input is a one-hot column vector xi for word
Vi, the embedding layer for input w will be Exi = ei, the embedding for word
i. We now concatenate the three embeddings for the three context words to
produce the embedding layer e.

−

2. Multiply by W: We multiply by W (and add b) and pass through the ReLU

(or other) activation function to get the hidden layer h.

embedding
layer

3. Multiply by U: h is now multiplied by U
4. Apply softmax: After the softmax, each node i in the output layer estimates
2, wt

1, wt

3)

the probability P(wt = i
wt
|

−

−

−

E|V|d1|V|d1=✕55e5(cid:54)
158 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

Figure 7.17 Forward inference in a feedforward neural language model. At each timestep
t the network computes a d-dimensional embedding for each context word (by multiplying a
one-hot vector by the embedding matrix E), and concatenates the 3 resulting embeddings to
get the embedding layer e. The embedding vector e is multiplied by a weight matrix W and
then an activation function is applied element-wise to produce the hidden layer h, which is
then multiplied by another weight matrix U. Finally, a softmax output layer predicts at each
node i the probability that the next word wt will be vocabulary word Vi.

In summary, the equations for a neural language model with a window size of 3,

given one-hot input vectors for each input context word, are:

2; Ext

−

e = [Ext
3; Ext
−
h = σ (We + b)
z = Uh
ˆy = softmax(z)

1]

−

(7.43)

Note that we formed the embedding layer e by concatenating the 3 embeddings
for the three context vectors; we’ll often use semicolons to mean concatenation of
vectors.

7.7 Training the neural language model

self-training

The high-level intuition of training neural language models, whether the simple
feedforward language models we describe here or the more powerful transformer
language models of Chapter 10, is the idea of self-training or self-supervision that
we saw in Chapter 6 for learning word representations. In self-training for language
modeling, we take a corpus of text as training material and at each time step t ask
the model to predict the next word. At ﬁrst it will do poorly at this task, but since

UWembedding layer3d⨉1hiddenlayeroutput layersoftmaxdh⨉3ddh⨉1|V|⨉dhinput layerone-hot vectorsE|V|⨉3d⨉|V|p(do|…)p(aardvark|…)p(zebra|…)p(fish|…)|V|⨉1EEh1h2y1h3hdh……y34y|V|…001001|V|35001001|V|451001001|V|99200……y42y35102^^^^^hexyforallthe?thanksand…wt-3wt-2wt-1wt…freeze

7.7

• TRAINING THE NEURAL LANGUAGE MODEL

159

in each case we know the correct answer (it’s the next word in the corpus!) we can
easily train it to be better at predicting the correct next word. We call such a model
self-supervised because we don’t have to add any special gold labels to the data;
the natural sequence of words is its own supervision! We simply train the model to
minimize the error in predicting the true next word in the training sequence.

In practice, training the model means setting the parameters θ = E, W, U, b. For
some tasks, it’s ok to freeze the embedding layer E with initial word2vec values.
Freezing means we use word2vec or some other pretraining algorithm to compute
the initial embedding matrix E, and then hold it constant while we only modify W,
U, and b, i.e., we don’t update E during language model training. However, often
we’d like to learn the embeddings simultaneously with training the network. This is
useful when the task the network is designed for (like sentiment classiﬁcation, trans-
lation, or parsing) places strong constraints on what makes a good representation for
words.

Let’s see how to train the entire model including E, i.e. to set all the parameters
θ = E, W, U, b. We’ll do this via gradient descent (Fig. 5.6), using error backprop-
agation on the computation graph to compute the gradient. Training thus not only
sets the weights W and U of the network, but also as we’re predicting upcoming
words, we’re learning the embeddings E for each word that best predict upcoming
words.

Figure 7.18 Learning all the way back to embeddings. Again, the embedding matrix E is
shared among the 3 context words.

Fig. 7.18 shows the set up for a window size of N=3 context words. The input x
consists of 3 one-hot vectors, fully connected to the embedding layer via 3 instanti-
ations of the embedding matrix E. We don’t want to learn separate weight matrices
for mapping each of the 3 previous words to the projection layer. We want one single
embedding dictionary E that’s shared among these three. That’s because over time,
many different words will appear as wt
1, and we’d like to just represent

2 or wt

−

−

UWembedding layer3d⨉1hiddenlayeroutput layersoftmaxdh⨉3ddh⨉1|V|⨉dhinput layerone-hot vectorsE|V|⨉3d⨉|V|p(do|…)p(aardvark|…)p(zebra|…)p(fish|…)|V|⨉1EEh1h2y1h3hdh……y34y|V|…001001|V|35001001|V|451001001|V|99200……y42y35102^^^^^hexyforallthefishthanksand…wt-3wt-2wt-1wt…L = −log P(fish | for, all, the)wt=fish160 CHAPTER 7

• NEURAL NETWORKS AND NEURAL LANGUAGE MODELS

each word with one vector, whichever context position it appears in. Recall that the
embedding weight matrix E has a column for each word, each a column vector of d
dimensions, and hence has dimensionality d

V

Generally training proceeds by taking as input a very long text, concatenating all
the sentences, starting with random weights, and then iteratively moving through the
text predicting each word wt . At each word wt , we use the cross-entropy (negative
log likelihood) loss. Recall that the general form for this (repeated from Eq. 7.25)
is:

.
|

× |

LCE ( ˆy, y) =

log ˆyi,

−

(where i is the correct class)

(7.44)

For language modeling, the classes are the words in the vocabulary, so ˆyi here means
the probability that the model assigns to the correct next word wt :

LCE =

log p(wt |
wt

−

1, ..., wt

−

n+1)

−

(7.45)

The parameter update for stochastic gradient descent for this loss from step s to s + 1
is then:

θ s+1 = θ s

∂ [

−

η

−

log p(wt |
wt
−
∂ θ

1, ..., wt

n+1)]

−

(7.46)

This gradient can be computed in any standard neural network framework which
will then backpropagate through θ = E, W, U, b.

Training the parameters to minimize loss will result both in an algorithm for
language modeling (a word predictor) but also a new set of embeddings E that can
be used as word representations for other tasks.

7.8 Summary

• Neural networks are built out of neural units, originally inspired by biological

neurons but now simply an abstract computational device.

• Each neural unit multiplies input values by a weight vector, adds a bias, and
then applies a non-linear activation function like sigmoid, tanh, or rectiﬁed
linear unit.

• In a fully-connected, feedforward network, each unit in layer i is connected

to each unit in layer i + 1, and there are no cycles.

• The power of neural networks comes from the ability of early layers to learn

representations that can be utilized by later layers in the network.

• Neural networks are trained by optimization algorithms like gradient de-

scent.

• Error backpropagation, backward differentiation on a computation graph,

is used to compute the gradients of the loss function for a network.

• Neural language models use a neural network as a probabilistic classiﬁer, to

compute the probability of the next word given the previous n words.

• Neural language models can use pretrained embeddings, or can learn embed-

dings from scratch in the process of language modeling.

BIBLIOGRAPHICAL AND HISTORICAL NOTES

161

Bibliographical and Historical Notes

connectionist

The origins of neural networks lie in the 1940s McCulloch-Pitts neuron (McCul-
loch and Pitts, 1943), a simpliﬁed model of the biological neuron as a kind of com-
puting element that could be described in terms of propositional logic. By the late
1950s and early 1960s, a number of labs (including Frank Rosenblatt at Cornell and
Bernard Widrow at Stanford) developed research into neural networks; this phase
saw the development of the perceptron (Rosenblatt, 1958), and the transformation
of the threshold into a bias, a notation we still use (Widrow and Hoff, 1960).

The ﬁeld of neural networks declined after it was shown that a single perceptron
unit was unable to model functions as simple as XOR (Minsky and Papert, 1969).
While some small amount of work continued during the next two decades, a major
revival for the ﬁeld didn’t come until the 1980s, when practical tools for building
deeper networks like error backpropagation became widespread (Rumelhart et al.,
1986). During the 1980s a wide variety of neural network and related architec-
tures were developed, particularly for applications in psychology and cognitive sci-
ence (Rumelhart and McClelland 1986b, McClelland and Elman 1986, Rumelhart
and McClelland 1986a, Elman 1990), for which the term connectionist or paral-
lel distributed processing was often used (Feldman and Ballard 1982, Smolensky
1988). Many of the principles and techniques developed in this period are foun-
dational to modern work, including the ideas of distributed representations (Hinton,
1986), recurrent networks (Elman, 1990), and the use of tensors for compositionality
(Smolensky, 1990).

By the 1990s larger neural networks began to be applied to many practical lan-
guage processing tasks as well, like handwriting recognition (LeCun et al. 1989) and
speech recognition (Morgan and Bourlard 1990). By the early 2000s, improvements
in computer hardware and advances in optimization and training techniques made it
possible to train even larger and deeper networks, leading to the modern term deep
learning (Hinton et al. 2006, Bengio et al. 2007). We cover more related history in
Chapter 9 and Chapter 16.

There are a number of excellent books on the subject. Goldberg (2017) has
superb coverage of neural networks for natural language processing. For neural
networks in general see Goodfellow et al. (2016) and Nielsen (2015).

162 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

CHAPTER

8 Sequence Labeling for Parts of

Speech and Named Entities

parts of speech

named entity

POS

To each word a warbling note

A Midsummer Night’s Dream, V.I

Dionysius Thrax of Alexandria (c. 100 B.C.), or perhaps someone else (it was a long
time ago), wrote a grammatical sketch of Greek (a “techn¯e”) that summarized the
linguistic knowledge of his day. This work is the source of an astonishing proportion
of modern linguistic vocabulary, including the words syntax, diphthong, clitic, and
analogy. Also included are a description of eight parts of speech: noun, verb,
pronoun, preposition, adverb, conjunction, participle, and article. Although earlier
scholars (including Aristotle as well as the Stoics) had their own lists of parts of
speech, it was Thrax’s set of eight that became the basis for descriptions of European
languages for the next 2000 years. (All the way to the Schoolhouse Rock educational
television shows of our childhood, which had songs about 8 parts of speech, like the
late great Bob Dorough’s Conjunction Junction.) The durability of parts of speech
through two millennia speaks to their centrality in models of human language.

Proper names are another important and anciently studied linguistic category.
While parts of speech are generally assigned to individual words or morphemes, a
proper name is often an entire multiword phrase, like the name “Marie Curie”, the
location “New York City”, or the organization “Stanford University”. We’ll use the
term named entity for, roughly speaking, anything that can be referred to with a
proper name: a person, a location, an organization, although as we’ll see the term is
commonly extended to include things that aren’t entities per se.

Parts of speech (also known as POS) and named entities are useful clues to
sentence structure and meaning. Knowing whether a word is a noun or a verb tells us
about likely neighboring words (nouns in English are preceded by determiners and
adjectives, verbs by nouns) and syntactic structure (verbs have dependency links to
nouns), making part-of-speech tagging a key aspect of parsing. Knowing if a named
entity like Washington is a name of a person, a place, or a university is important to
many natural language processing tasks like question answering, stance detection,
or information extraction.

In this chapter we’ll introduce the task of part-of-speech tagging, taking a se-
quence of words and assigning each word a part of speech like NOUN or VERB, and
the task of named entity recognition (NER), assigning words or phrases tags like
PERSON, LOCATION, or ORGANIZATION.

sequence
labeling

Such tasks in which we assign, to each word xi in an input word sequence, a
label yi, so that the output sequence Y has the same length as the input sequence X
are called sequence labeling tasks. We’ll introduce classic sequence labeling algo-
rithms, one generative— the Hidden Markov Model (HMM)—and one discriminative—
the Conditional Random Field (CRF). In following chapters we’ll introduce modern
sequence labelers based on RNNs and Transformers.

8.1

(Mostly) English Word Classes

8.1

•

(MOSTLY) ENGLISH WORD CLASSES

163

Until now we have been using part-of-speech terms like noun and verb rather freely.
In this section we give more complete deﬁnitions. While word classes do have
semantic tendencies—adjectives, for example, often describe properties and nouns
people— parts of speech are deﬁned instead based on their grammatical relationship
with neighboring words or the morphological properties about their afﬁxes.

s
s
a
l
C
n
e
p
O

s
d
r
o
W

s
s
a
l
C
d
e
s
o
l
C

Description
Adjective: noun modiﬁers describing properties
Adverb: verb modiﬁers of time, place, manner

Tag
ADJ
ADV
NOUN words for persons, places, things, etc.
VERB words for actions and processes
PROPN Proper noun: name of a person, organization, place, etc..
Interjection: exclamation, greeting, yes/no response, etc.
INTJ
Adposition (Preposition/Postposition): marks a noun’s
ADP
spacial, temporal, or other relation
Auxiliary: helping verb marking tense, aspect, mood, etc.,

AUX
CCONJ Coordinating Conjunction: joins two phrases/clauses
Determiner: marks noun phrase properties
DET
NUM Numeral
PART

Particle: a function word that must be associated with an-
other word

Example
red, young, awesome
very, slowly, home, yesterday
algorithm, cat, mango, beauty
draw, provide, go
Regina, IBM, Colorado
oh, um, yes, hello
in, on, by, under

can, may, should, are
and, or, but
a, an, the, this
one, two, 2026, 11:00, hundred
’s, not, (inﬁnitive) to

PRON Pronoun: a shorthand for referring to an entity or event
SCONJ Subordinating Conjunction:

joins a main clause with a

she, who, I, others
whether, because

subordinate clause such as a sentential complement

r PUNCT Punctuation

e
h
t
O

SYM
X

Symbols like $ or emoji
Other

˙, , ()
$, %
asdf, qwfg

Figure 8.1 The 17 parts of speech in the Universal Dependencies tagset (de Marneffe et al., 2021). Features
can be added to make ﬁner-grained distinctions (with properties like number, case, deﬁniteness, and so on).

closed class

open class

function word

noun

common noun

count noun

mass noun

proper noun

Parts of speech fall into two broad categories: closed class and open class.
Closed classes are those with relatively ﬁxed membership, such as prepositions—
new prepositions are rarely coined. By contrast, nouns and verbs are open classes—
new nouns and verbs like iPhone or to fax are continually being created or borrowed.
Closed class words are generally function words like of, it, and, or you, which tend
to be very short, occur frequently, and often have structuring uses in grammar.

Four major open classes occur in the languages of the world: nouns (including
proper nouns), verbs, adjectives, and adverbs, as well as the smaller open class of
interjections. English has all ﬁve, although not every language does.

Nouns are words for people, places, or things, but include others as well. Com-
mon nouns include concrete terms like cat and mango, abstractions like algorithm
and beauty, and verb-like terms like pacing as in His pacing to and fro became quite
annoying. Nouns in English can occur with determiners (a goat, this bandwidth)
take possessives (IBM’s annual revenue), and may occur in the plural (goats, abaci).
Many languages, including English, divide common nouns into count nouns and
mass nouns. Count nouns can occur in the singular and plural (goat/goats, rela-
tionship/relationships) and can be counted (one goat, two goats). Mass nouns are
used when something is conceptualized as a homogeneous group. So snow, salt, and
communism are not counted (i.e., *two snows or *two communisms). Proper nouns,
like Regina, Colorado, and IBM, are names of speciﬁc persons or entities.

164 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

verb

adjective

Verbs refer to actions and processes, including main verbs like draw, provide,
and go. English verbs have inﬂections (non-third-person-singular (eat), third-person-
singular (eats), progressive (eating), past participle (eaten)). While many scholars
believe that all human languages have the categories of noun and verb, others have
argued that some languages, such as Riau Indonesian and Tongan, don’t even make
this distinction (Broschart 1997; Evans 2000; Gil 2000) .

Adjectives often describe properties or qualities of nouns, like color (white,
black), age (old, young), and value (good, bad), but there are languages without
adjectives. In Korean, for example, the words corresponding to English adjectives
act as a subclass of verbs, so what is in English an adjective “beautiful” acts in
Korean like a verb meaning “to be beautiful”.

adverb

Adverbs are a hodge-podge. All the italicized words in this example are adverbs:

Actually, I ran home extremely quickly yesterday

locative

degree

manner

temporal

Adverbs generally modify something (often verbs, hence the name “adverb”, but
also other adverbs and entire verb phrases). Directional adverbs or locative ad-
verbs (home, here, downhill) specify the direction or location of some action; degree
adverbs (extremely, very, somewhat) specify the extent of some action, process, or
property; manner adverbs (slowly, slinkily, delicately) describe the manner of some
action or process; and temporal adverbs describe the time that some action or event
took place (yesterday, Monday).

interjection

Interjections (oh, hey, alas, uh, um) are a smaller open class that also includes

preposition

particle

phrasal verb

determiner

article

conjunction

complementizer
pronoun

wh

greetings (hello, goodbye) and question responses (yes, no, uh-huh).

English adpositions occur before nouns, hence are called prepositions. They can
indicate spatial or temporal relations, whether literal (on it, before then, by the house)
or metaphorical (on time, with gusto, beside herself), and relations like marking the
agent in Hamlet was written by Shakespeare.

A particle resembles a preposition or an adverb and is used in combination with
a verb. Particles often have extended meanings that aren’t quite the same as the
prepositions they resemble, as in the particle over in she turned the paper over. A
verb and a particle acting as a single unit is called a phrasal verb. The meaning
of phrasal verbs is often non-compositional—not predictable from the individual
meanings of the verb and the particle. Thus, turn down means ‘reject’, rule out
‘eliminate’, and go on ‘continue’.

Determiners like this and that (this chapter, that page) can mark the start of an
English noun phrase. Articles like a, an, and the, are a type of determiner that mark
discourse properties of the noun and are quite frequent; the is the most common
word in written English, with a and an right behind.

Conjunctions join two phrases, clauses, or sentences. Coordinating conjunc-
tions like and, or, and but join two elements of equal status. Subordinating conjunc-
tions are used when one of the elements has some embedded status. For example,
the subordinating conjunction that in “I thought that you might like some milk” links
the main clause I thought with the subordinate clause you might like some milk. This
clause is called subordinate because this entire clause is the “content” of the main
verb thought. Subordinating conjunctions like that which link a verb to its argument
in this way are also called complementizers.

Pronouns act as a shorthand for referring to an entity or event. Personal pro-
nouns refer to persons or entities (you, she, I, it, me, etc.). Possessive pronouns are
forms of personal pronouns that indicate either actual possession or more often just
an abstract relation between the person and some object (my, your, his, her, its, one’s,
our, their). Wh-pronouns (what, who, whom, whoever) are used in certain question

8.2

• PART-OF-SPEECH TAGGING

165

forms, or act as complementizers (Frida, who married Diego. . . ).

auxiliary

Auxiliary verbs mark semantic features of a main verb such as its tense, whether
it is completed (aspect), whether it is negated (polarity), and whether an action is
necessary, possible, suggested, or desired (mood). English auxiliaries include the
copula verb be, the two verbs do and have, forms, as well as modal verbs used to
copula
modal mark the mood associated with the event depicted by the main verb: can indicates

ability or possibility, may permission or possibility, must necessity.

An English-speciﬁc tagset, the 45-tag Penn Treebank tagset (Marcus et al., 1993),
shown in Fig. 8.2, has been used to label many syntactically annotated corpora like
the Penn Treebank corpora, so is worth knowing about.

Tag Description
CC coord. conj.
CD cardinal number
DT determiner
EX existential ‘there’
FW foreign word
IN preposition/

Tag Description

Example
and, but, or NNP proper noun, sing.
one, two
a, the
there
mea culpa
of, in, by

Example Tag Description
IBM
TO inﬁnitive to
NNPS proper noun, plu. Carolinas UH interjection
NNS noun, plural
PDT predeterminer
POS
PRP

llamas
all, both VBD verb past tense

possessive ending ’s
personal pronoun

VBG verb gerund

VB verb base

I, you, he VBN verb past partici-

Example
to
ah, oops
eat
ate
eating
eaten

subordin-conj
JJ
adjective
JJR comparative adj
JJS superlative adj
LS list item marker
MD modal
NN sing or mass noun llama
Figure 8.2 Penn Treebank part-of-speech tags.

yellow
bigger
wildest
1, 2, One
can, should RP

PRP$ possess. pronoun
RB
adverb
RBR comparative adv
RBS superlatv. adv
particle
SYM symbol

ple

your
VBP verb non-3sg-pr
quickly
VBZ verb 3sg pres
faster
WDT wh-determ.
fastest
WP wh-pronoun
up, off
WP$ wh-possess.
+, %, & WRB wh-adverb

eat
eats
which, that
what, who
whose
how, where

Below we show some examples with each word tagged according to both the UD
and Penn tagsets. Notice that the Penn tagset distinguishes tense and participles on
verbs, and has a special tag for the existential there construction in English. Note that
since London Journal of Medicine is a proper noun, both tagsets mark its component
nouns as PROPN/NNP, including journal and medicine, which might otherwise be
labeled as common nouns (NOUN/NN).

(8.1) There/PRO/EX are/VERB/VBP 70/NUM/CD children/NOUN/NNS

there/ADV/RB ./PUNC/.

(8.2) Preliminary/ADJ/JJ ﬁndings/NOUN/NNS were/AUX/VBD reported/VERB/VBN

in/ADP/IN today/NOUN/NN ’s/PART/POS London/PROPN/NNP
Journal/PROPN/NNP of/ADP/IN Medicine/PROPN/NNP

8.2 Part-of-Speech Tagging

part-of-speech
tagging

ambiguous

Part-of-speech tagging is the process of assigning a part-of-speech to each word in
a text. The input is a sequence x1, x2, ..., xn of (tokenized) words and a tagset, and
the output is a sequence y1, y2, ..., yn of tags, each output yi corresponding exactly to
one input xi, as shown in the intuition in Fig. 8.3.

Tagging is a disambiguation task; words are ambiguous —have more than one
possible part-of-speech—and the goal is to ﬁnd the correct tag for the situation.
For example, book can be a verb (book that ﬂight) or a noun (hand me that book).
That can be a determiner (Does that ﬂight serve dinner) or a complementizer (I

166 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

Figure 8.3 The task of part-of-speech tagging: mapping from input words x1, x2, ..., xn to
output POS tags y1, y2, ..., yn .

ambiguity
resolution

accuracy

thought that your ﬂight was earlier). The goal of POS-tagging is to resolve these
ambiguities, choosing the proper tag for the context.

The accuracy of part-of-speech tagging algorithms (the percentage of test set
tags that match human gold labels) is extremely high. One study found accuracies
over 97% across 15 languages from the Universal Dependency (UD) treebank (Wu
and Dredze, 2019). Accuracies on various English treebanks are also 97% (no matter
the algorithm; HMMs, CRFs, BERT perform similarly). This 97% number is also
about the human performance on this task, at least for English (Manning, 2011).

Types:

Unambiguous (1 tag)
Ambiguous

(2+ tags)

Tokens:

WSJ
44,432 (86%)
7,025 (14%)

Brown
45,799 (85%)
8,050 (15%)

Unambiguous (1 tag)
Ambiguous

(2+ tags)

577,421 (45%) 384,349 (33%)
711,780 (55%) 786,646 (67%)

Figure 8.4

Tag ambiguity in the Brown and WSJ corpora (Treebank-3 45-tag tagset).

We’ll introduce algorithms for the task in the next few sections, but ﬁrst let’s
explore the task. Exactly how hard is it? Fig. 8.4 shows that most word types
(85-86%) are unambiguous (Janet is always NNP, hesitantly is always RB). But the
ambiguous words, though accounting for only 14-15% of the vocabulary, are very
common, and 55-67% of word tokens in running text are ambiguous. Particularly
ambiguous common words include that, back, down, put and set; here are some
examples of the 6 different parts of speech for the word back:

earnings growth took a back/JJ seat
a small building in the back/NN
a clear majority of senators back/VBP the bill
Dave began to back/VB toward the door
enable the country to buy back/RP debt
I was twenty-one back/RB then

Nonetheless, many words are easy to disambiguate, because their different tags
aren’t equally likely. For example, a can be a determiner or the letter a, but the
determiner sense is much more likely.

This idea suggests a useful baseline: given an ambiguous word, choose the tag

which is most frequent in the training corpus. This is a key concept:

Most Frequent Class Baseline: Always compare a classiﬁer against a baseline at
least as good as the most frequent class baseline (assigning each token to the class
it occurred in most often in the training set).

willNOUNAUXVERBDETNOUNJanetbackthebillPart of Speech Taggerx1x2x3x4x5y1y2y3y4y58.3

• NAMED ENTITIES AND NAMED ENTITY TAGGING

167

The most-frequent-tag baseline has an accuracy of about 92%1. The baseline

thus differs from the state-of-the-art and human ceiling (97%) by only 5%.

8.3 Named Entities and Named Entity Tagging

named entity

named entity
recognition
NER

Part of speech tagging can tell us that words like Janet, Stanford University, and
Colorado are all proper nouns; being a proper noun is a grammatical property of
these words. But viewed from a semantic perspective, these proper nouns refer to
different kinds of entities: Janet is a person, Stanford University is an organization,
and Colorado is a location.

A named entity is, roughly speaking, anything that can be referred to with a
proper name: a person, a location, an organization. The task of named entity recog-
nition (NER) is to ﬁnd spans of text that constitute proper names and tag the type of
the entity. Four entity tags are most common: PER (person), LOC (location), ORG
(organization), or GPE (geo-political entity). However, the term named entity is
commonly extended to include things that aren’t entities per se, including dates,
times, and other kinds of temporal expressions, and even numerical expressions like
prices. Here’s an example of the output of an NER tagger:

Citing high fuel prices, [ORG United Airlines] said [TIME Friday] it
has increased fares by [MONEY $6] per round trip on ﬂights to some
cities also served by lower-cost carriers. [ORG American Airlines], a
unit of [ORG AMR Corp.], immediately matched the move, spokesman
[PER Tim Wagner] said. [ORG United], a unit of [ORG UAL Corp.],
said the increase took effect [TIME Thursday] and applies to most
routes where it competes against discount carriers, such as [LOC Chicago]
to [LOC Dallas] and [LOC Denver] to [LOC San Francisco].

The text contains 13 mentions of named entities including 5 organizations, 4 loca-
tions, 2 times, 1 person, and 1 mention of money. Figure 8.5 shows typical generic
named entity types. Many applications will also need to use speciﬁc entity types like
proteins, genes, commercial products, or works of art.

Type
People
Organization
Location
Geo-Political Entity GPE countries, states
Figure 8.5 A list of generic named entity types with the kinds of entities they refer to.

Example sentences
Tag Sample Categories
Turing is a giant of computer science.
PER people, characters
ORG companies, sports teams
The IPCC warned about the cyclone.
LOC regions, mountains, seas Mt. Sanitas is in Sunshine Canyon.

Palo Alto is raising the fees for parking.

Named entity tagging is a useful ﬁrst step in lots of natural language processing
tasks. In sentiment analysis we might want to know a consumer’s sentiment toward a
particular entity. Entities are a useful ﬁrst stage in question answering, or for linking
text to information in structured knowledge sources like Wikipedia. And named
entity tagging is also central to tasks involving building semantic representations,
like extracting events and the relationship between participants.

Unlike part-of-speech tagging, where there is no segmentation problem since
each word gets one tag, the task of named entity recognition is to ﬁnd and label
spans of text, and is difﬁcult partly because of the ambiguity of segmentation; we

1

In English, on the WSJ corpus, tested on sections 22-24.

168 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

need to decide what’s an entity and what isn’t, and where the boundaries are. Indeed,
most words in a text will not be named entities. Another difﬁculty is caused by type
ambiguity. The mention JFK can refer to a person, the airport in New York, or any
number of schools, bridges, and streets around the United States. Some examples of
this kind of cross-type confusion are given in Figure 8.6.

[PER Washington] was born into slavery on the farm of James Burroughs.
[ORG Washington] went up 2 games to 1 in the four-game series.
Blair arrived in [LOC Washington] for what may well be his last state visit.
In June, [GPE Washington] passed a primary seatbelt law.

Figure 8.6 Examples of type ambiguities in the use of the name Washington.

BIO

The standard approach to sequence labeling for a span-recognition problem like
NER is BIO tagging (Ramshaw and Marcus, 1995). This is a method that allows us
to treat NER like a word-by-word sequence labeling task, via tags that capture both
the boundary and the named entity type. Consider the following sentence:

[PER Jane Villanueva ] of [ORG United] , a unit of [ORG United Airlines
Holding] , said the fare applies to the [LOC Chicago ] route.

Figure 8.7 shows the same excerpt represented with BIO tagging, as well as
variants called IO tagging and BIOES tagging. In BIO tagging we label any token
that begins a span of interest with the label B, tokens that occur inside a span are
tagged with an I, and any tokens outside of any span of interest are labeled O. While
there is only one O tag, we’ll have distinct B and I tags for each named entity class.
The number of tags is thus 2n + 1 tags, where n is the number of entity types. BIO
tagging can represent exactly the same information as the bracketed notation, but has
the advantage that we can represent the task in the same simple sequence modeling
way as part-of-speech tagging: assigning a single label yi to each input word xi:

Words
Jane
Villanueva
of
United
Airlines
Holding
discussed
the
Chicago
route
.
Figure 8.7 NER as a sequence model, showing IO, BIO, and BIOES taggings.

BIO Label
B-PER
I-PER
O
B-ORG
I-ORG
I-ORG
O
O
B-LOC
O
O

IO Label
I-PER
I-PER
O
I-ORG
I-ORG
I-ORG
O
O
I-LOC
O
O

BIOES Label
B-PER
E-PER
O
B-ORG
I-ORG
E-ORG
O
O
S-LOC
O
O

We’ve also shown two variant tagging schemes: IO tagging, which loses some
information by eliminating the B tag, and BIOES tagging, which adds an end tag
E for the end of a span, and a span tag S for a span consisting of only one word.
A sequence labeler (HMM, CRF, RNN, Transformer, etc.) is trained to label each
token in a text with tags that indicate the presence (or absence) of particular kinds
of named entities.

8.4 HMM Part-of-Speech Tagging

8.4

• HMM PART-OF-SPEECH TAGGING

169

In this section we introduce our ﬁrst sequence labeling algorithm, the Hidden Markov
Model, and show how to apply it to part-of-speech tagging. Recall that a sequence
labeler is a model whose job is to assign a label to each unit in a sequence, thus
mapping a sequence of observations to a sequence of labels of the same length.
The HMM is a classic model that introduces many of the key concepts of sequence
modeling that we will see again in more modern models.

An HMM is a probabilistic sequence model: given a sequence of units (words,
letters, morphemes, sentences, whatever), it computes a probability distribution over
possible sequences of labels and chooses the best label sequence.

8.4.1 Markov Chains

The HMM is based on augmenting the Markov chain. A Markov chain is a model
that tells us something about the probabilities of sequences of random variables,
states, each of which can take on values from some set. These sets can be words, or
tags, or symbols representing anything, for example the weather. A Markov chain
makes a very strong assumption that if we want to predict the future in the sequence,
all that matters is the current state. All the states before the current state have no im-
pact on the future except via the current state. It’s as if to predict tomorrow’s weather
you could examine today’s weather but you weren’t allowed to look at yesterday’s
weather.

Markov chain

(a)

(b)

Figure 8.8 A Markov chain for weather (a) and one for words (b), showing states and
transitions. A start distribution π is required; setting π = [0.1, 0.7, 0.2] for (a) would mean a
probability 0.7 of starting in state 2 (cold), probability 0.1 of starting in state 1 (hot), etc.

Markov
assumption

More formally, consider a sequence of state variables q1, q2, ..., qi. A Markov
model embodies the Markov assumption on the probabilities of this sequence: that
when predicting the future, the past doesn’t matter, only the present.

q1...qi
Markov Assumption: P(qi = a
|

1) = P(qi = a

−

qi
|

−

1)

(8.3)

Figure 8.8a shows a Markov chain for assigning a probability to a sequence of
weather events, for which the vocabulary consists of HOT, COLD, and WARM. The
states are represented as nodes in the graph, and the transitions, with their probabil-
ities, as edges. The transitions are probabilities: the values of arcs leaving a given
state must sum to 1. Figure 8.8b shows a Markov chain for assigning a probability to
a sequence of words w1...wt . This Markov chain should be familiar; in fact, it repre-
w j)!
sents a bigram language model, with each edge expressing the probability p(wi|
Given the two models in Fig. 8.8, we can assign a probability to any sequence from
our vocabulary.

WARM3HOT1COLD2.8.6.1.1.3.6.1.1.3charminguniformlyare.1.4.5.5.5.2.6.2170 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

Formally, a Markov chain is speciﬁed by the following components:

hidden

hidden Markov
model

Q = q1q2 . . . qN
A = a11a12 . . . aN1 . . . aNN

π = π1, π2, ..., πN

a set of N states
a transition probability matrix A, each ai j represent-
ing the probability of moving from state i to state j, s.t.

n
j=1 ai j = 1

i
∀

an initial probability distribution over states. πi is the
(cid:80)
probability that the Markov chain will start in state i.
Some states j may have π j = 0, meaning that they cannot
be initial states. Also,

n
i=1 πi = 1

Before you go on, use the sample probabilities in Fig. 8.8a (with π = [0.1, 0.7, 0.2])

(cid:80)

to compute the probability of each of the following sequences:

(8.4) hot hot hot hot
(8.5) cold hot cold hot

What does the difference in these probabilities tell you about a real-world weather
fact encoded in Fig. 8.8a?

8.4.2 The Hidden Markov Model

A Markov chain is useful when we need to compute a probability for a sequence
of observable events. In many cases, however, the events we are interested in are
hidden: we don’t observe them directly. For example we don’t normally observe
part-of-speech tags in a text. Rather, we see words, and must infer the tags from the
word sequence. We call the tags hidden because they are not observed.

A hidden Markov model (HMM) allows us to talk about both observed events
(like words that we see in the input) and hidden events (like part-of-speech tags) that
we think of as causal factors in our probabilistic model. An HMM is speciﬁed by
the following components:
a set of N states

Q = q1q2 . . . qN
A = a11 . . . ai j . . . aNN a transition probability matrix A, each ai j representing the probability

B = bi(ot )

π = π1, π2, ..., πN

N
j=1 ai j = 1

of moving from state i to state j, s.t.
a sequence of observation likelihoods, also called emission probabili-
ties, each expressing the probability of an observation ot (drawn from a
vocabulary V = v1, v2, ..., vV ) being generated from a state qi
an initial probability distribution over states. πi is the probability that
the Markov chain will start in state i. Some states j may have π j = 0,
meaning that they cannot be initial states. Also,

i
∀

(cid:80)

n
i=1 πi = 1

The HMM is given as input O = o1o2 . . . oT : a sequence of T observations, each

(cid:80)

one drawn from the vocabulary V .

A ﬁrst-order hidden Markov model instantiates two simplifying assumptions.
First, as with a ﬁrst-order Markov chain, the probability of a particular state depends
only on the previous state:

Markov Assumption: P(qi|

q1, ..., qi

1) = P(qi|
qi

−

−

1)

(8.6)

Second, the probability of an output observation oi depends only on the state that

produced the observation qi and not on any other states or any other observations:

Output Independence: P(oi|

q1, . . . qi, . . . , qT , o1, . . . , oi, . . . , oT ) = P(oi|

qi)

(8.7)

8.4

• HMM PART-OF-SPEECH TAGGING

171

8.4.3 The components of an HMM tagger

Let’s start by looking at the pieces of an HMM tagger, and then we’ll see how to use
it to tag. An HMM has two components, the A and B probabilities.
The A matrix contains the tag transition probabilities P(ti|
ti
−

1) which represent
the probability of a tag occurring given the previous tag. For example, modal verbs
like will are very likely to be followed by a verb in the base form, a VB, like race, so
we expect this probability to be high. We compute the maximum likelihood estimate
of this transition probability by counting, out of the times we see the ﬁrst tag in a
labeled corpus, how often the ﬁrst tag is followed by the second:

P(ti|
ti

1) =

−

C(ti
−
C(ti

1,ti)
1)

−

(8.8)

In the WSJ corpus, for example, MD occurs 13124 times of which it is followed

by VB 10471, for an MLE estimate of

MD) =
P(V B
|

C(MD,V B)
C(MD)

=

10471
13124

= .80

(8.9)

Let’s walk through an example, seeing how these probabilities are estimated and

used in a sample tagging task, before we return to the algorithm for decoding.

In HMM tagging, the probabilities are estimated by counting on a tagged training

corpus. For this example we’ll use the tagged WSJ corpus.

The B emission probabilities, P(wi|

ti), represent the probability, given a tag (say
MD), that it will be associated with a given word (say will). The MLE of the emis-
sion probability is

P(wi|

ti) =

C(ti, wi)
C(ti)

(8.10)

Of the 13124 occurrences of MD in the WSJ corpus, it is associated with will 4046
times:

P(will

MD) =
|

C(MD, will)
C(MD)

=

4046
13124

= .31

(8.11)

We saw this kind of Bayesian modeling in Chapter 4; recall that this likelihood
term is not asking “which is the most likely tag for the word will?” That would be
the posterior P(MD
MD) answers the slightly counterintuitive
will). Instead, P(will
|
|
question “If we were going to generate a MD, how likely is it that this modal would
be will?”

The A transition probabilities, and B observation likelihoods of the HMM are
illustrated in Fig. 8.9 for three states in an HMM part-of-speech tagger; the full
tagger would have one state for each tag.

8.4.4 HMM tagging as decoding

For any model, such as an HMM, that contains hidden variables, the task of deter-
mining the hidden variables sequence corresponding to the sequence of observations
is called decoding. More formally,

decoding

Decoding: Given as input an HMM λ = (A, B) and a sequence of ob-
servations O = o1, o2, ..., oT , ﬁnd the most probable sequence of states
Q = q1q2q3 . . . qT .

172 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

the A transition
Figure 8.9 An illustration of the two parts of an HMM representation:
probabilities used to compute the prior probability, and the B observation likelihoods that are
associated with each state, one likelihood for each possible observation word.

For part-of-speech tagging, the goal of HMM decoding is to choose the tag
sequence t1 . . .tn that is most probable given the observation sequence of n words
w1 . . . wn:

ˆt1:n = argmax

t1... tn

P(t1 . . .tn|

w1 . . . wn)

The way we’ll do this in the HMM is to use Bayes’ rule to instead compute:
P(w1 . . . wn|

t1 . . .tn)P(t1 . . .tn)

ˆt1:n = argmax

t1... tn

P(w1 . . . wn)

Furthermore, we simplify Eq. 8.13 by dropping the denominator P(wn

1):

ˆt1:n = argmax

t1... tn

P(w1 . . . wn|

t1 . . .tn)P(t1 . . .tn)

(8.12)

(8.13)

(8.14)

HMM taggers make two further simplifying assumptions. The ﬁrst is that the
probability of a word appearing depends only on its own tag and is independent of
neighboring words and tags:

P(w1 . . . wn|

t1 . . .tn)

≈

n

(cid:89)i=1

P(wi|

ti)

(8.15)

The second assumption, the bigram assumption, is that the probability of a tag is
dependent only on the previous tag, rather than the entire tag sequence;

n

P(t1 . . .tn)

≈

P(ti|
ti
−

1)

(8.16)

(cid:89)i=1

Plugging the simplifying assumptions from Eq. 8.15 and Eq. 8.16 into Eq. 8.14
results in the following equation for the most probable tag sequence from a bigram
tagger:

ˆt1:n = argmax

t1... tn

P(t1 . . .tn|

w1 . . . wn)

argmax
t1... tn

≈

emission
P(wi|
(cid:122) (cid:125)(cid:124) (cid:123)

ti)

transition
P(ti|
ti
−
(cid:122)
(cid:125)(cid:124)

1)
(cid:123)

(8.17)

n

(cid:89)i=1

The two parts of Eq. 8.17 correspond neatly to the B emission probability and A
transition probability that we just deﬁned above!

NN3VB1MD2a22a11a12a21a13a33a32a23a31P("aardvark" | NN)...P(“will” | NN)...P("the" | NN)...P(“back” | NN)...P("zebra" | NN)B3P("aardvark" | VB)...P(“will” | VB)...P("the" | VB)...P(“back” | VB)...P("zebra" | VB)B1P("aardvark" | MD)...P(“will” | MD)...P("the" | MD)...P(“back” | MD)...P("zebra" | MD)B28.4

• HMM PART-OF-SPEECH TAGGING

173

8.4.5 The Viterbi Algorithm

Viterbi
algorithm

The decoding algorithm for HMMs is the Viterbi algorithm shown in Fig. 8.10.
As an instance of dynamic programming, Viterbi resembles the dynamic program-
ming minimum edit distance algorithm of Chapter 2.

function VITERBI(observations of len T,state-graph of len N) returns best-path, path-prob

; initialization step

; recursion step

create a path probability matrix viterbi[N,T]
for each state s from 1 to N do
bs(o1)
0

viterbi[s,1]
backpointer[s,1]

←

πs ∗
←

for each time step t from 2 to T do
for each state s from 1 to N do
viterbi[s(cid:48),t

viterbi[s,t]

N
max
s(cid:48) =1

←

backpointer[s,t]

←

N
argmax
s(cid:48) =1
viterbi[s, T ]

N
max
s=1

bestpathprob

←
bestpathpointer

bs(ot )

1]

−

∗

viterbi[s(cid:48),t

as(cid:48),s ∗
1]

−

∗

bs(ot )

as(cid:48),s ∗
; termination step

N
argmax
s=1

←

viterbi[s, T ]

; termination step

bestpath
return bestpath, bestpathprob

←

the path starting at state bestpathpointer, that follows backpointer[] to states back in time

Figure 8.10 Viterbi algorithm for ﬁnding the optimal sequence of tags. Given an observation sequence and
an HMM λ = (A, B), the algorithm returns the state path through the HMM that assigns maximum likelihood
to the observation sequence.

The Viterbi algorithm ﬁrst sets up a probability matrix or lattice, with one col-
umn for each observation ot and one row for each state in the state graph. Each col-
umn thus has a cell for each state qi in the single combined automaton. Figure 8.11
shows an intuition of this lattice for the sentence Janet will back the bill.

Each cell of the lattice, vt ( j), represents the probability that the HMM is in state
j after seeing the ﬁrst t observations and passing through the most probable state
1, given the HMM λ . The value of each cell vt ( j) is computed
sequence q1, ..., qt
by recursively taking the most probable path that could lead us to this cell. Formally,
each cell expresses the probability

−

vt ( j) = max
q1,...,qt
1
−

P(q1...qt

1, o1, o2 . . . ot , qt = j

−

λ )
|

(8.18)

We represent the most probable path by taking the maximum over all possible
. Like other dynamic programming algorithms,

previous state sequences max
q1,...,qt
1
−

Viterbi ﬁlls each cell recursively. Given that we had already computed the probabil-
ity of being in every state at time t
1, we compute the Viterbi probability by taking
the most probable of the extensions of the paths that lead to the current cell. For a
given state q j at time t, the value vt ( j) is computed as

−

vt ( j) =

N
max
i=1

vt

1(i) ai j b j(ot )

−

(8.19)

The three factors that are multiplied in Eq. 8.19 for extending the previous paths to
compute the Viterbi probability at time t are

174 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

Figure 8.11 A sketch of the lattice for Janet will back the bill, showing the possible tags (qi)
for each word and highlighting the path corresponding to the correct tag sequence through the
hidden states. States (parts of speech) which have a zero probability of generating a particular
word according to the B matrix (such as the probability that a determiner DT will be realized
as Janet) are greyed out.

1(i)

vt
−
ai j
b j(ot )

the previous Viterbi path probability from the previous time step
the transition probability from previous state qi to current state q j
the state observation likelihood of the observation symbol ot given
the current state j

8.4.6 Working through an example

Let’s tag the sentence Janet will back the bill; the goal is the correct series of tags
(see also Fig. 8.11):

(8.20) Janet/NNP will/MD back/VB the/DT bill/NN

JJ

RB

DT

NN

NNP
0.2767
0.3777
0.0008
0.0322
0.0366
0.0096
0.0068
0.1147

<s >
NNP
MD
VB
JJ
NN
RB
DT
Figure 8.12 The A transition probabilities P(ti|
ti
MD) is 0.7968.
out smoothing. Rows are labeled with the conditioning event; thus P(V B
|

VB
0.0031 0.0453 0.0449 0.0510 0.2026
0.0009 0.0084 0.0584 0.0090 0.0025
0.7968 0.0005 0.0008 0.1698 0.0041
0.0050 0.0837 0.0615 0.0514 0.2231
0.0001 0.0733 0.4509 0.0036 0.0036
0.0014 0.0086 0.1216 0.0177 0.0068
0.1011 0.1012 0.0120 0.0728 0.0479
0.0002 0.2157 0.4744 0.0102 0.0017

MD
0.0006
0.0110
0.0002
0.0005
0.0004
0.0176
0.0102
0.0021

−

1) computed from the WSJ corpus with-

Let the HMM be deﬁned by the two tables in Fig. 8.12 and Fig. 8.13. Figure 8.12
lists the ai j probabilities for transitioning between the hidden states (part-of-speech
tags). Figure 8.13 expresses the bi(ot ) probabilities, the observation likelihoods of
words given tags. This table is (slightly simpliﬁed) from counts in the WSJ corpus.
So the word Janet only appears as an NNP, back has 4 possible parts of speech, and

JJNNPNNPNNPMDMDMDMDVBVBJJJJJJNNNNRBRBRBRBDTDTDTDTNNPJanetwillbackthebillNNVBMDNNVBJJRBNNPDTNNVB8.4

• HMM PART-OF-SPEECH TAGGING

175

NNP
MD
VB
JJ
NN
RB
DT

bill

will

Janet
0.000032 0
0
0
0
0
0
0

the
back
0.000048 0
0
0
0.308431 0
0
0.000028
0.000028 0.000672 0
0
0
0.000340 0
0.002337
0.000200 0.000223 0
0.010446 0
0
0
0.506099 0
0
0

Figure 8.13 Observation likelihoods B computed from the WSJ corpus without smoothing,
simpliﬁed slightly.

the word the can appear as a determiner or as an NNP (in titles like “Somewhere
Over the Rainbow” all words are tagged as NNP).

Figure 8.14 The ﬁrst few entries in the individual state columns for the Viterbi algorithm. Each cell keeps
the probability of the best path so far and a pointer to the previous cell along that path. We have only ﬁlled out
columns 1 and 2; to avoid clutter most cells with value 0 are left empty. The rest is left as an exercise for the
reader. After the cells are ﬁlled in, backtracing from the end state, we should be able to reconstruct the correct
state sequence NNP MD VB DT NN.

Figure 8.14 shows a ﬂeshed-out version of the sketch we saw in Fig. 8.11, the
Viterbi lattice for computing the best hidden state sequence for the observation se-
quence Janet will back the bill.

There are N = 5 state columns. We begin in column 1 (for the word Janet) by
setting the Viterbi value in each cell to the product of the π transition probability
(the start probability for that state i, which we get from the <s > entry of Fig. 8.12),

πP(NNP|start) = .28* P(MD|MD)= 0*  P(MD|NNP).000009*.01  = .9e-8 v1(2)=.0006 x 0 = 0v1(1) = .28* .000032 = .000009tMDq2q1o1Janetbillwillo2o3backVBJJv1(3)=.0031 x 0 = 0v1(4)= .045*0=0o4  *  P(MD|VB) = 0 * P(MD|JJ)= 0P(VB|start) = .0031P(JJ |start) =.045backtraceq3q4theNNq5RBq6DTq7v2(2) =max * .308 =2.772e-8v2(5)=max * .0002 = .0000000001v2(3)=max * .000028 =     2.5e-13v3(6)=max * .0104v3(5)=max * .000223v3(4)=max * .00034v3(3)=max * .00067v1(5)v1(6)v1(7)v2(1)v2(4)v2(6)v2(7)backtrace* P(RB|NN)* P(NN|NN)startstartstartstartstarto5NNPP(MD|start) = .0006176 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

and the observation likelihood of the word Janet given the tag for that cell. Most of
the cells in the column are zero since the word Janet cannot be any of those tags.
The reader should ﬁnd this in Fig. 8.14.

Next, each cell in the will column gets updated. For each state, we compute the
value viterbi[s,t] by taking the maximum over the extensions of all the paths from
the previous column that lead to the current cell according to Eq. 8.19. We have
shown the values for the MD, VB, and NN cells. Each cell gets the max of the 7
values from the previous column, multiplied by the appropriate transition probabil-
ity; as it happens in this case, most of them are zero from the previous column. The
remaining value is multiplied by the relevant observation probability, and the (triv-
ial) max is taken. In this case the ﬁnal value, 2.772e-8, comes from the NNP state at
the previous column. The reader should ﬁll in the rest of the lattice in Fig. 8.14 and
backtrace to see whether or not the Viterbi algorithm returns the gold state sequence
NNP MD VB DT NN.

8.5 Conditional Random Fields (CRFs)

unknown
words

CRF

While the HMM is a useful and powerful model, it turns out that HMMs need a
number of augmentations to achieve high accuracy. For example, in POS tagging
as in other tasks, we often run into unknown words: proper names and acronyms
are created very often, and even new common nouns and verbs enter the language
at a surprising rate.
It would be great to have ways to add arbitrary features to
help with this, perhaps based on capitalization or morphology (words starting with
capital letters are likely to be proper nouns, words ending with -ed tend to be past
tense (VBD or VBN), etc.) Or knowing the previous or following words might be a
useful feature (if the previous word is the, the current tag is unlikely to be a verb).

Although we could try to hack the HMM to ﬁnd ways to incorporate some of
these, in general it’s hard for generative models like HMMs to add arbitrary features
directly into the model in a clean way. We’ve already seen a model for combining
arbitrary features in a principled way: log-linear models like the logistic regression
model of Chapter 5! But logistic regression isn’t a sequence model; it assigns a class
to a single observation.

Luckily, there is a discriminative sequence model based on log-linear models:
the conditional random ﬁeld (CRF). We’ll describe here the linear chain CRF,
the version of the CRF most commonly used for language processing, and the one
whose conditioning closely matches the HMM.

Assuming we have a sequence of input words X = x1...xn and want to compute
a sequence of output tags Y = y1...yn. In an HMM to compute the best tag sequence
that maximizes P(Y

X) we rely on Bayes’ rule and the likelihood P(X
|

Y ):
|

ˆY = argmax

p(Y

X)
|

Y

= argmax

Y

= argmax

Y

p(X

Y )p(Y )
|
p(xi|

yi)

(cid:89)i

(cid:89)i

p(yi|
yi

−

1)

(8.21)

In a CRF, by contrast, we compute the posterior p(Y

X) directly, training the CRF
|

8.5

• CONDITIONAL RANDOM FIELDS (CRFS)

177

to discriminate among the possible tag sequences:

ˆY = argmax

P(Y

Y

Y

X)
|

(8.22)

∈
However, the CRF does not compute a probability for each tag at each time step. In-
stead, at each time step the CRF computes log-linear functions over a set of relevant
features, and these local features are aggregated and normalized to produce a global
probability for the whole sequence.

Let’s introduce the CRF more formally, again using X and Y as the input and
output sequences. A CRF is a log-linear model that assigns a probability to an
entire output (tag) sequence Y , out of all possible sequences Y, given the entire input
(word) sequence X. We can think of a CRF as like a giant sequential version of
the multinomial logistic regression algorithm we saw for text categorization. Recall
that we introduced the feature function f in regular multinomial logistic regression
for text categorization as a function of a tuple: the input text x and a single class y
(page 91). In a CRF, we’re dealing with a sequence, so the function F maps an entire
input sequence X and an entire output sequence Y to a feature vector. Let’s assume
we have K features, with a weight wk for each feature Fk:

K

exp

(cid:32)

p(Y

X) =
|

(cid:88)k=1
K

wkFk(X,Y )

(cid:33)

(8.23)

exp

(cid:32)

(cid:88)k=1

Y
(cid:88)Y (cid:48)∈

wkFk(X,Y (cid:48))

(cid:33)

It’s common to also describe the same equation by pulling out the denominator into
a function Z(X):

p(Y

X) =
|

1
Z(X)

exp

K

(cid:32)

(cid:88)k=1
K

wkFk(X,Y )

(cid:33)

Z(X) =

exp

Y
(cid:88)Y (cid:48)∈

wkFk(X,Y (cid:48))

(cid:33)

(cid:32)

(cid:88)k=1

(8.24)

(8.25)

We’ll call these K functions Fk(X,Y ) global features, since each one is a property
of the entire input sequence X and output sequence Y . We compute them by decom-
posing into a sum of local features for each position i in Y :

Fk(X,Y ) =

n

(cid:88)i=1

fk(yi

1, yi, X, i)

−

(8.26)

linear chain
CRF

−

Each of these local features fk in a linear-chain CRF is allowed to make use of the
current output token yi, the previous output token yi
1, the entire input string X (or
any subpart of it), and the current position i. This constraint to only depend on
the current and previous output tokens yi and yi
1 are what characterizes a linear
chain CRF. As we will see, this limitation makes it possible to use versions of the
efﬁcient Viterbi and Forward-Backwards algorithms from the HMM. A general CRF,
by contrast, allows a feature to make use of any output token, and are thus necessary
for tasks in which the decision depend on distant output tokens, like yi
4. General
CRFs require more complex inference, and are less commonly used for language
processing.

−

−

178 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

8.5.1 Features in a CRF POS Tagger

Let’s look at some of these features in detail, since the reason to use a discriminative
sequence model is that it’s easier to incorporate a lot of features.2

Again, in a linear-chain CRF, each local feature fk at position i can depend on
1, yi, X, i). So some legal features representing common

any information from: (yi
situations might be the following:

−

1
1
1

{
{
{

xi = the, yi = DET
yi = PROPN, xi+1 = Street, yi
yi = VERB, yi

}

1 = AUX
}

−

1 = NUM

−

}

For simplicity, we’ll assume all CRF features take on the value 1 or 0. Above, we
explicitly use the notation 1
to mean “1 if x is true, and 0 otherwise”. From now
on, we’ll leave off the 1 when we deﬁne features, but you can assume each feature
has it there implicitly.

{

}

x

feature
templates

Although the idea of what features to use is done by the system designer by hand,
the speciﬁc features are automatically populated by using feature templates as we
brieﬂy mentioned in Chapter 5. Here are some templates that only use information
from (yi

1, yi, X, i):

−

,
yi, xi(cid:105)
(cid:104)

yi, yi
(cid:104)

,
1(cid:105)
−

yi, xi
(cid:104)

1, xi+2(cid:105)

−

These templates automatically populate the set of features from every instance in
the training and test set. Thus for our example Janet/NNP will/MD back/VB the/DT
bill/NN, when xi is the word back, the following features would be generated and
have the value 1 (we’ve assigned them arbitrary feature numbers):

f3743: yi = VB and xi = back
f156: yi = VB and yi
1 = MD
−
f99732: yi = VB and xi

1 = will and xi+2 = bill

−

word shape

It’s also important to have features that help with unknown words. One of the
most important is word shape features, which represent the abstract letter pattern
of the word by mapping lower-case letters to ‘x’, upper-case to ‘X’, numbers to
’d’, and retaining punctuation. Thus for example I.M.F. would map to X.X.X. and
DC10-30 would map to XXdd-dd. A second class of shorter word shape features is
also used. In these features consecutive character types are removed, so words in all
caps map to X, words with initial-caps map to Xx, DC10-30 would be mapped to
Xd-d but I.M.F would still map to X.X.X. Preﬁx and sufﬁx features are also useful.
In summary, here are some sample feature templates that help with unknown words:

xi contains a particular preﬁx (perhaps from all preﬁxes of length
xi contains a particular sufﬁx (perhaps from all sufﬁxes of length
xi’s word shape
xi’s short word shape

2)
2)

≤
≤

For example the word well-dressed might generate the following non-zero val-

ued feature values:

2 Because in HMMs all computation is based on the two probabilities P(tag
tag), if
|
we want to include some source of knowledge into the tagging process, we must ﬁnd a way to encode
the knowledge into one of these two probabilities. Each time we add a feature we have to do a lot of
complicated conditioning which gets harder and harder as we have more and more such features.

tag) and P(word
|

8.5

• CONDITIONAL RANDOM FIELDS (CRFS)

179

preﬁx(xi) = w
preﬁx(xi) = we
sufﬁx(xi) = ed
sufﬁx(xi) = d
word-shape(xi) = xxxx-xxxxxxx
short-word-shape(xi) = x-x

The known-word templates are computed for every word seen in the training
set; the unknown word features can also be computed for all words in training, or
only on training words whose frequency is below some threshold. The result of the
known-word templates and word-signature features is a very large set of features.
Generally a feature cutoff is used in which features are thrown out if they have count
< 5 in the training set.

Remember that in a CRF we don’t learn weights for each of these local features
fk. Instead, we ﬁrst sum the values of each local feature (for example feature f3743)
over the entire sentence, to create each global feature (for example F3743). It is those
global features that will then be multiplied by weight w3743. Thus for training and
inference there is always a ﬁxed set of K features with K weights, even though the
length of each sentence is different.

8.5.2 Features for CRF Named Entity Recognizers

A CRF for NER makes use of very similar features to a POS tagger, as shown in
Figure 8.15.

identity of wi, identity of neighboring words
embeddings for wi, embeddings for neighboring words
part of speech of wi, part of speech of neighboring words
presence of wi in a gazetteer
wi contains a particular preﬁx (from all preﬁxes of length
wi contains a particular sufﬁx (from all sufﬁxes of length
word shape of wi, word shape of neighboring words
short word shape of wi, short word shape of neighboring words
gazetteer features
Figure 8.15 Typical features for a feature-based NER system.

4)
4)

≤
≤

gazetteer

One feature that is especially useful for locations is a gazetteer, a list of place
names, often providing millions of entries for locations with detailed geographical
and political information.3 This can be implemented as a binary feature indicating a
phrase appears in the list. Other related resources like name-lists, for example from
the United States Census Bureau4, can be used, as can other entity dictionaries like
lists of corporations or products, although they may not be as helpful as a gazetteer
(Mikheev et al., 1999).

The sample named entity token L’Occitane would generate the following non-
zero valued feature values (assuming that L’Occitane is neither in the gazetteer nor
the census).

3 www.geonames.org
4 www.census.gov

180 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

preﬁx(xi) = L
preﬁx(xi) = L’
preﬁx(xi) = L’O
preﬁx(xi) = L’Oc
word-shape(xi) = X’Xxxxxxxx

sufﬁx(xi) = tane
sufﬁx(xi) = ane
sufﬁx(xi) = ne
sufﬁx(xi) = e
short-word-shape(xi) = X’Xx

Figure 8.16 illustrates the result of adding part-of-speech tags and some shape

information to our earlier example.

x

Short shape

POS
NNP Xx
NNP Xx
IN
NNP Xx
NNP Xx
NNP Xx
VBD x
DT
x
NNP Xx
NN
.

Words
Jane
Villanueva
of
United
Airlines
Holding
discussed
the
Chicago
route
.
Figure 8.16 Some NER features for a sample sentence, assuming that Chicago and Vil-
lanueva are listed as locations in a gazetteer. We assume features only take on the values 0 or
1, so the ﬁrst POS feature, for example, would be represented as 1
POS = NNP
{

BIO Label
B-PER
I-PER
O
B-ORG
I-ORG
I-ORG
O
O
B-LOC
O
O

Gazetteer
0
1
0
0
0
0
0
0
1
0
0

x
.

.
}

Inference and Training for CRFs

8.5.3
How do we ﬁnd the best tag sequence ˆY for a given input X? We start with Eq. 8.22:

ˆY = argmax

Y

Y

∈

= argmax
Y

Y

∈

= argmax
Y

Y

∈

= argmax
Y

Y

∈

P(Y

X)
|

1
Z(X)

exp

exp

K

K

(cid:32)

(cid:88)k=1
n

wk

(cid:88)k=1
n

K

(cid:88)i=1

K

(cid:32)

(cid:88)k=1
n

wk

(cid:88)i=1

wkFk(X,Y )

(cid:33)

fk(yi

1, yi, X, i)

−

(cid:33)

fk(yi

1, yi, X, i)

−

= argmax
Y

Y

∈

wk fk(yi

1, yi, X, i)

−

(cid:88)i=1

(cid:88)k=1

(8.27)

(8.28)

(8.29)

(8.30)

We can ignore the exp function and the denominator Z(X), as we do above, because
exp doesn’t change the argmax, and the denominator Z(X) is constant for a given
observation sequence X.

How should we decode to ﬁnd this optimal tag sequence ˆy? Just as with HMMs,
we’ll turn to the Viterbi algorithm, which works because, like the HMM, the linear-
chain CRF depends at each timestep on only one previous output token yi

1.

Concretely, this involves ﬁlling an N

T array with the appropriate values, main-
×
taining backpointers as we proceed. As with HMM Viterbi, when the table is ﬁlled,
we simply follow pointers back from the maximum value in the ﬁnal column to
retrieve the desired set of labels.

−

8.6

• EVALUATION OF NAMED ENTITY RECOGNITION

181

The requisite changes from HMM Viterbi have to do only with how we ﬁll each
cell. Recall from Eq. 8.19 that the recursive step of the Viterbi equation computes
the Viterbi value of time t for state j as

vt ( j) =

N
max
i=1

vt

1(i) ai j b j(ot ); 1

−

j

≤

≤

N, 1 < t

T

≤

(8.31)

which is the HMM implementation of

N
max
i=1

vt ( j) =

si) P(ot |
The CRF requires only a slight change to this latter formula, replacing the a and b
prior and likelihood probabilities with the CRF features:

1(i) P(s j|

N, 1 < t

s j) 1

(8.32)

≤

≤

≤

vt

T

−

j

vt ( j) =

N
max
i=1

vt

−

1(i)

K

(cid:88)k=1

wk fk(yt

1, yt , X,t) 1

−

j

≤

≤

N, 1 < t

T

≤

(8.33)

Learning in CRFs relies on the same supervised learning algorithms we presented
for logistic regression. Given a sequence of observations, feature functions, and cor-
responding outputs, we use stochastic gradient descent to train the weights to maxi-
mize the log-likelihood of the training corpus. The local nature of linear-chain CRFs
means that the forward-backward algorithm introduced for HMMs in Appendix A
can be extended to a CRF version that will efﬁciently compute the necessary deriva-
tives. As with logistic regression, L1 or L2 regularization is important.

8.6 Evaluation of Named Entity Recognition

Part-of-speech taggers are evaluated by the standard metric of accuracy. Named
entity recognizers are evaluated by recall, precision, and F1 measure. Recall that
recall is the ratio of the number of correctly labeled responses to the total that should
have been labeled; precision is the ratio of the number of correctly labeled responses
to the total labeled; and F-measure is the harmonic mean of the two.

To know if the difference between the F1 scores of two NER systems is a signif-
icant difference, we use the paired bootstrap test, or the similar randomization test
(Section 4.9).

For named entity tagging, the entity rather than the word is the unit of response.
Thus in the example in Fig. 8.16, the two entities Jane Villanueva and United Air-
lines Holding and the non-entity discussed would each count as a single response.

The fact that named entity tagging has a segmentation component which is not
present in tasks like text categorization or part-of-speech tagging causes some prob-
lems with evaluation. For example, a system that labeled Jane but not Jane Vil-
lanueva as a person would cause two errors, a false positive for O and a false nega-
tive for I-PER. In addition, using entities as the unit of response but words as the unit
of training means that there is a mismatch between the training and test conditions.

8.7 Further Details

In this section we summarize a few remaining details of the data and models for
part-of-speech tagging and NER, beginning with data. Since the algorithms we have

182 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

presented are supervised, having labeled data is essential for training and testing. A
wide variety of datasets exist for part-of-speech tagging and/or NER. The Universal
Dependencies (UD) dataset (de Marneffe et al., 2021) has POS tagged corpora in
over a hundred languages, as do the Penn Treebanks in English, Chinese, and Arabic.
OntoNotes has corpora labeled for named entities in English, Chinese, and Arabic
(Hovy et al., 2006). Named entity tagged corpora are also available in particular
domains, such as for biomedical (Bada et al., 2012) and literary text (Bamman et al.,
2019).

8.7.1 Rule-based Methods

While machine learned (neural or CRF) sequence models are the norm in academic
research, commercial approaches to NER are often based on pragmatic combina-
tions of lists and rules, with some smaller amount of supervised machine learning
(Chiticariu et al., 2013). For example in the IBM System T architecture, a user
speciﬁes declarative constraints for tagging tasks in a formal query language that
includes regular expressions, dictionaries, semantic constraints, and other operators,
which the system compiles into an efﬁcient extractor (Chiticariu et al., 2018).

One common approach is to make repeated rule-based passes over a text, starting
with rules with very high precision but low recall, and, in subsequent stages, using
machine learning methods that take the output of the ﬁrst pass into account (an
approach ﬁrst worked out for coreference (Lee et al., 2017a)):

1. First, use high-precision rules to tag unambiguous entity mentions.
2. Then, search for substring matches of the previously detected names.
3. Use application-speciﬁc name lists to ﬁnd likely domain-speciﬁc mentions.
4. Finally, apply supervised sequence labeling techniques that use tags from pre-

vious stages as additional features.

Rule-based methods were also the earliest methods for part-of-speech tagging.
Rule-based taggers like the English Constraint Grammar system (Karlsson et al.
1995, Voutilainen 1999) use a two-stage formalism invented in the 1950s and 1960s:
(1) a morphological analyzer with tens of thousands of word stem entries returns all
parts of speech for a word, then (2) a large set of thousands of constraints are applied
to the input sentence to rule out parts of speech inconsistent with the context.

8.7.2 POS Tagging for Morphologically Rich Languages

Augmentations to tagging algorithms become necessary when dealing with lan-
guages with rich morphology like Czech, Hungarian and Turkish.

These productive word-formation processes result in a large vocabulary for these
languages: a 250,000 word token corpus of Hungarian has more than twice as many
word types as a similarly sized corpus of English (Oravecz and Dienes, 2002), while
a 10 million word token corpus of Turkish contains four times as many word types
as a similarly sized English corpus (Hakkani-T¨ur et al., 2002). Large vocabular-
ies mean many unknown words, and these unknown words cause signiﬁcant per-
formance degradations in a wide variety of languages (including Czech, Slovene,
Estonian, and Romanian) (Hajiˇc, 2000).

Highly inﬂectional languages also have much more information than English
coded in word morphology, like case (nominative, accusative, genitive) or gender
(masculine, feminine). Because this information is important for tasks like pars-
ing and coreference resolution, part-of-speech taggers for morphologically rich lan-

8.8

• SUMMARY

183

guages need to label words with case and gender information. Tagsets for morpho-
logically rich languages are therefore sequences of morphological tags rather than a
single primitive tag. Here’s a Turkish example, in which the word izin has three pos-
sible morphological/part-of-speech tags and meanings (Hakkani-T¨ur et al., 2002):

1. Yerdeki izin temizlenmesi gerek.

The trace on the ﬂoor should be cleaned.

2.

¨Uzerinde parmak izin kalmis¸.
Your ﬁnger print is left on (it).

3. Ic¸eri girmek ic¸in izin alman gerekiyor.

You need permission to enter.

iz + Noun+A3sg+Pnon+Gen

iz + Noun+A3sg+P2sg+Nom

izin + Noun+A3sg+Pnon+Nom

Using a morphological parse sequence like Noun+A3sg+Pnon+Gen as the part-
of-speech tag greatly increases the number of parts of speech, and so tagsets can
be 4 to 10 times larger than the 50–100 tags we have seen for English. With such
large tagsets, each word needs to be morphologically analyzed to generate the list
of possible morphological tag sequences (part-of-speech tags) for the word. The
role of the tagger is then to disambiguate among these tags. This method also helps
with unknown words since morphological parsers can accept unknown stems and
still segment the afﬁxes properly.

8.8 Summary

This chapter introduced parts of speech and named entities, and the tasks of part-
of-speech tagging and named entity recognition:

• Languages generally have a small set of closed class words that are highly
frequent, ambiguous, and act as function words, and open-class words like
nouns, verbs, adjectives. Various part-of-speech tagsets exist, of between 40
and 200 tags.

• Part-of-speech tagging is the process of assigning a part-of-speech label to

each of a sequence of words.

• Named entities are words for proper nouns referring mainly to people, places,
and organizations, but extended to many other types that aren’t strictly entities
or even proper nouns.

• Two common approaches to sequence modeling are a generative approach,
HMM tagging, and a discriminative approach, CRF tagging. We will see a
neural approach in following chapters.

• The probabilities in HMM taggers are estimated by maximum likelihood es-
timation on tag-labeled training corpora. The Viterbi algorithm is used for
decoding, ﬁnding the most likely tag sequence

• Conditional Random Fields or CRF taggers train a log-linear model that can
choose the best tag sequence given an observation sequence, based on features
that condition on the output tag, the prior output tag, the entire input sequence,
and the current timestep. They use the Viterbi algorithm for inference, to
choose the best sequence of tags, and a version of the Forward-Backward
algorithm (see Appendix A) for training,

184 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

Bibliographical and Historical Notes

What is probably the earliest part-of-speech tagger was part of the parser in Zellig
Harris’s Transformations and Discourse Analysis Project (TDAP), implemented be-
tween June 1958 and July 1959 at the University of Pennsylvania (Harris, 1962),
although earlier systems had used part-of-speech dictionaries. TDAP used 14 hand-
written rules for part-of-speech disambiguation; the use of part-of-speech tag se-
quences and the relative frequency of tags for a word preﬁgures modern algorithms.
The parser was implemented essentially as a cascade of ﬁnite-state transducers; see
Joshi and Hopely (1999) and Karttunen (1999) for a reimplementation.

The Computational Grammar Coder (CGC) of Klein and Simmons (1963) had
three components: a lexicon, a morphological analyzer, and a context disambigua-
tor. The small 1500-word lexicon listed only function words and other irregular
words. The morphological analyzer used inﬂectional and derivational sufﬁxes to as-
sign part-of-speech classes. These were run over words to produce candidate parts
of speech which were then disambiguated by a set of 500 context rules by relying on
surrounding islands of unambiguous words. For example, one rule said that between
an ARTICLE and a VERB, the only allowable sequences were ADJ-NOUN, NOUN-
ADVERB, or NOUN-NOUN. The TAGGIT tagger (Greene and Rubin, 1971) used
the same architecture as Klein and Simmons (1963), with a bigger dictionary and
more tags (87). TAGGIT was applied to the Brown corpus and, according to Francis
and Kuˇcera (1982, p. 9), accurately tagged 77% of the corpus; the remainder of the
Brown corpus was then tagged by hand. All these early algorithms were based on
a two-stage architecture in which a dictionary was ﬁrst used to assign each word a
set of potential parts of speech, and then lists of handwritten disambiguation rules
winnowed the set down to a single part of speech per word.

Probabilities were used in tagging by Stolz et al. (1965) and a complete proba-
bilistic tagger with Viterbi decoding was sketched by Bahl and Mercer (1976). The
Lancaster-Oslo/Bergen (LOB) corpus, a British English equivalent of the Brown cor-
pus, was tagged in the early 1980’s with the CLAWS tagger (Marshall 1983; Mar-
shall 1987; Garside 1987), a probabilistic algorithm that approximated a simpliﬁed
HMM tagger. The algorithm used tag bigram probabilities, but instead of storing the
word likelihood of each tag, the algorithm marked tags either as rare (P(tag
word) <
|
word) > .10).
word) < .10) or normally frequent (P(tag
.01) infrequent (P(tag
|
|
DeRose (1988) developed a quasi-HMM algorithm, including the use of dy-
namic programming, although computing P(t
t)P(w). The
w)P(w) instead of P(w
|
|
same year, the probabilistic PARTS tagger of Church 1988, 1989 was probably the
ﬁrst implemented HMM tagger, described correctly in Church (1989), although
w)P(w) instead
Church (1988) also described the computation incorrectly as P(t
|
t)P(w). Church (p.c.) explained that he had simpliﬁed for pedagogical pur-
of P(w
|
poses because using the probability P(t
w) made the idea seem more understandable
|
as “storing a lexicon in an almost standard form”.

Later taggers explicitly introduced the use of the hidden Markov model (Kupiec
1992; Weischedel et al. 1993; Sch¨utze and Singer 1994). Merialdo (1994) showed
that fully unsupervised EM didn’t work well for the tagging task and that reliance
on hand-labeled data was important. Charniak et al. (1993) showed the importance
of the most frequent tag baseline; the 92.3% number we give above was from Abney
et al. (1999). See Brants (2000) for HMM tagger implementation details, includ-
ing the extension to trigram contexts, and the use of sophisticated unknown word
features; its performance is still close to state of the art taggers.

EXERCISES

185

Log-linear models for POS tagging were introduced by Ratnaparkhi (1996),
who introduced a system called MXPOST which implemented a maximum entropy
Markov model (MEMM), a slightly simpler version of a CRF. Around the same
time, sequence labelers were applied to the task of named entity tagging, ﬁrst with
HMMs (Bikel et al., 1997) and MEMMs (McCallum et al., 2000), and then once
CRFs were developed (Lafferty et al. 2001), they were also applied to NER (Mc-
Callum and Li, 2003). A wide exploration of features followed (Zhou et al., 2005).
Neural approaches to NER mainly follow from the pioneering results of Collobert
et al. (2011), who applied a CRF on top of a convolutional net. BiLSTMs with word
and character-based embeddings as input followed shortly and became a standard
neural algorithm for NER (Huang et al. 2015, Ma and Hovy 2016, Lample et al.
2016) followed by the more recent use of Transformers and BERT.

The idea of using letter sufﬁxes for unknown words is quite old; the early Klein
and Simmons (1963) system checked all ﬁnal letter sufﬁxes of lengths 1-5. The un-
known word features described on page 178 come mainly from Ratnaparkhi (1996),
with augmentations from Toutanova et al. (2003) and Manning (2011).

State of the art POS taggers use neural algorithms, either bidirectional RNNs or
Transformers like BERT; see Chapter 9 and Chapter 11. HMM (Brants 2000; Thede
and Harper 1999) and CRF tagger accuracies are likely just a tad lower.

Manning (2011) investigates the remaining 2.7% of errors in a high-performing
tagger (Toutanova et al., 2003). He suggests that a third or half of these remaining
errors are due to errors or inconsistencies in the training data, a third might be solv-
able with richer linguistic models, and for the remainder the task is underspeciﬁed
or unclear.

Supervised tagging relies heavily on in-domain training data hand-labeled by
experts. Ways to relax this assumption include unsupervised algorithms for cluster-
ing words into part-of-speech-like classes, summarized in Christodoulopoulos et al.
(2010), and ways to combine labeled and unlabeled data, for example by co-training
(Clark et al. 2003; Søgaard 2010).

See Householder (1995) for historical notes on parts of speech, and Sampson
(1987) and Garside et al. (1997) on the provenance of the Brown and other tagsets.

Exercises

8.1

Find one tagging error in each of the following sentences that are tagged with
the Penn Treebank tagset:

1. I/PRP need/VBP a/DT ﬂight/NN from/IN Atlanta/NN
2. Does/VBZ this/DT ﬂight/NN serve/VB dinner/NNS
3. I/PRP have/VB a/DT friend/NN living/VBG in/IN Denver/NNP
4. Can/VBP you/PRP list/VB the/DT nonstop/JJ afternoon/NN ﬂights/NNS

8.2 Use the Penn Treebank tagset to tag each word in the following sentences
from Damon Runyon’s short stories. You may ignore punctuation. Some of
these are quite difﬁcult; do your best.

1. It is a nice night.
2. This crap game is over a garage in Fifty-second Street. . .
3.
4. He is a tall, skinny guy with a long, sad, mean-looking kisser, and a

. . . Nobody ever takes the newspapers she sells . . .

mournful voice.

186 CHAPTER 8

• SEQUENCE LABELING FOR PARTS OF SPEECH AND NAMED ENTITIES

5.

. . . I am sitting in Mindy’s restaurant putting on the geﬁllte ﬁsh, which is
a dish I am very fond of, . . .

6. When a guy and a doll get to taking peeks back and forth at each other,

why there you are indeed.

8.3 Now compare your tags from the previous exercise with one or two friend’s

answers. On which words did you disagree the most? Why?

8.4

Implement the “most likely tag” baseline. Find a POS-tagged training set,
and use it to compute for each word the tag that maximizes p(t
w). You will
|
need to implement a simple tokenizer to deal with sentence boundaries. Start
by assuming that all unknown words are NN and compute your error rate on
known and unknown words. Now write at least ﬁve rules to do a better job of
tagging unknown words, and show the difference in error rates.

8.5 Build a bigram HMM tagger. You will need a part-of-speech-tagged corpus.
First split the corpus into a training set and test set. From the labeled training
set, train the transition and observation probabilities of the HMM tagger di-
rectly on the hand-tagged data. Then implement the Viterbi algorithm so you
can decode a test sentence. Now run your algorithm on the test set. Report its
error rate and compare its performance to the most frequent tag baseline.

8.6 Do an error analysis of your tagger. Build a confusion matrix and investigate
the most frequent errors. Propose some features for improving the perfor-
mance of your tagger on these errors.

8.7 Develop a set of regular expressions to recognize the character shape features

described on page 178.

8.8

The BIO and other labeling schemes given in this chapter aren’t the only
possible one. For example, the B tag can be reserved only for those situations
where an ambiguity exists between adjacent entities. Propose a new set of
BIO tags for use with your NER system. Experiment with it and compare its
performance with the schemes presented in this chapter.

8.9 Names of works of art (books, movies, video games, etc.) are quite different
from the kinds of named entities we’ve discussed in this chapter. Collect a
list of names of works of art from a particular category from a Web-based
source (e.g., gutenberg.org, amazon.com, imdb.com, etc.). Analyze your list
and give examples of ways that the names in it are likely to be problematic for
the techniques described in this chapter.

8.10 Develop an NER system speciﬁc to the category of names that you collected in
the last exercise. Evaluate your system on a collection of text likely to contain
instances of these named entities.

CHAPTER

9 RNNs and LSTMs

Time will explain.
Jane Austen, Persuasion

Language is an inherently temporal phenomenon. Spoken language is a sequence of
acoustic events over time, and we comprehend and produce both spoken and written
language as a continuous input stream. The temporal nature of language is reﬂected
in the metaphors we use; we talk of the ﬂow of conversations, news feeds, and twitter
streams, all of which emphasize that language is a sequence that unfolds in time.

This temporal nature is reﬂected in some language processing algorithms. For
example, the Viterbi algorithm we introduced for HMM part-of-speech tagging pro-
ceeds through the input a word at a time, carrying forward information gleaned along
the way. Yet other machine learning approaches, like those we’ve studied for senti-
ment analysis or other text classiﬁcation tasks don’t have this temporal nature – they
assume simultaneous access to all aspects of their input.

The feedforward networks of Chapter 7 also assumed simultaneous access, al-
though they also had a simple model for time. Recall that we applied feedforward
networks to language modeling by having them look only at a ﬁxed-size window
of words, and then sliding this window over the input, making independent predic-
tions along the way. This sliding-window approach is also used in the transformer
architecture we will introduce in Chapter 10.

This chapter introduces a deep learning architecture that offers an alternative
way of representing time: recurrent neural networks (RNNs), and their variants like
LSTMs. RNNs have a mechanism that deals directly with the sequential nature of
language, allowing them to handle the temporal nature of language without the use of
arbitrary ﬁxed-sized windows. The recurrent network offers a new way to represent
the prior context, in its recurrent connections, allowing the model’s decision to
depend on information from hundreds of words in the past. We’ll see how to apply
the model to the task of language modeling, to sequence modeling tasks like part-
of-speech tagging, and to text classiﬁcation tasks like sentiment analysis.

9.1 Recurrent Neural Networks

A recurrent neural network (RNN) is any network that contains a cycle within its
network connections, meaning that the value of some unit is directly, or indirectly,
dependent on its own earlier outputs as an input. While powerful, such networks
are difﬁcult to reason about and to train. However, within the general class of recur-
rent networks there are constrained architectures that have proven to be extremely
effective when applied to language. In this section, we consider a class of recurrent
networks referred to as Elman Networks (Elman, 1990) or simple recurrent net-

Elman
Networks

188 CHAPTER 9

• RNNS AND LSTMS

works. These networks are useful in their own right and serve as the basis for more
complex approaches like the Long Short-Term Memory (LSTM) networks discussed
later in this chapter. In this chapter when we use the term RNN we’ll be referring to
these simpler more constrained networks (although you will often see the term RNN
to mean any net with recurrent properties including LSTMs).

Figure 9.1 Simple recurrent neural network after Elman (1990). The hidden layer includes
a recurrent connection as part of its input. That is, the activation value of the hidden layer
depends on the current input as well as the activation value of the hidden layer from the
previous time step.

Fig. 9.1 illustrates the structure of an RNN. As with ordinary feedforward net-
works, an input vector representing the current input, xt , is multiplied by a weight
matrix and then passed through a non-linear activation function to compute the val-
ues for a layer of hidden units. This hidden layer is then used to calculate a cor-
responding output, yt . In a departure from our earlier window-based approach, se-
quences are processed by presenting one item at a time to the network. We’ll use
subscripts to represent time, thus xt will mean the input vector x at time t. The key
difference from a feedforward network lies in the recurrent link shown in the ﬁgure
with the dashed line. This link augments the input to the computation at the hidden
layer with the value of the hidden layer from the preceding point in time.

The hidden layer from the previous time step provides a form of memory, or
context, that encodes earlier processing and informs the decisions to be made at
later points in time. Critically, this approach does not impose a ﬁxed-length limit
on this prior context; the context embodied in the previous hidden layer can include
information extending back to the beginning of the sequence.

Adding this temporal dimension makes RNNs appear to be more complex than
non-recurrent architectures. But in reality, they’re not all that different. Given an
input vector and the values for the hidden layer from the previous time step, we’re
still performing the standard feedforward calculation introduced in Chapter 7. To
see this, consider Fig. 9.2 which clariﬁes the nature of the recurrence and how it
factors into the computation at the hidden layer. The most signiﬁcant change lies in
the new set of weights, U, that connect the hidden layer from the previous time step
to the current hidden layer. These weights determine how the network makes use of
past context in calculating the output for the current input. As with the other weights
in the network, these connections are trained via backpropagation.

9.1.1

Inference in RNNs

Forward inference (mapping a sequence of inputs to a sequence of outputs) in an
RNN is nearly identical to what we’ve already seen with feedforward networks. To
compute an output yt for an input xt , we need the activation value for the hidden
layer ht . To calculate this, we multiply the input xt with the weight matrix W, and
the hidden layer from the previous time step ht
1 with the weight matrix U. We
−
add these values together and pass them through a suitable activation function, g,
to arrive at the activation value for the current hidden layer, ht . Once we have the

xthtyt9.1

• RECURRENT NEURAL NETWORKS

189

Figure 9.2 Simple recurrent neural network illustrated as a feedforward network.

values for the hidden layer, we proceed with the usual computation to generate the
output vector.

ht = g(Uht
1 + Wxt )
−
yt = f (Vht )

(9.1)

(9.2)

It’s worthwhile here to be careful about specifying the dimensions of the input, hid-
den and output layers, as well as the weight matrices to make sure these calculations
are correct. Let’s refer to the input, hidden and output layer dimensions as din, dh,
din ,
and dout respectively. Given this, our three parameter matrices are: W
U

Rdh×
∈
In the commonly encountered case of soft classiﬁcation, computing yt consists
of a softmax computation that provides a probability distribution over the possible
output classes.

dh, and V

Rdout ×

Rdh×

dh.

∈

∈

yt = softmax(Vht )

(9.3)

−

The fact that the computation at time t requires the value of the hidden layer from
time t
1 mandates an incremental inference algorithm that proceeds from the start
of the sequence to the end as illustrated in Fig. 9.3. The sequential nature of simple
recurrent networks can also be seen by unrolling the network in time as is shown in
Fig. 9.4. In this ﬁgure, the various layers of units are copied for each time step to
illustrate that they will have differing values over time. However, the various weight
matrices are shared across time.

function FORWARDRNN(x, network) returns output sequence y

0

h0 ←
for i
←
hi ←
yi ←
return y

1 to LENGTH(x) do
1 + Wxi)

g(Uhi
−
f (Vhi)

Figure 9.3 Forward inference in a simple recurrent network. The matrices U, V and W are
shared across time, while new values for h and y are calculated with each time step.

UVWytxththt-1190 CHAPTER 9

• RNNS AND LSTMS

Figure 9.4 A simple recurrent neural network shown unrolled in time. Network layers are recalculated for
each time step, while the weights U, V and W are shared across all time steps.

9.1.2 Training

As with feedforward networks, we’ll use a training set, a loss function, and back-
propagation to obtain the gradients needed to adjust the weights in these recurrent
networks. As shown in Fig. 9.2, we now have 3 sets of weights to update: W, the
weights from the input layer to the hidden layer, U, the weights from the previous
hidden layer to the current hidden layer, and ﬁnally V, the weights from the hidden
layer to the output layer.

Fig. 9.4 highlights two considerations that we didn’t have to worry about with
backpropagation in feedforward networks. First, to compute the loss function for
the output at time t we need the hidden layer from time t
1. Second, the hidden
layer at time t inﬂuences both the output at time t and the hidden layer at time t + 1
(and hence the output and loss at t + 1). It follows from this that to assess the error
accruing to ht , we’ll need to know its inﬂuence on both the current output as well as
the ones that follow.

−

Tailoring the backpropagation algorithm to this situation leads to a two-pass al-
gorithm for training the weights in RNNs. In the ﬁrst pass, we perform forward
inference, computing ht , yt , accumulating the loss at each step in time, saving the
value of the hidden layer at each step for use at the next time step. In the second
phase, we process the sequence in reverse, computing the required gradients as we
go, computing and saving the error term for use in the hidden layer for each step
backward in time. This general approach is commonly referred to as backpropaga-
tion through time (Werbos 1974, Rumelhart et al. 1986, Werbos 1990).

Fortunately, with modern computational frameworks and adequate computing
resources, there is no need for a specialized approach to training RNNs. As illus-
trated in Fig. 9.4, explicitly unrolling a recurrent network into a feedforward com-
putational graph eliminates any explicit recurrences, allowing the network weights
to be trained directly. In such an approach, we provide a template that speciﬁes the
basic structure of the network, including all the necessary parameters for the input,

backpropaga-
tion through
time

UVWUVWUVWx1x2x3y1y2y3h1h3h2h09.2

• RNNS AS LANGUAGE MODELS

191

output, and hidden layers, the weight matrices, as well as the activation and output
functions to be used. Then, when presented with a speciﬁc input sequence, we can
generate an unrolled feedforward network speciﬁc to that input, and use that graph
to perform forward inference or training via ordinary backpropagation.

For applications that involve much longer input sequences, such as speech recog-
nition, character-level processing, or streaming continuous inputs, unrolling an en-
tire input sequence may not be feasible. In these cases, we can unroll the input into
manageable ﬁxed-length segments and treat each segment as a distinct training item.

9.2 RNNs as Language Models

Let’s see how to apply RNNs to the language modeling task. Recall from Chapter 3
that language models predict the next word in a sequence given some preceding
context. For example, if the preceding context is “Thanks for all the” and we want
to know how likely the next word is “ﬁsh” we would compute:

Thanks for all the)
P(ﬁsh
|

Language models give us the ability to assign such a conditional probability to every
possible next word, giving us a distribution over the entire vocabulary. We can also
assign probabilities to entire sequences by combining these conditional probabilities
with the chain rule:

n

P(w1:n) =

P(wi|

w<i)

−

1 prior words. The context is thus of size n

(cid:89)i=1
The n-gram language models of Chapter 3 compute the probability of a word given
counts of its occurrence with the n
1.
−
For the feedforward language models of Chapter 7, the context is the window size.
RNN language models (Mikolov et al., 2010) process the input sequence one
word at a time, attempting to predict the next word from the current word and the
previous hidden state. RNNs thus don’t have the limited context problem that n-gram
models have, or the ﬁxed context that feedforward language models have, since the
hidden state can in principle represent information about all of the preceding words
all the way back to the beginning of the sequence. Fig. 9.5 sketches this difference
between a FFN language model and an RNN language model, showing that the
RNN language model uses ht
1, the hidden state from the previous time step, as a
representation of the past context.

−

9.2.1 Forward Inference in an RNN language model

Forward inference in a recurrent language model proceeds exactly as described in
Section 9.1.1. The input sequence X = [x1; ...; xt ; ...; xN] consists of a series of words
1, and the output prediction, y, is a
each represented as a one-hot vector of size
vector representing a probability distribution over the vocabulary. At each step, the
model uses the word embedding matrix E to retrieve the embedding for the current
word, and then combines it with the hidden layer from the previous step to compute a
new hidden layer. This hidden layer is then used to generate an output layer which is
passed through a softmax layer to generate a probability distribution over the entire

V
|

| ×

192 CHAPTER 9

• RNNS AND LSTMS

Figure 9.5 Simpliﬁed sketch of (a) a feedforward neural language model versus (b) an
RNN language model moving through a text.

vocabulary. That is, at time t:

et = Ext
ht = g(Uht
yt = softmax(Vht )

1 + Wet )
−

(9.4)

(9.5)

(9.6)

The vector resulting from Vh can be thought of as a set of scores over the vocabulary
given the evidence provided in h. Passing these scores through the softmax normal-
izes the scores into a probability distribution. The probability that a particular word
l in the vocabulary is the next word is represented by yt [k], the kth component of yt :

P(wt+1 = k

w1, . . . , wt ) = yt [k]
|

(9.7)

The probability of an entire sequence is just the product of the probabilities of each
item in the sequence, where we’ll use yi[wi] to mean the probability of the true word
wi at time step i.

P(w1:n) =

=

P(wi|

w1:i

1)

−

yi[wi]

n

(cid:89)i=1
n

(cid:89)i=1

(9.8)

(9.9)

self-supervision

9.2.2 Training an RNN language model

To train an RNN as a language model, we use the same self-supervision (or self-
training) algorithm we saw in Section 7.7: we take a corpus of text as training
material and at each time step t ask the model to predict the next word. We call
such a model self-supervised because we don’t have to add any special gold labels
to the data; the natural sequence of words is its own supervision! We simply train
the model to minimize the error in predicting the true next word in the training
sequence, using cross-entropy as the loss function. Recall that the cross-entropy
loss measures the difference between a predicted probability distribution and the
correct distribution.

LCE =

−

yt [w] log ˆyt [w]

(9.10)

V
(cid:88)w
∈
In the case of language modeling, the correct distribution yt comes from knowing the
next word. This is represented as a one-hot vector corresponding to the vocabulary

VWytxthtUht-1ytxthtxt-1xt-2U       Wa)b)9.2

• RNNS AS LANGUAGE MODELS

193

Figure 9.6 Training RNNs as language models.

where the entry for the actual next word is 1, and all the other entries are 0. Thus,
the cross-entropy loss for language modeling is determined by the probability the
model assigns to the correct next word. So at time t the CE loss is the negative log
probability the model assigns to the next word in the training sequence.

LCE ( ˆyt , yt ) =

log ˆyt [wt+1]

−

(9.11)

Thus at each word position t of the input, the model takes as input the correct se-
quence of tokens w1:t , and uses them to compute a probability distribution over
possible next words so as to compute the model’s loss for the next token wt+1. Then
we move to the next word, we ignore what the model predicted for the next word
and instead use the correct sequence of tokens w1:t+1 to estimate the probability of
token wt+2. This idea that we always give the model the correct history sequence to
predict the next word (rather than feeding the model its best case from the previous
time step) is called teacher forcing.

The weights in the network are adjusted to minimize the average CE loss over
the training sequence via gradient descent. Fig. 9.6 illustrates this training regimen.

9.2.3 Weight Tying

Careful readers may have noticed that the input embedding matrix E and the ﬁnal
layer matrix V, which feeds the output softmax, are quite similar. The columns of E
represent the word embeddings for each word in the vocabulary learned during the
training process with the goal that words that have similar meaning and function will
have similar embeddings. And, since the length of these embeddings corresponds to
the size of the hidden layer dh, the shape of the embedding matrix E is dh × |
V
The ﬁnal layer matrix V provides a way to score the likelihood of each word in
the vocabulary given the evidence present in the ﬁnal hidden layer of the network
through the calculation of Vh. This results in dimensionality
dh. That is, the
rows of V provide a second set of learned word embeddings that capture relevant
aspects of word meaning. This leads to an obvious question – is it even necessary
to have both? Weight tying is a method that dispenses with this redundancy and
simply uses a single set of embeddings at the input and softmax layers. That is, we

V
|

| ×

.
|

teacher forcing

weight typing

InputEmbeddingsSoftmax overVocabularySolongandthanksforlongandthanksforNext wordall…Loss……RNNhyVhe194 CHAPTER 9

• RNNS AND LSTMS

dispense with V and use E in both the start and end of the computation.

et = Ext
ht = g(Uht
1 + Wet )
−
yt = softmax(E(cid:124)ht )

(9.12)

(9.13)

(9.14)

In addition to providing improved model perplexity, this approach signiﬁcantly re-
duces the number of parameters required for the model.

9.3 RNNs for other NLP tasks

Now that we’ve seen the basic RNN architecture, let’s consider how to apply it to
three types of NLP tasks: sequence classiﬁcation tasks like sentiment analysis and
topic classiﬁcation, sequence labeling tasks like part-of-speech tagging, and text
generation tasks, including with a new architecture called the encoder-decoder.

9.3.1 Sequence Labeling

In sequence labeling, the network’s task is to assign a label chosen from a small
ﬁxed set of labels to each element of a sequence, like the part-of-speech tagging and
named entity recognition tasks from Chapter 8. In an RNN approach to sequence
labeling, inputs are word embeddings and the outputs are tag probabilities generated
by a softmax layer over the given tagset, as illustrated in Fig. 9.7.

Figure 9.7 Part-of-speech tagging as sequence labeling with a simple RNN. Pre-trained
word embeddings serve as inputs and a softmax layer provides a probability distribution over
the part-of-speech tags as output at each time step.

In this ﬁgure, the inputs at each time step are pretrained word embeddings cor-
responding to the input tokens. The RNN block is an abstraction that represents
an unrolled simple recurrent network consisting of an input layer, hidden layer, and
output layer at each time step, as well as the shared U, V and W weight matrices
that comprise the network. The outputs of the network at each time step represent
the distribution over the POS tagset generated by a softmax layer.

JanetwillbackthebillNNDTVBMDNNPArgmaxEmbeddingsWordsehVhyRNNLayer(s)Softmax overtags9.3

• RNNS FOR OTHER NLP TASKS

195

To generate a sequence of tags for a given input, we run forward inference over
the input sequence and select the most likely tag from the softmax at each step. Since
we’re using a softmax layer to generate the probability distribution over the output
tagset at each time step, we will again employ the cross-entropy loss during training.

9.3.2 RNNs for Sequence Classiﬁcation

Another use of RNNs is to classify entire sequences rather than the tokens within
them. This is the set of tasks commonly called text classiﬁcation, like sentiment
analysis or spam detection, in which we classify a text into two or three classes
(like positive or negative), as well as classiﬁcation tasks with a large number of
categories, like document-level topic classiﬁcation, or message routing for customer
service applications.

To apply RNNs in this setting, we pass the text to be classiﬁed through the RNN
a word at a time generating a new hidden layer at each time step. We can then take
the hidden layer for the last token of the text, hn, to constitute a compressed repre-
sentation of the entire sequence. We can pass this representation hn to a feedforward
network that chooses a class via a softmax over the possible classes. Fig. 9.8 illus-
trates this approach.

Figure 9.8 Sequence classiﬁcation using a simple RNN combined with a feedforward net-
work. The ﬁnal hidden state from the RNN is used as the input to a feedforward network that
performs the classiﬁcation.

Note that in this approach we don’t need intermediate outputs for the words in
the sequence preceding the last element. Therefore, there are no loss terms associ-
ated with those elements. Instead, the loss function used to train the weights in the
network is based entirely on the ﬁnal text classiﬁcation task. The output from the
softmax output from the feedforward classiﬁer together with a cross-entropy loss
drives the training. The error signal from the classiﬁcation is backpropagated all the
way through the weights in the feedforward classiﬁer through, to its input, and then
through to the three sets of weights in the RNN as described earlier in Section 9.1.2.
The training regimen that uses the loss from a downstream application to adjust the
weights all the way through the network is referred to as end-to-end training.

Another option, instead of using just the last token hn to represent the whole
sequence, is to use some sort of pooling function of all the hidden states hi for each
word i in the sequence. For example, we can create a representation that pools all

end-to-end
training

pooling

x1RNNhnx2x3xnSoftmaxFFN196 CHAPTER 9

• RNNS AND LSTMS

the n hidden states by taking their element-wise mean:

hmean =

1
n

n

hi

(cid:88)i=1

(9.15)

Or we can take the element-wise max; the element-wise max of a set of n vectors is
a new vector whose kth element is the max of the kth elements of all the n vectors.

9.3.3 Generation with RNN-Based Language Models

RNN-based language models can also be used to generate text. Text generation is
of enormous practical importance, part of tasks like question answering, machine
translation, text summarization, grammar correction, story generation, and conver-
sational dialogue; any task where a system needs to produce text, conditioned on
some other text. This use of a language model to generate text is one of the areas
in which the impact of neural language models on NLP has been the largest. Text
generation, along with image generation and code generation, constitute a new area
of AI that is often called generative AI.

Recall back in Chapter 3 we saw how to generate text from an n-gram language
model by adapting a sampling technique suggested at about the same time by Claude
Shannon (Shannon, 1951) and the psychologists George Miller and Jennifer Self-
ridge (Miller and Selfridge, 1950). We ﬁrst randomly sample a word to begin a
sequence based on its suitability as the start of a sequence. We then continue to
sample words conditioned on our previous choices until we reach a pre-determined
length, or an end of sequence token is generated.

Today, this approach of using a language model to incrementally generate words
by repeatedly sampling the next word conditioned on our previous choices is called
autoregressive generation or causal LM generation. The procedure is basically
the same as that described on page 42, but adapted to a neural context:

• Sample a word in the output from the softmax distribution that results from

using the beginning of sentence marker, <s>, as the ﬁrst input.

• Use the word embedding for that ﬁrst word as the input to the network at the

next time step, and then sample the next word in the same fashion.

• Continue generating until the end of sentence marker, </s>, is sampled or a

ﬁxed length limit is reached.

autoregressive
generation

−

−

1, t

Technically an autoregressive model is a model that predicts a value at time t based
on a linear function of the previous values at times t
2, and so on. Although
language models are not linear (since they have many layers of non-linearities), we
loosely refer to this generation technique as autoregressive generation since the
word generated at each time step is conditioned on the word selected by the network
from the previous step. Fig. 9.9 illustrates this approach. In this ﬁgure, the details of
the RNN’s hidden layers and recurrent connections are hidden within the blue block.
This simple architecture underlies state-of-the-art approaches to applications
such as machine translation, summarization, and question answering. The key to
these approaches is to prime the generation component with an appropriate context.
That is, instead of simply using <s> to get things started we can provide a richer
task-appropriate context; for translation the context is the sentence in the source
language; for summarization it’s the long text we want to summarize.

9.4

• STACKED AND BIDIRECTIONAL RNN ARCHITECTURES

197

Figure 9.9 Autoregressive generation with an RNN-based neural language model.

9.4 Stacked and Bidirectional RNN architectures

Recurrent networks are quite ﬂexible. By combining the feedforward nature of un-
rolled computational graphs with vectors as common inputs and outputs, complex
networks can be treated as modules that can be combined in creative ways. This
section introduces two of the more common network architectures used in language
processing with RNNs.

9.4.1 Stacked RNNs

In our examples thus far, the inputs to our RNNs have consisted of sequences of
word or character embeddings (vectors) and the outputs have been vectors useful for
predicting words, tags or sequence labels. However, nothing prevents us from using
the entire sequence of outputs from one RNN as an input sequence to another one.
Stacked RNNs consist of multiple networks where the output of one layer serves as
the input to a subsequent layer, as shown in Fig. 9.10.

Stacked RNNs

Figure 9.10 Stacked recurrent networks. The output of a lower level serves as the input to
higher levels with the output of the last network serving as the ﬁnal output.

Solong<s>andSolongand?Sampled WordSoftmaxEmbeddingInput WordRNNy1y2y3ynx1x2x3xnRNN 1RNN 2 RNN 3198 CHAPTER 9

• RNNS AND LSTMS

Stacked RNNs generally outperform single-layer networks. One reason for this
success seems to be that the network induces representations at differing levels of
abstraction across layers. Just as the early stages of the human visual system detect
edges that are then used for ﬁnding larger regions and shapes, the initial layers of
stacked networks can induce representations that serve as useful abstractions for
further layers—representations that might prove difﬁcult to induce in a single RNN.
The optimal number of stacked RNNs is speciﬁc to each application and to each
training set. However, as the number of stacks is increased the training costs rise
quickly.

9.4.2 Bidirectional RNNs

The RNN uses information from the left (prior) context to make its predictions at
time t. But in many applications we have access to the entire input sequence; in
those cases we would like to use words from the context to the right of t. One way
to do this is to run two separate RNNs, one left-to-right, and one right-to-left, and
concatenate their representations.

In the left-to-right RNNs we’ve discussed so far, the hidden state at a given time
t represents everything the network knows about the sequence up to that point. The
state is a function of the inputs x1, ..., xt and represents the context of the network to
the left of the current time.

h f

t = RNNforward(x1, . . . , xt )

(9.16)

This new notation h f
senting everything the network has gleaned from the sequence so far.

t simply corresponds to the normal hidden state at time t, repre-

To take advantage of context to the right of the current input, we can train an
RNN on a reversed input sequence. With this approach, the hidden state at time t
represents information about the sequence to the right of the current input:

hb

t = RNNbackward(xt , . . . xn)

(9.17)

bidirectional
RNN

Here, the hidden state hb
sequence from t to the end of the sequence.

t represents all the information we have discerned about the

A bidirectional RNN (Schuster and Paliwal, 1997) combines two independent
RNNs, one where the input is processed from the start to the end, and the other from
the end to the start. We then concatenate the two representations computed by the
networks into a single vector that captures both the left and right contexts of an input
at each point in time. Here we use either the semicolon ”;” or the equivalent symbol

to mean vector concatenation:

⊕

ht = [h f
= h f

t ; hb
t ]
hb
t

t ⊕

(9.18)

Fig. 9.11 illustrates such a bidirectional network that concatenates the outputs of
the forward and backward pass. Other simple ways to combine the forward and
backward contexts include element-wise addition or multiplication. The output at
each step in time thus captures information to the left and to the right of the current
input. In sequence labeling applications, these concatenated outputs can serve as the
basis for a local labeling decision.

Bidirectional RNNs have also proven to be quite effective for sequence classiﬁ-
cation. Recall from Fig. 9.8 that for sequence classiﬁcation we used the ﬁnal hidden

9.4

• STACKED AND BIDIRECTIONAL RNN ARCHITECTURES

199

Figure 9.11 A bidirectional RNN. Separate models are trained in the forward and backward
directions, with the output of each model at each time point concatenated to represent the
bidirectional state at that time point.

state of the RNN as the input to a subsequent feedforward classiﬁer. A difﬁculty
with this approach is that the ﬁnal state naturally reﬂects more information about
the end of the sentence than its beginning. Bidirectional RNNs provide a simple
solution to this problem; as shown in Fig. 9.12, we simply combine the ﬁnal hidden
states from the forward and backward passes (for example by concatenation) and
use that as input for follow-on processing.

Figure 9.12 A bidirectional RNN for sequence classiﬁcation. The ﬁnal hidden units from
the forward and backward passes are combined to represent the entire sequence. This com-
bined representation serves as input to the subsequent classiﬁer.

RNN 2 RNN 1x1y2y1y3ynconcatenatedoutputsx2x3xnRNN 2 RNN 1x1x2x3xnhn→h1←hn→SoftmaxFFNh1←200 CHAPTER 9

• RNNS AND LSTMS

9.5 The LSTM

In practice, it is quite difﬁcult to train RNNs for tasks that require a network to make
use of information distant from the current point of processing. Despite having ac-
cess to the entire preceding sequence, the information encoded in hidden states tends
to be fairly local, more relevant to the most recent parts of the input sequence and
recent decisions. Yet distant information is critical to many language applications.
Consider the following example in the context of language modeling.

(9.19) The ﬂights the airline was canceling were full.

Assigning a high probability to was following airline is straightforward since airline
provides a strong local context for the singular agreement. However, assigning an
appropriate probability to were is quite difﬁcult, not only because the plural ﬂights
is quite distant, but also because the singular noun airline is closer in the intervening
context. Ideally, a network should be able to retain the distant information about
plural ﬂights until it is needed, while still processing the intermediate parts of the
sequence correctly.

One reason for the inability of RNNs to carry forward critical information is that
the hidden layers, and, by extension, the weights that determine the values in the hid-
den layer, are being asked to perform two tasks simultaneously: provide information
useful for the current decision, and updating and carrying forward information re-
quired for future decisions.

A second difﬁculty with training RNNs arises from the need to backpropagate
the error signal back through time. Recall from Section 9.1.2 that the hidden layer at
time t contributes to the loss at the next time step since it takes part in that calcula-
tion. As a result, during the backward pass of training, the hidden layers are subject
to repeated multiplications, as determined by the length of the sequence. A frequent
result of this process is that the gradients are eventually driven to zero, a situation
called the vanishing gradients problem.

To address these issues, more complex network architectures have been designed
to explicitly manage the task of maintaining relevant context over time, by enabling
the network to learn to forget information that is no longer needed and to remember
information required for decisions still to come.

The most commonly used such extension to RNNs is the long short-term mem-
ory (LSTM) network (Hochreiter and Schmidhuber, 1997). LSTMs divide the con-
text management problem into two subproblems: removing information no longer
needed from the context, and adding information likely to be needed for later de-
cision making. The key to solving both problems is to learn how to manage this
context rather than hard-coding a strategy into the architecture. LSTMs accomplish
this by ﬁrst adding an explicit context layer to the architecture (in addition to the
usual recurrent hidden layer), and through the use of specialized neural units that
make use of gates to control the ﬂow of information into and out of the units that
comprise the network layers. These gates are implemented through the use of addi-
tional weights that operate sequentially on the input, and previous hidden layer, and
previous context layers.

The gates in an LSTM share a common design pattern; each consists of a feed-
forward layer, followed by a sigmoid activation function, followed by a pointwise
multiplication with the layer being gated. The choice of the sigmoid as the activation
function arises from its tendency to push its outputs to either 0 or 1. Combining this
with a pointwise multiplication has an effect similar to that of a binary mask. Values

vanishing
gradients

long short-term
memory

9.5

• THE LSTM 201

forget gate

in the layer being gated that align with values near 1 in the mask are passed through
nearly unchanged; values corresponding to lower values are essentially erased.

The ﬁrst gate we’ll consider is the forget gate. The purpose of this gate is
to delete information from the context that is no longer needed. The forget gate
computes a weighted sum of the previous state’s hidden layer and the current in-
put and passes that through a sigmoid. This mask is then multiplied element-wise
by the context vector to remove the information from context that is no longer re-
quired. Element-wise multiplication of two vectors (represented by the operator
,
(cid:12)
and sometimes called the Hadamard product) is the vector of the same dimension
as the two input vectors, where each element i is the product of element i in the two
input vectors:

ft = σ (U f ht
1 + W f xt )
−
ft
kt = ct

(9.20)

(9.21)

1 (cid:12)
−
The next task is to compute the actual information we need to extract from the previ-
ous hidden state and current inputs—the same basic computation we’ve been using
for all our recurrent networks.

add gate

Next, we generate the mask for the add gate to select the information to add to the
current context.

gt = tanh(Ught

1 + Wgxt )
−

(9.22)

it = σ (Uiht
it
jt = gt (cid:12)

1 + Wixt )
−

(9.23)

(9.24)

Next, we add this to the modiﬁed context vector to get our new context vector.

ct = jt + kt

(9.25)

output gate

The ﬁnal gate we’ll use is the output gate which is used to decide what informa-
tion is required for the current hidden state (as opposed to what information needs
to be preserved for future decisions).

ot = σ (Uoht
ht = ot (cid:12)

1 + Woxt )
−
tanh(ct )

(9.26)

(9.27)

Fig. 9.13 illustrates the complete computation for a single LSTM unit. Given the
appropriate weights for the various gates, an LSTM accepts as input the context
layer, and hidden layer from the previous time step, along with the current input
vector. It then generates updated context and hidden vectors as output.

It is the hidden state, ht , that provides the output for the LSTM at each time step.
This output can be used as the input to subsequent layers in a stacked RNN, or at the
ﬁnal layer of a network ht can be used to provide the ﬁnal output of the LSTM.

9.5.1 Gated Units, Layers and Networks

The neural units used in LSTMs are obviously much more complex than those used
in basic feedforward networks. Fortunately, this complexity is encapsulated within
the basic processing units, allowing us to maintain modularity and to easily exper-
iment with different architectures. To see this, consider Fig. 9.14 which illustrates
the inputs and outputs associated with each kind of unit.

202 CHAPTER 9

• RNNS AND LSTMS

Figure 9.13 A single LSTM unit displayed as a computation graph. The inputs to each unit consists of the
current input, x, the previous hidden state, ht
1. The outputs are a new hidden
state, ht and an updated context, ct .

1, and the previous context, ct

−

−

Figure 9.14 Basic neural units used in feedforward, simple recurrent networks (SRN), and
long short-term memory (LSTM).

At the far left, (a) is the basic feedforward unit where a single set of weights and
a single activation function determine its output, and when arranged in a layer there
are no connections among the units in the layer. Next, (b) represents the unit in a
simple recurrent network. Now there are two inputs and an additional set of weights
to go with it. However, there is still a single activation function and output.

The increased complexity of the LSTM units is encapsulated within the unit
itself. The only additional external complexity for the LSTM over the basic recurrent
unit (b) is the presence of the additional context vector as an input and output.

This modularity is key to the power and widespread applicability of LSTM units.
LSTM units (or other varieties, like GRUs) can be substituted into any of the network
architectures described in Section 9.4. And, as with simple RNNs, multi-layered
networks making use of gated units can be unrolled into deep feedforward networks
and trained in the usual fashion with backpropagation. In practice, therefore, LSTMs
rather than RNNs have become the standard unit for any modern system that makes
use of recurrent networks.

+xtht-1cthtcthtct-1ht-1xttanh+σtanhσσ+++igfo⦿⦿⦿LSTMct-1hxxtxtht-1hthtct-1ctht-1(b)(a)(c)⌃gza⌃gzLSTMUnita9.6

• SUMMARY: COMMON RNN NLP ARCHITECTURES

203

9.6 Summary: Common RNN NLP Architectures

We’ve now introduced the RNN, seen advanced components like stacking multiple
layers and using the LSTM version, and seen how the RNN can be applied to various
tasks. Let’s take a moment to summarize the architectures for these applications.

Fig. 9.15 shows the three architectures we’ve discussed so far: sequence la-
beling, sequence classiﬁcation, and language modeling. In sequence labeling (for
example for part of speech tagging), we train a model to produce a label for each
input word or token. In sequence classiﬁcation, for example for sentiment analysis,
we ignore the output for each token, and only take the value from the end of the
sequence (and similarly the model’s training signal comes from backpropagation
from that last token). In language modeling, we train the model to predict the next
word at each token step. In the next section we’ll introduce a fourth architecture, the
encoder-decoder.

Figure 9.15 Four architectures for NLP tasks. In sequence labeling (POS or named entity tagging) we map
each input token xi to an output token yi. In sequence classiﬁcation we map the entire input sequence to a single
class. In language modeling we output the next token conditioned on previous tokens. In the encoder model we
have two separate RNN models, one of which maps from an input sequence x to an intermediate representation
we call the context, and a second of which maps from the context to an output sequence y.

9.7 The Encoder-Decoder Model with RNNs

In this section we introduce a new model, the encoder-decoder model, which is used
when we are taking an input sequence and translating it to an output sequence that is
of a different length than the input, and doesn’t align with it in a word-to-word way.
Recall that in the sequence labeling task, we have two sequences, but they are the

…Encoder RNNDecoder RNNContext…x1x2xny1y2ym…RNNx1x2xn…y1y2yn…RNNx1x2xny…RNNx1x2xt-1…x2x3xta) sequence labeling b) sequence classification c) language modelingd) encoder-decoder204 CHAPTER 9

• RNNS AND LSTMS

same length (for example in part-of-speech tagging each token gets an associated
tag), each input is associated with a speciﬁc output, and the labeling for that output
takes mostly local information. Thus deciding whether a word is a verb or a noun,
we look mostly at the word and the neighboring words.

By contrast, encoder-decoder models are used especially for tasks like machine
translation, where the input sequence and output sequence can have different lengths
and the mapping between a token in the input and a token in the output can be very
indirect (in some languages the verb appears at the beginning of the sentence; in
other languages at the end). We’ll introduce machine translation in detail in Chap-
ter 13, but for now we’ll just point out that the mapping for a sentence in English to
a sentence in Tagalog or Yoruba can have very different numbers of words, and the
words can be in a very different order.

Encoder-decoder networks, sometimes called sequence-to-sequence networks,
are models capable of generating contextually appropriate, arbitrary length, output
sequences given an input sequence. Encoder-decoder networks have been applied
to a very wide range of applications including summarization, question answering,
and dialogue, but they are particularly popular for machine translation.

The key idea underlying these networks is the use of an encoder network that
takes an input sequence and creates a contextualized representation of it, often called
the context. This representation is then passed to a decoder which generates a task-
speciﬁc output sequence. Fig. 9.16 illustrates the architecture.

encoder-
decoder

Figure 9.16 The encoder-decoder architecture. The context is a function of the hidden
representations of the input, and may be used by the decoder in a variety of ways.

Encoder-decoder networks consist of three conceptual components:

1. An encoder that accepts an input sequence, x1:n, and generates a correspond-
ing sequence of contextualized representations, h1:n. LSTMs, convolutional
networks, and transformers can all be employed as encoders.

2. A context vector, c, which is a function of h1:n, and conveys the essence of

the input to the decoder.

3. A decoder, which accepts c as input and generates an arbitrary length se-
quence of hidden states h1:m, from which a corresponding sequence of output
states y1:m, can be obtained. Just as with encoders, decoders can be realized
by any kind of sequence architecture.

In this section we’ll describe an encoder-decoder network based on a pair of
RNNs, but we’ll see in Chapter 13 how to apply them to transformers as well. We’ll
build up the equations for encoder-decoder models by starting with the conditional
RNN language model p(y), the probability of a sequence y.

Recall that in any language model, we can break down the probability as follows:

p(y) = p(y1)p(y2|

y1)p(y3|

y1, y2) . . . p(ym|

y1, ..., ym

1)

−

(9.28)

…EncoderDecoderContext…x1x2xny1y2ym9.7

• THE ENCODER-DECODER MODEL WITH RNNS

205

In RNN language modeling, at a particular time t, we pass the preﬁx of t
1
tokens through the language model, using forward inference to produce a sequence
of hidden states, ending with the hidden state corresponding to the last word of
the preﬁx. We then use the ﬁnal hidden state of the preﬁx as our starting point to
generate the next token.

−

More formally, if g is an activation function like tanh or ReLU, a function of
the input at time t and the hidden state at time t
1, and f is a softmax over the
set of possible vocabulary items, then at time t the output yt and hidden state ht are
computed as:

−

ht = g(ht
1, xt )
−
yt = f (ht )

(9.29)

(9.30)

sentence
separation

We only have to make one slight change to turn this language model with au-
toregressive generation into an encoder-decoder model that is a translation model
that can translate from a source text in one language to a target text in a second:
add a sentence separation marker at the end of the source text, and then simply
concatenate the target text.

Let’s use <s> for our sentence separator token, and let’s think about translating
an English source text (“the green witch arrived”), to a Spanish sentence (“lleg´o
la bruja verde” (which can be glossed word-by-word as ‘arrived the witch green’).
We could also illustrate encoder-decoder models with a question-answer pair, or a
text-summarization pair.

Let’s use x to refer to the source text (in this case in English) plus the separator
token <s>, and y to refer to the target text y (in this case in Spanish). Then an
encoder-decoder model computes the probability p(y

p(y

x) = p(y1|
|

x)p(y2|

y1, x)p(y3|

x) as follows:
|
y1, y2, x) . . . p(ym|

y1, ..., ym

1, x)

−

(9.31)

Fig. 9.17 shows the setup for a simpliﬁed version of the encoder-decoder model
(we’ll see the full model, which requires the new concept of attention, in the next
section).

Figure 9.17 Translating a single sentence (inference time) in the basic RNN version of encoder-decoder ap-
proach to machine translation. Source and target sentences are concatenated with a separator token in between,
and the decoder uses context information from the encoder’s last hidden state.

Fig. 9.17 shows an English source text (“the green witch arrived”), a sentence
separator token (<s>, and a Spanish target text (“lleg´o la bruja verde”). To trans-

Source TextTarget Texthnembeddinglayerhiddenlayer(s)softmaxthegreenllegówitcharrived<s>llególalabrujabrujaverdeverde</s>(output of source is ignored)Separator206 CHAPTER 9

• RNNS AND LSTMS

late a source text, we run it through the network performing forward inference to
generate hidden states until we get to the end of the source. Then we begin autore-
gressive generation, asking for a word in the context of the hidden layer from the
end of the source input as well as the end-of-sentence marker. Subsequent words
are conditioned on the previous hidden state and the embedding for the last word
generated.

Let’s formalize and generalize this model a bit in Fig. 9.18. (To help keep things
straight, we’ll use the superscripts e and d where needed to distinguish the hidden
states of the encoder and the decoder.) The elements of the network on the left
process the input sequence x and comprise the encoder. While our simpliﬁed ﬁgure
shows only a single network layer for the encoder, stacked architectures are the
norm, where the output states from the top layer of the stack are taken as the ﬁnal
representation, and the encoder consists of stacked biLSTMs where the hidden states
from top layers from the forward and backward passes are concatenated to provide
the contextualized representations for each time step.

Figure 9.18 A more formal version of translating a sentence at inference time in the basic RNN-based
encoder-decoder architecture. The ﬁnal hidden state of the encoder RNN, he
n, serves as the context for the
decoder in its role as hd

0 in the decoder RNN, and is also made available to each decoder hidden state.

The entire purpose of the encoder is to generate a contextualized representation
of the input. This representation is embodied in the ﬁnal hidden state of the encoder,
he
n. This representation, also called c for context, is then passed to the decoder.

The simplest version of the decoder network would takes this state and use it
just to initialize the ﬁrst hidden state of the decoder; the ﬁrst decoder RNN cell
would use c as its prior hidden state hd
0. The decoder would then autoregressively
generates a sequence of outputs, an element at a time, until an end-of-sequence
marker is generated. Each hidden state is conditioned on the previous hidden state
and the output generated in the previous state.

As Fig. 9.18 shows, we do something more complex: we make the context vector
c available to more than just the ﬁrst decoder hidden state, to ensure that the inﬂuence
of the context vector, c, doesn’t wane as the output sequence is generated. We do
this by adding c as a parameter to the computation of the current hidden state. using
the following equation:

hd
t = g( ˆyt

1, hd
1, c)
t
−
−

(9.32)

Now we’re ready to see the full equations for this version of the decoder in the basic
encoder-decoder model, with context available at each decoding timestep. Recall

EncoderDecoderhn hd1he3he2he1hd2hd3hd4embeddinglayerhiddenlayer(s)softmaxx1x2y1hdmx3xn<s>y1y2y2y3y3y4ym</s>hen = c = hd0(output is ignored during encoding)9.7

• THE ENCODER-DECODER MODEL WITH RNNS

207

that g is a stand-in for some ﬂavor of RNN and ˆyt
sampled from the softmax at the previous step:

1 is the embedding for the output

−

c = he
n
hd
0 = c
hd
1, hd
1, c)
t = g( ˆyt
t
−
−
zt = f (hd
t )
yt = softmax(zt )

(9.33)

Finally, as shown earlier, the output y at each time step consists of a softmax com-
putation over the set of possible outputs (the vocabulary, in the case of language
modeling or MT). We compute the most likely output at each time step by taking the
argmax over the softmax output:

ˆyt = argmaxw

y1...yt
VP(w
|
∈

1, x)

−

(9.34)

9.7.1 Training the Encoder-Decoder Model

Encoder-decoder architectures are trained end-to-end. Each training example is a
tuple of paired strings, a source and a target. Concatenated with a separator token,
these source-target pairs can now serve as training data.

For MT, the training data typically consists of sets of sentences and their transla-
tions. These can be drawn from standard datasets of aligned sentence pairs, as we’ll
discuss in Section 13.2.2. Once we have a training set, the training itself proceeds
as with any RNN-based language model. The network is given the source text and
then starting with the separator token is trained autoregressively to predict the next
word, as shown in Fig. 9.19.

Figure 9.19 Training the basic RNN encoder-decoder approach to machine translation. Note that in the
decoder we usually don’t propagate the model’s softmax outputs ˆyt , but use teacher forcing to force each input
to the correct gold value for training. We compute the softmax output distribution over ˆy in the decoder in order
to compute the loss at each token, which can then be averaged to compute a loss for the sentence.

EncoderDecoderembeddinglayerhiddenlayer(s)softmaxthegreenllegówitcharrived<s>llególalabrujabrujaverdeverde</s>goldanswersL1 =-log P(y1)x1x2x3x4L2 =-log P(y2)L3 =-log P(y3)L4 =-log P(y4)L5 =-log P(y5)per-wordlossy1y2y3y4y5Total loss is the average cross-entropy loss per target word:208 CHAPTER 9

• RNNS AND LSTMS

teacher forcing

Note the differences between training (Fig. 9.19) and inference (Fig. 9.17) with
respect to the outputs at each time step. The decoder during inference uses its own
estimated output ˆyt as the input for the next time step xt+1. Thus the decoder will
tend to deviate more and more from the gold target sentence as it keeps generating
more tokens. In training, therefore, it is more common to use teacher forcing in the
decoder. Teacher forcing means that we force the system to use the gold target token
from training as the next input xt+1, rather than allowing it to rely on the (possibly
erroneous) decoder output ˆyt . This speeds up training.

9.8 Attention

The simplicity of the encoder-decoder model is its clean separation of the encoder—
which builds a representation of the source text—from the decoder, which uses this
context to generate a target text.
In the model as we’ve described it so far, this
context vector is hn, the hidden state of the last (nth) time step of the source text.
This ﬁnal hidden state is thus acting as a bottleneck: it must represent absolutely
everything about the meaning of the source text, since the only thing the decoder
knows about the source text is what’s in this context vector (Fig. 9.20). Information
at the beginning of the sentence, especially for long sentences, may not be equally
well represented in the context vector.

attention
mechanism

Figure 9.20 Requiring the context c to be only the encoder’s ﬁnal hidden state forces all the
information from the entire source sentence to pass through this representational bottleneck.

The attention mechanism is a solution to the bottleneck problem, a way of
allowing the decoder to get information from all the hidden states of the encoder,
not just the last hidden state.

In the attention mechanism, as in the vanilla encoder-decoder model, the context
vector c is a single vector that is a function of the hidden states of the encoder, that
is, c = f (he
n). Because the number of hidden states varies with the size of
the input, we can’t use the entire set of encoder hidden state vectors directly as the
context for the decoder.

1 . . . he

The idea of attention is instead to create the single ﬁxed-length vector c by taking
a weighted sum of all the encoder hidden states. The weights focus on (‘attend
to’) a particular part of the source text that is relevant for the token the decoder is
currently producing. Attention thus replaces the static context vector with one that
is dynamically derived from the encoder hidden states, different for each token in
decoding.

This context vector, ci, is generated anew with each decoding step i and takes
all of the encoder hidden states into account in its derivation. We then make this
context available during decoding by conditioning the computation of the current
decoder hidden state on it (along with the prior hidden state and the previous output
generated by the decoder), as we see in this equation (and Fig. 9.21):

hd
1, hd
1, ci)
i = g( ˆyi
i
−
−

(9.35)

EncoderDecoderbottleneckbottleneck9.8

• ATTENTION

209

Figure 9.21 The attention mechanism allows each hidden state of the decoder to see a
different, dynamic, context, which is a function of all the encoder hidden states.

The ﬁrst step in computing ci is to compute how much to focus on each encoder
state, how relevant each encoder state is to the decoder state captured in hd
1. We
i
−
capture relevance by computing— at each state i during decoding—a score(hd
1, he
j)
i
−
for each encoder state j.

The simplest such score, called dot-product attention, implements relevance as
similarity: measuring how similar the decoder hidden state is to an encoder hidden
state, by computing the dot product between them:

dot-product
attention

score(hd
1, he
i
−

j) = hd
i
1 ·
−

he
j

(9.36)

The score that results from this dot product is a scalar that reﬂects the degree of
similarity between the two vectors. The vector of these scores across all the encoder
hidden states gives us the relevance of each encoder state to the current step of the
decoder.

To make use of these scores, we’ll normalize them with a softmax to create a
vector of weights, αi j, that tells us the proportional relevance of each encoder hidden
state j to the prior hidden decoder state, hd
1.
i
−

1, he
αi j = softmax(score(hd
i
−
exp(score(hd
1, he
j)
i
−
k exp(score(hd
1, he
k))
i
−

=

j))

(9.37)

Finally, given the distribution in α, we can compute a ﬁxed-length context vector for
the current decoder state by taking a weighted average over all the encoder hidden
states.

(cid:80)

ci =

αi j he
j

(9.38)

(cid:88)j
With this, we ﬁnally have a ﬁxed-length context vector that takes into account
information from the entire encoder state that is dynamically updated to reﬂect the
needs of the decoder at each step of decoding. Fig. 9.22 illustrates an encoder-
decoder network with attention, focusing on the computation of one context vector
ci.

It’s also possible to create more sophisticated scoring functions for attention
models. Instead of simple dot product attention, we can get a more powerful function
that computes the relevance of each encoder hidden state to the decoder hidden state
by parameterizing the score with its own set of weights, Ws.

1, he
score(hd
i
−

1Wshe
j) = hd
j
t
−

The weights Ws, which are then trained during normal end-to-end training, give the
network the ability to learn which aspects of similarity between the decoder and

hd1hd2hdiy1y2yic1c2ci……210 CHAPTER 9

• RNNS AND LSTMS

Figure 9.22 A sketch of the encoder-decoder network with attention, focusing on the computation of ci. The
context value ci is one of the inputs to the computation of hd
i . It is computed by taking the weighted sum of all
the encoder hidden states, each weighted by their dot product with the prior decoder hidden state hd
1.
i
−

encoder states are important to the current application. This bilinear model also
allows the encoder and decoder to use different dimensional vectors, whereas the
simple dot-product attention requires that the encoder and decoder hidden states
have the same dimensionality.

We’ll return to the concept of attention when we deﬁned the transformer archi-
tecture in Chapter 10, which is based on a slight modiﬁcation of attention called
self-attention.

9.9 Summary

This chapter has introduced the concepts of recurrent neural networks and how they
can be applied to language problems. Here’s a summary of the main points that we
covered:

−

• In simple Recurrent Neural Networks sequences are processed one element at
a time, with the output of each neural unit at time t based both on the current
input at t and the hidden layer from time t

1.

• RNNs can be trained with a straightforward extension of the backpropagation

algorithm, known as backpropagation through time (BPTT).

• Simple recurrent networks fail on long inputs because of problems like van-
ishing gradients; instead modern systems use more complex gated architec-
tures such as LSTMs that explicitly decide what to remember and forget in
their hidden and context layers.

• Common language-based applications for RNNs include:

– Probabilistic language modeling: assigning a probability to a sequence,

or to the next element of a sequence given the preceding words.

– Auto-regressive generation using a trained language model.
– Sequence labeling like part-of-speech tagging, where each element of a

sequence is assigned a label.

EncoderDecoderhdi-1he3he2he1hdihiddenlayer(s)x1x2yix3xnyi-1yiyi+1hen ci.2.1.3.4attentionweightsci-1ci<latexit sha1_base64="TNdNmv/RIlrhPa6LgQyjjQLqyBA=">AAACAnicdVDLSsNAFJ3UV62vqCtxM1gEVyHpI9Vd0Y3LCvYBTQyT6bSddvJgZiKUUNz4K25cKOLWr3Dn3zhpK6jogQuHc+7l3nv8mFEhTfNDyy0tr6yu5dcLG5tb2zv67l5LRAnHpIkjFvGOjwRhNCRNSSUjnZgTFPiMtP3xRea3bwkXNAqv5SQmboAGIe1TjKSSPP3AEUngjVIHsXiIvJSOpnB4Q7zR1NOLpmGaVbtqQdOwLbtk24qY5Yp9VoOWsjIUwQINT393ehFOAhJKzJAQXcuMpZsiLilmZFpwEkFihMdoQLqKhiggwk1nL0zhsVJ6sB9xVaGEM/X7RIoCISaBrzoDJIfit5eJf3ndRPZP3ZSGcSJJiOeL+gmDMoJZHrBHOcGSTRRBmFN1K8RDxBGWKrWCCuHrU/g/aZUMyzbKV5Vi/XwRRx4cgiNwAixQA3VwCRqgCTC4Aw/gCTxr99qj9qK9zltz2mJmH/yA9vYJSymYCA==</latexit>Xj↵ijhej↵ij<latexit sha1_base64="y8s4mGdpwrGrBnuSR+p1gJJXYdo=">AAAB/nicdVDJSgNBEO2JW4zbqHjy0hgEL4YeJyQBL0EvHiOYBbIMPT09mTY9C909QhgC/ooXD4p49Tu8+Td2FkFFHxQ83quiqp6bcCYVQh9Gbml5ZXUtv17Y2Nza3jF391oyTgWhTRLzWHRcLClnEW0qpjjtJILi0OW07Y4up377jgrJ4uhGjRPaD/EwYj4jWGnJMQ+Cgedk7NSa9IgXq955MKDOrWMWUQnNAFGpYtfsakUTZNtWGUFrYRXBAg3HfO95MUlDGinCsZRdCyWqn2GhGOF0UuilkiaYjPCQdjWNcEhlP5udP4HHWvGgHwtdkYIz9ftEhkMpx6GrO0OsAvnbm4p/ed1U+bV+xqIkVTQi80V+yqGK4TQL6DFBieJjTTARTN8KSYAFJkonVtAhfH0K/yets5JVKdnX5WL9YhFHHhyCI3ACLFAFdXAFGqAJCMjAA3gCz8a98Wi8GK/z1pyxmNkHP2C8fQICDpWK</latexit>hdi 1·hej……BIBLIOGRAPHICAL AND HISTORICAL NOTES

211

– Sequence classiﬁcation, where an entire text is assigned to a category, as

in spam detection, sentiment analysis or topic classiﬁcation.

– Encoder-decoder architectures, where an input is mapped to an output

of different length and alignment.

Bibliographical and Historical Notes

Inﬂuential investigations of RNNs were conducted in the context of the Parallel Dis-
tributed Processing (PDP) group at UC San Diego in the 1980’s. Much of this work
was directed at human cognitive modeling rather than practical NLP applications
(Rumelhart and McClelland 1986c, McClelland and Rumelhart 1986). Models using
recurrence at the hidden layer in a feedforward network (Elman networks) were in-
troduced by Elman (1990). Similar architectures were investigated by Jordan (1986)
with a recurrence from the output layer, and Mathis and Mozer (1995) with the
addition of a recurrent context layer prior to the hidden layer. The possibility of
unrolling a recurrent network into an equivalent feedforward network is discussed
in (Rumelhart and McClelland, 1986c).

In parallel with work in cognitive modeling, RNNs were investigated extensively
in the continuous domain in the signal processing and speech communities (Giles
et al. 1994, Robinson et al. 1996). Schuster and Paliwal (1997) introduced bidirec-
tional RNNs and described results on the TIMIT phoneme transcription task.

While theoretically interesting, the difﬁculty with training RNNs and manag-
ing context over long sequences impeded progress on practical applications. This
situation changed with the introduction of LSTMs in Hochreiter and Schmidhuber
(1997) and Gers et al. (2000). Impressive performance gains were demonstrated
on tasks at the boundary of signal processing and language processing including
phoneme recognition (Graves and Schmidhuber, 2005), handwriting recognition
(Graves et al., 2007) and most signiﬁcantly speech recognition (Graves et al., 2013).
Interest in applying neural networks to practical NLP problems surged with the
work of Collobert and Weston (2008) and Collobert et al. (2011). These efforts made
use of learned word embeddings, convolutional networks, and end-to-end training.
They demonstrated near state-of-the-art performance on a number of standard shared
tasks including part-of-speech tagging, chunking, named entity recognition and se-
mantic role labeling without the use of hand-engineered features.

Approaches that married LSTMs with pretrained collections of word-embeddings
based on word2vec (Mikolov et al., 2013a) and GloVe (Pennington et al., 2014)
quickly came to dominate many common tasks: part-of-speech tagging (Ling et al.,
2015), syntactic chunking (Søgaard and Goldberg, 2016), named entity recognition
(Chiu and Nichols, 2016; Ma and Hovy, 2016), opinion mining (Irsoy and Cardie,
2014), semantic role labeling (Zhou and Xu, 2015a) and AMR parsing (Foland and
Martin, 2016). As with the earlier surge of progress involving statistical machine
learning, these advances were made possible by the availability of training data pro-
vided by CONLL, SemEval, and other shared tasks, as well as shared resources such
as Ontonotes (Pradhan et al., 2007b), and PropBank (Palmer et al., 2005).

The modern neural encoder-decoder approach was pioneered by Kalchbrenner
and Blunsom (2013), who used a CNN encoder and an RNN decoder. Cho et al.
(2014) (who coined the name “encoder-decoder”) and Sutskever et al. (2014) then
showed how to use extended RNNs for both encoder and decoder. The idea that a

212 CHAPTER 9

• RNNS AND LSTMS

generative decoder should take as input a soft weighting of the inputs, the central
idea of attention, was ﬁrst developed by Graves (2013) in the context of handwriting
recognition. Bahdanau et al. (2015) extended the idea, named it “attention” and
applied it to MT.

CHAPTER

10 Transformers

Large Language Models

and

“How much do we know at any time? Much more, or so I believe, than we
know we know.”

Agatha Christie, The Moving Finger

Fluent speakers of a language bring an enormous amount of knowledge to bear dur-
ing comprehension and production. This knowledge is embodied in many forms,
perhaps most obviously in the vocabulary, the rich representations we have of words
and their meanings and usage. This makes the vocabulary a useful lens to explore
the acquisition of knowledge from text, by both people and machines.

Estimates of the size of adult vocabularies vary widely both within and across
languages. For example, estimates of the vocabulary size of young adult speakers of
American English range from 30,000 to 100,000 depending on the resources used
to make the estimate and the deﬁnition of what it means to know a word. What
is agreed upon is that the vast majority of words that mature speakers use in their
day-to-day interactions are acquired early in life through spoken interactions with
care givers and peers, usually well before the start of formal schooling. This active
vocabulary is extremely limited compared to the size of the adult vocabulary (usually
on the order of 2000 words for young speakers) and is quite stable, with very few
additional words learned via casual conversation beyond this early stage. Obviously,
this leaves a very large number of words to be acquired by other means.

A simple consequence of these facts is that children have to learn about 7 to 10
words a day, every single day, to arrive at observed vocabulary levels by the time
they are 20 years of age. And indeed empirical estimates of vocabulary growth in
late elementary through high school are consistent with this rate. How do children
achieve this rate of vocabulary growth? Most of this growth is not happening through
direct vocabulary instruction in school, which is not deployed at the rate that would
be required to result in sufﬁcient vocabulary growth.

The most likely explanation is that the bulk of this knowledge acquisition hap-
pens as a by-product of reading, as part of the rich processing and reasoning that we
perform when we read. Research into the average amount of time children spend
reading, and the lexical diversity of the texts they read, indicate that it is possible
to achieve the desired rate. But the mechanism behind this rate of learning must
be remarkable indeed, since at some points during learning the rate of vocabulary
growth exceeds the rate at which new words are appearing to the learner!

Many of these facts have motivated approaches to word learning based on the
distributional hypothesis, introduced in Chapter 6. This is the idea that something
about what we’re loosely calling word meanings can be learned even without any
grounding in the real world, solely based on the content of the texts we encounter
over our lives. This knowledge is based on the complex association of words with
the words they co-occur with (and with the words that those words occur with).

The crucial insight of the distributional hypothesis is that the knowledge that we
acquire through this process can be brought to bear long after its initial acquisition.

214 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

pretraining

transformer

Of course, adding grounding from vision or from real-world interaction can help
build even more powerful models, but even text alone is remarkably useful.

In this chapter we formalize this idea of pretraining—learning knowledge about
language and the world from vast amounts of text—and call the resulting pretrained
language models large language models. Large language models exhibit remark-
able performance on all sorts of natural language tasks because of the knowledge
they learn in pretraining, and they will play a role throughout the rest of this book.
They have been especially transformative for tasks where we need to produce text,
like summarization, machine translation, question answering, or chatbots.

The standard architecture for building large language models is the transformer.
We thus begin this chapter by introducing this architecture in detail. The transformer
makes use of a novel mechanism called self-attention, which developed out of the
idea of attention that was introduced for RNNs in Chapter 9. Self-attention can
be thought of a way to build contextual representations of a word’s meaning that
integrate information from surrounding words, helping the model learn how words
relate to each other over large spans of text.

We’ll then see how to apply the transformer to language modeling, in a setting of-
ten called causal or autoregressive language models, in which we iteratively predict
words left-to-right from earlier words. These language models, like the feedforward
and RNN language models we have already seen, are thus self-trained: given a large
corpus of text, we iteratively teach the model to guess the next word in the text from
the prior words. In addition to training, we’ll introduce algorithms for generating
texts, including important methods like greedy decoding, beam search, and sam-
pling. And we’ll talk about the components of popular large language models like
the GPT family.

Finally, we’ll see the great power of language models: almost any NLP task
can be modeled as word prediction, if we think about it in the right way. We’ll
work through an example of using large language models to solve one NLP task
of summarization (generating a short text that summarizes some larger document).
The use of a large language model to generate text is one of the areas in which the
impact of the last decade of neural algorithms for NLP has been the largest. Indeed,
text generation, along with image generation and code generation, constitute a new
area of AI that is often called generative AI.

We’ll save three more areas of large language models for the next three chapters;
Chapter 11 will introduce the bidirectional transformer encoder and the method of
masked language modeling, used for the popular BERT family of models. Chap-
ter 12 will introduce the most powerful way to interact with large language models:
prompting them to perform other NLP tasks by simply giving directions or instruc-
tions in natural language to a transformer that is pretrained on language modeling.
And Chapter 13 will introduce the use of the encoder-decoder architecture for trans-
formers in the context of machine translation.

10.1 The Transformer: A Self-Attention Network

transformer

In this section we introduce the architecture of the transformer, the algorithm that
underlies most modern NLP systems. When used for causal language modeling, the
input to a transformer is a sequence of words, and the output is a prediction for what
word comes next, as well as a sequence of contextual embedding that represents
the contextual meaning of each of the input words. Like the LSTMs of Chapter 9,

self-attention

10.1

• THE TRANSFORMER: A SELF-ATTENTION NETWORK

215

transformers are a neural architecture that can handle distant information. But unlike
LSTMs, transformers are not based on recurrent connections (which can be hard to
parallelize), which means that transformers can be more efﬁcient to implement at
scale.

Transformers are made up of stacks of transformer blocks, each of which is a
multilayer network that maps sequences of input vectors (x1, ..., xn) to sequences of
output vectors (z1, ..., zn) of the same length. These blocks are made by combin-
ing simple linear layers, feedforward networks, and self-attention layers, the key
innovation of transformers. Self-attention allows a network to directly extract and
use information from arbitrarily large contexts. We’ll start by describing how self-
attention works and then return to how it ﬁts into larger transformer blocks. Finally,
we’ll describe how to use the transformer block together with some input and output
mechanisms as a language model, to predict upcoming words from prior words in
the context.

10.1.1 Transformers: the intuition

The intuition of a transformer is that across a series of layers, we build up richer and
richer contextualized representations of the meanings of input words or tokens (we
will refer to the input as a sequence of words for convenience, although technically
the input is ﬁrst tokenized by an algorithm like BPE, so it is a series of tokens rather
than words). At each layer of a transformer, to compute the representation of a
word i we combine information from the representation of i at the previous layer
with information from the representations of the neighboring words. The goal is to
produce a contextualized representation for each word at each position. We can think
of these representations as a contextualized version of the static vectors we saw in
Chapter 6, which each represented the meaning of a word type. By contrast, our goal
in transformers is to produce a contextualized version, something that represents
what this word means in the particular context in which it occurs.

We thus need a mechanism that tells us how to weigh and combine the represen-
tations of the different words from the context at the prior level in order to compute
our representation at this layer. This mechanism must be able to look broadly in the
context, since words have rich linguistic relationships with words that can be many
sentences away. Even within the sentence, words have important linguistic relation-
ships with contextual words. Consider these examples, each exhibiting linguistic
relationships that we’ll discuss in more depth in later chapters:

(10.1) The keys to the cabinet are on the table.
(10.2) The chicken crossed the road because it wanted to get to the other side.
(10.3) I walked along the pond, and noticed that one of the trees along the bank

had fallen into the water after the storm.

In (10.1), the phrase The keys is the subject of the sentence, and in English and
many languages, must agree in grammatical number with the verb are; in this case
both are plural. In English we can’t use a singular verb like is with a plural sub-
ject like keys; we’ll discuss agreement more in Chapter 17. In (10.2), the pronoun
it corefers to the chicken; it’s the chicken that wants to get to the other side. We’ll
discuss coreference more in Chapter 26. In (10.3), the way we know that bank refers
to the side of a pond or river and not a ﬁnancial institution is from the context, in-
cluding words like pond and water. We’ll discuss word senses more in Chapter 23.
These helpful contextual words can be quite far way in the sentence or paragraph,

216 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

so we need a mechanism that can look broadly in the context to help compute rep-
resentations for words.

Self-attention is just such a mechanism: it allows us to look broadly in the con-
text and tells us how to integrate the representation from words in that context from
layer k

1 to build the representation for words in layer k.

−

Figure 10.1 The self-attention weight distribution α that is part of the computation of the
representation for the word it at layer 6. In computing the representation for it, we attend
differently to the various words at layer 5, with darker shades indicating higher self-attention
values. Note that the transformer is attending highly to animal, a sensible result, since in this
example it corefers with the animal, and so we’d like the representation for it to draw on the
representation for animal. Figure simpliﬁed from (Uszkoreit, 2017).

Fig. 10.1 shows an schematic example simpliﬁed from a real transformer (Uszko-
reit, 2017). Here we want to compute a contextual representation for the word it, at
layer 6 of the transformer, and we’d like that representation to draw on the represen-
tations of all the prior words, from layer 5. The ﬁgure uses color to represent the
attention distribution over the contextual words: the word animal has a high atten-
tion weight, meaning that as we are computing the representation for it, we will draw
most heavily on the representation for animal. This will be useful for the model to
build a representation that has the correct meaning for it, which indeed is corefer-
ent here with the word animal. (We say that a pronoun like it is coreferent with a
noun like animal if they both refer to the same thing; we’ll return to coreference in
Chapter 26.)

10.1.2 Causal or backward-looking self-attention

The concept of context can be used in two ways in self-attention.
In causal, or
backward looking self-attention, the context is any of the prior words. In general
bidirectional self-attention, the context can include future words.
In this chapter
we focus on causal, backward looking self-attention; we’ll introduce bidirectional
self-attention in Chapter 11.

Fig. 10.2 thus illustrates the ﬂow of information in a single causal, or backward
looking, self-attention layer. As with the overall transformer, a self-attention layer
maps input sequences (x1, ..., xn) to output sequences of the same length (a1, ..., an).
When processing each item in the input, the model has access to all of the inputs
up to and including the one under consideration, but no access to information about
inputs beyond the current one. In addition, the computation performed for each item
is independent of all the other computations. The ﬁrst point ensures that we can use
this approach to create language models and use them for autoregressive generation,
and the second point means that we can easily parallelize both forward inference
and training of such models.

Theanimaldidn’tcrossthestreetbecauseitwastootiredTheanimaldidn’tcrossthestreetbecauseitwastootiredLayer 6Layer 5self-attention distribution10.1

• THE TRANSFORMER: A SELF-ATTENTION NETWORK

217

Information ﬂow in a causal (or masked) self-attention model. In processing
Figure 10.2
each element of the sequence, the model attends to all the inputs up to, and including, the
current one. Unlike RNNs, the computations at each time step are independent of all the
other steps and therefore can be performed in parallel.

10.1.3 Self-attention more formally

We’ve given the intuition of self-attention (as a way to compute representations of a
word at a given layer by integrating information from words at the previous layer)
and we’ve deﬁned context as all the prior words in the input. Let’s now introduce
the self-attention computation itself.

The core intuition of attention is the idea of comparing an item of interest to a
collection of other items in a way that reveals their relevance in the current context.
In the case of self-attention for language, the set of comparisons are to other words
(or tokens) within a given sequence. The result of these comparisons is then used to
compute an output sequence for the current input sequence. For example, returning
to Fig. 10.2, the computation of a3 is based on a set of comparisons between the
input x3 and its preceding elements x1 and x2, and to x3 itself.

How shall we compare words to other words? Since our representations for
words are vectors, we’ll make use of our old friend the dot product that we used
for computing word similarity in Chapter 6, and also played a role in attention in
Chapter 9. Let’s refer to the result of this comparison between words i and j as a
score (we’ll be updating this equation to add attention to the computation of this
score):

Verson 1:

score(xi, x j) = xi ·

x j

(10.4)

The result of a dot product is a scalar value ranging from

∞ to ∞, the larger
the value the more similar the vectors that are being compared. Continuing with our
example, the ﬁrst step in computing y3 would be to compute three scores: x3 ·
x1,
x3. Then to make effective use of these scores, we’ll normalize them
x3 ·
with a softmax to create a vector of weights, αi j, that indicates the proportional
relevance of each input to the input element i that is the current focus of attention.

x2 and x3 ·

−

αi j = softmax(score(xi, x j))
exp(score(xi, x j))
i
k=1 exp(score(xi, xk)) ∀

=

∀

j

≤
j

i

i

≤

(10.5)

(10.6)

(cid:80)

Of course, the softmax weight will likely be highest for the current focus element
i, since vecxi is very similar to itself, resulting in a high dot product. But other
context words may also be similar to i, and the softmax will also assign some weight
to those words.

Given the proportional scores in α, we generate an output value ai by summing

Self-AttentionLayerx1a1x2a2a3a4a5x3x4x5218 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

the inputs seen so far, each weighted by its α value.

ai =

αi jx j

(10.7)

i
(cid:88)j
≤
The steps embodied in Equations 10.4 through 10.7 represent the core of an
attention-based approach: a set of comparisons to relevant items in some context,
a normalization of those scores to provide a probability distribution, followed by a
weighted sum using this distribution. The output a is the result of this straightfor-
ward computation over the inputs.

This kind of simple attention can be useful, and indeed we saw in Chapter 9
how to use this simple idea of attention for LSTM-based encoder-decoder models
for machine translation. But transformers allow us to create a more sophisticated
way of representing how words can contribute to the representation of longer inputs.
Consider the three different roles that each input embedding plays during the course
of the attention process.

query

key

value

• As the current focus of attention when being compared to all of the other

preceding inputs. We’ll refer to this role as a query.

• In its role as a preceding input being compared to the current focus of atten-

tion. We’ll refer to this role as a key.

• And ﬁnally, as a value used to compute the output for the current focus of

attention.

To capture these three different roles, transformers introduce weight matrices
WQ, WK, and WV. These weights will be used to project each input vector xi into
a representation of its role as a key, query, or value.

qi = xiWQ; ki = xiWK; vi = xiWV

(10.8)

×

The inputs x and outputs y of transformers, as well as the intermediate vectors after
the various layers like the attention output vector a, all have the same dimensionality
d. We’ll have a dimension dk for the key and query vectors, and a separate
1
dimension dv for the value vectors. In the original transformer work (Vaswani et al.,
2017), d was 512, dk and dv were both 64. The shapes of the transform matrices are
then WQ

∈
Given these projections, the score between a current focus of attention, xi, and
an element in the preceding context, x j, consists of a dot product between its query
vector qi and the preceding element’s key vectors k j. This dot product has the right
dk. Let’s update
shape since both the query and the key are of dimensionality 1
our previous comparison calculation to reﬂect this, replacing Eq. 10.4 with Eq. 10.9:

dk , and WV
×

dk , WK
×

dv.
×

Rd

Rd

Rd

×

∈

∈

Verson 2:

score(xi, x j) = qi ·

k j

(10.9)

The ensuing softmax calculation resulting in αi, j remains the same, but the output
calculation for ai is now based on a weighted sum over the value vectors v.

ai =

αi jv j

(10.10)

i
(cid:88)j
≤
Again, the softmax weight αi j will likely be highest for the current focus element
i, and so the value for yi will be most inﬂuenced by vi. But the model will also pay
attention to other contextual words if they are similar to i, allowing their values to

10.1

• THE TRANSFORMER: A SELF-ATTENTION NETWORK

219

Figure 10.3 Calculating the value of a3, the third element of a sequence using causal (left-
to-right) self-attention.

also inﬂuence the ﬁnal value of v j. Context words that are not similar to i will have
their values downweighted and won’t contribute to the ﬁnal value.

There is one ﬁnal part of the self-attention model. The result of a dot product
can be an arbitrarily large (positive or negative) value. Exponentiating large values
can lead to numerical issues and to an effective loss of gradients during training. To
avoid this, we scale down the result of the dot product, by dividing it by a factor
related to the size of the embeddings. A typical approach is to divide by the square
root of the dimensionality of the query and key vectors (dk), leading us to update
our scoring function one more time, replacing Eq. 10.4 and Eq. 10.9 with Eq. 10.12.
Here’s a ﬁnal set of equations for computing self-attention for a single self-attention
output vector ai from a single input vector xi, illustrated in Fig. 10.3 for the case of
calculating the value of the third output a3 in a sequence.

qi = xiWQ; ki = xiWK; vi = xiWV

Final verson:

score(xi, x j) =

k j
qi ·
√dk

αi j = softmax(score(xi, x j))

ai =

αi jv j

i
(cid:88)j
≤

(10.11)

(10.12)

(10.13)

(10.14)

j

∀

≤

i

10.1.4 Parallelizing self-attention using a single matrix X

This description of the self-attention process has been from the perspective of com-
puting a single output at a single time step i. However, since each output, yi, is
computed independently, this entire process can be parallelized, taking advantage of

6. Sum the weighted value vectors4. Turn into weights via softmaxa31. Generate key, query, value vectors2. Compare x3’s query withthe keys for x1, x2, and x3Output of self-attentionWkWvWqx1kqvx3kqvx2kqv××WkWkWqWqWvWv5. Weigh each value vector÷dk3. Divide score by dk÷dk÷dk220 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

efﬁcient matrix multiplication routines by packing the input embeddings of the N
d. That is, each row of X
tokens of the input sequence into a single matrix X
×
is the embedding of one token of the input. Transformers for large language models
can have an input length N = 1024, 2048, or 4096 tokens, so X has between 1K and
4K rows, each of the dimensionality of the embedding d.

RN

∈

We then multiply X by the key, query, and value matrices (all of dimensionality
d, containing all the
RN
d) to produce matrices Q
d
×
key, query, and value vectors:

d, and V
×

d, K
×

RN

RN

×

∈

∈

∈

Q = XWQ; K = XWK; V = XWV

(10.15)

Given these matrices we can compute all the requisite query-key comparisons simul-
taneously by multiplying Q and K(cid:124)
in a single matrix multiplication (the product is
of shape N
N; Fig. 10.4 shows a visualization). Taking this one step further, we
can scale these scores, take the softmax, and then multiply the result by V resulting
d: a vector embedding representation for each token in the
in a matrix of shape N
input. We’ve reduced the entire self-attention step for an entire sequence of N tokens
to the following computation:

×

×

A = SelfAttention(Q, K, V) = softmax

QK(cid:124)
√dk (cid:19)

V

(cid:18)

(10.16)

10.1.5 Masking out the future

The self-attention computation as we’ve described it has a problem: the calculation
in QK(cid:124)
results in a score for each query value to every key value, including those that
follow the query. This is inappropriate in the setting of language modeling: guessing
the next word is pretty simple if you already know it! To ﬁx this, the elements in the
∞), thus eliminating
upper-triangular portion of the matrix are zeroed out (set to
any knowledge of words that follow in the sequence. Fig. 10.4 shows this masked
QK(cid:124)
matrix. (we’ll see in Chapter 11 how to make use of words in the future for
tasks that need it).

−

N QK(cid:124)
Figure 10.4 The N
portion of the comparisons matrix zeroed out (set to
zero).

matrix showing the qi ·
−

×

k j values, with the upper-triangle
∞, which the softmax will turn to

Fig. 10.4 also makes it clear that attention is quadratic in the length of the input,
since at each layer we need to compute dot products between each pair of tokens in
the input. This makes it expensive for the input to a transformer to consist of very
long documents (like entire novels). Nonetheless modern large language models
manage to use quite long contexts of up to 4096 tokens.

q1•k1q2•k1q2•k2q5•k1q5•k2q5•k3q5•k4q5•k5q4•k1q4•k2q4•k3q4•k4q3•k1q3•k2q3•k3NN−∞−∞−∞−∞−∞−∞−∞−∞−∞−∞10.2 Multihead Attention

10.2

• MULTIHEAD ATTENTION

221

Transformers actually compute a more complex kind of attention than the single
self-attention calculation we’ve seen so far. This is because the different words in a
sentence can relate to each other in many different ways simultaneously. For exam-
ple, distinct syntactic, semantic, and discourse relationships can hold between verbs
and their arguments in a sentence. It would be difﬁcult for a single self-attention
model to learn to capture all of the different kinds of parallel relations among its in-
puts. Transformers address this issue with multihead self-attention layers. These
are sets of self-attention layers, called heads, that reside in parallel layers at the same
depth in a model, each with its own set of parameters. By using these distinct sets of
parameters, each head can learn different aspects of the relationships among inputs
at the same level of abstraction.

multihead
self-attention
layers

To implement this notion, each head, i, in a self-attention layer is provided with
its own set of key, query and value matrices: WK
i . These are used
to project the inputs into separate key, value, and query embeddings separately for
each head, with the rest of the self-attention computation remaining unchanged.

i and WV

i , WQ

Rd

Rd

i ∈

i ∈

dk , WK
×

In multi-head attention, as with self-attention, the model dimension d is still used
for the input and output, the key and query embeddings have dimensionality dk, and
the value embeddings are of dimensionality dv (again, in the original transformer
paper dk = dv = 64, h = 8, and d = 512). Thus for each head i, we have weight
layers WQ
dk , and WV
Rd
dv , and these get multiplied by
×
×
i ∈
dv. The
dk , and V
dk , K
RN
the inputs packed into X to produce Q
×
×
×
∈
dv, and so the output of the multi-head
output of each of the h heads is of shape N
layer with h heads consists of h matrices of shape N
dv. To make use of these
matrices in further processing, they are concatenated to produce a single output with
d,
dimensionality N
×
that reshape it to the original output dimension for each token. Multiplying the
hdv matrix output by WO
d yields the self-attention output
concatenated N
d], suitable to be passed through residual connections and layer
A of shape [N
norm.

hdv. Finally, we use yet another linear projection WO

Rhdv×

Rhdv×

×
×

RN

RN

×

×

∈

∈

∈

∈

Q = XWQ
i

; K = XWK
i

; V = XWV
i
headi = SelfAttention(Q, K, V)
headh)WO

head2...

A = MultiHeadAttention(X) = (head1 ⊕

⊕

(10.17)

(10.18)

(10.19)

Fig. 10.5 illustrates this approach with 4 self-attention heads. In general in trans-

formers, the multihead layer is used instead of a self-attention layer.

10.3 Transformer Blocks

The self-attention calculation lies at the core of what’s called a transformer block,
which, in addition to the self-attention layer, includes three other kinds of layers: (1)
a feedforward layer, (2) residual connections, and (3) normalizing layers (colloqui-
ally called “layer norm”).

Fig. 10.6 illustrates a standard transformer block consisting of a single attention
layer followed by a position-wise feedforward layer with residual connections and
layer normalizations following each.

222 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

Figure 10.5 Multihead self-attention: Each of the multihead self-attention layers is provided with its own
set of key, query and value weight matrices. The outputs from each of the layers are concatenated and then
projected to d, thus producing an output of the same size as the input so the attention can be followed by layer
norm and feedforward and layers can be stacked.

Figure 10.6 A transformer block showing all the layers.

Feedforward layer The feedforward layer contains N position-wise networks, one
at each position. Each is a fully-connected 2-layer network, i.e., one hidden layer,
two weight matrices, as introduced in Chapter 7. The weights are the same for each
position, but the parameters are different from layer to layer. Unlike attention, the
feedforward networks are independent for each position and so can be computed in
parallel. It is common to make the dimensionality dff of the hidden layer of the
feedforward network be larger than the model dimensionality d. (For example in the
original transformer model, d = 512 and dff = 2048.)

Residual connections Residual connections are connections that pass informa-
tion from a lower layer to a higher layer without going through the intermediate

Multihead  Attention Layer with h=4 heads…x1x2x3xNConcatenateOutputs[N x hdv]WO  [hdv x d]head1 output val [N x dv]head3 output val [N x dv]head2 output val [N x dv]head4 output val [N x dv]WQ1, WK1, WV1 WQ3, WK3, WV3 WQ2, WK2, WV2 WQ4, WK4, WV4 Head 1Project fromhdv to dHead 2Head 3Head 4a1a2a3aN…[N x d][N x d]MultiHead Attentionz   z                                    zz   z                                    zTransformerBlockx1x2x3xn…ResidualconnectionResidualconnection++h1h2h3hn……FeedforwardLayer NormalizeLayer Normalizelayer norm

10.3

• TRANSFORMER BLOCKS

223

layer. Allowing information from the activation going forward and the gradient go-
ing backwards to skip a layer improves learning and gives higher level layers direct
access to information from lower layers (He et al., 2016). Residual connections in
transformers are implemented simply by adding a layer’s input vector to its out-
put vector before passing it forward. In the transformer block shown in Fig. 10.6,
residual connections are used with both the attention and feedforward sublayers.

Layer Norm These summed vectors are then normalized using layer normaliza-
tion (Ba et al., 2016). Layer normalization (usually called layer norm) is one of
many forms of normalization that can be used to improve training performance in
deep neural networks by keeping the values of a hidden layer in a range that facil-
itates gradient-based training. Layer norm is a variation of the standard score, or
z-score, from statistics applied to a single vector in a hidden layer. The input to
layer norm is a single vector, for a particular token position i, and the output is that
vector normalized. Thus layer norm takes as input a single vector of dimensionality
d and produces as output a single vector of dimensionality d. The ﬁrst step in layer
normalization is to calculate the mean, µ, and standard deviation, σ , over the ele-
ments of the vector to be normalized. Given a hidden layer with dimensionality dh,
these values are calculated as follows.

µ =

1
dh

σ =

(cid:118)
(cid:117)
(cid:117)
(cid:116)

dh

xi

(cid:88)i=1
dh
1
dh

(cid:88)i=1

µ)2

(xi −

(10.20)

(10.21)

Given these values, the vector components are normalized by subtracting the mean
from each and dividing by the standard deviation. The result of this computation is
a new vector with zero mean and a standard deviation of one.

−
σ
Finally, in the standard implementation of layer normalization, two learnable param-
eters, γ and β , representing gain and offset values, are introduced.

(10.22)

ˆx =

(x

µ)

LayerNorm = γ ˆx + β

(10.23)

Putting it all together The function computed by a transformer block can be ex-
pressed as:

O = LayerNorm(X + SelfAttention(X))
H = LayerNorm(O + FFN(O))

(10.24)

(10.25)

Or we can break it down with one equation for each component computation, using
T (of shape [N
d]) to stand for transformer and superscripts to demarcate each
computation inside the block:

×

T1 = SelfAttention(X)
T2 = X + T1
T3 = LayerNorm(T2)
T4 = FFN(T3)
T5 = T4 + T3
H = LayerNorm(T5)

(10.26)

(10.27)

(10.28)

(10.29)

(10.30)

(10.31)

224 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

Crucially, the input and output dimensions of transformer blocks are matched so
they can be stacked. Each token xi at the input to the block has dimensionality d,
and so the input X and output H are both of shape [N

d].

Transformers for large language models stack many of these blocks, from 12
layers (used for the T5 or GPT-3-small language models) to 96 layers (used for
GPT-3 large), to even more for more recent models. We’ll come back to this issues
of stacking in a bit.

×

10.4 The Residual Stream view of the Transformer Block

×

×

d].

The previous sections viewed the transformer block as applied to the entire N-token
input X of shape [N
d], producing an output also of shape [N
While packing everything this way is a computationally efﬁcient way to imple-
ment the transformer block, it’s not always the most perspicuous way to understand
what the transformer is doing. It’s often clearer to instead visualize what is hap-
pening to an individual token vector xi in the input as it is processed through each
transformer block. After all, most of the components of the transformer are de-
signed to take a single vector of dimensionality d, corresponding to a single token,
and produce an output vector also of dimensionality d. For example, the feedfor-
ward layer takes a single d-dimensional vector and produces a single d-dimensional
vector. Over the N tokens in a batch, we simply use the identical feedforward layer
weights (W1, W2, b1 and b2) for each token i. Similarly, the layer norm function takes
a single d-dimensional vector and produces a normalized d-dimensional version.

Figure 10.7 The residual stream for token xi, showing how the input to the transformer
block xi is passed up through residual connections, the output of the feedforward and multi-
head attention layers are added in, and processed by layer norm, to produce the output of
this block, hi, which is used as the input to the next layer transformer block. Note that of all
the components, only the MultiHeadAttention component reads information from the other
residual streams in the context.

We can therefore talk about the processing of an individual token through all

Layer Normxi+hi-1Layer Norm+MultiHeadAttentionFeedforwardxi-1xi+1hihi+1……residual stream

10.4

• THE RESIDUAL STREAM VIEW OF THE TRANSFORMER BLOCK

225

these layers as a stream of d-dimensional representations, called the residual stream
and visualized in Fig. 10.7. The input at the bottom of the stream is an embedding
for a token, which has dimensionality d. That initial embedding is passed up by the
residual connections and the outputs of feedforward and attention layers get added
into it. For each token i, at each block and layer we are passing up an embedding
d]. The residual layers are constantly copying information up from
of shape [1
earlier embeddings (hence the metaphor of ‘residual stream’), so we can think of the
other components as adding new views of this representation back into this constant
stream. Feedforward networks add in a different view of the earlier embedding.

×

Here are the equations for the transformer block, now viewed from this embed-

ding stream perspective.

, xN])

· · ·

t1
i = MultiHeadAttention(xi, [x1,
i = t1
t2
i + xi
i = LayerNorm(t2
t3
i )
i = FFN(t3
t4
t5
i + t3
i = t4
i
hi = LayerNorm(t5
i )

i ))

(10.32)

(10.33)

(10.34)

(10.35)

(10.36)

(10.37)

Notice that the only component that takes as input information from other tokens
(other residual streams) is multi-head attention, which (as we see from (10.32) looks
at all the neighboring tokens in the context. The output from attention, however,
is then added into to this token’s embedding stream. In fact, Elhage et al. (2021)
show that we can view attention heads as literally moving attention from the resid-
ual stream of a neighboring token into the current stream. The high-dimensional
embedding space at each position thus contains information about the current to-
ken and about neighboring tokens, albeit in different subspaces of the vector space.
Fig. 10.8 shows a visualization of this movement.

Figure 10.8 An attention head can move information from token A’s residual stream into
token B’s residual stream.

Equation (10.32) and following are just just the equation for a single transformer
block, but the residual stream metaphor goes through all the transformer layers,
from the ﬁrst transformer blocks to the 12th, in a 12-layer transformer. At the earlier
transformer blocks, the residual stream is representing the current token. At the
highest transformer blocks, the residual stream is usual representing the following
token, since at the very end it’s being trained to predict the next token.

Pre-norm vs. post-norm architecture There is an alternative form of the trans-
former architecture that is commonly used because it performs better in many cases.
In this prenorm transformer architecture, the layer norm happens in a slightly dif-

prenorm
transformer

Token Aresidual streamToken Bresidual stream226 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

ferent place: before the attention layer and before the feedforward layer, rather than
afterwards. Fig. 10.9 shows this architecture, with the equations below:

t1
i = LayerNorm(xi)
t2
i = MultiHeadAttention(t1
i ,
i = t2
t3
i + xi
t4
i = LayerNorm(t3
i )
i = FFN(t4
t5
i + t3
hi = t5
i

i ))

t1
1,

· · ·

, x1
N

)

(cid:2)

(cid:3)

(10.38)

(10.39)

(10.40)

(10.41)

(10.42)

(10.43)

Figure 10.9 The architecture of the prenorm transformer block. Here the nature of the
residual stream, passing up information from the input, is even clearer.

The prenorm transformer has one extra requirement: at the very end of the last
(highest) transformer block, there is a single extra layer norm that is run on the last hi
of each token stream (just below the language model head layer that we will deﬁne
below).

10.5 The input: embeddings for token and position

embedding

Let’s talk about where the input X comes from. Given a sequence of N tokens (N is
the context length in tokens), the matrix X of shape [N
d] has an embedding for
each word in the context. The transformer does this by separately computing two
embeddings: an input token embedding, and an input positional embedding.

×

A token embedding, introduced in Chapter 7 and Chapter 9, is a vector of di-
mension d that will be our initial representation for the input token. (As we pass
vectors up through the transformer layers in the residual stream, this embedding
representation will change and grow, incorporating context and playing a different

Layer Normxi+hi-1Layer NormMultiHeadAttentionFeedforwardxi-1xi+1hihi+1+……10.5

• THE INPUT: EMBEDDINGS FOR TOKEN AND POSITION

227

|

role depending on the kind of language model we are building.) The set of initial
embeddings are stored in the embedding matrix E, which has a row for each of the
tokens in the vocabulary. Thus each each word is a row vector of d dimensions,
V
|
and E has shape [
V
|

Given an input token string like Thanks for all the we ﬁrst convert the tokens
into vocabulary indices (these were created when we ﬁrst tokenized the input using
BPE or SentencePiece). So the representation of thanks for all the might be w =
[5, 4000, 10532, 2224]. Next we use indexing to select the corresponding rows from
E, (row 5, row 4000, row 10532, row 2224).

| ×

d].

Another way to think about selecting token embeddings from the embedding
], i.e., with one
matrix is to represent tokens as one-hot vectors of shape [1
|
dimension for each word in the vocabulary. Recall that in a one-hot vector all the
elements are 0 except one, the element whose dimension is the word’s index in the
vocabulary, which has value 1. So if the word “thanks” has index 5 in the vocabulary,
x5 = 1, and xi = 0

= 5, as shown here:

× |

V

i
∀
[0 0 0 0 1 0 0 ... 0 0 0 0]
... |V|

1 2 3 4 5 6 7 ...

one-hot vector

Multiplying by a one-hot vector that has only one non-zero element xi = 1 simply
selects out the relevant row vector for word i, resulting in the embedding for word i,
as depicted in Fig. 10.10.

Figure 10.10 Selecting the embedding vector for word V5 by multiplying the embedding
matrix E with a one-hot vector with a 1 in index 5.

We can extend this idea to represent the entire token sequence as a matrix of one-
hot vectors, one for each of the N positions in the transformer’s context window, as
shown in Fig. 10.11.

Figure 10.11 Selecting the embedding matrix for the input sequence of token ids W by
multiplying a one-hot matrix corresponding to W by the embedding matrix E.

positional
embeddings

absolute
position

These token embeddings are not position-dependent. To represent the position
of each token in the sequence, we combine these token embeddings with positional
embeddings speciﬁc to each position in an input sequence.

Where do we get these positional embeddings? The simplest method, called
absolute position, is to start with randomly initialized embeddings corresponding
to each possible input position up to some maximum length. For example, just as
we have an embedding for the word ﬁsh, we’ll have an embedding for the position 3.

E|V|d1|V|d=✕550 0 0 0 1 0 0 … 0 0 0 0 1E|V|ddN=✕|V|N0 0 0 0 0 0 0 … 0 0 1 0 0 0 0 0 1 0 0 … 0 0 0 0 1 0 0 0 0 0 0 … 0 0 0 0 0 0 0 0 1 0 0 … 0 0 0 0 …(cid:54)
228 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

As with word embeddings, these positional embeddings are learned along with other
parameters during training. We can store them in a matrix Epos of shape [1timesN].
To produce an input embedding that captures positional information, we just add
the word embedding for each input to its corresponding positional embedding. The
individual token and position embeddings are both of size [1
d], so their sum is also
d], This new embedding serves as the input for further processing. Fig. 10.12
[1
shows the idea.

×

×

Figure 10.12 A simple way to model position: add an embedding of the absolute position
to the token embedding to produce a new embedding of the same dimenionality.

The ﬁnal representation of the input, the matrix X, is an [N

d] matrix in which
each row i is the representation of the ith token in the input, computed by adding
E[id(i)]—the embedding of the id of the token that occurred at position i—, to P[i],
the positional embedding of position i.

×

A potential problem with the simple absolute position embedding approach is
that there will be plenty of training examples for the initial positions in our inputs
and correspondingly fewer at the outer length limits. These latter embeddings may
be poorly trained and may not generalize well during testing. An alternative ap-
proach to absolute positional embeddings is to choose a static function that maps
integer inputs to real-valued vectors in a way that captures the inherent relation-
ships among the positions. That is, it captures the fact that position 4 in an input is
more closely related to position 5 than it is to position 17. A combination of sine
and cosine functions with differing frequencies was used in the original transformer
work. Even more complex positional embedding methods exist, such as ones that
represent relative position instead of absolute position, often implemented in the
attention mechanism at each layer rather than being added once at the initial input.

10.6 The Language Modeling Head

language
modeling head
head

The last component of the transformer we must introduce is the language modeling
head. When we apply pretrained transformer models to various tasks, we use the
term head to mean the additional neural circuitry we add on top of the basic trans-
former architecture to enable that task. The language modeling head is the circuitry
we need to do language modeling.

Recall that language models, from the simple n-gram models of Chapter 3 through
the feedforward and RNN language models of Chapter 7 and Chapter 9, are word
predictors. Given a context of words, they assign a probability to each possible next

X = CompositeEmbeddings(word + position)Transformer BlockJanet1will2back3Janetwillbackthebillthe4bill5+++++PositionEmbeddingsWordEmbeddings10.6

• THE LANGUAGE MODELING HEAD

229

word. For example, if the preceding context is “Thanks for all the” and we want to
know how likely the next word is “ﬁsh” we would compute:

Thanks for all the)
P(ﬁsh
|

−

1 prior words. The context is thus of size n

Language models give us the ability to assign such a conditional probability to every
possible next word, giving us a distribution over the entire vocabulary. The n-gram
language models of Chapter 3 compute the probability of a word given counts of
its occurrence with the n
1. For
transformer language models, the context is the size of the transformer’s context
window, which can be quite large: up to 2048 or even 4096 tokens for large models.
The job of the language modeling head is to take the the output of the ﬁnal
transformer layer from the last token N and use it to predict the upcoming word at
position N + 1. Fig. 10.13 shows how to accomplish this task, taking the output of
d])
the last token at the last layer (the d-dimensional output embedding of shape [1
and producing a probability distribution over words (from which we will choose one
to generate).

×

−

Figure 10.13 The language modeling head: the circuit at the top of a transformer that maps from the output
embedding for token N from the last transformer layer (hL
N ) to a probability distribution over words in the
vocabulary V .

|
× |

.
|

The ﬁrst module in Fig. 10.13 is a linear layer, whose job is to project from the
N, which represents the output token embedding at position N from the ﬁnal
d]) to the logit vector, or score vector, that will have a
possible words in the vocabulary V . The logit vector
V

output hL
block L, (hence of shape [1
×
V
single score for each of the
|
u is thus of dimensionality 1

This linear layer can be learned, but more commonly we tie this matrix to (the
transpose of) the embedding matrix E. Recall that in weight tying, we use the
same weights for two different matrices in the model. Thus at the input stage of the
d]) is used to map from a one-hot
transformer the embedding matrix (of shape [
V
|
vector over the vocabulary (of shape [1
d]).
]) to an embedding (of shape [1
V
|
× |
And then in the language model head, ET, the transpose of the embedding matrix (of
d]) to a vector
]) is used to map back from an embedding (shape [1
shape [d
|
]). In the learning process, E will be optimized to
over the vocabulary (shape [1
|
be good at doing both of these mappings. We therefore sometimes call the transpose
ET the unembedding layer because it is performing this reverse mapping.

× |

| ×

×|

×

×

V

V

logit

weight tying

unembedding

Layer LTransformerBlockSoftmax over vocabulary VUnembedding layer…1 x |V|Logits Word probabilities1 x |V|hL1w1w2wNhL2hLNd x |V|1 x d   Unembedding    layer = ETy1y2y|V|…u1u2u|V|…Language Model Headtakes hLN and outputs adistribution over vocabulary V230 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

A softmax layer turns the logits u into the probabilities y over the vocabulary.

u = hL
N ET
y = softmax(u)

(10.44)

(10.45)

We can use these probabilities to do things like help assign a probability to a
given text. But the most important usage to generate text, which we do by sampling
a word from these probabilities y. We might sample the highest probability word
(‘greedy’ decoding), or use another of the sampling methods we’ll introduce in Sec-
tion 10.8. In either case, whatever entry yk we choose from the probability vector y,
we generate the word that has that index k.

Figure 10.14 A ﬁnal transformer decoder-only model, stacking post-norm transformer
blocks and mapping from a set of input tokens w1 to wN to a predicted next word wN+1.

Fig. 10.14 shows the total stacked architecture. Note that the input to the ﬁrst
transformer block is represented as X, which is the N indexed word embeddings +
position embeddings, E[w] + P), but the input to all the other layers is the output H
from the layer just below the current one).

Now that we see all these transformer layers spread out on the page, we can point
out another useful feature of the unembedding layer: as a tool for interpretability of

X x1 x2      …      xNMultihead Self-AttentionLayer NormFeedforwardLayer NormLayer 1h1 h2      …     hNMultihead Self-AttentionLayer NormFeedforwardLayer NormLayer 2h1 h2      …     hNMultihead Self-AttentionLayer NormFeedforwardLayer NormLayer  Lh1 h2      …     hN…Sample token to generateat position N+1wN+1w1 w2      …      wNInput tokensP1       P2     …    PN        Add token + position embeddings+Language ModelHeadToken probabilitiesy1y2y|V|…E[w1] E[w2]  … E[wN]logit lens

decoder-only
model

10.7

• LARGE LANGUAGE MODELS WITH TRANSFORMERS

231

the internals of the transformer that we call the logit lens (Nostalgebraist, 2020).
We can take a vector from any layer of the transformer and, pretending that it is
the preﬁnal embedding, simply multiply it by the unembedding layer to get logits,
and compute a softmax to see the distribution over words that that vector might
be representing. This can be a useful window into the internal representations of
the model. Since the network wasn’t trained to make the internal representations
function in this way, the logit lens doesn’t always work perfectly, but this can still
be a useful trick.

Anyhow, the Fig. 10.14 thus sketches out the entire process of taking a series of

words w1 . . . wN and using the model to predict the next word wN+1.

A terminological note before we conclude: You will sometimes see a trans-
former used for this kind of unidirectional causal language model called a decoder-
only model. This is because this model constitutes roughly half of the encoder-
decoder model for transformers that we’ll see how to apply to machine translation
(Confusingly, the original introduction of the transformer had an
in Chapter 13.
encoder-decoder architecture, and it was only later that the standard paradigm for
causal language model was deﬁned by using only the decoder part of this original
architecture).

In the next sections we’ll introduce what kind of tasks large language models can
be used for, discuss various generation methods for sampling possible next words,
and show how to train a transformer-based large language model. In the follow-
ing chapters we’ll expand on these ideas to introduce ﬁne-tuning, prompting, and
encoder-decoder architectures for transformer-based large language models.

10.7 Large Language Models with Transformers

We’ve now seen most of the components of a transformer for language modeling
(what remains is sampling and training, which we’ll get to in the following sec-
tions). Before we do that, we use this section to talk about why and how we apply
transformer-based large language models to NLP tasks.

All of these tasks are cases of conditional generation, the task of generating text
conditioned on an input piece of text, a prompt. The fact that transformers have such
long contexts (1024 or even 4096 tokens) makes them very powerful for conditional
generation, because they can look back so far into the prompting text.

Consider the simple task of text completion, illustrated in Fig. 10.15. Here a
language model is given a text preﬁx and is asked to generate a possible completion.
Note that as the generation process proceeds, the model has direct access to the
priming context as well as to all of its own subsequently generated outputs (at least
as much as ﬁts in the large context window).. This ability to incorporate the entirety
of the earlier context and generated outputs at each time step is the key to the power
of large language models built from transformers.

So why should we care about predicting upcoming words? The insight of large
language modeling is that many practical NLP tasks can be cast as word predic-
tion, and that a powerful-enough language model can solve them with a high degree
of accuracy. For example, we can cast sentiment analysis as language modeling by
giving a language model a context like:

The sentiment of the sentence “I like Jackie Chan” is:

and comparing the following conditional probability of the words “positive” and the

232 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

Figure 10.15 Autoregressive text completion with transformer-based large language models.

word “negative” to see which is higher:

The sentiment of the sentence “I like Jackie Chan” is:)
P(positive
|
The sentiment of the sentence “I like Jackie Chan” is:)
P(negative
|

If the word “positive” is more probable, we say the sentiment of the sentence is
positive, otherwise we say the sentiment is negative.

We can also cast more complex tasks as word prediction. Consider the task
of answering simple questions, a task we return to in Chapter 14. In this task the
system is given some question and must give a textual answer. We can cast the task
of question answering as word prediction by giving a language model a question and
a token like A: suggesting that an answer should come next:

Q: Who wrote the book ‘‘The Origin of Species"?

A:

If we ask a language model to compute

Q: Who wrote the book “The Origin of Species”? A:)
P(w
|

and look at which words w have high probabilities, we might expect to see that
Charles is very likely, and then if we choose Charles and continue and ask

Q: Who wrote the book “The Origin of Species”? A: Charles)
P(w
|

we might now see that Darwin is the most probable word, and select it.

Conditional generation can even be used to accomplish tasks that must generate
longer responses. Consider the task of text summarization, which is to take a long
text, such as a full-length article, and produce an effective shorter summary of it.
We can cast summarization as language modeling by giving a large language model
a text, and follow the text by a token like tl;dr; this token is short for something
like ‘too long; don’t read’ and in recent years people often use this token, especially
in informal work emails, when they are going to give a short summary. We can
then do conditional generation: give the language model this preﬁx, and then ask

text
summarization

Preﬁx TextCompletion TextInputEmbeddingsTransformerBlocksSample from SoftmaxSolongallandthanksforallthethe…linear layer10.7

• LARGE LANGUAGE MODELS WITH TRANSFORMERS

233

it to generate the following words, one by one, and take the entire response as a
summary. Fig. 10.16 shows an example of a text and a human-produced summary
from a widely-used summarization corpus consisting of CNN and Daily Mirror news
articles.

Original Article
The only thing crazier than a guy in snowbound Massachusetts boxing up the powdery white stuff
and offering it for sale online? People are actually buying it. For $89, self-styled entrepreneur
Kyle Waring will ship you 6 pounds of Boston-area snow in an insulated Styrofoam box – enough
for 10 to 15 snowballs, he says.
But not if you live in New England or surrounding states. “We will not ship snow to any states
in the northeast!” says Waring’s website, ShipSnowYo.com. “We’re in the business of expunging
snow!”
His website and social media accounts claim to have ﬁlled more than 133 orders for snow – more
than 30 on Tuesday alone, his busiest day yet. With more than 45 total inches, Boston has set a
record this winter for the snowiest month in its history. Most residents see the huge piles of snow
choking their yards and sidewalks as a nuisance, but Waring saw an opportunity.
According to Boston.com, it all started a few weeks ago, when Waring and his wife were shov-
eling deep snow from their yard in Manchester-by-the-Sea, a coastal suburb north of Boston.
He joked about shipping the stuff to friends and family in warmer states, and an idea was born.
His business slogan: “Our nightmare is your dream!” At ﬁrst, ShipSnowYo sold snow packed
into empty 16.9-ounce water bottles for $19.99, but the snow usually melted before it reached its
destination...

Summary
Kyle Waring will ship you 6 pounds of Boston-area snow in an insulated Styrofoam box – enough
for 10 to 15 snowballs, he says. But not if you live in New England or surrounding states.

Figure 10.16 Examples of articles and summaries from the CNN/Daily Mail corpus (Hermann et al., 2015b),
(Nallapati et al., 2016).

greedy
decoding

If we take this full article and append the token tl;dr, we can use this as
the context to prime the generation process to produce a summary as illustrated
in Fig. 10.17. Again, what makes transformers able to succeed at this task (as
compared, say, to the primitive n-gram language model) is that the ability of self-
attention to incorporate information from the large context windows means that
the model has access to the original article as well as to the newly generated text
throughout the process.

Which words do we generate at each step? One simple way to generate words
is to always generate the most likely word given the context. Generating the most
likely word given the context is called greedy decoding. A greedy algorithm is one
that make a choice that is locally optimal, whether or not it will turn out to have
been the best choice with hindsight. Thus in greedy decoding, at each time step in
generation, the output yt is chosen by computing the probability for each possible
outputs (every word in the vocabulary) and then choosing the highest probability
word (the argmax):

w<t )
V P(w
ˆwt = argmaxw
|
∈

(10.46)

In practice, however, we don’t use greedy decoding with large language models.
A major problem with greedy decoding is that because the words it chooses are (by
deﬁnition) extremely predictable, the resulting text is generic and often quite repeti-
tive. Indeed, greedy decoding is so predictable that it is deterministic; if the context

234 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

Figure 10.17 Summarization with large language models using the tl;dr token and context-based autore-
gressive generation.

is identical, and the probabilistic model is the same, greedy decoding will always re-
sult in generating exactly the same string. We’ll see in Chapter 13 that an extension
to greedy decoding called beam search works well in tasks like machine translation,
which are very constrained in that we are always generating a text in one language
conditioned on a very speciﬁc text in another language. In most other tasks, how-
ever, people prefer text which has been generated by more sophisticated methods,
called sampling methods, that introduce a bit more diversity into the generations.
We’ll see how to do that in the next few sections.

10.8 Large Language Models: Generation by Sampling

decoding

autoregressive
generation

sampling

The core of the generation process for large language models is the task of choosing
the single word to generate next based on the context and based on the probabilities
that the model assigns to possible words. This task of choosing a word to generate
based on the model’s probabilities is called decoding. Decoding from a language
model in a left-to-right manner (or right-to-left for languages like Arabic in which
we read from right to left), and thus repeatedly choosing the next word conditioned
on our previous choices is called autoregressive generation or causal LM genera-
tion.1 (As we’ll see, alternatives like the masked language models of Chapter 11 are
non-causal because they can predict words based on both past and future words).

The most common method for decoding in large language models is sampling.
Recall from Chapter 3 that sampling from a model’s distribution over words means
to choose random words according to their probability assigned by the model. That
is, we iteratively choose a word to generate according to its probability in context

1 Technically an autoregressive model predicts a value at time t based on a linear function of the values
at times t
2, and so on. Although language models are not linear (since they have many layers of
non-linearities), we loosely refer to this generation technique as autoregressive since the word generated
at each time step is conditioned on the word selected by the network from the previous step.

1, t

−

−

Original StoryGenerated Summary…reachedKyleitsdestinationKyleWaringWaringonlyThe…willDelimiterwilltl;dr10.8

• LARGE LANGUAGE MODELS: GENERATION BY SAMPLING

235

as deﬁned by the model. Thus we are more likely to generate words that the model
thinks have a high probability in the context and less likely to generate words that
the model thinks have a low probability.

We saw back in Chapter 3 on page 42 how to generate text from a unigram lan-
guage model , by repeatedly randomly sampling words according to their probability
until we either reach a pre-determined length or select the end-of-sentence token. To
generate text from a trained transformer language model we’ll just generalize this
model a bit: at each step we’ll sample words according to their probability condi-
tioned on our previous choices, and we’ll use a transformer language model as the
probability model that tells us this probability.

We can formalize this algorithm for generating a sequence of words W = w1, w2, . . . , wN

until we hit the end-of-sequence token, using x
pling from the distribution p(x):

∼

p(x) to mean ‘choose x by sam-

i
1
←
p(w)
wi ∼
while wi != EOS
i
i + 1
←
wi ∼

p(wi |

w<i)

random
sampling

The algorithm above is called random sampling, and it turns out random sam-
pling doesn’t work well enough. The problem is that even though random sampling
is mostly going to generate sensible, high-probable words, there are many odd, low-
probability words in the tail of the distribution, and even though each one is low-
probability, if you add up all the rare words, they constitute a large enough portion
of the distribution that they get chosen often enough to result in generating weird
sentences. For this reason, instead of random sampling, we usually use sampling
methods that avoid generating the very unlikely words.

The sampling methods we introduce below each have parameters that enable
trading off two important factors in generation: quality and diversity. Methods
that emphasize the most probable words tend to produce generations that are rated
by people as more accurate, more coherent, and more factual, but also more boring
and more repetitive. Methods that give a bit more weight to the middle-probability
words tend to be more creative and more diverse, but less factual and more likely to
be incoherent or otherwise low-quality.

10.8.1 Top-k sampling

top-k sampling

Top-k sampling is a simple generalization of greedy decoding. Instead of choosing
the single most probable word to generate, we ﬁrst truncate the distribution to the
top k most likely words, renormalize to produce a legitimate probability distribution,
and then randomly sample from within these k words according to their renormalized
probabilities. More formally:

1. Choose in advance a number of words k

2. For each word in the vocabulary V , use the language model to compute the

likelihood of this word given the context p(wt |

w<t )

3. Sort the words by their likelihood, and throw away any word that is not one of

the top k most probable words.

4. Renormalize the scores of the k words to be a legitimate probability distribu-

tion.

236 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

top-p sampling

temperature
sampling

5. Randomly sample a word from within these remaining k most-probable words

according to its probability.

When k = 1, top-k sampling is identical to greedy decoding. Setting k to a larger
number than 1 leads us to sometimes select a word which is not necessarily the most
probable, but is still probable enough, and whose choice results in generating more
diverse but still high-enough-quality text.

10.8.2 Nucleus or top-p sampling

One problem with top-k sampling is that k is ﬁxed, but the shape of the the probabil-
ity distribution over words differs in different contexts. If we set k = 10, sometimes
the top 10 words will be very likely and include most of the probability mass, but
other times the probability distribution will be ﬂatter and the top 10 words will only
include a small part of the probability mass.

An alternative, called top-p sampling or nucleus sampling (Holtzman et al.,
2020), is to keep not the top k words, but the top p percent of the probability mass.
The goal is the same; to truncate the distribution to remove the very unlikely words.
But by measuring probability rather than the number of words, the hope is that the
measure will be more robust in very different contexts, dynamically increasing and
decreasing the pool of word candidates.

Given a distribution P(wt |

words such that

w<t ), the top-p vocabulary V (p) is the smallest set of

w<t )
P(w
|

≥

p.

V (p)
(cid:88)w
∈

(10.47)

10.8.3 Temperature sampling

In temperature sampling, we don’t truncate the distribution, but instead reshape
it. The intuition for temperature sampling comes from thermodynamics, where a
system at a high temperature is very ﬂexible and can explore many possible states,
while a system at a lower temperature is likely to explore a subset of lower energy
(better) states. In low-temperature sampling, we smoothly increase the probability
of the most probable words and decrease the probability of the rare words.

We implement this intuition by simply dividing the logit by a temperature param-
eter τ before we normalize it by passing it through the softmax. In low-temperature
sampling, τ
(0, 1]. Thus instead of computing the probability distribution over the
vocabulary directly from the logit as in the following (repeated from (10.45):

∈

y = softmax(u)

we instead ﬁrst divide the logits by τ, computing the probability vector y as

y = softmax(u/τ)

(10.48)

(10.49)

Why does this work? When τ is close to 1 the distribution doesn’t change much.
But the lower τ is, the larger the scores being passed to the softmax (dividing by a
smaller fraction τ
1 results in making each score larger). Recall that one of the
useful properties of a softmax is that it tends to push high values toward 1 and low
values toward 0. Thus when larger numbers are passed to a softmax the result is
a distribution with increased probabilities of the most high-probability words and
decreased probabilities of the low probability words, making the distribution more
greedy. As τ approaches 0 the probability of the most likely word approaches 1.

≤

10.9

• LARGE LANGUAGE MODELS: TRAINING TRANSFORMERS

237

Note, by the way, that there can be other situations where we may want to do
something quite different and ﬂatten the word probability distribution instead of
making it greedy. Temperature sampling can help with this situation too, in this case
high-temperature sampling, in which case we use τ > 1.

10.9 Large Language Models: Training Transformers

self-supervision

How do we teach a transformer to be a language model? What is the algorithm and
what data do we train on?

10.9.1 Self-supervised training algorithm

To train a transformer as a language model, we use the same self-supervision (or
self-training) algorithm we saw in Section 9.2.2: we take a corpus of text as training
material and at each time step t ask the model to predict the next word. We call such
a model self-supervised because we don’t have to add any special gold labels to
the data; the natural sequence of words is its own supervision! We simply train the
model to minimize the error in predicting the true next word in the training sequence,
using cross-entropy as the loss function.

Recall that the cross-entropy loss measures the difference between a predicted

probability distribution and the correct distribution.

LCE =

−

yt [w] log ˆyt [w]

(10.50)

V
(cid:88)w
∈
In the case of language modeling, the correct distribution yt comes from knowing the
next word. This is represented as a one-hot vector corresponding to the vocabulary
where the entry for the actual next word is 1, and all the other entries are 0. Thus,
the cross-entropy loss for language modeling is determined by the probability the
model assigns to the correct next word. So at time t the CE loss in (10.50) can be
simpliﬁed as the negative log probability the model assigns to the next word in the
training sequence.

LCE ( ˆyt , yt ) =

log ˆyt [wt+1]

−

(10.51)

Thus at each word position t of the input, the model takes as input the correct se-
quence of tokens w1:t , and uses them to compute a probability distribution over
possible next words so as to compute the model’s loss for the next token wt+1. Then
we move to the next word, we ignore what the model predicted for the next word
and instead use the correct sequence of tokens w1:t+1 to estimate the probability of
token wt+2. This idea that we always give the model the correct history sequence to
predict the next word (rather than feeding the model its best case from the previous
time step) is called teacher forcing.

Fig. 10.18 illustrates the general training approach. At each step, given all the
preceding words, the ﬁnal transformer layer produces an output distribution over
the entire vocabulary. During training, the probability assigned to the correct word
is used to calculate the cross-entropy loss for each item in the sequence. As with
RNNs, the loss for a training sequence is the average cross-entropy loss over the
entire sequence. The weights in the network are adjusted to minimize the average
CE loss over the training sequence via gradient descent.

teacher forcing

238 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

Figure 10.18 Training a transformer as a language model.

Note the key difference between this ﬁgure and the earlier RNN-based version
shown in Fig. 9.6. There the calculation of the outputs and the losses at each step
was inherently serial given the recurrence in the calculation of the hidden states.
With transformers, each training item can be processed in parallel since the output
for each element in the sequence is computed separately.

Large models are generally trained by ﬁlling the full context window (for ex-
ample 2048 or 4096 tokens for GPT3 or GPT4) with text. If documents are shorter
than this, multiple documents are packed into the window with a special end-of-text
token between them. The batch size for gradient descent is usually quite large (the
largest GPT-3 model uses a batch size of 3.2 million tokens).

10.9.2 Training corpora for large language models

Large language models are mainly trained on text scraped from the web, augmented
by more carefully curated data. Because these training corpora are so large, they are
likely to contain many natural examples that can be helpful for NLP tasks, such as
question and answer pairs (for example from FAQ lists), translations of sentences
between various languages, documents together with their summaries, and so on.

Web text is usually taken from corpora of automatically-crawled web pages like
the common crawl, a series of snapshots of the entire web produced by the non-
proﬁt Common Crawl (https://commoncrawl.org/) that each have billions of
webpages. Various cleanups of common crawl data exist, such as the Colossal Clean
Crawled Corpus (C4; Raffel et al. 2020), a corpus of 156 billion tokens of English
that is ﬁltered in various ways (deduplicated, removing non-natural language like
code, sentences with offensive words from a blocklist). What is in this data? An
analysis suggests that in large part it’s patent text documents, Wikipedia, and news
sites (Dodge et al., 2021). Wikipedia plays a role in lots of language model training,
as do corpora of books. The GPT3 models, for example, are trained mostly on the
web (429 billion tokens), some text from books (67 billion tokens) and Wikipedia
(3 billion tokens).

common crawl

InputEmbeddingsTransformerBlockSoftmax overVocabularySolongandthanksforlongandthanksforNext wordall…Loss……=Linear Layer10.10

• POTENTIAL HARMS FROM LANGUAGE MODELS

239

10.9.3 Scaling laws

The performance of large language models has shown to be mainly determined by
3 factors: model size (the number of parameters not counting embeddings), dataset
size (the amount of training data), and the amount of computer used for training.
That is, we can improve a model by adding parameters (adding more layers or having
wider contexts or both), by training on more data, or by training for more iterations.
The relationships between these factors and performance are known as scaling
laws. Roughly speaking, the performance of a large language model (the loss) scales
as a power-law with each of these three properties of model training.

For example, Kaplan et al. (2020) found the following three relationships for
loss L as a function of the number of non-embedding parameters N, the dataset size
D, and the compute budget C, for models training with limited parameters, dataset,
or compute budget, if in each case the other two properties are held constant:

scaling laws

L(N) =

L(D) =

L(C) =

Nc
N
Dc
D
Cc
C

(cid:18)

(cid:18)

(cid:18)

αN

(cid:19)

αD

(cid:19)

αC

(cid:19)

(10.52)

(10.53)

(10.54)

The number of (non-embedding) parameters N can be roughly computed as fol-
lows (ignoring biases, and with d as the input and output dimensionality of the
model, dattn as the self-attention layer size, and dff the size of the feedforward layer):

N

≈

≈

2 d nlayer(2 dattn + dff)
12 nlayer d2
(assuming dattn = dff/4 = d)

(10.55)

96

×

×

Thus GPT-3, with n = 96 layers and dimensionality d = 12288, has 12
122882

175 billion parameters.

The values of Nc, Dc, Cc, αN, αD, and αC depend on the exact transformer
architecture, tokenization, and vocabulary size, so rather than all the precise values,
scaling laws focus on the relationship with loss.2

≈

Scaling laws can be useful in deciding how to train a model to a particular per-
formance, for example by looking at early in the training curve, or performance with
smaller amounts of data, to predict what the loss would be if we were to add more
data or increase model size. Other aspects of scaling laws can also tell us how much
data we need to add when scaling up a model.

10.10 Potential Harms from Language Models

Large pretrained neural language models exhibit many of the potential harms dis-
cussed in Chapter 4 and Chapter 6. Many of these harms become realized when
pretrained language models are used for any downstream task, particularly those

2 For the initial experiment in Kaplan et al. (2020) the precise values were αN = 0.076, Nc = 8.8
(parameters), αD = 0.095, Dc = 5.4

1013 (tokens), αC = 0.050, Cc = 3.1

108 (petaﬂop-days).

1013

×

×

×

240 CHAPTER 10

• TRANSFORMERS AND LARGE LANGUAGE MODELS

hallucination

toxic language

involving text generation, whether question answering, machine translation, or in
assistive technologies like writing aids or web search query completion, or predic-
tive typing for email (Olteanu et al., 2020).

For example, language models are prone to saying things that are false, a prob-
lem called hallucination. Language models are trained to generate text that is pre-
dictable and coherent, but the training algorithms we have seen so far don’t have any
way to enforce that the text that is generated is correct or true. This causes enormous
problems for any application where the facts matter!

A second source of harm is that language models can generate toxic language.
Gehman et al. (2020) show that even completely non-toxic prompts can lead large
language models to output hate speech and abuse their users. Language models also
generate stereotypes (Cheng et al., 2023) and negative attitudes (Brown et al., 2020;
Sheng et al., 2019) about many demographic groups.

One source of biases is the training data. Gehman et al. (2020) shows that large
language model training datasets include toxic text scraped from banned sites. There
are other biases than toxicity: the training data is disproportionately generated by
authors from the US and from developed countries. Such biased population samples
likely skew the resulting generation toward the perspectives or topics of this group
alone. Furthermore, language models can amplify demographic and other biases in
training data, just as we saw for embedding models in Chapter 6.

Language models can also be used by malicious actors for generating text for
misinformation, phishing, or other socially harmful activities (Brown et al., 2020).
McGufﬁe and Newhouse (2020) show how large language models generate text that
emulates online extremists, with the risk of amplifying extremist movements and
their attempt to radicalize and recruit.

Language models also present privacy issues since they can leak information
about their training data. It is thus possible for an adversary to extract training-data
text from a language model such as an individual person’s name, phone number,
and address (Henderson et al. 2017, Carlini et al. 2021). This is a problem if large
language models are trained on private datasets such as electronic health records.

Related to privacy is the issue of copyright. Large language models are trained
on text that is copyrighted. In some countries, like the United States, the fair use
doctrine allows copyrighted content to be used to build language models, but possi-
bly not if they are used to generate text that competes with the market for the text
they are trained on.

Finding ways to mitigate all these harms is an important current research area in
NLP. At the very least, carefully analyzing the data used to pretrain large language
models is important as a way of understanding issues of toxicity, bias, privacy, and
fair use, making it extremely important that language models include datasheets
(page 16) or model cards (page 78) giving full replicable information on the cor-
pora used to train them. Open-source models can specify their exact training data.
Requirements that models are transparent in such ways is also in the process of being
incorporated into the regulations of various national governments.

10.11 Summary

This chapter has introduced the transformer, and how it can be applied to build large
language models. Here’s a summary of the main points that we covered:

BIBLIOGRAPHICAL AND HISTORICAL NOTES

241

• Transformers are non-recurrent networks based on self-attention. A self-
attention layer maps input sequences to output sequences of the same length,
using attention heads that model how the surrounding words are relevant for
the processing of the current word.

• A transformer block consists of a single attention layer followed by a feed-
forward layer with residual connections and layer normalizations following
each. Transformer blocks can be stacked to make deeper and more powerful
networks.

• Language models can be built out of stacks of transformer blocks, with a linear

and softmax max layer at the top.

• Transformer-based language models have a wide context window (as wide as
4096 tokens for current models) allowing them to draw on enormous amounts
of context to predict upcoming words.

• Many NLP tasks—such as question answering, summarization, sentiment,
and machine translation—can be cast as tasks of word prediction and hence
addressed with Large language models.

• The choice of which word to generate in large language models is generally

done by using a sampling algorithm.

• Because of their ability to be used in so many ways, language models also
have the potential to cause harms. Some harms include hallucinations, bias,
stereotypes, misinformation and propaganda, and violations of privacy and
copyright.

Bibliographical and Historical Notes

The transformer (Vaswani et al., 2017) was developed drawing on two lines of prior
research: self-attention and memory networks. Encoder-decoder attention, the
idea of using a soft weighting over the encodings of input words to inform a gen-
erative decoder (see Chapter 13) was developed by Graves (2013) in the context of
handwriting generation, and Bahdanau et al. (2015) for MT. This idea was extended
to self-attention by dropping the need for separate encoding and decoding sequences
and instead seeing attention as a way of weighting the tokens in collecting informa-
tion passed from lower layers to higher layers (Ling et al., 2015; Cheng et al., 2016;
Liu et al., 2016). Other aspects of the transformer, including the terminology of key,
query, and value, came from memory networks, a mechanism for adding an ex-
ternal read-write memory to networks, by using an embedding of a query to match
keys representing content in an associative memory (Sukhbaatar et al., 2015; Weston
et al., 2015; Graves et al., 2014).

MORE HISTORY TBD IN NEXT DRAFT.

242 CHAPTER 11

• FINE-TUNING AND MASKED LANGUAGE MODELS

CHAPTER

11 Fine-Tuning and Masked Lan-

guage Models

Larvatus prodeo [Masked, I go forward]
Descartes

masked
language
modeling

BERT

ﬁne-tuning

transfer
learning

In the previous chapter we saw how to pretrain transformer language models,
and how these pretrained models can be used as a tool for many kinds of NLP tasks,
by casting the tasks as word prediction. The models we introduced in Chapter 10 to
do this task are causal or left-to-right transformer models.

In this chapter we’ll introduce a second paradigm for pretrained language mod-
els, called the bidirectional transformer encoder, trained via masked language
modeling, a method that allows the model to see entire texts at a time, including
both the right and left context. We’ll introduce the most widely-used version of the
masked language modeling architecture, the BERT model (Devlin et al., 2019).

We’ll also introduce two important ideas that are often used with these masked
language models. The ﬁrst is the idea of ﬁne-tuning. Fine-tuning is the process
of taking the network learned by these pretrained models, and further training the
model, often via an added neural net classiﬁer that takes the top layer of the network
as input, to perform some downstream task like named entity tagging or question an-
swering or coreference. The intuition is that the pretraining phase learns a language
model that instantiates rich representations of word meaning, that thus enables the
model to more easily learn (‘be ﬁne-tuned to’) the requirements of a downstream
language understanding task. The pretrain-ﬁnetune paradigm is an instance of what
is called transfer learning in machine learning: the method of acquiring knowledge
from one task or domain, and then applying it (transferring it) to solve a new task.

The second idea that we introduce in this chapter is the idea of contextual em-
beddings: representations for words in context. The methods of Chapter 6 like
word2vec or GloVe learned a single vector embedding for each unique word w in
the vocabulary. By contrast, with contextual embeddings, such as those learned by
masked language models like BERT, each word w will be represented by a different
vector each time it appears in a different context. While the causal language models
of Chapter 10 also use contextual embeddings, the embeddings created by masked
language models seem to function particularly well as representations.

11.1 Bidirectional Transformer Encoders

Let’s begin by introducing the bidirectional transformer encoder that underlies mod-
els like BERT and its descendants like RoBERTa (Liu et al., 2019) or SpanBERT
(Joshi et al., 2020). In Chapter 10 we explored causal (left-to-right) transformers
that can serve as the basis for powerful language models—models that can eas-
ily be applied to autoregressive generation problems such as contextual generation,
summarization and machine translation. However, when applied to sequence classi-
ﬁcation and labeling problems causal models have obvious shortcomings since they

11.1

• BIDIRECTIONAL TRANSFORMER ENCODERS

243

are based on an incremental, left-to-right processing of their inputs. If we want to
assign the correct named-entity tag to each word in a sentence, or other sophisticated
linguistic labels like the parse tags we’ll introduce in later chapters, we’ll want to
be able to take into account information from the right context as we process each
element. Fig. 11.1a, reproduced here from Chapter 10, illustrates the information
ﬂow in the purely left-to-right approach of Chapter 10. As can be seen, the hidden
state computation at each point in time is based solely on the current and earlier
elements of the input, ignoring potentially useful information located to the right of
each tagging decision.

(a) The causal, backward looking, transformer model we saw in Chapter 10. Each output is
Figure 11.1
computed independently of the others using only information seen earlier in the context. (b) Information ﬂow in
a bidirectional self-attention model. In processing each element of the sequence, the model attends to all inputs,
both before and after the current one.

Bidirectional encoders overcome this limitation by allowing the self-attention

mechanism to range over the entire input, as shown in Fig. 11.1b.

Why bidirectional encoders? The causal models of Chapter 10 are generative
models, designed to easily generate the next token in a sequence. But the focus
of bidirectional encoders is instead on computing contextualized representations of
the input tokens. Bidirectional encoders use self-attention to map sequences of
input embeddings (x1, ..., xn) to sequences of output embeddings the same length
(y1, ..., yn), where the output vectors have been contextualized using information
from the entire input sequence. These output embeddings are contextualized repre-
sentations of each input token that are generally useful across a range of downstream
applications. The models of Chapter 10 are sometimes called decoder-only; the
models of this chapter are sometimes called encoder-only, because they produce an
encoding for each input token but generally aren’t used to produce running text by
decoding/sampling.

11.1.1 The architecture for bidirectional models

Bidirectional models use the same self-attention mechanism as causal models. The
ﬁrst step is to generate a set of key, query and value embeddings for each element
of the input vector x through the use of learned weight matrices WQ, WK, and WV.
These weights project each input vector xi into its speciﬁc role as a key, query, or
value.

qi = WQxi; ki = WKxi; vi = WVxi

(11.1)

The output vector yi corresponding to each input element xi is a weighted sum of all

x1a1x2a2a3a4a5x3x4x5a) A causal self-attention layerx1a1x2a2a3a4a5x3x4x5b) A bidirectional self-attention layer244 CHAPTER 11

• FINE-TUNING AND MASKED LANGUAGE MODELS

the input value vectors v, as follows:

n

yi =

αi jv j

(11.2)

(cid:88)j=1
The α weights are computed via a softmax over the comparison scores between
every element of an input sequence considered as a query and every other element
as a key, where the comparison scores are computed using dot products.

αi j =

scorei j = qi ·
(cid:80)

exp(scorei j)
n
k=1 exp(scoreik)
k j

(11.3)

(11.4)

As with the models of Chapter 10, since each output vector, yi, is computed
independently, the processing of an entire sequence can be parallelized via matrix
dh.
operations. The ﬁrst step is to pack the input embeddings xi into a matrix X
×
That is, each row of X is the embedding of one token of the input. We then multiply
X by the key, query, and value weight matrices (all of dimensionality d
d) to
d, containing all the key,
d, and V
RN
produce matrices Q
×
×
query, and value vectors in a single step.

d, K
×

RN

RN

RN

×

∈

∈

∈

∈

Q = XWQ; K = XWK; V = XWV

(11.5)

Given these matrices we can compute all the requisite query-key comparisons si-
multaneously by multiplying Q and K(cid:124)
in a single operation. Fig. 11.2 illustrates
the result of this operation for an input with length 5.

Figure 11.2 The N

N QK(cid:124)

×

matrix showing the complete set of qi ·

k j comparisons.

Finally, we can scale these scores, take the softmax, and then multiply the result
d where each row contains a contextualized

by V resulting in a matrix of shape N
output embedding corresponding to each token in the input.

×

SelfAttention(Q, K, V) = softmax

QK(cid:124)
√dk (cid:19)

V

(cid:18)

(11.6)

The key architecture difference is in bidirectional models we don’t mask the fu-
ture. As shown in Fig. 11.2, the full set of self-attention scores represented by QKT
constitute an all-pairs comparison between the keys and queries for each element
of the input. In the case of causal language models in Chapter 10, we masked the

q1•k1q2•k1q2•k2q5•k1q5•k2q5•k3q5•k4q5•k5q4•k1q4•k2q4•k3q4•k4q3•k1q3•k2q3•k3NNq1•k2q1•k3q1•k4q1•k5q2•k3q2•k4q2•k5q3•k4q3•k5q4•k511.1

• BIDIRECTIONAL TRANSFORMER ENCODERS

245

upper triangular portion of this matrix (in Fig. 10.4) to eliminate information about
future words since this would make the language modeling training task trivial. With
bidirectional encoders we simply skip the mask, allowing the model to contextualize
each token using information from the entire input.

Beyond this simple change, all of the other elements of the transformer archi-
tecture remain the same for bidirectional encoder models. Inputs to the model are
segmented using subword tokenization and are combined with positional embed-
dings before being passed through a series of standard transformer blocks consisting
of self-attention and feedforward layers augmented with residual connections and
layer normalization, as shown in Fig. 11.3.

Figure 11.3 A transformer block showing all the layers.

To make this more concrete, the original English-only bidirectional transformer

encoder model, BERT (Devlin et al., 2019), consisted of the following:

• An English-only subword vocabulary consisting of 30,000 tokens generated

using the WordPiece algorithm (Schuster and Nakajima, 2012).

• Hidden layers of size of 768,
• 12 layers of transformer blocks, with 12 multihead attention layers each.
• The resulting model has about 100M parameters.

The larger multilingual XLM-RoBERTa model, trained on 100 languages, has

• A multilingual subword vocabulary with 250,000 tokens generated using the

SentencePiece Unigram LM algorithm (Kudo and Richardson, 2018b).
• 24 layers of transformer blocks, with 16 multihead attention layers each
• Hidden layers of size 1024
• The resulting model has about 550M parameters.

The use of WordPiece or SentencePiece Unigram LM tokenization (two of the
large family of subword tokenization algorithms that includes the BPE algorithm
we saw in Chapter 2) means that—like the large language models of Chapter 10—
BERT and its descendants are based on subword tokens rather than words. Every
input sentence ﬁrst has to be tokenized, and then all further processing takes place
on subword tokens rather than words. This will require, as we’ll see, that for some

MultiHead Attentionz   z                                    zz   z                                    zTransformerBlockx1x2x3xn…ResidualconnectionResidualconnection++h1h2h3hn……FeedforwardLayer NormalizeLayer Normalize246 CHAPTER 11

• FINE-TUNING AND MASKED LANGUAGE MODELS

NLP tasks that require notions of words (like named entity tagging, or parsing) we
will occasionally need to map subwords back to words.

As with causal transformers, the size of the input layer dictates the complexity of
the model. Both the time and memory requirements in a transformer grow quadrati-
cally with the length of the input. It’s necessary, therefore, to set a ﬁxed input length
that is long enough to provide sufﬁcient context for the model to function and yet
still be computationally tractable. For BERT and XLR-RoBERTa, a ﬁxed input size
of 512 subword tokens was used.

11.2 Training Bidirectional Encoders

We trained causal transformer language models in Chapter 10 by making them iter-
atively predict the next word in a text. But eliminating the causal mask makes the
guess-the-next-word language modeling task trivial since the answer is now directly
available from the context, so we’re in need of a new training scheme. Fortunately,
the traditional learning objective suggests an approach that can be used to train bidi-
rectional encoders. Instead of trying to predict the next word, the model learns to
perform a ﬁll-in-the-blank task, technically called the cloze task (Taylor, 1953). To
see this, let’s return to the motivating example from Chapter 3. Instead of predicting
which words are likely to come next in this example:

cloze task

Please turn your homework

.

we’re asked to predict a missing item given the rest of the sentence.

Please turn

homework in.

That is, given an input sequence with one or more elements missing, the learning
task is to predict the missing elements. More precisely, during training the model is
deprived of one or more elements of an input sequence and must generate a proba-
bility distribution over the vocabulary for each of the missing items. We then use the
cross-entropy loss from each of the model’s predictions to drive the learning process.
This approach can be generalized to any of a variety of methods that corrupt the
training input and then asks the model to recover the original input. Examples of the
kinds of manipulations that have been used include masks, substitutions, reorder-
ings, deletions, and extraneous insertions into the training text.

11.2.1 Masking Words

Masked
Language
Modeling
MLM

The original approach to training bidirectional encoders is called Masked Language
Modeling (MLM) (Devlin et al., 2019). As with the language model training meth-
ods we’ve already seen, MLM uses unannotated text from a large corpus. Here, the
model is presented with a series of sentences from the training corpus where a ran-
dom sample of tokens from each training sequence is selected for use in the learning
task. Once chosen, a token is used in one of three ways:

• It is replaced with the unique vocabulary token [MASK].
• It is replaced with another token from the vocabulary, randomly sampled

based on token unigram probabilities.

• It is left unchanged.

11.2

• TRAINING BIDIRECTIONAL ENCODERS

247

In BERT, 15% of the input tokens in a training sequence are sampled for learning.
Of these, 80% are replaced with [MASK], 10% are replaced with randomly selected
tokens, and the remaining 10% are left unchanged.

The MLM training objective is to predict the original inputs for each of the
masked tokens using a bidirectional encoder of the kind described in the last section.
The cross-entropy loss from these predictions drives the training process for all the
parameters in the model. Note that all of the input tokens play a role in the self-
attention process, but only the sampled tokens are used for learning.

More speciﬁcally, the original input sequence is ﬁrst tokenized using a subword
model. The sampled items which drive the learning process are chosen from among
the set of tokenized inputs. Word embeddings for all of the tokens in the input
are retrieved from the word embedding matrix and then combined with positional
embeddings to form the input to the transformer.

Figure 11.4 Masked language model training. In this example, three of the input tokens are selected, two of
which are masked and the third is replaced with an unrelated word. The probabilities assigned by the model to
these three items are used as the training loss. The other 5 words don’t play a role in training loss. (In this and
subsequent ﬁgures we display the input as words rather than subword tokens; the reader should keep in mind
that BERT and similar models actually use subword tokens instead.)

Fig. 11.4 illustrates this approach with a simple example. Here, long, thanks and
the have been sampled from the training sequence, with the ﬁrst two masked and the
replaced with the randomly sampled token apricot. The resulting embeddings are
passed through a stack of bidirectional transformer blocks. To produce a probability
distribution over the vocabulary for each of the masked tokens, the output vector zi
from the ﬁnal transformer layer for each masked token i is multiplied by a learned
dh and then through a softmax to yield the
set of classiﬁcation weights WV ∈
|×
required predictions over the vocabulary.

V
R|

yi = softmax(WV zi)

With a predicted probability distribution for each masked item, we can use cross-
entropy to compute the loss for each masked item—the negative log probability
assigned to the actual masked word, as shown in Fig. 11.4. More formally, for a
given vector of input tokens in a sentence or batch be x, let the set of tokens that are

Softmax overVocabularySo[mask]and[mask]for longthanksCE Lossall apricot ﬁshtheToken +Positional EmbeddingsSolongandthanksfor all ﬁshtheBidirectional Transformer Encoder+p1+++++++p2p3p4p5p6p7p8z1z2z3z4z5z6z7z8248 CHAPTER 11

• FINE-TUNING AND MASKED LANGUAGE MODELS

masked be M, the version of that sentence with some tokens replaced by masks be
xmask, and the sequence of output vectors be z. For a given input token xi, such as
the word long in Fig. 11.4, the loss is the probability of the correct word long, given
xmask (as summarized in the single output vector zi):

LMLM(xi) =

log P(xi|

zi)

−

The gradients that form the basis for the weight updates are based on the average
loss over the sampled learning items from a single training sequence (or batch of
sequences).

LMLM =

1
M
|

−

log P(xi|

zi)

| (cid:88)i
M
∈
Note that only the tokens in M play a role in learning; the other words play no role
in the loss function, so in that sense BERT and its descendents are inefﬁcient; only
15% of the input samples in the training data are actually used for training weights.
1

Next Sentence
Prediction

11.2.2 Next Sentence Prediction

The focus of mask-based learning is on predicting words from surrounding contexts
with the goal of producing effective word-level representations. However, an im-
portant class of applications involves determining the relationship between pairs of
sentences. These include tasks like paraphrase detection (detecting if two sentences
have similar meanings), entailment (detecting if the meanings of two sentences en-
tail or contradict each other) or discourse coherence (deciding if two neighboring
sentences form a coherent discourse).

To capture the kind of knowledge required for applications such as these, some
models in the BERT family include a second learning objective called Next Sen-
tence Prediction (NSP). In this task, the model is presented with pairs of sentences
and is asked to predict whether each pair consists of an actual pair of adjacent sen-
tences from the training corpus or a pair of unrelated sentences. In BERT, 50% of
the training pairs consisted of positive pairs, and in the other 50% the second sen-
tence of a pair was randomly selected from elsewhere in the corpus. The NSP loss
is based on how well the model can distinguish true pairs from random pairs.

To facilitate NSP training, BERT introduces two new tokens to the input repre-
sentation (tokens that will prove useful for ﬁne-tuning as well). After tokenizing the
input with the subword model, the token [CLS] is prepended to the input sentence
pair, and the token [SEP] is placed between the sentences and after the ﬁnal token of
the second sentence. Finally, embeddings representing the ﬁrst and second segments
of the input are added to the word and positional embeddings to allow the model to
more easily distinguish the input sentences.

During training, the output vector from the ﬁnal layer associated with the [CLS]
token represents the next sentence prediction. As with the MLM objective, a learned
dh is used to produce a two-class prediction
set of classiﬁcation weights WNSP
×
from the raw [CLS] vector.

R2

∈

yi = softmax(WNSPhi)

1 There are members of the BERT family like ELECTRA that do use all examples for training (Clark
et al., 2020b).

11.2

• TRAINING BIDIRECTIONAL ENCODERS

249

Cross entropy is used to compute the NSP loss for each sentence pair presented
to the model. Fig. 11.5 illustrates the overall NSP training setup. In BERT, the NSP
loss was used in conjunction with the MLM training objective to form ﬁnal loss.

Figure 11.5 An example of the NSP loss calculation.

11.2.3 Training Regimes

BERT and other early transformer-based language models were trained on about 3.3
billion words (a combination of English Wikipedia and a corpus of book texts called
BooksCorpus (Zhu et al., 2015) that is no longer used for intellectual property rea-
sons). Modern masked language models are now trained on much larger datasets
of web text, ﬁltered a bit, and augmented by higher-quality data like Wikipedia, the
same as those we discussed for the causal large language models of Chapter 10.
Multilingual models similarity use webtext and multilingual Wikipedia. For exam-
ple the XLM-R model was trained on about 300 billion tokens in 100 languages,
taken from the web via Common Crawl (https://commoncrawl.org/).

To train the original BERT models, pairs of text segments were selected from
the training corpus according to the next sentence prediction 50/50 scheme. Pairs
were sampled so that their combined length was less than the 512 token input. To-
kens within these sentence pairs were then masked using the MLM approach with
the combined loss from the MLM and NSP objectives used for a ﬁnal loss. Ap-
proximately 40 passes (epochs) over the training data was required for the model to
converge.

Some models, like the RoBERTa model, drop the next sentence prediction ob-
jective, and therefore change the training regime a bit. Instead of sampling pairs of
sentence, the input is simply a series of contiguous sentences. If the document runs
out before 512 tokens are reached, an extra separator token is added, and sentences
from the next document are packed in, until we reach a total of 512 tokens. Usually
large batch sizes are used, between 8K and 32K tokens.

Multilingual models have an additional decision to make: what data to use to
build the vocabulary? Recall that all language models use subword tokenization
(BPE or SentencePiece Unigram LM are the two most common algorithms). What
text should be used to learn this multilingual tokenization, given that it’s easier to get
much more text in some languages than others? One option would be to create this
vocabulary-learning dataset by sampling sentences from our training data (perhaps

Cancelmyﬂight[SEP] 1CE LossAnd the Bidirectional Transformer Encoderp1p2p3p4p5p6p7p8[CLS]++s1SoftmaxToken +Segment +PositionalEmbeddings hotel p9[SEP] ++s1s1s1s1s2s2s2s2++++++++++++++zCLS250 CHAPTER 11

• FINE-TUNING AND MASKED LANGUAGE MODELS

web text from Common Crawl), randomly. In that case we will choose a lot of sen-
tences from languages like languages with lots of web representation like English,
and the tokens will be biased toward rare English tokens instead of creating frequent
tokens from languages with less data. Instead, it is common to divide the training
data into subcorpora of N different languages, compute the number of sentences ni
of each language i, and readjust these probabilities so as to upweight the probability
of less-represented languages (Lample and Conneau, 2019). The new probability of
selecting a sentence from each of the N languages (whose prior frequency is ni) is
qi}i=1...N, where:

{

qi =

pα
i
N
j=1 pα
i

with pi =

ni
N
k=1 nk

(11.7)

(cid:80)

(cid:80)

Recall from (6.32) in Chapter 6 that an α value between 0 and 1 will give higher
weight to lower probability samples. Conneau et al. (2020) show that α = 0.3 works
well to give rare languages more inclusion in the tokenization, resulting in better
multilingual performance overall.

The result of this pretraining process consists of both learned word embeddings,
as well as all the parameters of the bidirectional encoder that are used to produce
contextual embeddings for novel inputs.

For many purposes, a pretrained multilingual model is more practical than a
monolingual model, since it avoids the need to build many (100!) separate monolin-
gual models. And multilingual models can improve performance on low-resourced
languages by leveraging linguistic information from a similar language in the train-
ing data that happens to have more resources. Nonetheless, when the number of
languages grows very large, multilingual models exhibit what has been called the
curse of multilinguality (Conneau et al., 2020): the performance on each language
degrades compared to a model training on fewer languages. Another problem with
multilingual models is that they ‘have an accent’: grammatical structures in higher-
resource languages (often English) bleed into lower-resource languages; the vast
amount of English language in training makes the model’s representations for low-
resource languages slightly more English-like (Papadimitriou et al., 2023).

11.3 Contextual Embeddings

contextual
embeddings

Given a pretrained language model and a novel input sentence, we can think of the
sequence of model outputs as constituting contextual embeddings for each token in
the input. These contextual embeddings are vectors representing some aspect of the
meaning of a token in context, and can be used for any task requiring the meaning of
tokens or words. More formally, given a sequence of input tokens x1, ..., xn, we can
use the output vector zi from the ﬁnal layer of the model as a representation of the
meaning of token xi in the context of sentence x1, ..., xn. Or instead of just using the
vector zi from the ﬁnal layer of the model, it’s common to compute a representation
for xi by averaging the output tokens zi from each of the last four layers of the model.
Just as we used static embeddings like word2vec in Chapter 6 to represent the
meaning of words, we can use contextual embeddings as representations of word
meanings in context for any task that might require a model of word meaning. Where
static embeddings represent the meaning of word types (vocabulary entries), contex-
tual embeddings represent the meaning of word instances: instances of a particular

11.3

• CONTEXTUAL EMBEDDINGS

251

ambiguous

word sense

WordNet

Figure 11.6 The output of a BERT-style model is a contextual embedding vector zi for each
input token xi.

word type in a particular context. Thus where word2vec had a single vector for each
word type, contextual embeddings provide a single vector for each instance of that
word type in its sentential context. Contextual embeddings can thus be used for
tasks like measuring the semantic similarity of two words in context, and are useful
in linguistic tasks that require models of word meaning.

11.3.1 Contextual Embeddings and Word Sense

Words are ambiguous: the same word can be used to mean different things.
In
Chapter 6 we saw that the word “mouse” can mean (1) a small rodent, or (2) a hand-
operated device to control a cursor. The word “bank” can mean: (1) a ﬁnancial
institution or (2) a sloping mound. We say that the words ‘mouse’ or ‘bank’ are
polysemous (from Greek ‘many senses’, poly- ‘many’ + sema, ‘sign, mark’).2

A sense (or word sense) is a discrete representation of one aspect of the meaning
of a word. We can represent each sense with a superscript: bank1 and bank2,
mouse1 and mouse2. These senses can be found listed in online thesauruses (or
thesauri) like WordNet (Fellbaum, 1998), which has datasets in many languages
listing the senses of many words. In context, it’s easy to see the different meanings:
mouse1 : .... a mouse controlling a computer system in 1968.
mouse2 : .... a quiet animal like a mouse
bank1 : ...a bank can hold the investments in a custodial account ...
bank2 : ...as agriculture burgeons on the east bank, the river ...

This fact that context disambiguates the senses of mouse and bank above can
also be visualized geometrically. Fig. 11.7 shows a two-dimensional project of many
instances of the BERT embeddings of the word die in English and German. Each
point in the graph represents the use of die in one input sentence. We can clearly see
at least two different English senses of die (the singular of dice and the verb to die,
as well as the German article, in the BERT embedding space.

Thus while thesauruses like WordNet give discrete lists of senses, embeddings
(whether static or contextual) offer a continuous high-dimensional model of meaning

2 The word polysemy itself is ambiguous; you may see it used in a different way, to refer only to cases
where a word’s senses are related in some structured way, reserving the word homonymy to mean sense
ambiguities with no relation between the senses (Haber and Poesio, 2020). Here we will use ‘polysemy’
to mean any kind of sense ambiguity, and ‘structured polysemy’ for polysemy with sense relations.

InputEmbeddingsTransformerBlocks[CLS]Solongandthanksforallz1zCLSz2z3z4z5z6252 CHAPTER 11

• FINE-TUNING AND MASKED LANGUAGE MODELS

Figure 11.7 Each blue dot shows a BERT contextual embedding for the word die from different sentences
in English and German, projected into two dimensions with the UMAP algorithm. The German and English
meanings and the different English senses fall into different clusters. Some sample points are shown with the
contextual sentence they came from. Figure from Coenen et al. (2019).

that, although it can be clustered, doesn’t divide up into fully discrete senses.

Word Sense Disambiguation

word sense
disambiguation
WSD

The task of selecting the correct sense for a word is called word sense disambigua-
tion, or WSD. WSD algorithms take as input a word in context and a ﬁxed inventory
of potential word senses (like the ones in WordNet) and outputs the correct word
sense in context. Fig. 11.8 sketches out the task.

Figure 11.8 The all-words WSD task, mapping from input words (x) to WordNet senses
(y). Figure inspired by Chaplot and Salakhutdinov (2018).

WSD can be a useful analytic tool for text analysis in the humanities and social
sciences, and word senses can play a role in model interpretability for word repre-
sentations. Word senses also have interesting distributional properties. For example
a word often is used in roughly the same sense through a discourse, an observation
called the one sense per discourse rule (Gale et al., 1992a).

one sense per
discourse

Figure4:Embeddingsfortheword"die"indifferentcontexts,visualizedwithUMAP.Samplepointsareannotatedwithcorrespondingsentences.Overallannotations(bluetext)areaddedasaguide.4.1VisualizationofwordsensesOurﬁrstexperimentisanexploratoryvisualizationofhowwordsenseaffectscontextembeddings.Fordataondifferentwordsenses,wecollectedallsentencesusedintheintroductionstoEnglish-languageWikipediaarticles.(Textoutsideofintroductionswasfrequentlyfragmentary.)Wecreatedaninteractiveapplication,whichweplantomakepublic.Auserentersaword,andthesystemretrieves1,000sentencescontainingthatword.ItsendsthesesentencestoBERT-baseasinput,andforeachoneitretrievesthecontextembeddingforthewordfromalayeroftheuser’schoosing.Thesystemvisualizesthese1,000contextembeddingsusingUMAP[15],generallyshowingclearclustersrelatingtowordsenses.Differentsensesofawordaretypicallyspatiallyseparated,andwithintheclustersthereisoftenfurtherstructurerelatedtoﬁneshadesofmeaning.InFigure4,forexample,wenotonlyseecrisp,well-separatedclustersforthreemeaningsoftheword“die,”butwithinoneoftheseclustersthereisakindofquantitativescale,relatedtothenumberofpeopledying.SeeAppendix6.4forfurtherexamples.Theapparentdetailintheclusterswevisualizedraisestwoimmediatequestions.First,isitpossibletoﬁndquantitativecorroborationthatwordsensesarewell-represented?Second,howcanweresolveaseemingcontradiction:intheprevioussection,wesawhowpositionrepresentedsyntax;yethereweseepositionrepresentingsemantics.4.2MeasurementofwordsensedisambiguationcapabilityThecrispclustersseeninvisualizationssuchasFigure4suggestthatBERTmaycreatesimple,effectiveinternalrepresentationsofwordsenses,puttingdifferentmeaningsindifferentlocations.Totestthishypothesisquantitatively,wetestwhetherasimpleclassiﬁerontheseinternalrepresentationscanperformwellatword-sensedisambiguation(WSD).Wefollowtheproceduredescribedin[20],whichperformedasimilarexperimentwiththeELMomodel.Foragivenwordwithnsenses,wemakeanearest-neighborclassiﬁerwhereeachneighboristhecentroidofagivenwordsense’sBERT-baseembeddingsinthetrainingdata.Toclassifyanewwordweﬁndtheclosestofthesecentroids,defaultingtothemostcommonlyusedsenseifthewordwasnotpresentinthetrainingdata.Weusedthedataandevaluationfrom[21]:thetrainingdatawasSemCor[17](33,362senses),andthetestingdatawasthesuitedescribedin[21](3,669senses).Thesimplenearest-neighborclassiﬁerachievesanF1scoreof71.1,higherthanthecurrentstateoftheart(Table1),withtheaccuracymonotonicallyincreasingthroughthelayers.Thisisastrongsignalthatcontextembeddingsarerepresentingword-senseinformation.Additionally,anevenhigherscoreof71.5wasobtainedusingthetechniquedescribedinthefollowingsection.6anelectricguitarandbassplayerstandoﬀtoonesideelectric1: using electricityelectric2:  tenseelectric3: thrillingguitar1 bass1: low range…bass4: sea ﬁsh… bass7: instrument…player1: in gameplayer2: musician player3: actor…stand1: upright…stand5: bear… stand10: put upright…side1: relative region…side3: of body… side11: slope…x1y1x2y2x3y3y4y5y6x4x5x611.3

• CONTEXTUAL EMBEDDINGS

253

The best performing WSD algorithm is a simple 1-nearest-neighbor algorithm
using contextual word embeddings, due to Melamud et al. (2016) and Peters et al.
(2018). At training time we pass each sentence in some sense-labeled dataset (like
the SemCore or SenseEval datasets in various languages) through any contextual
embedding (e.g., BERT) resulting in a contextual embedding for each labeled token.
(There are various ways to compute this contextual embedding vi for a token i; for
BERT it is common to pool multiple layers by summing the vector representations
of i from the last four BERT layers). Then for each sense s of any word in the corpus,
for each of the n tokens of that sense, we average their n contextual representations
vi to produce a contextual sense embedding vs for s:

vs =

1
n

vi

(cid:88)i

vi ∈
∀

tokens(s)

(11.8)

At test time, given a token of a target word t in context, we compute its contextual
embedding t and choose its nearest neighbor sense from the training set, i.e., the
sense whose sense embedding has the highest cosine with t:

sense(t) = argmax
senses(t)

s

∈

cosine(t, vs)

(11.9)

Fig. 11.9 illustrates the model.

Figure 11.9 The nearest-neighbor algorithm for WSD. In green are the contextual embed-
dings precomputed for each sense of each word; here we just show a few of the senses for
ﬁnd. A contextual embedding is computed for the target word found, and then the nearest
neighbor sense (in this case ﬁnd9

v) is chosen. Figure inspired by Loureiro and Jorge (2019).

11.3.2 Contextual Embeddings and Word Similarity

In Chapter 6 we introduced the idea that we could measure the similarity of two
words by considering how close they are geometrically, by using the cosine as a
similarity function. The idea of meaning similarity is also clear geometrically in the
meaning clusters in Fig. 11.7; the representation of a word which has a particular
sense in a context is closer to other instances of the same sense of the word. Thus we
often measure the similarity between two instances of two words in context (or two
instances of the same word in two different contexts) by using the cosine between
their contextual embeddings.

Usually some transformations to the embeddings are required before computing
cosine. This is because contextual embeddings (whether from masked language

I  found  the  jar  emptycIcfoundfind1vcthecjarcemptyfind9vfind5vfind4vENCODER254 CHAPTER 11

• FINE-TUNING AND MASKED LANGUAGE MODELS

anisotropy

models or from autoregressive ones) have the property that the vectors for all words
are extremely similar. If we look at the embeddings from the ﬁnal layer of BERT
or other models, embeddings for instances of any two randomly chosen words will
have extremely high cosines that can be quite close to 1, meaning all word vectors
tend to point in the same direction. The property of vectors in a system all tending
to point in the same direction is known as anisotropy. Ethayarajh (2019) deﬁnes
the anisotropy of a model as the expected cosine similarity of any pair of words in
a corpus. The word ‘isotropy’ means uniformity in all directions, so in an isotropic
model, the collection of vectors should point in all directions and the expected cosine
between a pair of random embeddings would be zero. Timkey and van Schijndel
(2021) show that one cause of anisotropy is that cosine measures are dominated by
a small number of dimensions of the contextual embedding whose values are very
different than the others: these rogue dimensions have very large magnitudes and
very high variance.

Timkey and van Schijndel (2021) shows that we can make the embeddings more
isotropic by standardizing (z-scoring) the vectors, i.e., subtracting the mean and
dividing by the variance. Given a set C of all the embeddings in some corpus, each
Rd), the mean vector µ
with dimensionality d (i.e., x

Rd is:

∈

∈

µ =

1
C
|

x

| (cid:88)
x
C
∈

The standard deviation in each dimension σ

Rd is:

∈

σ =

1
C
|

(cid:115)

µ)2

−

(x

| (cid:88)
x
C
∈

Then each word vector x is replaced by a standardized version z:

z =

µ

x

−
σ

(11.10)

(11.11)

(11.12)

One problem with cosine that is not solved by standardization is that cosine tends
to underestimate human judgments on similarity of word meaning for very frequent
words (Zhou et al., 2022).

In the next section we’ll see the most common use of contextual representations:
as representations of words or even entire sentences that can be the inputs to classi-
ﬁers in the ﬁne-tuning process for downstream NLP applications.

11.4 Fine-Tuning Language Models

The power of pretrained language models lies in their ability to extract generaliza-
tions from large amounts of text—generalizations that are useful for myriad down-
stream applications. There are two ways to make practical use of the generaliza-
tions. One way is to use natural language to prompt the model, putting it in a state
where it contextually generates what we want. We’ll introduce prompting in Chap-
ter 12. An alternative is to create interfaces from pretrained language models to
downstream applications through a process called ﬁne-tuning. In ﬁne-tuning, we
create applications on top of pretrained models by adding a small set of application-
speciﬁc parameters. The ﬁne-tuning process consists of using labeled data about

ﬁne-tuning

sentence
embedding

classiﬁer head

11.4

• FINE-TUNING LANGUAGE MODELS

255

the application to train these additional application-speciﬁc parameters. Typically,
this training will either freeze or make only minimal adjustments to the pretrained
language model parameters.

The following sections introduce ﬁne-tuning methods for the most common ap-
plications including sequence classiﬁcation, sequence labeling, sentence-pair infer-
ence, and span-based operations.

11.4.1 Sequence Classiﬁcation

Sequence classiﬁcation applications often represent an input sequence with a single
consolidated representation. With RNNs, we used the hidden layer associated with
the ﬁnal input element to stand for the entire sequence. A similar approach is used
with transformers. An additional vector is added to the model to stand for the entire
sequence. This vector is sometimes called the sentence embedding since it refers
to the entire sequence, although the term ‘sentence embedding’ is also used in other
ways. In BERT, the [CLS] token plays the role of this embedding. This unique token
is added to the vocabulary and is prepended to the start of all input sequences, both
during pretraining and encoding. The output vector in the ﬁnal layer of the model
for the [CLS] input represents the entire input sequence and serves as the input to
a classiﬁer head, a logistic regression or neural network classiﬁer that makes the
relevant decision.

As an example, let’s return to the problem of sentiment classiﬁcation. A sim-
ple approach to ﬁne-tuning a classiﬁer for this application involves learning a set
of weights, WC, to map the output vector for the [CLS] token—zCLS—to a set of
scores over the possible sentiment classes. Assuming a three-way sentiment clas-
siﬁcation task (positive, negative, neutral) and dimensionality dh for the size of the
dh. Classiﬁcation of unseen docu-
R3
language model hidden layers gives WC
×
∈
ments proceeds by passing the input text through the pretrained language model to
generate zCLS, multiplying it by WC, and ﬁnally passing the resulting vector through
a softmax.

y = softmax(WCzCLS)

(11.13)

Finetuning the values in WC requires supervised training data consisting of input
sequences labeled with the appropriate class. Training proceeds in the usual way;
cross-entropy loss between the softmax output and the correct answer is used to
drive the learning that produces WC.

A key difference from what we’ve seen earlier with neural classiﬁers is that this
loss can be used to not only learn the weights of the classiﬁer, but also to update the
weights for the pretrained language model itself. In practice, reasonable classiﬁca-
tion performance is typically achieved with only minimal changes to the language
model parameters, often limited to updates over the ﬁnal few layers of the trans-
former. Fig. 11.10 illustrates this overall approach to sequence classiﬁcation.

11.4.2 Pair-Wise Sequence Classiﬁcation

As mentioned in Section 11.2.2, an important type of problem involves the classiﬁca-
tion of pairs of input sequences. Practical applications that fall into this class include
paraphrase detection (are the two sentences paraphrases of each other?), logical en-
tailment (does sentence A logically entail sentence B?), and discourse coherence
(how coherent is sentence B as a follow-on to sentence A?).

256 CHAPTER 11

• FINE-TUNING AND MASKED LANGUAGE MODELS

Figure 11.10 Sequence classiﬁcation with a bidirectional transformer encoder. The output vector for the
[CLS] token serves as input to a simple classiﬁer.

Fine-tuning an application for one of these tasks proceeds just as with pretrain-
ing using the NSP objective. During ﬁne-tuning, pairs of labeled sentences from the
supervised training data are presented to the model, and run through all the layers of
the model to produce the z outputs for each input token. As with sequence classiﬁ-
cation, the output vector associated with the prepended [CLS] token represents the
model’s view of the input pair. And as with NSP training, the two inputs are sepa-
rated by the [SEP] token. To perform classiﬁcation, the [CLS] vector is multiplied
by a set of learning classiﬁcation weights and passed through a softmax to generate
label predictions, which are then used to update the weights.

As an example, let’s consider an entailment classiﬁcation task with the Multi-
Genre Natural Language Inference (MultiNLI) dataset (Williams et al., 2018). In
the task of natural language inference or NLI, also called recognizing textual
entailment, a model is presented with a pair of sentences and must classify the re-
lationship between their meanings. For example in the MultiNLI corpus, pairs of
sentences are given one of 3 labels: entails, contradicts and neutral. These labels
describe a relationship between the meaning of the ﬁrst sentence (the premise) and
the meaning of the second sentence (the hypothesis). Here are representative exam-
ples of each class from the corpus:

natural
language
inference

• Neutral

a: Jon walked back to the town to the smithy.
b: Jon traveled back to his hometown.

• Contradicts

a: Tourist Information ofﬁces can be very helpful.
b: Tourist Information ofﬁces are never of any help.

• Entails

a: I’m confused.
b: Not all of it is very clear to me.

A relationship of contradicts means that the premise contradicts the hypothesis; en-
tails means that the premise entails the hypothesis; neutral means that neither is
necessarily true. The meaning of these labels is looser than strict logical entailment

[CLS]entirelypredictableandlacksenergyWord +Positional EmbeddingsBidirectional Transformer EncoderzCLS11.4

• FINE-TUNING LANGUAGE MODELS

257

or contradiction indicating that a typical human reading the sentences would most
likely interpret the meanings in this way.

To ﬁne-tune a classiﬁer for the MultiNLI task, we pass the premise/hypothesis
pairs through a bidirectional encoder as described above and use the output vector
for the [CLS] token as the input to the classiﬁcation head. As with ordinary sequence
classiﬁcation, this head provides the input to a three-way classiﬁer that can be trained
on the MultiNLI training corpus.

11.4.3 Sequence Labelling

Sequence labelling tasks, such as part-of-speech tagging or BIO-based named entity
recognition, follow the same basic classiﬁcation approach. Here, the ﬁnal output
vector corresponding to each input token is passed to a classiﬁer that produces a
softmax distribution over the possible set of tags. Again, assuming a simple classiﬁer
consisting of a single feedforward layer followed by a softmax, the set of weights
dh, where k is the number of
to be learned for this additional layer is WK
×
possible tags for the task. As with RNNs, a greedy approach, where the argmax tag
for each token is taken as a likely answer, can be used to generate the ﬁnal output
tag sequence. Fig. 11.11 illustrates an example of this approach.

Rk

∈

yi = softmax(WKzi)
ti = argmaxk(yi)

(11.14)

(11.15)

Alternatively, the distribution over labels provided by the softmax for each input
token can be passed to a conditional random ﬁeld (CRF) layer which can take global
tag-level transitions into account.

Figure 11.11 Sequence labeling for part-of-speech tagging with a bidirectional transformer encoder. The
output vector for each input token is passed to a simple k-way classiﬁer.

A complication with this approach arises from the use of subword tokenization
such as WordPiece, SentencePiece Unigram LM or Byte Pair Encoding. Supervised
training data for tasks like named entity recognition (NER) is typically in the form
of BIO tags associated with text segmented at the word level. For example the
following sentence containing two named entities:

[CLS]JanetwillbackthebillEmbeddingLayerBidirectional Transformer EncoderNNPMDVBDTNN258 CHAPTER 11

• FINE-TUNING AND MASKED LANGUAGE MODELS

[LOC Mt. Sanitas ] is in [LOC Sunshine Canyon] .

would have the following set of per-word BIO tags.

(11.16) Mt.

B-LOC

Sanitas
I-LOC

is
O

in
O

Sunshine
B-LOC

Canyon
I-LOC

.
O

Unfortunately, the WordPiece tokenization for this sentence yields the following
sequence of tokens which doesn’t align directly with BIO tags in the ground truth
annotation:

’Mt’, ’.’, ’San’, ’##itas’, ’is’, ’in’, ’Sunshine’, ’Canyon’ ’.’

To deal with this misalignment, we need a way to assign BIO tags to subword
tokens during training and a corresponding way to recover word-level tags from
subwords during decoding. For training, we can just assign the gold-standard tag
associated with each word to all of the subword tokens derived from it.

For decoding, the simplest approach is to use the argmax BIO tag associated with
the ﬁrst subword token of a word. Thus, in our example, the BIO tag assigned to
“Mt” would be assigned to “Mt.” and the tag assigned to “San” would be assigned
to “Sanitas”, effectively ignoring the information in the tags assigned to “.” and
“##itas”. More complex approaches combine the distribution of tag probabilities
across the subwords in an attempt to ﬁnd an optimal word-level tag.

11.5 Advanced: Span-based Masking

For many NLP applications, the natural unit of interest may be larger than a single
word (or token). Question answering, syntactic parsing, coreference and semantic
role labeling applications all involve the identiﬁcation and classiﬁcation of longer
phrases. This suggests that a span-oriented masked learning objective might provide
improved performance on such tasks.

11.5.1 Masking Spans

A span is a contiguous sequence of one or more words selected from a training text,
prior to subword tokenization. In span-based masking, a set of randomly selected
spans from a training sequence are chosen. In the SpanBERT work that originated
this technique (Joshi et al., 2020), a span length is ﬁrst chosen by sampling from a
geometric distribution that is biased towards shorter spans and with an upper bound
of 10. Given this span length, a starting location consistent with the desired span
length and the length of the input is sampled uniformly.

Once a span is chosen for masking, all the tokens within the span are substituted
according to the same regime used in BERT: 80% of the time the span elements are
substituted with the [MASK] token, 10% of the time they are replaced by randomly
sampled tokens from the vocabulary, and 10% of the time they are left as is. Note
that this substitution process is done at the span level—all the tokens in a given span
are substituted using the same method. As with BERT, the total token substitution
is limited to 15% of the training sequence input. Having selected and masked the
training span, the input is passed through the standard transformer architecture to
generate contextualized representations of the input tokens.

11.5

• ADVANCED: SPAN-BASED MASKING

259

Downstream span-based applications rely on span representations derived from
the tokens within the span, as well as the start and end points, or the boundaries, of
a span. Representations for these boundaries are typically derived from the ﬁrst and
last tokens of a span, the tokens immediately preceding and following the span, or
some combination of them. The SpanBERT learning objective augments the MLM
objective with a boundary oriented component called the Span Boundary Objective
(SBO). The SBO relies on a model’s ability to predict the tokens within a masked
span from the tokens immediately preceding and following the span.

Let the sequence of output from the transformer encoder for the n input tokens
s1, . . . , xn be z1, . . . , zn. A token xi in a masked span of tokens (xs, . . . , xe), i.e., starting
with token xs and ending with token xe, is represented by concatenating 3 embed-
dings. The ﬁrst two are the embeddings of two external boundary tokens xs
1 and
xe+1, i.e., the token preceding xs, the token following xe. The third embedding that
is concatenated is the relative position embedding of the target token pi
s+1. The
−
position embeddings p1, p2, . . . represent relative positions of the tokens with respect
to the left boundary token xs

1.

−

−

LSBO(xi) =

L(x) = LMLM(x) + LSBO(x)
log P(xi|
xs
This probability for token xi is formed by passing the concatenation of these embed-
dings through a 2-layer feedforward network to get the probability distribution over
the whole vocabulary at i:

1, xe+1, pi

(11.17)

(11.18)

s+1)

−

−

−

si = FFN([zs
yi = softmax(WV si)

1; ze+1; pi
−

s+1])

−

(11.19)

(11.20)

We then use si, the output of the vector representation of token i in the span, to pre-
dict the token xi by reshaping it and passing it through a softmax to get a probability
distribution yi over the vocabulary, and select from it the probability for input token
xi.
The ﬁnal loss is the sum of the BERT MLM loss and the SBO loss.

Fig. 11.12 illustrates this with one of our earlier examples. Here the span se-
lected is and thanks for which spans from position 3 to 5. The total loss associated
with the masked token thanks is the sum of the cross-entropy loss generated from
the prediction of thanks from the output z4, plus the cross-entropy loss from the
prediction of thanks from the output vectors from the left external boundary z2, the
right external boundary z6, and the embedding for relative position 2 in the span.

11.5.2 Fine-tuning for Span-Based Applications

Span-oriented applications operate in a middle ground between sequence level and
token level tasks. That is, in span-oriented applications the focus is on generating
and operating with representations of contiguous sequences of tokens. Typical op-
erations include identifying spans of interest, classifying spans according to some
labeling scheme, and determining relations among discovered spans. Applications
include named entity recognition, question answering, syntactic parsing, semantic
role labeling and coreference resolution.

Formally, given an input sequence x consisting of T tokens, (x1, x2, ..., xT ), a
span is a contiguous sequence of tokens with start i and end j such that 1 <= i <=
j <= T . This formulation results in a total set of spans equal to T (T +1)
. For practical

2

260 CHAPTER 11

• FINE-TUNING AND MASKED LANGUAGE MODELS

Figure 11.12 Span-based language model training. In this example, a span of length 3 is selected for training
and all of the words in the span are masked. The ﬁgure illustrates the loss computed for word thanks; the loss
for the entire span is the sum of the loss for the three words in the span.

purposes, span-based models often impose an application-speciﬁc length limit L, so
i < L. In the following, we’ll refer to
the legal spans are limited to those where j
−
the enumerated set of legal spans in x as S(x).

The ﬁrst step in ﬁne-tuning a pretrained language model for a span-based ap-
plication is using the contextualized input embeddings from the model to generate
representations for all the spans in the input. Most schemes for representing spans
make use of two primary components: representations of the span boundaries and
summary representations of the contents of each span. To compute a uniﬁed span
representation, we concatenate the boundary representations with the summary rep-
resentation.

In the simplest possible approach, we can use the contextual embeddings of
the start and end tokens of a span as the boundaries, and the average of the output
embeddings within the span as the summary representation.

gi j =

1
i) + 1

( j

−

spanRepi j = [zi; z j; gi, j]

j

zk

(cid:88)k=i

(11.21)

(11.22)

A weakness of this approach is that it doesn’t distinguish the use of a word’s em-
bedding as the beginning of a span from its use as the end of one. Therefore, more
elaborate schemes for representing the span boundaries involve learned representa-
tions for start and end points through the use of two distinct feedforward networks:

si = FFNstart (zi)
e j = FFNend(z j)
spanRepi j = [si; e j; gi, j]

(11.23)

(11.24)

(11.25)

Solong[mask][mask][mask] allﬁshEmbeddingLayerSolongandthanksfor all ﬁshtheBidirectional Transformer EncoderFFN<latexit sha1_base64="TLLYS42oN5DcSo8OZKsu5vvui9Q=">AAAB6nicbVDLSsNAFL2pr1pfVZduBovgqiSlqMuiG5cV7APaUCbTSTt0kokzN0IN/Qk3Im4U/Bh/wb8xabNp64GBwzlnuPdcL5LCoG3/WoWNza3tneJuaW//4PCofHzSNirWjLeYkkp3PWq4FCFvoUDJu5HmNPAk73iTu8zvPHNthAofcRpxN6CjUPiCUUwltx9QHHt+8jIb1EqDcsWu2nOQdeLkpAI5moPyT3+oWBzwEJmkxvQcO0I3oRoFk3xW6seGR5RN6Ign81Vn5CKVhsRXOn0hkrm6lKOBMdPAS5PZambVy8T/vF6M/o2biDCKkYdsMciPJUFFst5kKDRnKKcpoUyLdEPCxlRThul1surOatF10q5Vnatq/aFeadzmRyjCGZzDJThwDQ24hya0gMETvMEnfFnSerXerY9FtGDlf05hCdb3HzOIjYs=</latexit>z2<latexit sha1_base64="gEjGR4IWPa5ooEJ4YmtAT6IDm9Q=">AAAB7nicbVDLSsNAFL2pr1ofjbp0M1gEVyWRUl0W3bisYB/QljCZTtqhkwczN0IN+Q03Im4U/BR/wb8xabNp64GBwzlnuPdcN5JCo2X9GqWt7Z3dvfJ+5eDw6Lhqnpx2dRgrxjsslKHqu1RzKQLeQYGS9yPFqe9K3nNn97nfe+ZKizB4wnnERz6dBMITjGImOWZ16FOcul7y4iTNNK04Zs2qWwuQTWIXpAYF2o75MxyHLPZ5gExSrQe2FeEooQoFkzytDGPNI8pmdMKTxbopucykMfFClb0AyUJdyVFf67nvZsl8Ob3u5eJ/3iBG73aUiCCKkQdsOciLJcGQ5N3JWCjOUM4zQpkS2YaETamiDLML5dXt9aKbpHtdt5v1xmOj1rorjlCGc7iAK7DhBlrwAG3oAIMY3uATvozIeDXejY9ltGQUf85gBcb3H3Mijsw=</latexit>z6+Span-based loss<latexit sha1_base64="0o0Mg1m8L/B4YdJ0Zefw5M+RdYc=">AAAB6nicbVDLSsNAFL2pr1pfVZduBovgqiSlqMuiG5cV7APaUCbTSTt0MklnboQS+hNuRNwo+DH+gn9j0mbT1gMDh3POcO+5XiSFQdv+tQpb2zu7e8X90sHh0fFJ+fSsbcJYM95ioQx116OGS6F4CwVK3o00p4EnecebPGR+54VrI0L1jLOIuwEdKeELRjGV3H5Acez5STQf1EqDcsWu2guQTeLkpAI5moPyT38YsjjgCpmkxvQcO0I3oRoFk3xe6seGR5RN6Igni1Xn5CqVhsQPdfoUkoW6kqOBMbPAS5PZambdy8T/vF6M/p2bCBXFyBVbDvJjSTAkWW8yFJozlLOUUKZFuiFhY6opw/Q6WXVnvegmadeqzk21/lSvNO7zIxThAi7hGhy4hQY8QhNawGAKb/AJX5a0Xq1362MZLVj5n3NYgfX9ByScjYE=</latexit>p2z1z2z3z4z5z6z7z8andfor p1p3p2thankstheMLM lossSBO loss11.5

• ADVANCED: SPAN-BASED MASKING

261

Similarly, a simple average of the vectors in a span is unlikely to be an optimal
representation of a span since it treats all of a span’s embeddings as equally impor-
tant. For many applications, a more useful representation would be centered around
the head of the phrase corresponding to the span. One method for getting at such in-
formation in the absence of a syntactic parse is to use a standard self-attention layer
to generate a span representation.

gi j = SelfAttention(zi: j)

(11.26)

Now, given span representations g for each span in S(x), classiﬁers can be ﬁne-
tuned to generate application-speciﬁc scores for various span-oriented tasks: binary
span identiﬁcation (is this a legitimate span of interest or not?), span classiﬁcation
(what kind of span is this?), and span relation classiﬁcation (how are these two spans
related?).

To ground this discussion, let’s return to named entity recognition (NER). Given
a scheme for representing spans and a set of named entity types, a span-based ap-
proach to NER is a straightforward classiﬁcation problem where each span in an
input is assigned a class label. More formally, given an input sequence x1, . . . , xn,
we want to assign a label y, from the set of valid NER labels, to each of the spans in
S(x). Since most of the spans in a given input will not be named entities we’ll add
the label NULL to the set of types in Y .

yi j = softmax(FFN(spanRepi j)

(11.27)

Figure 11.13 A span-oriented approach to named entity classiﬁcation. The ﬁgure only illustrates the compu-
tation for 2 spans corresponding to ground truth named entities. In reality, the network scores all of the T (T +1)
spans in the text. That is, all the unigrams, bigrams, trigrams, etc. up to the length limit.

2

With this approach, ﬁne-tuning entails using supervised training data to learn
the parameters of the ﬁnal classiﬁer, as well as the weights used to generate the
boundary representations, and the weights in the self-attention layer that generates
the span content representation. During training, the model’s predictions for all
spans are compared to their gold-standard labels and cross-entropy loss is used to
drive the training.

During decoding, each span is scored using a softmax over the ﬁnal classiﬁer
output to generate a distribution over the possible labels, with the argmax score for
each span taken as the correct answer. Fig. 11.13 illustrates this approach with an

ContextualizedEmbeddings (h)Bidirectional Transformer Encoder JaneVillanuevaofUnitedAirlinesHoldingdiscussed…Span summary Span representation ClassiﬁcationScoresFFNNFFNN…PERORGSoftmaxSelfAttnSelfAttn262 CHAPTER 11

• FINE-TUNING AND MASKED LANGUAGE MODELS

example. A variation on this scheme designed to improve precision adds a calibrated
threshold to the labeling of a span as anything other than NULL.

There are two signiﬁcant advantages to a span-based approach to NER over a
BIO-based per-word labeling approach. The ﬁrst advantage is that BIO-based ap-
proaches are prone to a labeling mis-match problem. That is, every label in a longer
named entity must be correct for an output to be judged correct. Returning to the
example in Fig. 11.13, the following labeling would be judged entirely wrong due to
the incorrect label on the ﬁrst item. Span-based approaches only have to make one
classiﬁcation for each span.

(11.28) Jane

B-PER

Villanueva
I-PER

of
O

United
I-ORG

Airlines
I-ORG

Holding
I-ORG

discussed
O

...

The second advantage to span-based approaches is that they naturally accommo-
date embedded named entities. For example, in this example both United Airlines
and United Airlines Holding are legitimate named entities. The BIO approach has
no way of encoding this embedded structure. But the span-based approach can nat-
urally label both since the spans are labeled separately.

11.6 Summary

This chapter has introduced the topic of transfer learning from pretrained language
models. Here’s a summary of the main points that we covered:

• Bidirectional encoders can be used to generate contextualized representations

of input embeddings using the entire input context.

• Pretrained language models based on bidirectional encoders can be learned
using a masked language model objective where a model is trained to guess
the missing information from an input.

• Pretrained language models can be ﬁne-tuned for speciﬁc applications by
adding lightweight classiﬁer layers on top of the outputs of the pretrained
model.

Bibliographical and Historical Notes

CHAPTER

12 Prompting, In-Context Learn-

ing, and Instruct Tuning

Placeholder

263

Part II

NLP APPLICATIONS

In this second part of the book we introduce fundamental NLP applications:
machine translation, information retrieval, question answering, dialogue systems,
and speech recognition.

CHAPTER

13 Machine Translation

“I want to talk the dialect of your people. It’s no use of talking unless
people understand what you say.”

Zora Neale Hurston, Moses, Man of the Mountain 1939, p. 121

machine
translation
MT

This chapter introduces machine translation (MT), the use of computers to trans-
late from one language to another.

Of course translation, in its full generality, such as the translation of literature, or
poetry, is a difﬁcult, fascinating, and intensely human endeavor, as rich as any other
area of human creativity.

Machine translation in its present form therefore focuses on a number of very
practical tasks. Perhaps the most common current use of machine translation is
for information access. We might want to translate some instructions on the web,
perhaps the recipe for a favorite dish, or the steps for putting together some furniture.
Or we might want to read an article in a newspaper, or get information from an
online resource like Wikipedia or a government webpage in some other language.
MT for information
access
is probably
one of the most com-
mon uses of NLP
technology, and Google
Translate alone (shown above) translates hundreds of billions of words a day be-
tween over 100 languages. Improvements in machine translation can thus help re-
duce what is often called the digital divide in information access: the fact that much
more information is available in English and other languages spoken in wealthy
countries. Web searches in English return much more information than searches in
other languages, and online resources like Wikipedia are much larger in English and
other higher-resourced languages. High-quality translation can help provide infor-
mation to speakers of lower-resourced languages.

Another common use of machine translation is to aid human translators. MT sys-
tems are routinely used to produce a draft translation that is ﬁxed up in a post-editing
phase by a human translator. This task is often called computer-aided translation
or CAT. CAT is commonly used as part of localization: the task of adapting content
or a product to a particular language community.

Finally, a more recent application of MT is to in-the-moment human commu-
nication needs. This includes incremental translation, translating speech on-the-ﬂy
before the entire sentence is complete, as is commonly used in simultaneous inter-
pretation. Image-centric translation can be used for example to use OCR of the text
on a phone camera image as input to an MT system to translate menus or street signs.
The standard algorithm for MT is the encoder-decoder network, an architecture
that we introduced in Chapter 9 for RNNs. Recall that encoder-decoder or sequence-
to-sequence models are used for tasks in which we need to map an input sequence to
an output sequence that is a complex function of the entire input sequence. Indeed,

information
access

digital divide

post-editing

CAT

localization

encoder-
decoder

268 CHAPTER 13

• MACHINE TRANSLATION

in machine translation, the words of the target language don’t necessarily agree with
the words of the source language in number or order. Consider translating the fol-
lowing made-up English sentence into Japanese.

(13.1) English: He wrote a letter to a friend

Japanese:

tomodachi
friend

ni
to

tegami-o
letter

kaita
wrote

Note that the elements of the sentences are in very different places in the different
languages. In English, the verb is in the middle of the sentence, while in Japanese,
the verb kaita comes at the end. The Japanese sentence doesn’t require the pronoun
he, while English does.

Such differences between languages can be quite complex. In the following ac-
tual sentence from the United Nations, notice the many changes between the Chinese
sentence (we’ve given in red a word-by-word gloss of the Chinese characters) and
its English equivalent produced by human translators.
(13.2) 大会/General Assembly 在/on 1982年/1982 12月/December 10日/10 通过
了/adopted 第37号/37th 决议/resolution ，核准了/approved 第二
次/second 探索/exploration 及/and 和平peaceful
colorblue利用/using 外
}
层空间/outer space 会议/conference 的/of 各项/various 建议/suggestions
。

On 10 December 1982 , the General Assembly adopted resolution 37 in
which it endorsed the recommendations of the Second United Nations
Conference on the Exploration and Peaceful Uses of Outer Space .

Note the many ways the English and Chinese differ. For example the order-
ing differs in major ways; the Chinese order of the noun phrase is “peaceful using
outer space conference of suggestions” while the English has “suggestions of the ...
conference on peaceful use of outer space”). And the order differs in minor ways
(the date is ordered differently). English requires the in many places that Chinese
doesn’t, and adds some details (like “in which” and “it”) that aren’t necessary in
Chinese. Chinese doesn’t grammatically mark plurality on nouns (unlike English,
which has the “-s” in “recommendations”), and so the Chinese must use the modi-
ﬁer 各项/various to make it clear that there is not just one recommendation. English
capitalizes some words but not others. Encoder-decoder networks are very success-
ful at handling these sorts of complicated cases of sequence mappings.

We’ll begin in the next section by considering the linguistic background about
how languages vary, and the implications this variance has for the task of MT. Then
we’ll sketch out the standard algorithm, give details about things like input tokeniza-
tion and creating training corpora of parallel sentences, give some more low-level
details about the encoder-decoder network, and ﬁnally discuss how MT is evaluated,
introducing the simple chrF metric.

13.1 Language Divergences and Typology

universal

There are about 7,000 languages in the world. Some aspects of human language
seem to be universal, holding true for every one of these languages, or are statistical
universals, holding true for most of these languages. Many universals arise from the
functional role of language as a communicative system by humans. Every language,
for example, seems to have words for referring to people, for talking about eating and

13.1

• LANGUAGE DIVERGENCES AND TYPOLOGY

269

drinking, for being polite or not. There are also structural linguistic universals; for
example, every language seems to have nouns and verbs (Chapter 8), has ways to ask
questions, or issue commands, has linguistic mechanisms for indicating agreement
or disagreement.

Yet languages also differ in many ways (as has been pointed out since ancient
times; see Fig. 13.1). Understanding what causes such translation divergences
(Dorr, 1994) can help us build better MT models. We often distinguish the idiosyn-
cratic and lexical differences that must be dealt with one by one (the word for “dog”
differs wildly from language to language), from systematic differences that we can
model in a general way (many languages put the verb before the grammatical ob-
ject; others put the verb after the grammatical object). The study of these systematic
cross-linguistic similarities and differences is called linguistic typology. This sec-
tion sketches some typological facts that impact machine translation; the interested
reader should also look into WALS, the World Atlas of Language Structures, which
gives many typological facts about languages (Dryer and Haspelmath, 2013).

translation
divergence

typology

Figure 13.1 The Tower of Babel, Pieter Bruegel 1563. Wikimedia Commons, from the
Kunsthistorisches Museum, Vienna.

13.1.1 Word Order Typology

SVO

SOV

VSO

As we hinted at in our example above comparing English and Japanese, languages
differ in the basic word order of verbs, subjects, and objects in simple declara-
tive clauses. German, French, English, and Mandarin, for example, are all SVO
(Subject-Verb-Object) languages, meaning that the verb tends to come between
the subject and object. Hindi and Japanese, by contrast, are SOV languages, mean-
ing that the verb tends to come at the end of basic clauses, and Irish and Arabic are
VSO languages. Two languages that share their basic word order type often have
other similarities. For example, VO languages generally have prepositions, whereas
OV languages generally have postpositions.

270 CHAPTER 13

• MACHINE TRANSLATION

Let’s look in more detail at the example we saw above. In this SVO English
sentence, the verb wrote is followed by its object a letter and the prepositional phrase
to a friend, in which the preposition to is followed by its argument a friend. Arabic,
with a VSO order, also has the verb before the object and prepositions. By contrast,
in the Japanese example that follows, each of these orderings is reversed; the verb is
preceded by its arguments, and the postposition follows its argument.

(13.3) English: He wrote a letter to a friend
kaita
wrote

Japanese: tomodachi

friend

Arabic: katabt
wrote

ris¯ala
letter

ni
to
li
to

tegami-o
letter
˙sadq
friend

Other kinds of ordering preferences vary idiosyncratically from language to lan-
guage. In some SVO languages (like English and Mandarin) adjectives tend to ap-
pear before nouns, while in others languages like Spanish and Modern Hebrew, ad-
jectives appear after the noun:

(13.4) Spanish bruja verde

English green witch

(a)

(b)

Figure 13.2 Examples of other word order differences: (a) In German, adverbs occur in
initial position that in English are more natural later, and tensed verbs occur in second posi-
tion. (b) In Mandarin, preposition phrases expressing goals often occur pre-verbally, unlike
in English.

Fig. 13.2 shows examples of other word order differences. All of these word
order differences between languages can cause problems for translation, requiring
the system to do huge structural reorderings as it generates the output.

13.1.2 Lexical Divergences

Of course we also need to translate the individual words from one language to an-
other. For any translation, the appropriate word can vary depending on the context.
The English source-language word bass, for example, can appear in Spanish as the
ﬁsh lubina or the musical instrument bajo. German uses two distinct words for what
in English would be called a wall: Wand for walls inside a building, and Mauer for
walls outside a building. Where English uses the word brother for any male sib-
ling, Chinese and many other languages have distinct words for older brother and
younger brother (Mandarin gege and didi, respectively). In all these cases, trans-
lating bass, wall, or brother from English would require a kind of specialization,
disambiguating the different uses of a word. For this reason the ﬁelds of MT and
Word Sense Disambiguation (Chapter 23) are closely linked.

Sometimes one language places more grammatical constraints on word choice
than another. We saw above that English marks nouns for whether they are singular
or plural. Mandarin doesn’t. Or French and Spanish, for example, mark grammat-
ical gender on adjectives, so an English translation into French requires specifying
adjective gender.

13.1

• LANGUAGE DIVERGENCES AND TYPOLOGY

271

The way that languages differ in lexically dividing up conceptual space may be
more complex than this one-to-many translation problem, leading to many-to-many
mappings. For example, Fig. 13.3 summarizes some of the complexities discussed
by Hutchins and Somers (1992) in translating English leg, foot, and paw, to French.
For example, when leg is used about an animal it’s translated as French jambe; but
about the leg of a journey, as French etape; if the leg is of a chair, we use French
pied.

Further, one language may have a lexical gap, where no word or phrase, short
of an explanatory footnote, can express the exact meaning of a word in the other
language. For example, English does not have a word that corresponds neatly to
Mandarin xi`ao or Japanese oyak¯ok¯o (in English one has to make do with awkward
phrases like ﬁlial piety or loving child, or good son/daughter for both).

lexical gap

Figure 13.3 The complex overlap between English leg, foot, etc., and various French trans-
lations as discussed by Hutchins and Somers (1992).

Finally, languages differ systematically in how the conceptual properties of an
event are mapped onto speciﬁc words. Talmy (1985, 1991) noted that languages
can be characterized by whether direction of motion and manner of motion are
marked on the verb or on the “satellites”: particles, prepositional phrases, or ad-
verbial phrases. For example, a bottle ﬂoating out of a cave would be described in
English with the direction marked on the particle out, while in Spanish the direction
would be marked on the verb:

(13.5) English: The bottle ﬂoated out.

Spanish: La
The

botella
bottle

sali´o
exited

ﬂotando.
ﬂoating.

verb-framed

satellite-framed

Verb-framed languages mark the direction of motion on the verb (leaving the
satellites to mark the manner of motion), like Spanish acercarse ‘approach’, al-
canzar ‘reach’, entrar ‘enter’, salir ‘exit’. Satellite-framed languages mark the
direction of motion on the satellite (leaving the verb to mark the manner of motion),
like English crawl out, ﬂoat off, jump down, run after. Languages like Japanese,
Tamil, and the many languages in the Romance, Semitic, and Mayan languages fam-
ilies, are verb-framed; Chinese as well as non-Romance Indo-European languages
like English, Swedish, Russian, Hindi, and Farsi are satellite framed (Talmy 1991,
Slobin 1996).

13.1.3 Morphological Typology

isolating

polysynthetic

Morphologically, languages are often characterized along two dimensions of vari-
ation. The ﬁrst is the number of morphemes per word, ranging from isolating
languages like Vietnamese and Cantonese, in which each word generally has one
morpheme, to polysynthetic languages like Siberian Yupik (“Eskimo”), in which a
single word may have very many morphemes, corresponding to a whole sentence in

etapepattejambepied   paw        footlegJOURNEYANIMALHUMANCHAIRANIMALBIRDHUMAN272 CHAPTER 13

• MACHINE TRANSLATION

agglutinative

fusion

English. The second dimension is the degree to which morphemes are segmentable,
ranging from agglutinative languages like Turkish, in which morphemes have rel-
atively clean boundaries, to fusion languages like Russian, in which a single afﬁx
may conﬂate multiple morphemes, like -om in the word stolom (table-SG-INSTR-
DECL1), which fuses the distinct morphological categories instrumental, singular,
and ﬁrst declension.

Translating between languages with rich morphology requires dealing with struc-
ture below the word level, and for this reason modern systems generally use subword
models like the wordpiece or BPE models of Section 13.2.1.

13.1.4 Referential density

Finally, languages vary along a typological dimension related to the things they tend
to omit. Some languages, like English, require that we use an explicit pronoun when
talking about a referent that is given in the discourse. In other languages, however,
we can sometimes omit pronouns altogether, as the following example from Spanish
shows1:

(13.6) [El jefe]i dio con un libro. /0i Mostr´o su hallazgo a un descifrador ambulante.
[The boss] came upon a book. [He] showed his ﬁnd to a wandering decoder.

Languages that can omit pronouns are called pro-drop languages. Even among
the pro-drop languages, there are marked differences in frequencies of omission.
Japanese and Chinese, for example, tend to omit far more than does Spanish. This
dimension of variation across languages is called the dimension of referential den-
sity. We say that languages that tend to use more pronouns are more referentially
dense than those that use more zeros. Referentially sparse languages, like Chinese or
Japanese, that require the hearer to do more inferential work to recover antecedents
are also called cold languages. Languages that are more explicit and make it easier
for the hearer are called hot languages. The terms hot and cold are borrowed from
Marshall McLuhan’s 1964 distinction between hot media like movies, which ﬁll in
many details for the viewer, versus cold media like comics, which require the reader
to do more inferential work to ﬁll out the representation (Bickel, 2003).

Translating from languages with extensive pro-drop, like Chinese or Japanese, to
non-pro-drop languages like English can be difﬁcult since the model must somehow
identify each zero and recover who or what is being talked about in order to insert
the proper pronoun.

pro-drop

referential
density

cold language

hot language

13.2 Machine Translation using Encoder-Decoder

The standard architecture for MT is the encoder-decoder transformer or sequence-
to-sequence model, an architecture we saw for RNNs in Chapter 9. We’ll see the
details of how to apply this architecture to transformers in Section 13.3, but ﬁrst let’s
talk about the overall task.

Most machine translation tasks make the simpliﬁcation that we can translate each
sentence independently, so we’ll just consider individual sentences for now. Given
a sentence in a source language, the MT task is then to generate a corresponding
sentence in a target language. For example, an MT system is given an English
sentence like

1 Here we use the /0-notation; we’ll introduce this and discuss this issue further in Chapter 26

13.2

• MACHINE TRANSLATION USING ENCODER-DECODER

273

The green witch arrived

and must translate it into the Spanish sentence:

Lleg´o la bruja verde

MT uses supervised machine learning: at training time the system is given a
large set of parallel sentences (each sentence in a source language matched with
a sentence in the target language), and learns to map source sentences into target
sentences. In practice, rather than using words (as in the example above), we split
the sentences into a sequence of subword tokens (tokens can be words, or subwords,
or individual characters). The systems are then trained to maximize the probability
of the sequence of tokens in the target language y1, ..., ym given the sequence of
tokens in the source language x1, ..., xn:

P(y1, . . . , ym|

x1, . . . , xn)

(13.7)

Rather than use the input tokens directly, the encoder-decoder architecture con-
sists of two components, an encoder and a decoder. The encoder takes the input
words x = [x1, . . . , xn] and produces an intermediate context h. At decoding time, the
system takes h and, word by word, generates the output y:

h = encoder(x)

yi+1 = decoder(h, y1, . . . , yi))

[1, . . . , m]

i
∀

∈

(13.8)

(13.9)

In the next two sections we’ll talk about subword tokenization, and then how to get
parallel corpora for training, and then we’ll introduce the details of the encoder-
decoder architecture.

13.2.1 Tokenization

Machine translation systems use a vocabulary that is ﬁxed in advance, and rather
than using space-separated words, this vocabulary is generated with subword to-
kenization algorithms, like the BPE algorithm sketched in Chapter 2. A shared
vocabulary is used for the source and target languages, which makes it easy to copy
tokens (like names) from source to target. Using subword tokenization with tokens
shared between languages makes it natural to translate between languages like En-
glish or Hindi that use spaces to separate words, and languages like Chinese or Thai
that don’t.

We build the vocabulary by running a subword tokenization algorithm on a cor-

pus that contains both source and target language data.

Rather than the simple BPE algorithm from Fig. 2.13, modern systems often use
more powerful tokenization algorithms. Some systems (like BERT) use a variant of
BPE called the wordpiece algorithm, which instead of choosing the most frequent
set of tokens to merge, chooses merges based on which one most increases the lan-
guage model probability of the tokenization. Wordpieces use a special symbol at the
beginning of each token; here’s a resulting tokenization from the Google MT system
(Wu et al., 2016):

words:
wordpieces:

Jet makers feud over seat width with big orders at stake
J et makers fe ud over seat width with big orders at stake

The wordpiece algorithm is given a training corpus and a desired vocabulary size

V, and proceeds as follows:

wordpiece

274 CHAPTER 13

• MACHINE TRANSLATION

unigram

SentencePiece

1. Initialize the wordpiece lexicon with characters (for example a subset of Uni-
code characters, collapsing all the remaining characters to a special unknown
character token).

2. Repeat until there are V wordpieces:

(a) Train an n-gram language model on the training corpus, using the current

set of wordpieces.

(b) Consider the set of possible new wordpieces made by concatenating two
wordpieces from the current lexicon. Choose the one new wordpiece that
most increases the language model probability of the training corpus.

Recall that with BPE we had to specify the number of merges to perform; in
wordpiece, by contrast, we specify the total vocabulary, which is a more intuitive
parameter. A vocabulary of 8K to 32K word pieces is commonly used.

An even more commonly used tokenization algorithm is (somewhat ambigu-
ously) called the unigram algorithm (Kudo, 2018) or sometimes the SentencePiece
algorithm, and is used in systems like ALBERT (Lan et al., 2020) and T5 (Raf-
fel et al., 2020). (Because unigram is the default tokenization algorithm used in a
library called SentencePiece that adds a useful wrapper around tokenization algo-
rithms (Kudo and Richardson, 2018b), authors often say they are using Sentence-
Piece tokenization but really mean they are using the unigram algorithm)).

In unigram tokenization, instead of building up a vocabulary by merging tokens,
we start with a huge vocabulary of every individual unicode character plus all fre-
quent sequences of characters (including all space-separated words, for languages
with spaces), and iteratively remove some tokens to get to a desired ﬁnal vocabulary
size. The algorithm is complex (involving sufﬁx-trees for efﬁciently storing many
tokens, and the EM algorithm for iteratively assigning probabilities to tokens), so we
don’t give it here, but see Kudo (2018) and Kudo and Richardson (2018b). Roughly
speaking the algorithm proceeds iteratively by estimating the probability of each
token, tokenizing the input data using various tokenizations, then removing a per-
centage of tokens that don’t occur in high-probability tokenization, and then iterates
until the vocabulary has been reduced down to the desired number of tokens.

Why does unigram tokenization work better than BPE? BPE tends to creates lots
of very small non-meaningful tokens (because BPE can only create larger words or
morphemes by merging characters one at a time), and it also tends to merge very
common tokens, like the sufﬁx ed, onto their neighbors. We can see from these
examples from Bostrom and Durrett (2020) that unigram tends to produce tokens
that are more semantically meaningful:

Original: corrupted
cor rupted
BPE:
Unigram: corrupt ed

Original: Completely preposterous suggestions
Comple t ely prep ost erous suggest ions
BPE:
Unigram: Complete ly pre post er ous suggestion s

parallel corpus

Europarl

13.2.2 Creating the Training data

Machine translation models are trained on a parallel corpus, sometimes called a
bitext, a text that appears in two (or more) languages. Large numbers of paral-
lel corpora are available. Some are governmental; the Europarl corpus (Koehn,
2005), extracted from the proceedings of the European Parliament, contains between
400,000 and 2 million sentences each from 21 European languages. The United Na-
tions Parallel Corpus contains on the order of 10 million sentences in the six ofﬁcial
languages of the United Nations (Arabic, Chinese, English, French, Russian, Span-
ish) Ziemski et al. (2016). Other parallel corpora have been made from movie and

13.2

• MACHINE TRANSLATION USING ENCODER-DECODER

275

TV subtitles, like the OpenSubtitles corpus (Lison and Tiedemann, 2016), or from
general web text, like the ParaCrawl corpus of 223 million sentence pairs between
23 EU languages and English extracted from the CommonCrawl Ba˜n´on et al. (2020).

Sentence alignment

Standard training corpora for MT come as aligned pairs of sentences. When creat-
ing new corpora, for example for underresourced languages or new domains, these
sentence alignments must be created. Fig. 13.4 gives a sample hypothetical sentence
alignment.

Figure 13.4 A sample alignment between sentences in English and French, with sentences extracted from
Antoine de Saint-Exupery’s Le Petit Prince and a hypothetical translation. Sentence alignment takes sentences
e1, ..., en, and f1, ..., fn and ﬁnds minimal sets of sentences that are translations of each other, including single
sentence mappings like (e1,f1), (e4,f3), (e5,f4), (e6,f6) as well as 2-1 alignments (e2/e3,f2), (e7/e8,f7), and null
alignments (f5).

Given two documents that are translations of each other, we generally need two

steps to produce sentence alignments:

• a cost function that takes a span of source sentences and a span of target sen-
tences and returns a score measuring how likely these spans are to be transla-
tions.

• an alignment algorithm that takes these scores to ﬁnd a good alignment be-

tween the documents.

To score the similarity of sentences across languages, we need to make use of
a multilingual embedding space, in which sentences from different languages are
in the same embedding space (Artetxe and Schwenk, 2019). Given such a space,
cosine similarity of such embeddings provides a natural scoring function (Schwenk,
2018). Thompson and Koehn (2019) give the following cost function between two
sentences or spans x,y from the source and target documents respectively:

c(x, y) =

(1
−
S
s=1 1

−

cos(x, y))nSents(x) nSents(y)

cos(x, ys) +

S
s=1 1

cos(xs, y)

−

(13.10)

where nSents() gives the number of sentences (this biases the metric toward many
alignments of single sentences instead of aligning very large spans). The denom-
inator helps to normalize the similarities, and so x1, ..., xS, y1, ..., yS, are randomly
selected sentences sampled from the respective documents.

(cid:80)

(cid:80)

Usually dynamic programming is used as the alignment algorithm (Gale and
Church, 1993), in a simple extension of the minimum edit distance algorithm we
introduced in Chapter 2.

F1: -Bonjour, dit le petit prince.F2: -Bonjour, dit le marchand de pilules perfectionnées qui apaisent la soif.F3: On en avale une par semaine et l'on n'éprouve plus le besoin de boire.F4: -C’est une grosse économie de temps, dit le marchand.F5: Les experts ont fait des calculs.F6: On épargne cinquante-trois minutes par semaine.F7: “Moi, se dit le petit prince, si j'avais cinquante-trois minutes à dépenser, je marcherais tout doucement vers une fontaine..."E1: “Good morning," said the little prince.E2: “Good morning," said the merchant.E3: This was a merchant who sold pills that had been perfected to quench thirst.E4: You just swallow one pill a week and you won’t feel the need for anything to drink.E5: “They save a huge amount of time," said the merchant.E6: “Fifty−three minutes a week."E7: “If I had  fifty−three minutes to spend?" said the little prince to himself. E8: “I would take a stroll to a spring of fresh water”276 CHAPTER 13

• MACHINE TRANSLATION

Finally, it’s helpful to do some corpus cleanup by removing noisy sentence pairs.
This can involve handwritten rules to remove low-precision pairs (for example re-
moving sentences that are too long, too short, have different URLs, or even pairs
that are too similar, suggesting that they were copies rather than translations). Or
pairs can be ranked by their multilingual embedding cosine score and low-scoring
pairs discarded.

13.3 Details of the Encoder-Decoder Model

Figure 13.5 The encoder-decoder transformer architecture for machine translation. The encoder uses the
transformer blocks we saw in Chapter 9, while the decoder uses a more powerful block with an extra cross-
attention layer that can attend to all the encoder words. We’ll see this in more detail in the next section.

The standard architecture for MT is the encoder-decoder transformer. The encoder-

decoder architecture was introduced already for RNNs in Chapter 9, and the trans-
former version has the same idea. Fig. 13.5 shows the intuition of the architecture
at a high level You’ll see that the encoder-decoder architecture is made up of two
transformers: an encoder, which is the same as the basic transformers from Chap-
ter 10, and a decoder, which is augmented with a special new layer called the cross-
attention layer. The encoder takes the source language input words X = x1, ..., xT
and maps them to an output representation Henc = h1, ..., hT ; usually via N = 6
stacked encoder blocks.

The decoder is essentially a conditional language model that attends to the en-
coder representation and generates the target words one by one, at each timestep
conditioning on the source sentence and the previously generated target language
words to generate a token. Decoding can use any of the decoding methods discussed
in Chapter 10 like greedy, or temperature or nucleus sampling. But the most com-
mon decoding algorithm for MT is the beam search algorithm that we’ll introduce
in Section 13.4.

But the components of the architecture differ somewhat from the RNN and also
from the transformer block we’ve seen. First, in order to attend to the source lan-
guage, the transformer blocks in the decoder have an extra cross-attention layer.
Recall that the transformer block of Chapter 10 consists of a self-attention layer
that attends to the input from the previous layer, followed by layer norm, a feed
forward layer, and another layer norm. The decoder transformer block includes an
extra layer with a special kind of attention, cross-attention (also sometimes called
encoder-decoder attention or source attention). Cross-attention has the same form
as the multi-headed self-attention in a normal transformer block, except that while

cross-attention

EncoderThegreenllegówitcharrived<s>llególalabrujabrujaverdeverde</s>Decodercross-attentiontransformerblocks13.3

• DETAILS OF THE ENCODER-DECODER MODEL

277

the queries as usual come from the previous layer of the decoder, the keys and values
come from the output of the encoder.

Figure 13.6 The transformer block for the encoder and the decoder. The ﬁnal output of the encoder Henc =
h1, ..., hT is the context used in the decoder. The decoder is a standard transformer except with one extra layer,
the cross-attention layer, which takes that decoder output Henc and uses it to form its K and V inputs.

That is, the ﬁnal output of the encoder Henc = h1, ..., ht is multiplied by the
cross-attention layer’s key weights WK and value weights WV, but the output from
the prior decoder layer Hdec[i
1] is multiplied by the cross-attention layer’s query
−
weights WQ:

1]; K = WKHenc; V = WVHenc
Q = WQHdec[i
−

(13.11)

CrossAttention(Q, K, V) = softmax

QK(cid:124)
√dk (cid:19)

V

(cid:18)

(13.12)

The cross attention thus allows the decoder to attend to each of the source language
words as projected into the entire encoder ﬁnal output representations. The other
attention layer in each decoder block, the self-attention layer, is the same causal (left-
to-right) self-attention that we saw in Chapter 9. The self-attention in the encoder,
however, is allowed to look ahead at the entire source language text.

To train an encoder-decoder model, we use the same self-supervision model we
used for training encoder-decoders RNNs in Chapter 9. The network is given the
source text and then starting with the separator token is trained autoregressively to
predict the next token yt , using cross-entropy loss:

LCE ( ˆyt , yt ) =

log ˆyt [wt+1]

−

(13.13)

Encoderx1x2x3xn…Decoderhnhnhn…hnEncoderBlock 1Block 2Block 3y3y2y1…DecoderBlock 1Block 2Block 3Linear LayerymSelf-Attention LayerLayer NormalizeLayer Normalize++…FeedforwardCausal Self-Attention LayerLayer NormalizeLayer Normalize++…FeedforwardLayer Normalize+Cross-Attention Layer278 CHAPTER 13

• MACHINE TRANSLATION

teacher forcing

As in that case, we use teacher forcing in the decoder. Recall that in teacher forc-
ing, at each time step in decoding we force the system to use the gold target token
from training as the next input xt+1, rather than allowing it to rely on the (possibly
erroneous) decoder output ˆyt .

13.4 Decoding in MT: Beam Search

Recall the greedy decoding algorithm from Chapter 10: at each time step t in gen-
eration, the output yt is chosen by computing the probability for each word in the
vocabulary and then choosing the highest probability word (the argmax):

w<t )
V P(w
ˆwt = argmaxw
|
∈

(13.14)

A problem with greedy decoding is that what looks high probability at word t might
turn out to have been the wrong choice once we get to word t + 1. The beam search
algorithm maintains multiple choices until later when we can see which one is best.
In beam search we model decoding as searching the space of possible genera-
tions, represented as a search tree whose branches represent actions (generating a
token), and nodes represent states (having generated a particular preﬁx). We search
for the best action sequence, i.e., the string with the highest probability.

search tree

An illustration of the problem

Fig. 13.7 shows a made-up example. The most probable sequence is ok ok EOS (its
probability is .4
1.0). But greedy search doesn’t ﬁnd it, incorrectly choosing
yes as the ﬁrst word since it has the highest local probability (0.5).

×

×

.7

Figure 13.7 A search tree for generating the target string T = t1,t2, ... from vocabulary
yes, ok, <s>
V =
, showing the probability of generating each token from that state. Greedy
}
{
search chooses yes followed by yes, instead of the globally most probable sequence ok ok.

Recall from Chapter 8 that for part-of-speech tagging we used dynamic pro-
gramming search (the Viterbi algorithm) to address this problem. Unfortunately,
dynamic programming is not applicable to generation problems with long-distance
dependencies between the output decisions. The only method guaranteed to ﬁnd the
best solution is exhaustive search: computing the probability of every one of the V T
possible sentences (for some length value T ) which is obviously too slow.

startokyesEOSokyesEOSokyesEOSEOSEOSEOSEOSt2t3p(t1|start)t1p(t2| t1)p(t3| t1,t2).1.5.4.3.4.3.1.2.71.01.01.01.013.4

• DECODING IN MT: BEAM SEARCH

279

The solution: beam search

beam search

beam width

Instead, MT systems generally decode using beam search, a heuristic search method
ﬁrst proposed by Lowerre (1976). In beam search, instead of choosing the best token
to generate at each timestep, we keep k possible tokens at each step. This ﬁxed-size
memory footprint k is called the beam width, on the metaphor of a ﬂashlight beam
that can be parameterized to be wider or narrower.

Thus at the ﬁrst step of decoding, we compute a softmax over the entire vocab-
ulary, assigning a probability to each word. We then select the k-best options from
this softmax output. These initial k outputs are the search frontier and these k initial
words are called hypotheses. A hypothesis is an output sequence, a translation-so-
far, together with its probability.

Figure 13.8 Beam search decoding with a beam width of k = 2. At each time step, we choose the k best
V hypotheses and choose the best k = 2
hypotheses, form the V possible extensions of each, score those k
to continue. At time 1, the frontier has the best 2 options from the initial decoder state: arrived and the. We
extend each, compute the probability of all the hypotheses so far (arrived the, arrived aardvark, the green, the
witch) and again chose the best 2 (the green and the witch) to be the search frontier. The images on the arcs
schematically represent the decoders that must be run at each step to score the next words (for simplicity not
depicting cross-attention).

×

At subsequent steps, each of the k best hypotheses is extended incrementally
by being passed to distinct decoders, which each generate a softmax over the entire
vocabulary to extend the hypothesis to every possible next token. Each of these k
V
x, y<i): the product of the probability of the current
hypotheses is scored by P(yi|
word choice multiplied by the probability of the path that led to it. We then prune
V hypotheses down to the k best hypotheses, so there are never more than k
the k

×

×

a…aardvark..arrived..the…zebrastartt1a…aardvark..the..witch…zebraa…aardvark..green..witch…zebrat2hd1y1BOSy1y2y2hd1hd2thetheBOShd2greengreeny3hd1hd2arrivedarrivedBOSy2t3hd1hd2thetheBOSy2hd1hd2thetheBOShd2witchwitchy3a…mage..the..witch…zebraarrived…aardvark..green..who…zebray3y3280 CHAPTER 13

• MACHINE TRANSLATION

hypotheses at the frontier of the search, and never more than k decoders. Fig. 13.8
illustrates this with a beam width of 2 for the beginning of The green witch arrived.
This process continues until an EOS is generated indicating that a complete can-
didate output has been found. At this point, the completed hypothesis is removed
from the frontier and the size of the beam is reduced by one. The search continues
until the beam has been reduced to 0. The result will be k hypotheses.

To score each node by its log probability, we use the chain rule of probability to
x) into the product of the probability of each word given its prior
|

break down p(y
context, which we can turn into a sum of logs (for an output string of length t):

x)
score(y) = log P(y
|
x)P(y2|
= log (P(y1|
=

t

log P(yi|

y1, ..., yi

y1, x)P(y3|
1, x)

−

(cid:88)i=1

y1, y2, x)...P(yt |

y1, ..., yt

1, x))

−

(13.15)

Thus at each step, to compute the probability of a partial sentence, we simply add the
log probability of the preﬁx sentence so far to the log probability of generating the
next token. Fig. 13.9 shows the scoring for the example sentence shown in Fig. 13.8,
using some simple made-up probabilities. Log probabilities are negative or 0, and
the max of two log probabilities is the one that is greater (closer to 0).

Figure 13.9 Scoring for beam search decoding with a beam width of k = 2. We maintain the log probability
of each hypothesis in the beam by incrementally adding the logprob of generating each next token. Only the top
k paths are extended to the next step.

Fig. 13.10 gives the algorithm. One problem with this version of the algorithm is
that the completed hypotheses may have different lengths. Because language mod-
els generally assign lower probabilities to longer strings, a naive algorithm would
choose shorter strings for y. (This is not an issue during the earlier steps of decod-
ing; since beam search is breadth-ﬁrst, all the hypotheses being compared had the
same length.) For this reason we often apply length normalization methods, like

BOSarrivedthethewitchgreenwitchmagewhoy2y3log P(y1|x)y1log P(y2|y1,x)log P(y3|y2,y1,x)-.92-1.6-1.2-.69-2.3-.69-1.6-2.3arrived-.11-.51witch-.36-.22EOS-.51EOS-2.3at-1.61bylog P(y4|y3,y2,y1,x)log P(y5|y4,y3,y2,y1,x)arrivedcame-1.6y4y5log P(arrived|x) log P(arrived witch|x)log P(the|x)log P(the green|x)log P(the witch|x) =-1.6log P (arrived the|x) log P (“the green witch arrived”|x) = log P (the|x) + log P(green|the,x) + log P(witch | the, green,x)+logP(arrived|the,green,witch,x)+log P(EOS|the,green,witch,arrived,x)= -2.3= -3.9= -1.6= -2.1=-.92-2.1-3.2-4.4-2.2-2.5-3.7-2.7-3.8-2.7-4.813.4

• DECODING IN MT: BEAM SEARCH

281

function BEAMDECODE(c, beam width) returns best paths

y0, h0 ←
0
path
()
←
complete paths
state
←
frontier

state
(cid:105)

← (cid:104)

()

←
(c, y0, h0, path)

;initial state

;initial frontier

while frontier contains incomplete paths and beamwidth > 0

extended frontier
for each state

← (cid:104)(cid:105)
frontier do

←

∈
DECODE(state)

y
for each word i
successor
extended frontier

←

Vocabulary do

∈
NEWSTATE(state, i, yi)

←

ADDTOBEAM(successor, extended frontier,

beam width)

for each state in extended frontier do

if state is complete do
complete paths
←
extended frontier
beam width

←

frontier

extended frontier

←
return completed paths

beam width - 1

←

APPEND(complete paths, state)

REMOVE(extended frontier, state)

function NEWSTATE(state, word, word prob) returns new state

function ADDTOBEAM(state, frontier, width) returns updated frontier

if LENGTH(frontier) < width then

frontier

INSERT(state, frontier)
else if SCORE(state) > SCORE(WORSTOF(frontier))

←

frontier
←
frontier
←
return frontier

REMOVE(WORSTOF(frontier))
INSERT(state, frontier)

Figure 13.10 Beam search decoding.

dividing the logprob by the number of words:

score(y) = log P(y

x) =
|

1
t

t

(cid:88)i=1

log P(yi|

y1, ..., yi

1, x)

−

(13.16)

For MT we generally use beam widths k between 5 and 10, giving us k hypotheses at
the end. We can pass all k to the downstream application with their respective scores,
or if we just need a single translation we can pass the most probable hypothesis.

13.4.1 Minimum Bayes Risk Decoding

minimum
Bayes risk
MBR

Minimum Bayes risk or MBR decoding is an alternative decoding algorithm that
can work even better than beam search and also tends to be better than the other
decoding algorithms like temperature sampling introduced in Section 10.8.

The intuition of minimum Bayes risk is that instead of trying to choose the trans-
lation which is most probable, we choose the one that is likely have the least error.

282 CHAPTER 13

• MACHINE TRANSLATION

For example, we might want our decoding algorithm to ﬁnd the translation which
has the highest score on some evaluation metric. For example in Section 13.6 we will
introduce metrics like chrF or BERTScore that measure the goodness-of-ﬁt between
a candidate translation and a set of reference human translations. A translation that
maximizes this score, especially with a hypothetically huge set of perfect human
translations is likely to be a good one (have minimum risk) even if it is not the most
probable translation by our particular probability estimator.

In practice, we don’t know the perfect set of translations for a given sentence. So
the standard simpliﬁcation used in MBR decoding algorithms is to instead choose
the candidate translation which is most similar (by some measure of goodness-of-
ﬁt) with some set of candidate translations. We’re essentially approximating the
enormous space of all possible translations U with a smaller set of possible candidate
translations Y.

Given this set of possible candidate translations Y, and some similarity or align-
ment function util, we choose the best translation ˆy as the translation which is most
similar to all the other candidate translations:

ˆy = argmax
y

Y

util(y, c)

(13.17)

∈

Y
(cid:88)c
∈
Various util functions can be used, like chrF or BERTscore or BLEU. We can get the
set of candidate translations by sampling using one of the basic sampling algorithms
of Section 10.8 like temperature sampling; good results can be obtained with as few
as 32 or 64 candidates.

Minimum Bayes risk decoding can also be used for other NLP tasks; indeed
it was widely applied to speech recognition (Stolcke et al., 1997; Goel and Byrne,
2000) before being applied to machine translation (Kumar and Byrne, 2004), and
has been shown to work well across many other generation tasks as well (e.g., sum-
marization, dialogue, and image captioning (Suzgun et al., 2023)).

13.5 Translating in low-resource situations

For some languages, and especially for English, online resources are widely avail-
able. There are many large parallel corpora that contain translations between En-
glish and many languages. But the vast majority of the world’s languages do not
have large parallel training texts available. An important ongoing research question
is how to get good translation with lesser resourced languages. The resource prob-
lem can even be true for high resource languages when we need to translate into low
resource domains (for example in a particular genre that happens to have very little
bitext).

Here we brieﬂy introduce two commonly used approaches for dealing with this
data sparsity: backtranslation, which is a special case of the general statistical
technique called data augmentation, and multilingual models, and also discuss
some socio-technical issues.

13.5.1 Data Augmentation

Data augmentation is a statistical technique for dealing with insufﬁcient training
data, by adding new synthetic data that is generated from the current natural data.

backtranslation

13.5

• TRANSLATING IN LOW-RESOURCE SITUATIONS

283

The most common data augmentation technique for machine translation is called
backtranslation. Backtranslation relies on the intuition that while parallel corpora
may be limited for particular languages or domains, we can often ﬁnd a large (or
at least larger) monolingual corpus, to add to the smaller parallel corpora that are
available. The algorithm makes use of monolingual corpora in the target language
by creating synthetic bitexts.

In backtranslation, our goal is to improve source-to-target MT, given a small
parallel text (a bitext) in the source/target languages, and some monolingual data in
the target language. We ﬁrst use the bitext to train a MT system in the reverse di-
rection: a target-to-source MT system . We then use it to translate the monolingual
target data to the source language. Now we can add this synthetic bitext (natural
target sentences, aligned with MT-produced source sentences) to our training data,
and retrain our source-to-target MT model. For example suppose we want to trans-
late from Navajo to English but only have a small Navajo-English bitext, although of
course we can ﬁnd lots of monolingual English data. We use the small bitext to build
an MT engine going the other way (from English to Navajo). Once we translate the
monolingual English text to Navajo, we can add this synthetic Navajo/English bitext
to our training data.

Backtranslation has various parameters. One is how we generate the backtrans-
lated data; we can run the decoder in greedy inference, or use beam search. Or we
can do sampling, like the temperature sampling algorithm we saw in Chapter 10.
Another parameter is the ratio of backtranslated data to natural bitext data; we can
choose to upsample the bitext data (include multiple copies of each sentence). In
general backtranslation works surprisingly well; one estimate suggests that a system
trained on backtranslated text gets about 2/3 of the gain as would training on the
same amount of natural bitext (Edunov et al., 2018).

13.5.2 Multilingual models

The models we’ve described so far are for bilingual translation: one source language,
one target language. It’s also possible to build a multilingual translator.

In a multilingual translator, we train the system by giving it parallel sentences
in many different pairs of languages. That means we need to tell the system which
language to translate from and to! We tell the system which language is which
by adding a special token ls to the encoder specifying the source language we’re
translating from, and a special token lt to the decoder telling it the target language
we’d like to translate into.

Thus we slightly update Eq. 13.9 above to add these tokens in Eq. 13.19:

h = encoder(x, ls)

yi+1 = decoder(h, lt , y1, . . . , yi))

[1, . . . , m]

i
∀

∈

(13.18)

(13.19)

One advantage of a multilingual model is that they can improve the translation
of lower-resourced languages by drawing on information from a similar language
in the training data that happens to have more resources. Perhaps we don’t know
the meaning of a word in Galician, but the word appears in the similar and higher-
resourced language Spanish.

13.5.3 Sociotechnical issues

Many issues in dealing with low-resource languages go beyond the purely techni-
cal. One problem is that for low-resource languages, especially from low-income

284 CHAPTER 13

• MACHINE TRANSLATION

countries, native speakers are often not involved as the curators for content selec-
tion, as the language technologists, or as the evaluators who measure performance
(
et al., 2020). Indeed, one well-known study that manually audited a large set of
∀
parallel corpora and other major multilingual datasets found that for many of the
corpora, less than 50% of the sentences were of acceptable quality, with a lot of
data consisting of repeated sentences with web boilerplate or incorrect translations,
suggesting that native speakers may not have been sufﬁciently involved in the data
process (Kreutzer et al., 2022).

Other issues, like the tendency of many MT approaches to focus on the case
where one of the languages is English (Anastasopoulos and Neubig, 2020), have to
do with allocation of resources. Where most large multilingual systems were trained
on bitexts in which English was one of the two languages, recent huge corporate
systems like those of Fan et al. (2021) and Costa-juss`a et al. (2022) and datasets
like Schwenk et al. (2021) attempt to handle large numbers of languages (up to 200
languages) and create bitexts between many more pairs of languages and not just
through English.

∀

At the smaller end,

et al. (2020) propose a participatory design process to
encourage content creators, curators, and language technologists who speak these
low-resourced languages to participate in developing MT algorithms. They provide
online groups, mentoring, and infrastructure, and report on a case study on devel-
oping MT algorithms for low-resource African languages. Among their conclusions
was perform MT evaluation by post-editing rather than direct evaluation, since hav-
ing labelers edit an MT system and then measure the distance between the MT output
and its post-edited version both was simpler to train evaluators and makes it easier to
measure true errors in the MT output and not differences due to linguistic variation
(Bentivogli et al., 2018).

13.6 MT Evaluation

Translations are evaluated along two dimensions:

adequacy

1. adequacy: how well the translation captures the exact meaning of the source

sentence. Sometimes called faithfulness or ﬁdelity.

ﬂuency

2. ﬂuency: how ﬂuent the translation is in the target language (is it grammatical,

clear, readable, natural).

Using humans to evaluate is most accurate, but automatic metrics are also used for
convenience.

13.6.1 Using Human Raters to Evaluate MT

The most accurate evaluations use human raters, such as online crowdworkers, to
evaluate each translation along the two dimensions. For example, along the dimen-
sion of ﬂuency, we can ask how intelligible, how clear, how readable, or how natural
the MT output (the target text) is. We can give the raters a scale, for example, from
1 (totally unintelligible) to 5 (totally intelligible), or 1 to 100, and ask them to rate
each sentence or paragraph of the MT output.

We can do the same thing to judge the second dimension, adequacy, using raters
to assign scores on a scale. If we have bilingual raters, we can give them the source
sentence and a proposed target sentence, and rate, on a 5-point or 100-point scale,

ranking

chrF

13.6

• MT EVALUATION

285

how much of the information in the source was preserved in the target. If we only
have monolingual raters but we have a good human translation of the source text, we
can give the monolingual raters the human reference translation and a target machine
translation and again rate how much information is preserved. An alternative is to
do ranking: give the raters a pair of candidate translations, and ask them which one
they prefer.

Training of human raters (who are often online crowdworkers) is essential; raters
without translation expertise ﬁnd it difﬁcult to separate ﬂuency and adequacy, and
so training includes examples carefully distinguishing these. Raters often disagree
(source sentences may be ambiguous, raters will have different world knowledge,
raters may apply scales differently). It is therefore common to remove outlier raters,
and (if we use a ﬁne-grained enough scale) normalizing raters by subtracting the
mean from their scores and dividing by the variance.

As discussed above, an alternative way of using human raters is to have them
post-edit translations, taking the MT output and changing it minimally until they
feel it represents a correct translation. The difference between their post-edited
translations and the original MT output can then be used as a measure of quality.

13.6.2 Automatic Evaluation

While humans produce the best evaluations of machine translation output, running a
human evaluation can be time consuming and expensive. For this reason automatic
metrics are often used as temporary proxies. Automatic metrics are less accurate
than human evaluation, but can help test potential system improvements, and even
be used as an automatic loss function for training. In this section we introduce two
families of such metrics, those based on character- or word-overlap and those based
on embedding similarity.

Automatic Evaluation by Character Overlap: chrF

The simplest and most robust metric for MT evaluation is called chrF, which stands
for character F-score (Popovi´c, 2015). chrF (along with many other earlier related
metrics like BLEU, METEOR, TER, and others) is based on a simple intuition de-
rived from the pioneering work of Miller and Beebe-Center (1956): a good machine
translation will tend to contain characters and words that occur in a human trans-
lation of the same sentence. Consider a test set from a parallel corpus, in which
each source sentence has both a gold human target translation and a candidate MT
translation we’d like to evaluate. The chrF metric ranks each MT target sentence by
a function of the number of character n-gram overlaps with the human translation.

Given the hypothesis and the reference, chrF is given a parameter k indicating
the length of character n-grams to be considered, and computes the average of the
k precisions (unigram precision, bigram, and so on) and the average of the k recalls
(unigram recall, bigram recall, etc.):

chrP percentage of character 1-grams, 2-grams, ..., k-grams in the hypothesis that

occur in the reference, averaged.

chrR percentage of character 1-grams, 2-grams,..., k-grams in the reference that

occur in the hypothesis, averaged.

The metric then computes an F-score by combining chrP and chrR using a weighting
parameter β . It is common to set β = 2, thus weighing recall twice as much as

286 CHAPTER 13

• MACHINE TRANSLATION

precision:

chrFβ = (1 + β 2)

For β = 2, that would be:

chrP

chrR
chrP + chrR

·

β 2

·

(13.20)

chrF2 =

5
4

chrR
chrP
·
·
chrP + chrR
·

For example, consider two hypotheses that we’d like to score against the refer-
ence translation witness for the past. Here are the hypotheses along with chrF values
computed using parameters k = β = 2 (in real examples, k would be a higher number
like 6):

REF: witness for the past,
HYP1: witness of the past, chrF2,2 = .86
HYP2: past witness
chrF2,2 = .62

Let’s see how we computed that chrF value for HYP1 (we’ll leave the compu-
tation of the chrF value for HYP2 as an exercise for the reader). First, chrF ignores
spaces, so we’ll remove them from both the reference and hypothesis:
REF: witnessforthepast, (18 unigrams, 17 bigrams)
HYP1: witnessofthepast, (17 unigrams, 16 bigrams)

Next let’s see how many unigrams and bigrams match between the reference and
hypothesis:

unigrams that match: w i t n e s s f o t h e p a s t , (17 unigrams)
bigrams that match: wi it tn ne es ss th he ep pa as st t, (13 bigrams)

We use that to compute the unigram and bigram precisions and recalls:

unigram P: 17/17 = 1
bigram P:

13/16 = .813 bigram R:

unigram R: 17/18 = .944
13/17 = .765

Finally we average to get chrP and chrR, and compute the F-score:

chrP = (17/17 + 13/16)/2 = .906
chrR = (17/18 + 13/17)/2 = .855

chrF2,2 = 5

chrP
chrR
∗
4chrP + chrR

= .86

chrF is simple, robust, and correlates very well with human judgments in many

languages (Kocmi et al., 2021).

Alternative overlap metric: BLEU

There are various alternative overlap metrics. For example, before the development
of chrF, it was common to use a word-based overlap metric called BLEU (for BiLin-
gual Evaluation Understudy), that is purely precision-based rather than combining
precision and recall (Papineni et al., 2002). The BLEU score for a corpus of candi-
date translation sentences is a function of the n-gram word precision over all the
sentences combined with a brevity penalty computed over the corpus as a whole.

What do we mean by n-gram precision? Consider a corpus composed of a single
sentence. The unigram precision for this corpus is the percentage of unigram tokens

13.6

• MT EVALUATION

287

in the candidate translation that also occur in the reference translation, and ditto for
bigrams and so on, up to 4-grams. BLEU extends this unigram metric to the whole
corpus by computing the numerator as the sum over all sentences of the counts of all
the unigram types that also occur in the reference translation, and the denominator
is the total of the counts of all unigrams in all candidate sentences. We compute
this n-gram precision for unigrams, bigrams, trigrams, and 4-grams and take the
geometric mean. BLEU has many further complications, including a brevity penalty
for penalizing candidate translations that are too short, and it also requires the n-
gram counts be clipped in a particular way.

Because BLEU is a word-based metric, it is very sensitive to word tokenization,
making it impossible to compare different systems if they rely on different tokeniza-
tion standards, and doesn’t work as well in languages with complex morphology.
Nonetheless, you will sometimes still see systems evaluated by BLEU, particularly
for translation into English. In such cases it’s important to use packages that enforce
standardization for tokenization like SACREBLEU (Post, 2018).

Statistical Signiﬁcance Testing for MT evals

Character or word overlap-based metrics like chrF (or BLEU, or etc.) are mainly
used to compare two systems, with the goal of answering questions like: did the
new algorithm we just invented improve our MT system? To know if the difference
between the chrF scores of two MT systems is a signiﬁcant difference, we use the
paired bootstrap test, or the similar randomization test.

To get a conﬁdence interval on a single chrF score using the bootstrap test, recall
from Section 4.9 that we take our test set (or devset) and create thousands of pseudo-
testsets by repeatedly sampling with replacement from the original test set. We now
compute the chrF score of each of the pseudo-testsets. If we drop the top 2.5% and
bottom 2.5% of the scores, the remaining scores will give us the 95% conﬁdence
interval for the chrF score of our system.

To compare two MT systems A and B, we draw the same set of pseudo-testsets,
and compute the chrF scores for each of them. We then compute the percentage of
pseudo-test-sets in which A has a higher chrF score than B.

chrF: Limitations

While automatic character and word-overlap metrics like chrF or BLEU are useful,
they have important limitations. chrF is very local: a large phrase that is moved
around might barely change the chrF score at all, and chrF can’t evaluate cross-
sentence properties of a document like its discourse coherence (Chapter 27). chrF
and similar automatic metrics also do poorly at comparing very different kinds of
systems, such as comparing human-aided translation against machine translation, or
different machine translation architectures against each other (Callison-Burch et al.,
2006). Instead, automatic overlap metrics like chrF are most appropriate when eval-
uating changes to a single system.

13.6.3 Automatic Evaluation: Embedding-Based Methods

The chrF metric is based on measuring the exact character n-grams a human refer-
ence and candidate machine translation have in common. However, this criterion
is overly strict, since a good translation may use alternate words or paraphrases. A
solution ﬁrst pioneered in early metrics like METEOR (Banerjee and Lavie, 2005)
was to allow synonyms to match between the reference x and candidate ˜x. More

288 CHAPTER 13

• MACHINE TRANSLATION

recent metrics use BERT or other embeddings to implement this intuition.

For example, in some situations we might have datasets that have human as-
sessments of translation quality. Such datasets consists of tuples (x, ˜x, r), where
x = (x1, . . . , xn) is a reference translation, ˜x = ( ˜x1, . . . , ˜xm) is a candidate machine
translation, and r
R is a human rating that expresses the quality of ˜x with respect
to x. Given such data, algorithms like COMET (Rei et al., 2020) BLEURT (Sellam
et al., 2020) train a predictor on the human-labeled datasets, for example by passing
x and ˜x through a version of BERT (trained with extra pretraining, and then ﬁne-
tuned on the human-labeled sentences), followed by a linear layer that is trained to
predict r. The output of such models correlates highly with human labels.

∈

In other cases, however, we don’t have such human-labeled datasets.

In that
case we can measure the similarity of x and ˜x by the similarity of their embeddings.
The BERTSCORE algorithm (Zhang et al., 2020) shown in Fig. 13.11, for example,
passes the reference x and the candidate ˜x through BERT, computing a BERT em-
bedding for each token xi and ˜x j. Each pair of tokens (xi, ˜x j) is scored by its cosine
˜x j
xi·
. Each token in x is matched to a token in ˜x to compute recall, and each token in
˜x j|
xi||
|
˜x is matched to a token in x to compute precision (with each token greedily matched
to the most similar token in the corresponding sentence). BERTSCORE provides
precision and recall (and hence F1):

RBERT =

1
x
|

x
xi∈
| (cid:88)

max
˜x
˜x j∈

xi ·

˜x j

PBERT =

1
˜x
˜x
| (cid:88)˜x j∈
|

max
x
xi∈

xi ·

˜x j

(13.21)

Figure 13.11 The computation of BERTSCORE recall from reference x and candidate ˆx, from Figure 1 in
Zhang et al. (2020). This version shows an extended version of the metric in which tokens are also weighted by
their idf values.

13.7 Bias and Ethical Issues

Machine translation raises many of the same ethical issues that we’ve discussed in
earlier chapters. For example, consider MT systems translating from Hungarian
(which has the gender neutral pronoun ˝o) or Spanish (which often drops pronouns)
into English (in which pronouns are obligatory, and they have grammatical gender).
When translating a reference to a person described without speciﬁed gender, MT
systems often default to male gender (Schiebinger 2014, Prates et al. 2019). And
MT systems often assign gender according to culture stereotypes of the sort we saw
in Section 6.11. Fig. 13.12 shows examples from Prates et al. (2019), in which Hun-
garian gender-neutral ˝o is a nurse is translated with she, but gender-neutral ˝o is a
CEO is translated with he. Prates et al. (2019) ﬁnd that these stereotypes can’t com-
pletely be accounted for by gender bias in US labor statistics, because the biases are

PublishedasaconferencepaperatICLR2020Referencethe weather is cold todayCandidateit is freezing todayCandidateContextualEmbeddingPairwise CosineSimilarityRBERT=(0.713 1.27)+(0.515 7.94)+...1.27+7.94+1.82+7.90+8.88<latexit sha1_base64="OJyoKlmBAgUA0KDtUcsH/di5BlI=">AAACSHicbZDLattAFIaPnLRJ3JvTLrsZYgoJAqFxGqwsCqal0FVJQ5wELCNG41EyZHRh5ijECL1EnqAv002X2eUZsumipXRR6Mj2Ipf+MPDznXM4Z/64UNKg7187raXlR49XVtfaT54+e/6is/7y0OSl5mLIc5Xr45gZoWQmhihRieNCC5bGShzFZx+a+tG50Ebm2QFOCzFO2UkmE8kZWhR1ov2oClFcYPX+4/5BXZN3JEw049Wm7/XpdogyFYZQr9ffci3aoTsL1Pd23265oZrkaOqqaXAb5FIv6DXOdwMvCOqo0/U9fyby0NCF6Q52/15+BYC9qHMVTnJepiJDrpgxI+oXOK6YRsmVqNthaUTB+Bk7ESNrM2aPGVezIGryxpIJSXJtX4ZkRm9PVCw1ZprGtjNleGru1xr4v9qoxCQYVzIrShQZny9KSkUwJ02qZCK14Kim1jCupb2V8FNmc0SbfduGQO9/+aE57HnU9+gX2h18hrlW4TVswCZQ6MMAPsEeDIHDN7iBn/DL+e78cH47f+atLWcx8wruqNX6B8dUrVw=</latexit><latexit sha1_base64="RInTcZkWiVBnf/ncBstCvatCtG4=">AAACSHicbZDPShxBEMZ7Nproxugaj14al4AyMEyvyoyHwGIQPImKq8LOMvT09mhjzx+6a0KWYV4iL5EnySXH3HwGLx4U8SDYs7sHo/mg4eNXVVT1F+VSaHDda6vxbmb2/Ye5+ebHhU+LS63lz6c6KxTjPZbJTJ1HVHMpUt4DAZKf54rTJJL8LLr6VtfPvnOlRZaewCjng4RepCIWjIJBYSs8DssA+A8od/eOT6oKf8VBrCgr113HI5sBiIRrTJyOt2EbtE22p8hzdrY27EAOM9BVWTfYNbKJ43dq59q+4/tV2Gq7jjsWfmvI1LS7O08/f3nLi4dh628wzFiR8BSYpFr3iZvDoKQKBJO8agaF5jllV/SC941NqTlmUI6DqPAXQ4Y4zpR5KeAxfTlR0kTrURKZzoTCpX5dq+H/av0CYn9QijQvgKdssiguJIYM16nioVCcgRwZQ5kS5lbMLqnJEUz2TRMCef3lt+a04xDXIUek3T1AE82hVbSG1hFBHuqifXSIeoih3+gG3aF76491az1Yj5PWhjWdWUH/qNF4BkPYrbk=</latexit><latexit sha1_base64="RInTcZkWiVBnf/ncBstCvatCtG4=">AAACSHicbZDPShxBEMZ7Nproxugaj14al4AyMEyvyoyHwGIQPImKq8LOMvT09mhjzx+6a0KWYV4iL5EnySXH3HwGLx4U8SDYs7sHo/mg4eNXVVT1F+VSaHDda6vxbmb2/Ye5+ebHhU+LS63lz6c6KxTjPZbJTJ1HVHMpUt4DAZKf54rTJJL8LLr6VtfPvnOlRZaewCjng4RepCIWjIJBYSs8DssA+A8od/eOT6oKf8VBrCgr113HI5sBiIRrTJyOt2EbtE22p8hzdrY27EAOM9BVWTfYNbKJ43dq59q+4/tV2Gq7jjsWfmvI1LS7O08/f3nLi4dh628wzFiR8BSYpFr3iZvDoKQKBJO8agaF5jllV/SC941NqTlmUI6DqPAXQ4Y4zpR5KeAxfTlR0kTrURKZzoTCpX5dq+H/av0CYn9QijQvgKdssiguJIYM16nioVCcgRwZQ5kS5lbMLqnJEUz2TRMCef3lt+a04xDXIUek3T1AE82hVbSG1hFBHuqifXSIeoih3+gG3aF76491az1Yj5PWhjWdWUH/qNF4BkPYrbk=</latexit><latexit sha1_base64="fGWl4NCvlvtMu17rjLtk25oWpdc=">AAACSHicbZBLS+RAFIUrPT7bVzsu3RQ2ghIIqVbpuBgQRZiVqNgqdJpQqa5oYeVB1Y1ME/Lz3Lic3fwGNy6UwZ2VNgtfBwoO372Xe+uEmRQaXPef1fgxMTk1PTPbnJtfWFxqLf8812muGO+xVKbqMqSaS5HwHgiQ/DJTnMah5BfhzUFVv7jlSos0OYNRxgcxvUpEJBgFg4JWcBoUPvA/UOwfnp6VJf6F/UhRVmy4Tpds+SBirjFxOt1N26AdslOjrrO7vWn7cpiCLouqwa6QTRyvUznX9hzPK4NW23XcsfBXQ2rTRrWOg9Zff5iyPOYJMEm17hM3g0FBFQgmedn0c80zym7oFe8bm1BzzKAYB1HidUOGOEqVeQngMX0/UdBY61Ecms6YwrX+XKvgd7V+DpE3KESS5cAT9rYoyiWGFFep4qFQnIEcGUOZEuZWzK6pyRFM9k0TAvn85a/mvOMQ1yEnpL13VMcxg1bRGtpABHXRHvqNjlEPMXSHHtATerburUfrv/Xy1tqw6pkV9EGNxisxMKq0</latexit>1.277.941.827.908.88idf
weightsImportance Weighting(Optional)Maximum Similarityx<latexit sha1_base64="f2yzimwbR/Dgjzp6tZ360fHRqNI=">AAAB6HicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0GPRi8cW7Ae0oWy2k3btZhN2N2IJ/QVePCji1Z/kzX/jts1BWx8MPN6bYWZekAiujet+O4W19Y3NreJ2aWd3b/+gfHjU0nGqGDZZLGLVCahGwSU2DTcCO4lCGgUC28H4dua3H1FpHst7M0nQj+hQ8pAzaqzUeOqXK27VnYOsEi8nFchR75e/eoOYpRFKwwTVuuu5ifEzqgxnAqelXqoxoWxMh9i1VNIItZ/ND52SM6sMSBgrW9KQufp7IqOR1pMosJ0RNSO97M3E/7xuasJrP+MySQ1KtlgUpoKYmMy+JgOukBkxsYQyxe2thI2ooszYbEo2BG/55VXSuqh6btVrXFZqN3kcRTiBUzgHD66gBndQhyYwQHiGV3hzHpwX5935WLQWnHzmGP7A+fwB5jmM/A==</latexit><latexit sha1_base64="f2yzimwbR/Dgjzp6tZ360fHRqNI=">AAAB6HicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0GPRi8cW7Ae0oWy2k3btZhN2N2IJ/QVePCji1Z/kzX/jts1BWx8MPN6bYWZekAiujet+O4W19Y3NreJ2aWd3b/+gfHjU0nGqGDZZLGLVCahGwSU2DTcCO4lCGgUC28H4dua3H1FpHst7M0nQj+hQ8pAzaqzUeOqXK27VnYOsEi8nFchR75e/eoOYpRFKwwTVuuu5ifEzqgxnAqelXqoxoWxMh9i1VNIItZ/ND52SM6sMSBgrW9KQufp7IqOR1pMosJ0RNSO97M3E/7xuasJrP+MySQ1KtlgUpoKYmMy+JgOukBkxsYQyxe2thI2ooszYbEo2BG/55VXSuqh6btVrXFZqN3kcRTiBUzgHD66gBndQhyYwQHiGV3hzHpwX5935WLQWnHzmGP7A+fwB5jmM/A==</latexit><latexit sha1_base64="f2yzimwbR/Dgjzp6tZ360fHRqNI=">AAAB6HicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0GPRi8cW7Ae0oWy2k3btZhN2N2IJ/QVePCji1Z/kzX/jts1BWx8MPN6bYWZekAiujet+O4W19Y3NreJ2aWd3b/+gfHjU0nGqGDZZLGLVCahGwSU2DTcCO4lCGgUC28H4dua3H1FpHst7M0nQj+hQ8pAzaqzUeOqXK27VnYOsEi8nFchR75e/eoOYpRFKwwTVuuu5ifEzqgxnAqelXqoxoWxMh9i1VNIItZ/ND52SM6sMSBgrW9KQufp7IqOR1pMosJ0RNSO97M3E/7xuasJrP+MySQ1KtlgUpoKYmMy+JgOukBkxsYQyxe2thI2ooszYbEo2BG/55VXSuqh6btVrXFZqN3kcRTiBUzgHD66gBndQhyYwQHiGV3hzHpwX5935WLQWnHzmGP7A+fwB5jmM/A==</latexit><latexit sha1_base64="f2yzimwbR/Dgjzp6tZ360fHRqNI=">AAAB6HicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0GPRi8cW7Ae0oWy2k3btZhN2N2IJ/QVePCji1Z/kzX/jts1BWx8MPN6bYWZekAiujet+O4W19Y3NreJ2aWd3b/+gfHjU0nGqGDZZLGLVCahGwSU2DTcCO4lCGgUC28H4dua3H1FpHst7M0nQj+hQ8pAzaqzUeOqXK27VnYOsEi8nFchR75e/eoOYpRFKwwTVuuu5ifEzqgxnAqelXqoxoWxMh9i1VNIItZ/ND52SM6sMSBgrW9KQufp7IqOR1pMosJ0RNSO97M3E/7xuasJrP+MySQ1KtlgUpoKYmMy+JgOukBkxsYQyxe2thI2ooszYbEo2BG/55VXSuqh6btVrXFZqN3kcRTiBUzgHD66gBndQhyYwQHiGV3hzHpwX5935WLQWnHzmGP7A+fwB5jmM/A==</latexit>ˆx<latexit sha1_base64="5QTnVRVSrnyzznVU7d5bF5u03Iw=">AAAB7nicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0GPRi8cK9gPaUDbbTbt0swm7E7GE/ggvHhTx6u/x5r9x0+agrQ8GHu/NMDMvSKQw6LrfTmltfWNzq7xd2dnd2z+oHh61TZxqxlsslrHuBtRwKRRvoUDJu4nmNAok7wST29zvPHJtRKwecJpwP6IjJULBKFqp0x9TzJ5mg2rNrbtzkFXiFaQGBZqD6ld/GLM04gqZpMb0PDdBP6MaBZN8VumnhieUTeiI9yxVNOLGz+bnzsiZVYYkjLUthWSu/p7IaGTMNApsZ0RxbJa9XPzP66UYXvuZUEmKXLHFojCVBGOS/06GQnOGcmoJZVrYWwkbU00Z2oQqNgRv+eVV0r6oe27du7+sNW6KOMpwAqdwDh5cQQPuoAktYDCBZ3iFNydxXpx352PRWnKKmWP4A+fzB7A8j8k=</latexit><latexit sha1_base64="5QTnVRVSrnyzznVU7d5bF5u03Iw=">AAAB7nicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0GPRi8cK9gPaUDbbTbt0swm7E7GE/ggvHhTx6u/x5r9x0+agrQ8GHu/NMDMvSKQw6LrfTmltfWNzq7xd2dnd2z+oHh61TZxqxlsslrHuBtRwKRRvoUDJu4nmNAok7wST29zvPHJtRKwecJpwP6IjJULBKFqp0x9TzJ5mg2rNrbtzkFXiFaQGBZqD6ld/GLM04gqZpMb0PDdBP6MaBZN8VumnhieUTeiI9yxVNOLGz+bnzsiZVYYkjLUthWSu/p7IaGTMNApsZ0RxbJa9XPzP66UYXvuZUEmKXLHFojCVBGOS/06GQnOGcmoJZVrYWwkbU00Z2oQqNgRv+eVV0r6oe27du7+sNW6KOMpwAqdwDh5cQQPuoAktYDCBZ3iFNydxXpx352PRWnKKmWP4A+fzB7A8j8k=</latexit><latexit sha1_base64="5QTnVRVSrnyzznVU7d5bF5u03Iw=">AAAB7nicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0GPRi8cK9gPaUDbbTbt0swm7E7GE/ggvHhTx6u/x5r9x0+agrQ8GHu/NMDMvSKQw6LrfTmltfWNzq7xd2dnd2z+oHh61TZxqxlsslrHuBtRwKRRvoUDJu4nmNAok7wST29zvPHJtRKwecJpwP6IjJULBKFqp0x9TzJ5mg2rNrbtzkFXiFaQGBZqD6ld/GLM04gqZpMb0PDdBP6MaBZN8VumnhieUTeiI9yxVNOLGz+bnzsiZVYYkjLUthWSu/p7IaGTMNApsZ0RxbJa9XPzP66UYXvuZUEmKXLHFojCVBGOS/06GQnOGcmoJZVrYWwkbU00Z2oQqNgRv+eVV0r6oe27du7+sNW6KOMpwAqdwDh5cQQPuoAktYDCBZ3iFNydxXpx352PRWnKKmWP4A+fzB7A8j8k=</latexit><latexit sha1_base64="5QTnVRVSrnyzznVU7d5bF5u03Iw=">AAAB7nicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0GPRi8cK9gPaUDbbTbt0swm7E7GE/ggvHhTx6u/x5r9x0+agrQ8GHu/NMDMvSKQw6LrfTmltfWNzq7xd2dnd2z+oHh61TZxqxlsslrHuBtRwKRRvoUDJu4nmNAok7wST29zvPHJtRKwecJpwP6IjJULBKFqp0x9TzJ5mg2rNrbtzkFXiFaQGBZqD6ld/GLM04gqZpMb0PDdBP6MaBZN8VumnhieUTeiI9yxVNOLGz+bnzsiZVYYkjLUthWSu/p7IaGTMNApsZ0RxbJa9XPzP66UYXvuZUEmKXLHFojCVBGOS/06GQnOGcmoJZVrYWwkbU00Z2oQqNgRv+eVV0r6oe27du7+sNW6KOMpwAqdwDh5cQQPuoAktYDCBZ3iFNydxXpx352PRWnKKmWP4A+fzB7A8j8k=</latexit>ReferenceFigure1:IllustrationofthecomputationoftherecallmetricRBERT.Giventhereferencexandcandidateˆx,wecomputeBERTembeddingsandpairwisecosinesimilarity.Wehighlightthegreedymatchinginred,andincludetheoptionalidfimportanceweighting.Weexperimentwithdifferentmodels(Section4),usingthetokenizerprovidedwitheachmodel.Givenatokenizedreferencesentencex=hx1,...,xki,theembeddingmodelgeneratesase-quenceofvectorshx1,...,xki.Similarly,thetokenizedcandidateˆx=hˆx1,...,ˆxmiismappedtohˆx1,...,ˆxli.ThemainmodelweuseisBERT,whichtokenizestheinputtextintoasequenceofwordpieces(Wuetal.,2016),whereunknownwordsaresplitintoseveralcommonlyobservedsequencesofcharacters.TherepresentationforeachwordpieceiscomputedwithaTransformerencoder(Vaswanietal.,2017)byrepeatedlyapplyingself-attentionandnonlineartransformationsinanalternatingfashion.BERTembeddingshavebeenshowntobeneﬁtvariousNLPtasks(Devlinetal.,2019;Liu,2019;Huangetal.,2019;Yangetal.,2019a).SimilarityMeasureThevectorrepresentationallowsforasoftmeasureofsimilarityinsteadofexact-string(Papinenietal.,2002)orheuristic(Banerjee&Lavie,2005)matching.Thecosinesimilarityofareferencetokenxiandacandidatetokenˆxjisx>iˆxjkxikkˆxjk.Weusepre-normalizedvectors,whichreducesthiscalculationtotheinnerproductx>iˆxj.Whilethismeasureconsiderstokensinisolation,thecontextualembeddingscontaininformationfromtherestofthesentence.BERTSCOREThecompletescorematcheseachtokeninxtoatokeninˆxtocomputerecall,andeachtokeninˆxtoatokeninxtocomputeprecision.Weusegreedymatchingtomaximizethematchingsimilarityscore,2whereeachtokenismatchedtothemostsimilartokenintheothersentence.WecombineprecisionandrecalltocomputeanF1measure.Forareferencexandcandidateˆx,therecall,precision,andF1scoresare:RBERT=1|x|Xxi2xmaxˆxj2ˆxx>iˆxj,PBERT=1|ˆx|Xˆxj2ˆxmaxxi2xx>iˆxj,FBERT=2PBERT·RBERTPBERT+RBERT.ImportanceWeightingPreviousworkonsimilaritymeasuresdemonstratedthatrarewordscanbemoreindicativeforsentencesimilaritythancommonwords(Banerjee&Lavie,2005;Vedantametal.,2015).BERTSCOREenablesustoeasilyincorporateimportanceweighting.Weexperimentwithinversedocumentfrequency(idf)scorescomputedfromthetestcorpus.GivenMreferencesentences{x(i)}Mi=1,theidfscoreofaword-piecetokenwisidf(w)= log1MMXi=1I[w2x(i)],whereI[·]isanindicatorfunction.Wedonotusethefulltf-idfmeasurebecauseweprocesssinglesentences,wherethetermfrequency(tf)islikely1.Forexample,recallwithidfweightingisRBERT=Pxi2xidf(xi)maxˆxj2ˆxx>iˆxjPxi2xidf(xi).Becauseweusereferencesentencestocomputeidf,theidfscoresremainthesameforallsystemsevaluatedonaspeciﬁctestset.Weapplyplus-onesmoothingtohandleunknownwordpieces.2WecomparegreedymatchingwithoptimalassignmentinAppendixC.413.8

• SUMMARY

289

ampliﬁed by MT systems, with pronouns being mapped to male or female gender
with a probability higher than if the mapping was based on actual labor employment
statistics.

Hungarian (gender neutral) source
˝o egy ´apol´o
˝o egy tud´os
˝o egy m´ern¨ok
˝o egy p´ek
˝o egy tan´ar
˝o egy esk¨uv˝oszervez˝o
˝o egy vez´erigazgat´o

English MT output
she is a nurse
he is a scientist
he is an engineer
he is a baker
she is a teacher
she is a wedding organizer
he is a CEO

Figure 13.12 When translating from gender-neutral languages like Hungarian into English,
current MT systems interpret people from traditionally male-dominated occupations as male,
and traditionally female-dominated occupations as female (Prates et al., 2019).

Similarly, a recent challenge set, the WinoMT dataset (Stanovsky et al., 2019)
shows that MT systems perform worse when they are asked to translate sentences
that describe people with non-stereotypical gender roles, like “The doctor asked the
nurse to help her in the operation”.

Many ethical questions in MT require further research. One open problem is
developing metrics for knowing what our systems don’t know. This is because MT
systems can be used in urgent situations where human translators may be unavailable
or delayed: in medical domains, to help translate when patients and doctors don’t
speak the same language, or in legal domains, to help judges or lawyers communi-
cate with witnesses or defendants. In order to ‘do no harm’, systems need ways to
assign conﬁdence values to candidate translations, so they can abstain from giving
incorrect translations that may cause harm.

conﬁdence

13.8 Summary

Machine translation is one of the most widely used applications of NLP, and the
encoder-decoder model, ﬁrst developed for MT is a key tool that has applications
throughout NLP.

• Languages have divergences, both structural and lexical, that make translation

difﬁcult.

• The linguistic ﬁeld of typology investigates some of these differences; lan-
guages can be classiﬁed by their position along typological dimensions like
whether verbs precede their objects.

• Encoder-decoder networks (for transformers just as we saw in Chapter 9 for
RNNs) are composed of an encoder network that takes an input sequence
and creates a contextualized representation of it, the context. This context
representation is then passed to a decoder which generates a task-speciﬁc
output sequence.

• Cross-attention allows the transformer decoder to view information from all

the hidden states of the encoder.

• Machine translation models are trained on a parallel corpus, sometimes called

a bitext, a text that appears in two (or more) languages.

290 CHAPTER 13

• MACHINE TRANSLATION

• Backtranslation is a way of making use of monolingual corpora in the target
language by running a pilot MT engine backwards to create synthetic bitexts.
• MT is evaluated by measuring a translation’s adequacy (how well it captures
the meaning of the source sentence) and ﬂuency (how ﬂuent or natural it is
in the target language). Human evaluation is the gold standard, but automatic
evaluation metrics like chrF, which measure character n-gram overlap with
human translations, or more recent metrics based on embedding similarity,
are also commonly used.

Bibliographical and Historical Notes

MT was proposed seriously by the late 1940s, soon after the birth of the computer
(Weaver, 1949/1955). In 1954, the ﬁrst public demonstration of an MT system pro-
totype (Dostert, 1955) led to great excitement in the press (Hutchins, 1997). The
next decade saw a great ﬂowering of ideas, preﬁguring most subsequent develop-
ments. But this work was ahead of its time—implementations were limited by, for
example, the fact that pending the development of disks there was no good way to
store dictionary information.

As high-quality MT proved elusive (Bar-Hillel, 1960), there grew a consensus
on the need for better evaluation and more basic research in the new ﬁelds of for-
mal and computational linguistics. This consensus culminated in the famously crit-
ical ALPAC (Automatic Language Processing Advisory Committee) report of 1966
(Pierce et al., 1966) that led in the mid 1960s to a dramatic cut in funding for MT
in the US. As MT research lost academic respectability, the Association for Ma-
chine Translation and Computational Linguistics dropped MT from its name. Some
MT developers, however, persevered, and there were early MT systems like M´et´eo,
which translated weather forecasts from English to French (Chandioux, 1976), and
industrial systems like Systran.

In the early years, the space of MT architectures spanned three general mod-
els. In direct translation, the system proceeds word-by-word through the source-
language text, translating each word incrementally. Direct translation uses a large
bilingual dictionary, each of whose entries is a small program with the job of trans-
lating one word. In transfer approaches, we ﬁrst parse the input text and then ap-
ply rules to transform the source-language parse into a target language parse. We
then generate the target language sentence from the parse tree. In interlingua ap-
proaches, we analyze the source language text into some abstract meaning repre-
sentation, called an interlingua. We then generate into the target language from
this interlingual representation. A common way to visualize these three early ap-
proaches was the Vauquois triangle shown in Fig. 13.13. The triangle shows the
increasing depth of analysis required (on both the analysis and generation end) as
we move from the direct approach through transfer approaches to interlingual ap-
proaches. In addition, it shows the decreasing amount of transfer knowledge needed
as we move up the triangle, from huge amounts of transfer at the direct level (al-
most all knowledge is transfer knowledge for each word) through transfer (transfer
rules only for parse trees or thematic roles) through interlingua (no speciﬁc transfer
knowledge). We can view the encoder-decoder network as an interlingual approach,
with attention acting as an integration of direct and transfer, allowing words or their
representations to be directly accessed by the decoder.

Vauquois
triangle

BIBLIOGRAPHICAL AND HISTORICAL NOTES

291

Figure 13.13 The Vauquois (1968) triangle.

Statistical methods began to be applied around 1990, enabled ﬁrst by the devel-
opment of large bilingual corpora like the Hansard corpus of the proceedings of the
Canadian Parliament, which are kept in both French and English, and then by the
growth of the Web. Early on, a number of researchers showed that it was possible
to extract pairs of aligned sentences from bilingual corpora, using words or simple
cues like sentence length (Kay and R¨oscheisen 1988, Gale and Church 1991, Gale
and Church 1993, Kay and R¨oscheisen 1993).

At the same time, the IBM group, drawing directly on the noisy channel model
for speech recognition, proposed two related paradigms for statistical MT. These
include the generative algorithms that became known as IBM Models 1 through
5, implemented in the Candide system. The algorithms (except for the decoder)
were published in full detail— encouraged by the US government who had par-
tially funded the work— which gave them a huge impact on the research community
(Brown et al. 1990, Brown et al. 1993).

The group also developed a discriminative approach, called MaxEnt (for maxi-
mum entropy, an alternative formulation of logistic regression), which allowed many
features to be combined discriminatively rather than generatively (Berger et al.,
1996), which was further developed by Och and Ney (2002).

By the turn of the century, most academic research on machine translation used
statistical MT, either in the generative or discriminative mode. An extended version
of the generative approach, called phrase-based translation was developed, based
on inducing translations for phrase-pairs (Och 1998, Marcu and Wong 2002, Koehn
et al. (2003), Och and Ney 2004, Deng and Byrne 2005, inter alia).

Once automatic metrics like BLEU were developed (Papineni et al., 2002), the
discriminative log linear formulation (Och and Ney, 2004), drawing from the IBM
MaxEnt work (Berger et al., 1996), was used to directly optimize evaluation metrics
like BLEU in a method known as Minimum Error Rate Training, or MERT (Och,
2003), also drawing from speech recognition models (Chou et al., 1993). Toolkits
like GIZA (Och and Ney, 2003) and Moses (Koehn et al. 2006, Zens and Ney 2007)
were widely used.

There were also approaches around the turn of the century that were based on
syntactic structure (Chapter 17). Models based on transduction grammars (also
called synchronous grammars assign a parallel syntactic tree structure to a pair of
sentences in different languages, with the goal of translating the sentences by ap-
plying reordering operations on the trees. From a generative perspective, we can
view a transduction grammar as generating pairs of aligned sentences in two lan-
guages. Some of the most widely used models included the inversion transduction
grammar (Wu, 1996) and synchronous context-free grammars (Chiang, 2005),

statistical MT

IBM Models

Candide

phrase-based
translation

MERT

Moses

transduction
grammars

inversion
transduction
grammar

CHAPTER 13

• MACHINE TRANSLATION

Neural networks had been applied at various times to various aspects of machine
translation; for example Schwenk et al. (2006) showed how to use neural language
models to replace n-gram language models in a Spanish-English system based on
IBM Model 4. The modern neural encoder-decoder approach was pioneered by
Kalchbrenner and Blunsom (2013), who used a CNN encoder and an RNN decoder,
and was ﬁrst applied to MT by Bahdanau et al. (2015). The transformer encoder-
decoder was proposed by Vaswani et al. (2017) (see the History section of Chap-
ter 10).

Research on evaluation of machine translation began quite early. Miller and
Beebe-Center (1956) proposed a number of methods drawing on work in psycholin-
guistics. These included the use of cloze and Shannon tasks to measure intelligibility
as well as a metric of edit distance from a human translation, the intuition that un-
derlies all modern overlap-based automatic evaluation metrics. The ALPAC report
included an early evaluation study conducted by John Carroll that was extremely in-
ﬂuential (Pierce et al., 1966, Appendix 10). Carroll proposed distinct measures for
ﬁdelity and intelligibility, and had raters score them subjectively on 9-point scales.
Much early evaluation work focuses on automatic word-overlap metrics like BLEU
(Papineni et al., 2002), NIST (Doddington, 2002), TER (Translation Error Rate)
(Snover et al., 2006), Precision and Recall (Turian et al., 2003), and METEOR
(Banerjee and Lavie, 2005); character n-gram overlap methods like chrF (Popovi´c,
2015) came later. More recent evaluation work, echoing the ALPAC report, has
emphasized the importance of careful statistical methodology and the use of human
evaluation (Kocmi et al., 2021; Marie et al., 2021).

The early history of MT is surveyed in Hutchins 1986 and 1997; Nirenburg et al.
(2002) collects early readings. See Croft (1990) or Comrie (1989) for introductions
to linguistic typology.

Exercises

13.1 Compute by hand the chrF2,2 score for HYP2 on page 286 (the answer should

round to .62).

CHAPTER

14 Question Answering and In-

formation Retrieval

The quest for knowledge is deeply human, and so it is not surprising that practically
as soon as there were computers we were asking them questions. By the early 1960s,
systems used the two major paradigms of question answering—retrieval-based and
knowledge-based—to answer questions about baseball statistics or scientiﬁc facts.
Even imaginary computers got into the act. Deep Thought, the computer that Dou-
glas Adams invented in The Hitchhiker’s Guide to the Galaxy, managed to answer
“the Ultimate Question Of Life, The Universe, and Everything”.1 In 2011, IBM’s
Watson question-answering system won the TV game-show Jeopardy!, surpassing
humans at answering questions like:

2

Question answering systems are designed to ﬁll human information needs that
might arise in situations like talking to a virtual assistant or a chatbot, interacting
with a search engine, or querying a database. Question answering systems often
focus on a particular subset of these information needs: factoid questions, questions
that can be answered with simple facts expressed in short texts, like the following:

(14.1) Where is the Louvre Museum located?
(14.2) What is the average age of the onset of autism?

One way to do question answering is just to directly ask a large language model.
For example, we could use the techniques of Chapter 12, prompting a large pre-
trained causal language model with a string like

Q: Where is the Louvre Museum located? A:

have it do conditional generation given this preﬁx, and take the response as the
answer. The idea is that huge pretrained language models have read a lot of facts
in their pretraining data, presumably including the location of the Louvre, and have
encoded this information in their parameters.

For some general factoid questions this can be a useful approach and is used in
practice. But prompting a large language model is not yet a solution for question
answering. The main problem is that large language models often give the wrong
answer! Large language models hallucinate. That is, they simply make up answers
that sound reasonable. Sometime language models know they are hallucinating,
but often they don’t: language model estimates of their conﬁdence in their answers
aren’t well-calibrated. In a calibrated system, the conﬁdence of a system in the
correctness of its answer is highly correlated with the probability of an answer being
correct. So if the system is wrong, at least it might hedge it’s answer or tell us to go

1 The answer was 42, but unfortunately the details of the question were never revealed.
2 The answer, of course, is ‘Who is Bram Stoker’, and the novel was Dracula.

hallucinate

calibrated

WILLIAM WILKINSON’S “AN ACCOUNT OF THE PRINCIPALITIES OF WALLACHIA AND MOLDOVIA”INSPIRED THIS AUTHOR’S MOST FAMOUS NOVEL294 CHAPTER 14

• QUESTION ANSWERING AND INFORMATION RETRIEVAL

check another source. But since language models are not well-calibrated, they often
give a very wrong answer with complete certainty.

A second problem is that simply prompting a large language model doesn’t allow
us to ask questions about proprietary data. A common use of question-answering is
to query private data, like asking an assistant about our email or private documents,
or asking a question about our own medical records. Or a company may have in-
ternal documents that contain answers for customer service or internal use. Or legal
ﬁrms need to ask questions about legal discovery from proprietary documents. Fur-
thermore, the use of internal datasets, or even the web itself, can be especially useful
for rapidly changing or dynamic information; by contrast, large language models
are often only released at long increments of many months and so may not have
up-to-date information.

For this reason the current dominant solution for question-answering is the two-
stage retriever/reader model (Chen et al., 2017a), and that is the method we will
focus on in this chapter. In a retriever/reader model, we use information retrieval
techniques to ﬁrst retrieve documents that are likely to have information that might
help answer the question. Then we either extract an answer from spans of text in
the documents, or use large language models to generate an answer given these
documents, sometimes called retrieval-augmented generation,

Basing our answers on retrieved documents can solve the above-mentioned prob-
lems with using simple prompting to answer questions. First, we can ensure that the
answer is grounded in facts from some curated dataset. And we can give the answer
accompanied by the context of the passage or document the answer came from. This
information can help users have conﬁdence in the accuracy of the answer (or help
them spot when it is wrong!). And we can use our retrieval techniques on any pro-
prietary data we want, such as legal or medical data for those applications.

We’ll begin by introducing information retrieval, the task of choosing the most
relevant document from a document set given a user’s query expressing their infor-
mation need. We’ll see the classic method based on cosines of sparse tf-idf vec-
tors, as well as modern neural IR using dense retriever, in which we run documents
through BERT or other language models to get neural representations, and use co-
sine between dense representations of the query and document.

We then introduce retriever-based question answering, via the retriever/reader
model. This algorithm most commonly relies on the vast amount of text on the
web, in which case it is sometimes called open domain QA, or on collections of
proprietary data, or scientiﬁc papers like PubMed. We’ll go through the two types
of readers, span extractors and retrieval-augmented generation.

14.1

Information Retrieval

information
retrieval

Information retrieval or IR is the name of the ﬁeld encompassing the retrieval of all
IR manner of media based on user information needs. The resulting IR system is often
called a search engine. Our goal in this section is to give a sufﬁcient overview of IR
to see its application to question answering. Readers with more interest speciﬁcally
in information retrieval should see the Historical Notes section at the end of the
chapter and textbooks like Manning et al. (2008).

ad hoc retrieval

document

The IR task we consider is called ad hoc retrieval, in which a user poses a
query to a retrieval system, which then returns an ordered set of documents from
some collection. A document refers to whatever unit of text the system indexes and

14.1

•

INFORMATION RETRIEVAL

295

collection

term
query

retrieves (web pages, scientiﬁc papers, news articles, or even shorter passages like
paragraphs). A collection refers to a set of documents being used to satisfy user
requests. A term refers to a word in a collection, but it may also include phrases.
Finally, a query represents a user’s information need expressed as a set of terms.
The high-level architecture of an ad hoc retrieval engine is shown in Fig. 14.1.

Figure 14.1 The architecture of an ad hoc IR system.

term weight

BM25

The basic IR architecture uses the vector space model we introduced in Chap-
ter 6, in which we map queries and document to vectors based on unigram word
counts, and use the cosine similarity between the vectors to rank potential documents
(Salton, 1971). This is thus an example of the bag-of-words model introduced in
Chapter 4, since words are considered independently of their positions.

14.1.1 Term weighting and document scoring

Let’s look at the details of how the match between a document and query is scored.
We don’t use raw word counts in IR, instead computing a term weight for each
document word. Two term weighting schemes are common: the tf-idf weighting
introduced in Chapter 6, and a slightly more powerful variant called BM25.

We’ll reintroduce tf-idf here so readers don’t need to look back at Chapter 6.
Tf-idf (the ‘-’ here is a hyphen, not a minus sign) is the product of two terms, the
term frequency tf and the inverse document frequency idf.

The term frequency tells us how frequent the word is; words that occur more
often in a document are likely to be informative about the document’s contents. We
usually use the log10 of the word frequency, rather than the raw count. The intuition
is that a word appearing 100 times in a document doesn’t make that word 100 times
more likely to be relevant to the meaning of the document. We also need to do
something special with counts of 0, since we can’t take the log of 0.3

tft, d =

1 + log10 count(t, d)
0
(cid:40)

if count(t, d) > 0
otherwise

(14.3)

If we use log weighting, terms which occur 0 times in a document would have tf = 0,
1 times in a document tf = 1 + log10(1) = 1 + 0 = 1, 10 times in a document tf =
1 + log10(10) = 2, 100 times tf = 1 + log10(100) = 3, 1000 times tf = 4, and so on.
The document frequency dft of a term t is the number of documents it oc-
curs in. Terms that occur in only a few documents are useful for discriminating
those documents from the rest of the collection; terms that occur across the entire

3 We can also use this alternative formulation, which we have used in earlier editions:
log10(count(t, d) + 1)

tft, d =

DocumentDocumentDocumentDocumentDocumentDocumentQuery ProcessingIndexingSearchDocumentDocumentDocumentDocumentDocumentRanked DocumentsDocumentqueryInvertedIndexqueryvectordocument collection296 CHAPTER 14

• QUESTION ANSWERING AND INFORMATION RETRIEVAL

collection aren’t as helpful. The inverse document frequency or idf term weight
(Sparck Jones, 1972) is deﬁned as:

idft = log10

N
dft

(14.4)

where N is the total number of documents in the collection, and dft is the number
of documents in which term t occurs. The fewer documents in which a term occurs,
the higher this weight; the lowest weight of 0 is assigned to terms that occur in every
document.

Here are some idf values for some words in the corpus of Shakespeare plays,
ranging from extremely informative words that occur in only one play like Romeo,
to those that occur in a few like salad or Falstaff, to those that are very common like
fool or so common as to be completely non-discriminative since they occur in all 37
plays like good or sweet.4

Word
Romeo
salad
Falstaff
forest
battle
wit
fool
good
sweet

df
1
2
4
12
21
34
36
37
37

idf
1.57
1.27
0.967
0.489
0.246
0.037
0.012
0
0

The tf-idf value for word t in document d is then the product of term frequency

tft, d and IDF:

tf-idf(t, d) = tft, d ·

idft

14.1.2 Document Scoring

We score document d by the cosine of its vector d with the query vector q:

score(q, d) = cos(q, d) =

q
q
|

d
d
|

·
||

(14.5)

(14.6)

Another way to think of the cosine computation is as the dot product of unit vectors;
we ﬁrst normalize both the query and document vector to unit vectors, by dividing
by their lengths, and then take the dot product:

score(q, d) = cos(q, d) =

q
q
|
|

·

d
d
|
|

(14.7)

We can spell out Eq. 14.7, using the tf-idf values and spelling out the dot product as
a sum of products:

score(q, d) =

q
t
(cid:88)
∈

tf-idf(t, q)
q tf-idf 2(qi, q) ·

qi∈

tf-idf(t, d)

d tf-idf 2(di, d)

(14.8)

(cid:113)(cid:80)

di∈

(cid:113)(cid:80)

4 Sweet was one of Shakespeare’s favorite adjectives, a fact probably related to the increased use of
sugar in European recipes around the turn of the 16th century (Jurafsky, 2014, p. 175).

14.1

•

INFORMATION RETRIEVAL

297

Now let’s use (14.8) to walk through an example of a tiny query against a collec-
tion of 4 nano documents, computing tf-idf values and seeing the rank of the docu-
ments. We’ll assume all words in the following query and documents are downcased
and punctuation is removed:

Query: sweet love
Doc 1: Sweet sweet nurse! Love?
Doc 2: Sweet sorrow
Doc 3: How sweet is love?
Doc 4: Nurse!

, and

q
,
|
|

d2|
|

d1|
|

Fig. 14.2 shows the computation of the tf-idf cosine between the query and Doc-
ument 1, and the query and Document 2. The cosine is the normalized dot product
of tf-idf values, so for the normalization we must need to compute the document
for the query and the ﬁrst two documents using
vector lengths
Eq. 14.3, Eq. 14.4, Eq. 14.5, and Eq. 14.8 (computations for Documents 3 and 4 are
also needed but are left as an exercise for the reader). The dot product between the
vectors is the sum over dimensions of the product, for each dimension, of the values
of the two tf-idf vectors for that dimension. This product is only non-zero where
both the query and document have non-zero values, so for this example, in which
only sweet and love have non-zero values in the query, the dot product will be the
sum of the products of those elements of each vector.

Query

q
tf-idf n’lized = tf-idf/
|
|

cnt tf df idf
word
1
sweet
0
nurse
1
love
how
0
sorrow 0
0
is

1 3 0.125 0.125 0.383
0 2 0.301 0
1 2 0.301 0.301 0.924
0 1 0.602 0
0 1 0.602 0
0 1 0.602 0
= √.1252 + .3012 = .326

0
0
0

0

q
|
|

Document 1
tf-idf n’lized

q
×
0.137
0
0.610
0
0
0
0
0
0
= √.1632 + .3012 + .3012 = .456

1.301 0.163 0.357
1.000 0.301 0.661
1.000 0.301 0.661
0
0
0

cnt tf
word
2
sweet
1
nurse
1
love
how
0
sorrow 0
is
0
d1|
|

0
0
0

Document 2
tf-idf n’lized

cnt tf
1
0
0
0
1
0

q
×
1.000 0.125 0.203
0.0779
0
0
0
0
0
0
0
1.000 0.602 0.979
0
0
= √.1252 + .6022 = .615

0
0
0

0
0
0

0

0

d2|
|

Cosine:

of column: 0.747

Cosine:

of column: 0.0779

Figure 14.2 Computation of tf-idf cosine score between the query and nano-documents 1 (0.747) and 2
(0.0779), using Eq. 14.3, Eq. 14.4, Eq. 14.5 and Eq. 14.8.

(cid:80)

(cid:80)

Document 1 has a higher cosine with the query (0.747) than Document 2 has
with the query (0.0779), and so the tf-idf cosine model would rank Document 1
above Document 2. This ranking is intuitive given the vector space model, since
Document 1 has both terms including two instances of sweet, while Document 2 is

298 CHAPTER 14

• QUESTION ANSWERING AND INFORMATION RETRIEVAL

missing one of the terms. We leave the computation for Documents 3 and 4 as an
exercise for the reader.

In practice, there are many variants and approximations to Eq. 14.8. For exam-
ple, we might choose to simplify processing by removing some terms. To see this,
let’s start by expanding the formula for tf-idf in Eq. 14.8 to explicitly mention the tf
and idf terms from (14.5):

score(q, d) =

q
t
(cid:88)
∈

idft

tft, q ·
q tf-idf 2(qi, q) ·
qi∈

tft, d ·
idft
d tf-idf 2(di, d)
di∈

(14.9)

(cid:113)(cid:80)

(cid:113)(cid:80)

In one common variant of tf-idf cosine, for example, we drop the idf term for the
document. Eliminating the second copy of the idf term (since the identical term is
already computed for the query) turns out to sometimes result in better performance:

score(q, d) =

q
t
(cid:88)
∈

idft

tft, q·
q tf-idf 2(qi, q) ·
qi∈

tft, d ·
idft
d tf-idf 2(di, d)
di∈

(14.10)

Other variants of tf-idf eliminate various other terms.

(cid:113)(cid:80)

(cid:113)(cid:80)

BM25

A slightly more complex variant in the tf-idf family is the BM25 weighting
scheme (sometimes called Okapi BM25 after the Okapi IR system in which it was
introduced (Robertson et al., 1995)). BM25 adds two parameters: k, a knob that
adjust the balance between term frequency and IDF, and b, which controls the im-
portance of document length normalization. The BM25 score of a document d given
a query q is:

IDF

weighted tf

log
(cid:122)

N
dft (cid:19)
(cid:125)(cid:124)
(cid:123)
(cid:18)

(cid:122)
k

1

q
t
(cid:88)
∈

tft,d
d
(cid:125)(cid:124)
|
|
davg|
|

(cid:16)

(cid:17)(cid:17)

b + b

−

(cid:16)

(cid:123)
+ tft,d

(14.11)

davg|
|

is the length of the average document. When k is 0, BM25 reverts to
where
no use of term frequency, just a binary selection of terms in the query (plus idf).
A large k results in raw term frequency (plus idf). b ranges from 1 (scaling by
document length) to 0 (no length scaling). Manning et al. (2008) suggest reasonable
values are k = [1.2,2] and b = 0.75. Kamphuis et al. (2020) is a useful summary of
the many minor variants of BM25.

stop list

In the past it was common to remove high-frequency words from both
Stop words
the query and document before representing them. The list of such high-frequency
words to be removed is called a stop list. The intuition is that high-frequency terms
(often function words like the, a, to) carry little semantic weight and may not help
with retrieval, and can also help shrink the inverted index ﬁles we describe below.
The downside of using a stop list is that it makes it difﬁcult to search for phrases
that contain words in the stop list. For example, common stop lists would reduce the
phrase to be or not to be to the phrase not. In modern IR systems, the use of stop lists
is much less common, partly due to improved efﬁciency and partly because much
of their function is already handled by IDF weighting, which downweights function
words that occur in every document. Nonetheless, stop word removal is occasionally
useful in various NLP tasks so is worth keeping in mind.

inverted index

postings

14.1

•

INFORMATION RETRIEVAL

299

14.1.3

Inverted Index

In order to compute scores, we need to efﬁciently ﬁnd documents that contain words
in the query. (Any document that contains none of the query terms will have a score
of 0 and can be ignored.) The basic search problem in IR is thus to ﬁnd all documents
d

C that contain a term q
The data structure for this task is the inverted index, which we use for mak-
ing this search efﬁcient, and also conveniently storing useful information like the
document frequency and the count of each term in each document.

Q.

∈

∈

An inverted index, given a query term, gives a list of documents that contain the
term. It consists of two parts, a dictionary and the postings. The dictionary is a list
of terms (designed to be efﬁciently accessed), each pointing to a postings list for the
term. A postings list is the list of document IDs associated with each term, which
can also contain information like the term frequency or even the exact positions of
terms in the document. The dictionary can also start the document frequency for
each term For example, a simple inverted index for our 4 sample documents above,
with each word containing its document frequency in
, and a pointer to a postings
list that contains document IDs and term counts in [], might look like the following:

{}

1
how
} →
{
is
1
→
}
{
2
love
} →
{
nurse
2
{
} →
1
sorry
} →
{
3
sweet
} →
{

3 [1]
3 [1]
1 [1]
1 [1]
2 [1]
1 [2]

3 [1]
4 [1]

2 [1]

→
→

→

3 [1]

→

Given a list of terms in query, we can very efﬁciently get lists of all candidate
documents, together with the information necessary to compute the tf-idf scores we
need.

There are alternatives to the inverted index. For the question-answering domain
of ﬁnding Wikipedia pages to match a user query, Chen et al. (2017a) show that
indexing based on bigrams works better than unigrams, and use efﬁcient hashing
algorithms rather than the inverted index to make the search efﬁcient.

14.1.4 Evaluation of Information-Retrieval Systems

We measure the performance of ranked retrieval systems using the same precision
and recall metrics we have been using. We make the assumption that each docu-
ment returned by the IR system is either relevant to our purposes or not relevant.
Precision is the fraction of the returned documents that are relevant, and recall is the
fraction of all relevant documents that are returned. More formally, let’s assume a
system returns T ranked documents in response to an information request, a subset
R of these are relevant, a disjoint subset, N, are the remaining irrelevant documents,
and U documents in the collection as a whole are relevant to this request. Precision
and recall are then deﬁned as:

R
Precision = |
|
T
|
|

R
Recall = |
|
U
|
|

(14.12)

Unfortunately, these metrics don’t adequately measure the performance of a system
that ranks the documents it returns. If we are comparing the performance of two
ranked retrieval systems, we need a metric that prefers the one that ranks the relevant
documents higher. We need to adapt precision and recall to capture how well a
system does at putting relevant documents higher in the ranking.

300 CHAPTER 14

• QUESTION ANSWERING AND INFORMATION RETRIEVAL

Rank
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25

Judgment
R
N
R
N
R
R
N
R
N
N
R
N
N
N
R
N
N
R
N
N
N
N
N
N
R

PrecisionRank
1.0
.50
.66
.50
.60
.66
.57
.63
.55
.50
.55
.50
.46
.43
.47
.44
.44
.44
.42
.40
.38
.36
.35
.33
.36

RecallRank
.11
.11
.22
.22
.33
.44
.44
.55
.55
.55
.66
.66
.66
.66
.77
.77
.77
.88
.88
.88
.88
.88
.88
.88
1.0

Figure 14.3 Rank-speciﬁc precision and recall values calculated as we proceed down
through a set of ranked documents (assuming the collection has 9 relevant documents).

Figure 14.4 The precision recall curve for the data in table 14.3.

Let’s turn to an example. Assume the table in Fig. 14.3 gives rank-speciﬁc pre-
cision and recall values calculated as we proceed down through a set of ranked doc-
uments for a particular query; the precisions are the fraction of relevant documents
seen at a given rank, and recalls the fraction of relevant documents found at the same
rank. The recall measures in this example are based on this query having 9 relevant
documents in the collection as a whole.

Note that recall is non-decreasing; when a relevant document is encountered,

0.00.20.40.60.81.0Recall0.00.20.40.60.81.0Precision14.1

•

INFORMATION RETRIEVAL

301

precision-recall
curve

interpolated
precision

recall increases, and when a non-relevant document is found it remains unchanged.
Precision, on the other hand, jumps up and down, increasing when relevant doc-
uments are found, and decreasing otherwise. The most common way to visualize
precision and recall is to plot precision against recall in a precision-recall curve,
like the one shown in Fig. 14.4 for the data in table 14.3.

Fig. 14.4 shows the values for a single query. But we’ll need to combine values
for all the queries, and in a way that lets us compare one system to another. One way
of doing this is to plot averaged precision values at 11 ﬁxed levels of recall (0 to 100,
in steps of 10). Since we’re not likely to have datapoints at these exact levels, we
use interpolated precision values for the 11 recall values from the data points we do
have. We can accomplish this by choosing the maximum precision value achieved
at any level of recall at or above the one we’re calculating. In other words,

IntPrecision(r) = max
i>=r

Precision(i)

(14.13)

This interpolation scheme not only lets us average performance over a set of queries,
but also helps smooth over the irregular precision values in the original data. It is
designed to give systems the beneﬁt of the doubt by assigning the maximum preci-
sion value achieved at higher levels of recall from the one being measured. Fig. 14.5
and Fig. 14.6 show the resulting interpolated data points from our example.

Interpolated Precision
1.0
1.0
.66
.66
.66
.63
.55
.47
.44
.36
.36

Recall
0.0
.10
.20
.30
.40
.50
.60
.70
.80
.90
1.0

mean average
precision

Figure 14.5

Interpolated data points from Fig. 14.3.

Given curves such as that in Fig. 14.6 we can compare two systems or approaches
by comparing their curves. Clearly, curves that are higher in precision across all
recall values are preferred. However, these curves can also provide insight into the
overall behavior of a system. Systems that are higher in precision toward the left
may favor precision over recall, while systems that are more geared towards recall
will be higher at higher levels of recall (to the right).

A second way to evaluate ranked retrieval is mean average precision (MAP),
which provides a single metric that can be used to compare competing systems or
approaches. In this approach, we again descend through the ranked list of items,
but now we note the precision only at those points where a relevant item has been
encountered (for example at ranks 1, 3, 5, 6 but not 2 or 4 in Fig. 14.3). For a single
query, we average these individual precision measurements over the return set (up
to some ﬁxed cutoff). More formally, if we assume that Rr is the set of relevant
documents at or above r, then the average precision (AP) for a single query is

AP =

1

Rr| (cid:88)d

Rr

∈

|

Precisionr(d)

(14.14)

302 CHAPTER 14

• QUESTION ANSWERING AND INFORMATION RETRIEVAL

Figure 14.6 An 11 point interpolated precision-recall curve. Precision at each of the 11
standard recall levels is interpolated for each query from the maximum at any higher level of
recall. The original measured precision recall points are also shown.

where Precisionr(d) is the precision measured at the rank at which document d was
found. For an ensemble of queries Q, we then average over these averages, to get
our ﬁnal MAP measure:

MAP =

AP(q)

1
Q
|

| (cid:88)q
Q
∈

(14.15)

The MAP for the single query (hence = AP) in Fig. 14.3 is 0.6.

14.2

Information Retrieval with Dense Vectors

The classic tf-idf or BM25 algorithms for IR have long been known to have a con-
ceptual ﬂaw: they work only if there is exact overlap of words between the query
and document. In other words, the user posing a query (or asking a question) needs
to guess exactly what words the writer of the answer might have used, an issue called
the vocabulary mismatch problem (Furnas et al., 1987).

The solution to this problem is to use an approach that can handle synonymy:
instead of (sparse) word-count vectors, using (dense) embeddings. This idea was
ﬁrst proposed for retrieval in the last century under the name of Latent Semantic
Indexing approach (Deerwester et al., 1990), but is implemented in modern times
via encoders like BERT.

The most powerful approach is to present both the query and the document to a
single encoder, allowing the transformer self-attention to see all the tokens of both
the query and the document, and thus building a representation that is sensitive to
the meanings of both query and document. Then a linear layer can be put on top of
the [CLS] token to predict a similarity score for the query/document tuple:

z = BERT(q; [SEP]; d)[CLS]
score(q, d) = softmax(U(z))

(14.16)

Interpolated Precision Recall Curve00.10.20.30.40.50.60.70.80.9100.10.20.30.40.50.60.70.80.91RecallPrecision14.2

•

INFORMATION RETRIEVAL WITH DENSE VECTORS

303

This architecture is shown in Fig. 14.7a. Usually the retrieval step is not done on
an entire document. Instead documents are broken up into smaller passages, such
as non-overlapping ﬁxed-length chunks of say 100 tokens, and the retriever encodes
and retrieves these passages rather than entire documents. The query and document
have to be made to ﬁt in the BERT 512-token window, for example by truncating
the query to 64 tokens and truncating the document if necessary so that it, the query,
[CLS], and [SEP] ﬁt in 512 tokens. The BERT system together with the linear layer
U can then be ﬁne-tuned for the relevance task by gathering a tuning dataset of
relevant and non-relevant passages.

(a)

(b)

Figure 14.7 Two ways to do dense retrieval, illustrated by using lines between layers to schematically rep-
resent self-attention: (a) Use a single encoder to jointly encode query and document and ﬁnetune to produce a
relevance score with a linear layer over the CLS token. This is too compute-expensive to use except in rescoring
(b) Use separate encoders for query and document, and use the dot product between CLS token outputs for the
query and document as the score. This is less compute-expensive, but not as accurate.

The problem with the full BERT architecture in Fig. 14.7a is the expense in
computation and time. With this architecture, every time we get a query, we have to
pass every single single document in our entire collection through a BERT encoder
jointly with the new query! This enormous use of resources is impractical for real
cases.

At the other end of the computational spectrum is a much more efﬁcient archi-
tecture, the bi-encoder. In this architecture we can encode the documents in the
collection only one time by using two separate encoder models, one to encode the
query and one to encode the document. We encode each document, and store all
the encoded document vectors in advance. When a query comes in, we encode just
this query and then use the dot product between the query vector and the precom-
puted document vectors as the score for each candidate document (Fig. 14.7b). For
example, if we used BERT, we would have two encoders BERTQ and BERTD and
we could represent the query and document as the [CLS] token of the respective
encoders (Karpukhin et al., 2020):

zq = BERTQ(q)[CLS]
zd = BERTD(d)[CLS]
zd
score(q, d) = zq ·
The bi-encoder is much cheaper than a full query/document encoder, but is also

(14.17)

QueryDocument………………[sep]s(q,d)zCLSUQueryzCLS_QzCLS_DDocument………………•s(q,d)304 CHAPTER 14

• QUESTION ANSWERING AND INFORMATION RETRIEVAL

ColBERT

less accurate, since its relevance decision can’t take full advantage of all the possi-
ble meaning interactions between all the tokens in the query and the tokens in the
document.

There are numerous approaches that lie in between the full encoder and the bi-
encoder. One intermediate alternative is to use cheaper methods (like BM25) as the
ﬁrst pass relevance ranking for each document, take the top N ranked documents,
and use expensive methods like the full BERT scoring to rerank only the top N
documents rather than the whole set.

Another intermediate approach is the ColBERT approach of Khattab and Za-
haria (2020) and Khattab et al. (2021), shown in Fig. 14.8. This method separately
encodes the query and document, but rather than encoding the entire query or doc-
ument into one vector, it separately encodes each of them into contextual represen-
tations for each token. These BERT representations of each document word can be
pre-stored for efﬁciency. The relevance score between a query q and a document d is
a sum of maximum similarity (MaxSim) operators between tokens in q and tokens
in d. Essentially, for each token in q, ColBERT ﬁnds the most contextually simi-
lar token in d, and then sums up these similarities. A relevant document will have
tokens that are contextually very similar to the query.

Figure 14.8 A sketch of the ColBERT algorithm at inference time. The query and docu-
ment are ﬁrst passed through separate BERT encoders. Similarity between query and doc-
ument is computed by summing a soft alignment between the contextual representations of
tokens in the query and the document. Training is end-to-end. (Various details aren’t de-
picted; for example the query is prepended by a [CLS] and [Q:] tokens, and the document
by [CLS] and [D:] tokens). Figure adapted from Khattab and Zaharia (2020).

More formally, a question q is tokenized as [q1, . . . , qn], prepended with a [CLS]
and a special [Q] token, truncated to N=32 tokens (or padded with [MASK] tokens if
it is shorter), and passed through BERT to get output vectors q = [q1, . . . , qN]. The
passage d with tokens [d1, . . . , dm], is processed similarly, including a [CLS] and
special [D] token. A linear layer is applied on top of d and q to control the output
dimension, so as to keep the vectors small for storage efﬁciency, and vectors are
rescaled to unit length, producing the ﬁnal vector sequences Eq (length N) and Ed

QueryDocument………………s(q,d)MaxSimMaxSimMaxSim∑normnormnormnormnormnorm14.3

• USING NEURAL IR FOR QUESTION ANSWERING

305

(length m). The ColBERT scoring mechanism is:

score(q, d) =

N

(cid:88)i=1

m
max
j=1

Eqi ·

Ed j

(14.18)

While the interaction mechanism has no tunable parameters, the ColBERT ar-
chitecture still needs to be trained end-to-end to ﬁne-tune the BERT encoders and
train the linear layers (and the special [Q] and [D] embeddings) from scratch. It
of query q, positive document d+ and negative doc-
is trained on triples
ument d− to produce a score for each document using (14.18), optimizing model
parameters using a cross-entropy loss.

q, d+, d−(cid:105)
(cid:104)

All the supervised algorithms (like ColBERT or the full-interaction version of
the BERT algorithm applied for reranking) need training data in the form of queries
together with relevant and irrelevant passages or documents (positive and negative
examples). There are various semi-supervised ways to get labels; some datasets (like
MS MARCO Ranking, Section 14.3.1) contain gold positive examples. Negative
examples can be sampled randomly from the top-1000 results from some existing
IR system. If datasets don’t have labeled positive examples, iterative methods like
relevance-guided supervision can be used (Khattab et al., 2021) which rely on the
fact that many datasets contain short answer strings. In this method, an existing IR
system is used to harvest examples that do contain short answer strings (the top few
are taken as positives) or don’t contain short answer strings (the top few are taken as
negatives), these are used to train a new retriever, and then the process is iterated.

Efﬁciency is an important issue, since every possible document must be ranked
for its similarity to the query. For sparse word-count vectors, the inverted index
allows this very efﬁciently. For dense vector algorithms ﬁnding the set of dense
document vectors that have the highest dot product with a dense query vector is
an instance of the problem of nearest neighbor search. Modern systems there-
fore make use of approximate nearest neighbor vector search algorithms like Faiss
(Johnson et al., 2017).

Faiss

14.3 Using Neural IR for Question Answering

retrieval-based
QA

The goal of retrieval-based QA (sometimes called open domain QA) is to an-
swer a user’s question by either ﬁnding short text segments from the web or some
other large collection of documents, or by generating an answer based on them.
Figure 14.9 shows some sample factoid questions with answers.

Question
Where is the Louvre Museum located?
What are the names of Odin’s ravens?
What kind of nuts are used in marzipan?
What instrument did Max Roach play?
What’s the ofﬁcial language of Algeria?

Figure 14.9 Some factoid questions and their answers.

Answer
in Paris, France
Huginn and Muninn
almonds
drums
Arabic

retrieve and
read

The dominant paradigm for retrieval-based QA is sometimes called the retrieve
and read model shown in Fig. 14.10. In the ﬁrst stage of this 2-stage model we re-
trieve relevant passages from a text collection, for example using the dense retrievers
of the previous section.

306 CHAPTER 14

• QUESTION ANSWERING AND INFORMATION RETRIEVAL

The second stage, called the reader, is commonly implemented as either an ex-
tractor or a generator. The ﬁrst method is span extraction, using a neural reading
comprehension algorithm that passes over each passage and is trained to ﬁnd spans
of text that answer the question. The second method is also known as retrieval-
augmented generation: we take a large pretrained language model, give it some set
of retrieved passages and other text as its prompt, and autoregressively generate a
new answer token by token.

Figure 14.10 Retrieval-based question answering has two stages: retrieval, which returns relevant docu-
ments from the collection, and reading, in which a neural reading comprehension system extracts answer
spans, or a large pretrained language model that generates answers autoregressively given the documents as a
prompt.

In the next few sections we’ll describe these two standard reader algorithms.

But ﬁrst, we’ll introduce some commonly-used question answering datasets.

14.3.1 Retrieval-based QA: Datasets

Datasets for retrieval-based QA are most commonly created by ﬁrst developing
reading comprehension datasets containing tuples of (passage, question, answer).
Reading comprehension systems can use the datasets to train a reader that is given a
passage and a question, and predicts a span in the passage as the answer. Including
the passage from which the answer is to be extracted eliminates the need for reading
comprehension systems to deal with IR.

For example the Stanford Question Answering Dataset (SQuAD) consists of
passages from Wikipedia and associated questions whose answers are spans from
the passage (Rajpurkar et al. 2016). Squad 2.0 in addition adds some questions
that are designed to be unanswerable (Rajpurkar et al. 2018), with a total of just
over 150,000 questions. Fig. 14.11 shows a (shortened) excerpt from a SQUAD 2.0
passage together with three questions and their gold answer spans.

SQuAD was built by having humans read a given Wikipedia passage, write ques-

tions about the passage, and choose a speciﬁc answer span.

Other datasets are created by similar techniques but try to make the questions
more complex. The HotpotQA dataset (Yang et al., 2018) was created by showing
crowd workers multiple context documents and asked to come up with questions
that require reasoning about all of the documents.

The fact that questions in datasets like SQuAD or HotpotQA are created by an-
notators who have ﬁrst read the passage may make their questions easier to answer,
since the annotator may (subconsciously) make use of words from the answer text.
A solution to this possible bias is to make datasets from questions that were not
written with a passage in mind. The TriviaQA dataset (Joshi et al., 2017) contains

SQuAD

HotpotQA

Q: When wasthe premiere ofThe Magic Flute?RelevantDocsBERT[CLS] q1 q2 [SEP]  d1 d2start   endA:  1791RetrieverIndexed DocsquerydocsGeneratoror ExtracterLLMDocs and promptReader14.3

• USING NEURAL IR FOR QUESTION ANSWERING

307

Beyonc´e Giselle Knowles-Carter (born September 4, 1981) is an American singer, songwriter,
record producer and actress. Born and raised in Houston, Texas, she performed in various
singing and dancing competitions as a child, and rose to fame in the late 1990s as lead singer
of R&B girl-group Destiny’s Child. Managed by her father, Mathew Knowles, the group became
one of the world’s best-selling girl groups of all time. Their hiatus saw the release of Beyonc´e’s
debut album, Dangerously in Love (2003), which established her as a solo artist worldwide, earned
ﬁve Grammy Awards and featured the Billboard Hot 100 number-one singles “Crazy in Love” and
“Baby Boy”.
Q: “In what city and state did Beyonc´e grow up?”
A: “Houston, Texas”
Q: “What areas did Beyonc´e compete in when she was growing up?”
A: “singing and dancing”
Q: “When did Beyonc´e release Dangerously in Love?”
A: “2003”
Figure 14.11 A (Wikipedia) passage from the SQuAD 2.0 dataset (Rajpurkar et al., 2018) with 3 sample
questions and the labeled answer spans.

MS MARCO

Natural
Questions

TyDi QA

94K questions written by trivia enthusiasts, together with supporting documents
from Wikipedia and the web resulting in 650K question-answer-evidence triples.

MS MARCO (Microsoft Machine Reading Comprehension) is a collection of
datasets, including 1 million real anonymized questions from Microsoft Bing query
logs together with a human generated answer and 9 million passages (Nguyen et al.,
2016), that can be used both to test retrieval ranking and question answering. The
Natural Questions dataset (Kwiatkowski et al., 2019) similarly incorporates real
anonymized queries to the Google search engine. Annotators are presented a query,
along with a Wikipedia page from the top 5 search results, and annotate a paragraph-
length long answer and a short span answer, or mark null if the text doesn’t contain
the paragraph. For example the question “When are hops added to the brewing
process?” has the short answer the boiling process and a long answer which the
surrounding entire paragraph from the Wikipedia page on Brewing. In using this
dataset, a reading comprehension model is given a question and a Wikipedia page
and must return a long answer, short answer, or ’no answer’ response.

The above datasets are all in English. The TyDi QA dataset contains 204K
question-answer pairs from 11 typologically diverse languages, including Arabic,
Bengali, Kiswahili, Russian, and Thai (Clark et al., 2020a). In the TYDI QA task,
a system is given a question and the passages from a Wikipedia article and must
(a) select the passage containing the answer (or NULL if no passage contains the
answer), and (b) mark the minimal answer span (or NULL). Many questions have
no answer. The various languages in the dataset bring up challenges for QA systems
like morphological variation between the question and the answer, or complex issue
with word segmentation or multiple alphabets.

In the reading comprehension task, a system is given a question and the passage
in which the answer should be found. In the full two-stage QA task, however, sys-
tems are not given a passage, but are required to do their own retrieval from some
document collection. A common way to create open-domain QA datasets is to mod-
ify a reading comprehension dataset. For research purposes this is most commonly
done by using QA datasets that annotate Wikipedia (like SQuAD or HotpotQA). For
training, the entire (question, passage, answer) triple is used to train the reader. But
at inference time, the passages are removed and system is given only the question,
together with access to the entire Wikipedia corpus. The system must then do IR to

308 CHAPTER 14

• QUESTION ANSWERING AND INFORMATION RETRIEVAL

ﬁnd a set of pages and then read them.

14.3.2 Reader algorithms: Answer Span Extraction

The job of the reader is to take a passage as input and produce the answer. Here we
introduce the span extraction style of reader, in which the answer is a span of text
in the passage. For example given a question like “How tall is Mt. Everest?” and
a passage that contains the clause Reaching 29,029 feet at its summit, a reader will
output 29,029 feet.

The answer extraction task is commonly modeled by span labeling: identifying
in the passage a span (a continuous string of text) that constitutes an answer. Neural
algorithms for reading comprehension are given a question q of n tokens q1, ..., qn
and a passage p of m tokens p1, ..., pm. Their goal is thus to compute the probability
q, p) that each possible span a is the answer.
P(a
|
If each span a starts at position as and ends at position ae, we make the simplify-

span

ing assumption that this probability can be estimated as P(a
q, p) = Pstart(as|
|
Thus for for each token pi in the passage we’ll compute two probabilities: pstart(i)
that pi is the start of the answer span, and pend(i) that pi is the end of the answer
span.

q, p)Pend(ae|

q, p).

A standard baseline algorithm for reading comprehension is to pass the ques-
tion and passage to any encoder like BERT (Fig. 14.12), as strings separated with a
[SEP] token, resulting in an encoding token embedding for every passage token pi.

Figure 14.12 An encoder model (using BERT) for span-based question answering from
reading-comprehension-based question answering tasks.

For span-based question answering, we represent the question as the ﬁrst se-
quence and the passage as the second sequence. We’ll also need to add a linear layer
that will be trained in the ﬁne-tuning phase to predict the start and end position of the
span. We’ll add two new special vectors: a span-start embedding S and a span-end
embedding E, which will be learned in ﬁne-tuning. To get a span-start probability
for each output token p(cid:48)i, we compute the dot product between S and p(cid:48)i and then use
a softmax to normalize over all tokens p(cid:48)i in the passage:

Pstarti =

p(cid:48)i)

exp(S
·
j exp(S

p(cid:48)j)

·

(cid:80)

(14.19)

Encoder (BERT)……QuestionPassageiSEPstarti..…[CLS][SEP]p1…Pendipmq1qn14.3

• USING NEURAL IR FOR QUESTION ANSWERING

309

We do the analogous thing to compute a span-end probability:

Pendi =

p(cid:48)i)

exp(E
·
j exp(E

p(cid:48)j)

·

(14.20)

The score of a candidate span from position i to j is S
scoring span in which j

p(cid:48)i + E
i is chosen is the model prediction.
The training loss for ﬁne-tuning is the negative sum of the log-likelihoods of the

p(cid:48)j, and the highest

≥

(cid:80)

·

·

correct start and end positions for each instance:

L =

log Pstarti −

−

log Pendi

(14.21)

Many datasets (like SQuAD 2.0 and Natural Questions) also contain (question,
passage) pairs in which the answer is not contained in the passage. We thus also
need a way to estimate the probability that the answer to a question is not in the
document. This is standardly done by treating questions with no answer as having
the [CLS] token as the answer, and hence the answer span start and end index will
point at [CLS] (Devlin et al., 2019).

For many datasets the annotated documents/passages are longer than the maxi-
mum 512 input tokens BERT allows, such as Natural Questions whose gold passages
are full Wikipedia pages. In such cases, following Alberti et al. (2019), we can cre-
ate multiple pseudo-passage observations from the labeled Wikipedia page. Each
observation is formed by concatenating [CLS], the question, [SEP], and tokens from
the document. We walk through the document, sliding a window of size 512 (or
rather, 512 minus the question length n minus special tokens) and packing the win-
dow of tokens into each next pseudo-passage. The answer span for the observation
is either labeled [CLS] (= no answer in this particular window) or the gold-labeled
span is marked. The same process can be used for inference, breaking up each re-
trieved document into separate observation passages and labeling each observation.
The answer can be chosen as the span with the highest probability (or nil if no span
is more probable than [CLS]).

retrieval-
augmented
generation
RAG

14.3.3 Reader algorithms: Retrieval-Augmented Generation

The second standard reader algorithm is to generate from a large language model,
conditioned on the retrieved passages. This method is known as retrieval-augmented
generation, or RAG.

Recall that in simple conditional generation, we can cast the task of question
answering as word prediction by giving a language model a question and a token
like A: suggesting that an answer should come next:

Q: Who wrote the book ‘‘The Origin of Species"? A:

Then we generate autoregressively conditioned on this text.

More formally, recall that simple autoregressive language modeling computes

the probability of a string from the previous tokens:

p(x1, . . . , xn) =

n

p(xi|

x<i)

(cid:89)i=1

And simple conditional generation for question answering adds a prompt like Q: ,
followed by a query q , and A:, all concatenated:

p(x1, . . . , xn) =

n

(cid:89)i=1

p([Q:] ; q ; [A:] ; x<i)

310 CHAPTER 14

• QUESTION ANSWERING AND INFORMATION RETRIEVAL

The advantage of using a large language model is the enormous amount of
knowledge encoded in its parameters from the text it was pretrained on. But as
we mentioned at the start of the chapter, while this kind of simple prompted gener-
ation can work ﬁne for many simple factoid questions, it is not a general solution
for QA, because it leads to hallucination, is unable to show users textual evidence to
support the answer, and is unable to answer questions from proprietary data.

The idea of retrieval-augmented generation is to address these problems by con-
ditioning on the retrieved passages as part of the preﬁx, perhaps with some prompt
text like “Based on these texts, answer this question:”. Let’s suppose we have a
query q, and call the set of retrieved passages based on it R(q). For example, we
could have a prompt like:

retrieved passage 1

retrieved passage 2

...

retrieved passage n

Based on these texts, answer this question:
the book ‘‘The Origin of Species"?

A:

Q: Who wrote

Or more formally,

p(x1, . . . , xn) =

n

(cid:89)i=1

R(q) ; prompt ; [Q:] ; q ; [A:] ; x<i)

p(xi|

multi-hop

As with the span-based extraction reader, successfully applying the retrieval-
augmented generation algorithm for QA requires a successful retriever, and often
a two-stage retrieval algorithm is used in which the retrieval is reranked. Some
complex questions may require multi-hop architectures, in which a query is used to
retrieve documents, which are then appended to the original query for a second stage
of retrieval. Details of prompt engineering also have to be worked out, like deciding
whether to demarcate passages, for example with [SEP] tokens, and so on. Finally,
combinations of private data and public data involving an externally hosted large
language model may lead to privacy concerns that need to be worked out (Arora
et al., 2023).

14.4 Evaluating Retrieval-based Question Answering

mean
reciprocal rank
MRR

Question answering is commonly evaluated using mean reciprocal rank, or MRR
(Voorhees, 1999). MRR is designed for systems that return a short ranked list of
answers or passages for each test set question, which we can compare against the
(human-labeled) correct answer. First, each test set question is scored with the re-
ciprocal of the rank of the ﬁrst correct answer. For example if the system returned
ﬁve answers to a question but the ﬁrst three are wrong (so the highest-ranked correct
answer is ranked fourth), the reciprocal rank for that question is 1
4 . The score for
questions that return no correct answer is 0. The MRR of a system is the average of
the scores for each question in the test set. In some versions of MRR, questions with

14.5

• SUMMARY

311

a score of zero are ignored in this calculation. More formally, for a system returning
ranked answers to each question in a test set Q, (or in the alternate version, let Q be
the subset of test set questions that have non-zero scores). MRR is then deﬁned as

MRR =

1
Q
|

Q
|

|

|

(cid:88)i=1

1
ranki

(14.22)

Alternatively, question answering systems can be evaluated with exact match, or
with F1 score. This is common for datasets like SQuAD which are evaluated (ﬁrst
ignoring punctuation and articles like a, an, the) via both (Rajpurkar et al., 2016):

• Exact match: The % of predicted answers that match the gold answer exactly.
• F1 score: The average word/token overlap between predicted and gold an-
swers. Treat the prediction and gold as a bag of tokens, and compute F1 for
each question, then return the average F1 over all questions.

Other recent datasets include the AI2 Reasoning Challenge (ARC) (Clark et al.,
2018) of multiple choice questions designed to be hard to answer from simple lexical
methods, like this question

Which property of a mineral can be determined just by looking at it?
(A) luster [correct] (B) mass (C) weight (D) hardness

in which the correct answer luster is unlikely to co-occur frequently with phrases
like looking at it, while the word mineral is highly associated with the incorrect
answer hardness.

14.5 Summary

This chapter introduced the tasks of question answering and information retrieval.

• Question answering (QA) is the task of answering a user’s questions.
• We focus in this chapter on the task of retrieval-based question answering,
in which the user’s questions are intended to be answered by the material in
some set of documents.

• Information Retrieval (IR) is the task of returning documents to a user based
on their information need as expressed in a query. In ranked retrieval, the
documents are returned in ranked order.

• The match between a query and a document can be done by ﬁrst representing
each of them with a sparse vector that represents the frequencies of words,
weighted by tf-idf or BM25. Then the similarity can be measured by cosine.
• Documents or queries can instead be represented by dense vectors, by encod-
ing the question and document with an encoder-only model like BERT, and in
that case computing similarity in embedding space.

• The inverted index is an storage mechanism that makes it very efﬁcient to

ﬁnd documents that have a particular word.

• Ranked retrieval is generally evaluated by mean average precision or inter-

polated precision.

• Question answering systems generally use the retriever/reader architecture.
In the retriever stage, an IR system is given a query and returns a set of
documents.

312 CHAPTER 14

• QUESTION ANSWERING AND INFORMATION RETRIEVAL

• The reader stage can either be a span-based extractor, that predicts a span
of text in the retrieved documents to return as the answer, or a retrieval-
augmented generator, in which a large language model is used to generate a
novel answer after reading the documents and the query.

• QA can be evaluated by exact match with a known answer if only a single
answer is given, or with mean reciprocal rank if a ranked set of answers is
given.

Bibliographical and Historical Notes

Question answering was one of the earliest NLP tasks, and early versions of the text-
based and knowledge-based paradigms were developed by the very early 1960s. The
text-based algorithms generally relied on simple parsing of the question and of the
sentences in the document, and then looking for matches. This approach was used
very early on (Phillips, 1960) but perhaps the most complete early system, and one
that strikingly preﬁgures modern relation-based systems, was the Protosynthex sys-
tem of Simmons et al. (1964). Given a question, Protosynthex ﬁrst formed a query
from the content words in the question, and then retrieved candidate answer sen-
tences in the document, ranked by their frequency-weighted term overlap with the
question. The query and each retrieved sentence were then parsed with dependency
parsers, and the sentence whose structure best matches the question structure se-
lected. Thus the question What do worms eat? would match worms eat grass: both
have the subject worms as a dependent of eat, in the version of dependency grammar
used at the time, while birds eat worms has birds as the subject:

What do worms eat

Worms eat grass

Birds eat worms

The alternative knowledge-based paradigm was implemented in the BASEBALL
system (Green et al., 1961). This system answered questions about baseball games
like “Where did the Red Sox play on July 7” by querying a structured database of
game information. The database was stored as a kind of attribute-value matrix with
values for attributes of each game:

Month = July

Place = Boston

Day = 7
Game Serial No.
(Team = Red Sox, Score = 5)
(Team = Yankees, Score = 3)

= 96

Each question was constituency-parsed using the algorithm of Zellig Harris’s
TDAP project at the University of Pennsylvania, essentially a cascade of ﬁnite-state
transducers (see the historical discussion in Joshi and Hopely 1999 and Karttunen
1999). Then in a content analysis phase each word or phrase was associated with a
program that computed parts of its meaning. Thus the phrase ‘Where’ had code to
assign the semantics Place = ?, with the result that the question “Where did the
Red Sox play on July 7” was assigned the meaning

LUNAR

BIBLIOGRAPHICAL AND HISTORICAL NOTES

313

Place = ?
Team = Red Sox
Month = July
Day = 7

The question is then matched against the database to return the answer. Simmons

(1965) summarizes other early QA systems.

Another important progenitor of the knowledge-based paradigm for question-
answering is work that used predicate calculus as the meaning representation lan-
guage. The LUNAR system (Woods et al. 1972, Woods 1978) was designed to be
a natural language interface to a database of chemical facts about lunar geology. It
could answer questions like Do any samples have greater than 13 percent aluminum
by parsing them into a logical form

(TEST (FOR SOME X16 / (SEQ SAMPLES) : T ; (CONTAIN’ X16
(NPR* X17 / (QUOTE AL203)) (GREATERTHAN 13 PCT))))

By a couple decades later, drawing on new machine learning approaches in NLP,
Zelle and Mooney (1996) proposed to treat knowledge-based QA as a semantic pars-
ing task, by creating the Prolog-based GEOQUERY dataset of questions about US
geography. This model was extended by Zettlemoyer and Collins (2005) and 2007.
By a decade later, neural models were applied to semantic parsing (Dong and Lap-
ata 2016, Jia and Liang 2016), and then to knowledge-based question answering by
mapping text to SQL (Iyer et al., 2017).

Meanwhile, the information-retrieval paradigm for question answering was in-
ﬂuenced by the rise of the web in the 1990s. The U.S. government-sponsored TREC
(Text REtrieval Conference) evaluations, run annually since 1992, provide a testbed
for evaluating information-retrieval tasks and techniques (Voorhees and Harman,
2005). TREC added an inﬂuential QA track in 1999, which led to a wide variety of
factoid and non-factoid systems competing in annual evaluations.

At that same time, Hirschman et al. (1999) introduced the idea of using chil-
dren’s reading comprehension tests to evaluate machine text comprehension algo-
rithms. They acquired a corpus of 120 passages with 5 questions each designed for
3rd-6th grade children, built an answer extraction system, and measured how well
the answers given by their system corresponded to the answer key from the test’s
publisher. Their algorithm focused on word overlap as a feature; later algorithms
added named entity features and more complex similarity between the question and
the answer span (Riloff and Thelen 2000, Ng et al. 2000).

The DeepQA component of the Watson Jeopardy! system was a large and so-
phisticated feature-based system developed just before neural systems became com-
mon. It is described in a series of papers in volume 56 of the IBM Journal of Re-
search and Development, e.g., Ferrucci (2012).

Neural reading comprehension systems drew on the insight common to early
systems that answer ﬁnding should focus on question-passage similarity. Many of
the architectural outlines of these modern neural systems were laid out in Hermann
et al. (2015a), Chen et al. (2017a), and Seo et al. (2017). These systems focused
on datasets like Rajpurkar et al. (2016) and Rajpurkar et al. (2018) and their succes-
sors, usually using separate IR algorithms as input to neural reading comprehension
systems. The paradigm of using dense retrieval with a span-based reader, often with
a single end-to-end architecture, is exempliﬁed by systems like Lee et al. (2019)
or Karpukhin et al. (2020). An important research area with dense retrieval for
open-domain QA is training data: using self-supervised methods to avoid having
to label positive and negative passages (Sachan et al., 2023). Retrieval-augmented

314 CHAPTER 14

• QUESTION ANSWERING AND INFORMATION RETRIEVAL

generation algorithms were ﬁrst introduced as a way to improve language modeling
(Khandelwal et al., 2019), but were quickly applied to question answering (Izacard
et al., 2022; Ram et al., 2023; Shi et al., 2023).

Exercises

CHAPTER

15 Chatbots & Dialogue Systems

Les lois de la conversation sont en g´en´eral de ne s’y appesantir sur aucun ob-
jet, mais de passer l´eg`erement, sans effort et sans affectation, d’un sujet `a un
autre ; de savoir y parler de choses frivoles comme de choses s´erieuses

[The rules of conversation are, in general, not to dwell on any one subject,
but to pass lightly from one to another without effort and without affectation;
to know how to speak about trivial topics as well as serious ones;]

The 18th C. Encyclopedia of Diderot, start of the entry on conversation

The literature of the fantastic abounds in inanimate objects magically endowed with
the gift of speech. From Ovid’s statue of Pygmalion to Mary Shelley’s story about
Frankenstein, we continually reinvent stories about creat-
ing something and then having a chat with it. Legend has
it that after ﬁnishing his sculpture Moses, Michelangelo
thought it so lifelike that he tapped it on the knee and
commanded it to speak. Perhaps this shouldn’t be sur-
prising. Language is the mark of humanity and sentience,
and conversation or dialogue is the most fundamental
arena of language.
It is the ﬁrst kind of language we
learn as children, and the kind we engage in constantly,
whether we are ordering lunch, buying train tickets, or
talking with our families, friends, or coworkers.

This chapter introduces the fundamental algorithms of programs that use con-
versation to interact with users. We often distinguish between two kinds of archi-
tectures. Task-oriented dialogue systems converse with users to accomplish ﬁxed
tasks like controlling appliances or ﬁnding restaurants, relying on a data structure
called the frame, which represents the knowledge a system needs to acquire from
the user (like the time to set an alarm clock). Chatbots, by contrast, are designed
to mimic the longer and more unstructured conversations or ‘chats’ characteristic of
human-human interaction. Modern systems incorporate aspects of both; industrial
chatbots like ChatGPT can carry on longer unstructured conversations; industrial
digital assistants like Siri or Alexa are generally frame-based dialogue systems.

The fact that chatbots and dialogue systems are designed for human-computer
interaction has strong implications for their design and use. Many of these impli-
cations already became clear in one of the earliest chatbots, ELIZA (Weizenbaum,
1966). ELIZA was designed to simulate a Rogerian psychologist, based on a branch
of clinical psychology whose methods involve drawing the patient out by reﬂecting
patient’s statements back at them. Rogerian interactions are the rare type of conver-
sation in which, as Weizenbaum points out, one can “assume the pose of knowing
almost nothing of the real world”. If a patient says “I went for a long boat ride” and
the psychiatrist says “Tell me about boats”, you don’t assume she didn’t know what

conversation

dialogue

dialogue system

frame

chatbot

316 CHAPTER 15

• CHATBOTS & DIALOGUE SYSTEMS

Men are all alike.
IN WHAT WAY
They’re always bugging us about something or other.
CAN YOU THINK OF A SPECIFIC EXAMPLE
Well my boyfriend made me come here.
YOUR BOYFRIEND MADE YOU COME HERE
He says I’m depressed much of the time.
I AM SORRY TO HEAR YOU ARE DEPRESSED
Figure 15.1 Sample ELIZA dialogue from Weizenbaum (1966).

a boat is, but rather assume she had some conversational goal.1

Weizenbaum made use of this property of Rogerian psychiatric conversations,
along with clever regular expressions, to allow ELIZA to interact in ways that seemed
deceptively human-like, as in the sample conversational fragment in Fig. 15.1.

As we foreshadowed in Chapter 2, ELIZA worked by simple rules roughly like:

(.*) YOU (.*) ME

->

WHAT MAKES YOU THINK I \2 YOU

to transform a user sentence like “You hate me” into a system response like
WHAT MAKES YOU THINK I HATE YOU

Among Weizenbaum’s clever tricks are the linking of each ELIZA pattern/rule

to a keyword. Consider the following user sentence:

I know everybody laughed at me

Because it has the word “I”, this sentence could match the following rule whose

keyword is I:

I (.*) -> You say you \1

producing:

YOU SAY YOU KNOW EVERYBODY LAUGHED AT YOU

Weizenbaum points out, however, that a more powerful response would rely on
the keyword “everybody”, since someone using universals like everybody or always
is probably thinking about a speciﬁc person or situation. So the ELIZA algorithm
prefers to respond using patterns associated more speciﬁc keywords like everybody:

WHO IN PARTICULAR ARE YOU THINKING OF?

If no keyword matches, the algorithm chooses a non-committal response like

“PLEASE GO ON”, “THAT’S VERY INTERESTING”, or “I SEE”.

ELIZA illustrates a number of important issues with chatbots. First, people
became deeply emotionally involved and conducted very personal conversations,
even to the extent of asking Weizenbaum to leave the room while they were typ-
ing. Reeves and Nass (1996) show that people tend to assign human characteristics
to computers and interact with them in ways that are typical of human-human in-
teractions. They interpret an utterance in the way they would if it had spoken by a
human, (even though they are aware they are talking to a computer). This means that
chatbots can have signiﬁcant inﬂuences on people’s cognitive and emotional state.

A second related issue is privacy. When Weizenbaum suggested that he might
want to store the ELIZA conversations, people immediately pointed out that this
would violate people’s privacy. Modern chatbots in the home are likely to overhear

1 This is due to the Gricean principle of relevance that we’ll discuss in the next section..

15.1

• PROPERTIES OF HUMAN CONVERSATION

317

private information, even if they aren’t used for counseling as ELIZA was. Indeed,
if a chatbot is human-like, users are more likely to disclose private information, and
yet less likely to worry about the harm of this disclosure (Ischen et al., 2019).

Both of these issues (emotional engagement and privacy) mean we need to think
carefully about how we deploy chatbots and the people who are interacting with
them. Dialogue research that uses human participants often requires getting permis-
sion from the Institutional Review Board (IRB) of your institution.

In the next section we introduce some basic properties of human conversation.
We then turn in the rest of the chapter to the two basic paradigms for conversational
interaction: frame-based dialogue systems and chatbots.

15.1 Properties of Human Conversation

Conversation between humans is an intricate and complex joint activity. Before
we attempt to design a dialogue system to converse with humans, it is crucial to
understand something about how humans converse with each other. Consider some
of the phenomena that occur in the conversation between a human travel agent and
a human client excerpted in Fig. 15.2.

. . . I need to travel in May.

C1:
A2: And, what day in May did you want to travel?
C3: OK uh I need to be there for a meeting that’s from the 12th to the 15th.
A4: And you’re ﬂying into what city?
C5: Seattle.
A6: And what time would you like to leave Pittsburgh?
C7: Uh hmm I don’t think there’s many options for non-stop.
A8: Right. There’s three non-stops today.
C9: What are they?
A10: The ﬁrst one departs PGH at 10:00am arrives Seattle at 12:05 their time.
The second ﬂight departs PGH at 5:55pm, arrives Seattle at 8pm. And the
last ﬂight departs PGH at 8:15pm arrives Seattle at 10:28pm.

C11: OK I’ll take the 5ish ﬂight on the night before on the 11th.
A12: On the 11th? OK. Departing at 5:55pm arrives Seattle at 8pm, U.S. Air

ﬂight 115.

C13: OK.
A14: And you said returning on May 15th?
C15: Uh, yeah, at the end of the day.
A16: OK. There’s #two non-stops . . . #
C17:
A18: It’s a Friday.
C19: Uh hmm. I would consider staying there an extra day til Sunday.
A20: OK. . . OK. On Sunday I have . . .
Figure 15.2 Part of a phone conversation between a human travel agent (A) and human
client (C). The passages framed by # in A16 and C17 indicate overlaps in speech.

#, what day of the week is the 15th?

#Act. . . actually

Turns

turn

A dialogue is a sequence of turns (C1, A2, C3, and so on), each a single contribution
from one speaker to the dialogue (as if in a game: I take a turn, then you take a turn,

318 CHAPTER 15

• CHATBOTS & DIALOGUE SYSTEMS

then me, and so on). There are 20 turns in Fig. 15.2. A turn can consist of a sentence
(like C1), although it might be as short as a single word (C13) or as long as multiple
sentences (A10).

Turn structure has important implications for spoken dialogue. A human has
to know when to stop talking; the client interrupts (in A16 and C17), so a system
that was performing this role must know to stop talking (and that the user might be
making a correction). A system also has to know when to start talking. For example,
most of the time in conversation, speakers start their turns almost immediately after
the other speaker ﬁnishes, without a long pause, because people are can usually
predict when the other person is about to ﬁnish talking. Spoken dialogue systems
must also detect whether a user is done speaking, so they can process the utterance
and respond. This task—called endpointing or endpoint detection— can be quite
challenging because of noise and because people often pause in the middle of turns.

endpointing

Speech Acts

A key insight into conversation—due originally to the philosopher Wittgenstein
(1953) but worked out more fully by Austin (1962)—is that each utterance in a
dialogue is a kind of action being performed by the speaker. These actions are com-
monly called speech acts or dialogue acts: here’s one taxonomy consisting of 4
major classes (Bach and Harnish, 1979):

committing the speaker to something’s being the case (answering, claiming,
conﬁrming, denying, disagreeing, stating)
attempts by the speaker to get the addressee to do something (advising, ask-
ing, forbidding, inviting, ordering, requesting)
committing the speaker to some future course of action (promising, planning,
vowing, betting, opposing)

speech acts

Constatives:

Directives:

Commissives:

Acknowledgments: express the speaker’s attitude regarding the hearer with respect to some so-
cial action (apologizing, greeting, thanking, accepting an acknowledgment)

A user asking a person or a dialogue system to do something (‘Turn up the mu-
sic’) is issuing a DIRECTIVE. Asking a question that requires an answer is also
a way of issuing a DIRECTIVE: in a sense when the system says (A2) “what day
in May did you want to travel?” it’s as if the system is (very politely) command-
ing the user to answer. By contrast, a user stating a constraint (like C1 ‘I need to
travel in May’) is issuing a CONSTATIVE. A user thanking the system is issuing
an ACKNOWLEDGMENT. The speech act expresses an important component of the
intention of the speaker (or writer) in saying what they said.

Grounding

common
ground
grounding

A dialogue is not just a series of independent speech acts, but rather a collective act
performed by the speaker and the hearer. Like all collective acts, it’s important for
the participants to establish what they both agree on, called the common ground
(Stalnaker, 1978). Speakers do this by grounding each other’s utterances. Ground-
ing means acknowledging that the hearer has understood the speaker (Clark, 1996).
(People need grounding for non-linguistic actions as well; the reason an elevator but-
ton lights up when it’s pressed is to acknowledge that the elevator has indeed been
called, essentially grounding your action of pushing the button (Norman, 1988).)

Humans constantly ground each other’s utterances. We can ground by explicitly
saying “OK”, as the agent does in A8 or A10. Or we can ground by repeating what
the other person says; in utterance A2 the agent repeats “in May”, demonstrating her

15.1

• PROPERTIES OF HUMAN CONVERSATION

319

understanding to the client. Or notice that when the client answers a question, the
agent begins the next question with “And”. The “And” implies that the new question
is ‘in addition’ to the old question, again indicating to the client that the agent has
successfully understood the answer to the last question.

Subdialogues and Dialogue Structure

conversational
analysis

adjacency pair

side sequence

subdialogue

Conversations have structure. Consider, for example, the local structure between
speech acts discussed in the ﬁeld of conversational analysis (Sacks et al., 1974).
QUESTIONS set up an expectation for an ANSWER. PROPOSALS are followed by
ACCEPTANCE (or REJECTION). COMPLIMENTS (“Nice jacket!”) often give rise to
DOWNPLAYERS (“Oh, this old thing?”). These pairs, called adjacency pairs are
composed of a ﬁrst pair part and a second pair part (Schegloff, 1968), and these
expectations can help systems decide what actions to take.

However, dialogue acts aren’t always followed immediately by their second pair
part. The two parts can be separated by a side sequence (Jefferson 1972) or sub-
dialogue. For example utterances C17 to A20 constitute a correction subdialogue
(Litman 1985, Litman and Allen 1987, Chu-Carroll and Carberry 1998):

C17: #Act. . . actually#, what day of the week is the 15th?
A18: It’s a Friday.
C19: Uh hmm. I would consider staying there an extra day til Sunday.
A20: OK. . . OK. On Sunday I have . . .

The question in C17 interrupts the prior discourse, in which the agent was looking
for a May 15 return ﬂight. The agent must answer the question and also realize that
‘’I would consider staying...til Sunday” means that the client would probably like to
change their plan, and now go back to ﬁnding return ﬂights, but for the 17th.

Another side sequence is the clariﬁcation question, which can form a subdia-
logue between a REQUEST and a RESPONSE. This is especially common in dialogue
systems where speech recognition errors causes the system to have to ask for clari-
ﬁcations or repetitions like the following:

User:

What do you have going to UNKNOWN WORD on the 5th?

System:
User:
System:

Let’s see, going where on the 5th?
Going to Hong Kong.
OK, here are some ﬂights...

presequence

In addition to side-sequences, questions often have presequences, like the fol-
lowing example where a user starts with a question about the system’s capabilities
(“Can you make train reservations”) before making a request.

Can you make train reservations?

User:
System: Yes I can.
User:

Great, I’d like to reserve a seat on the 4pm train to New York.

Initiative

initiative

Sometimes a conversation is completely controlled by one participant. For exam-
ple a reporter interviewing a chef might ask questions, and the chef responds. We
say that the reporter in this case has the conversational initiative (Carbonell, 1970;
Nickerson, 1976). In normal human-human dialogue, however, it’s more common
for initiative to shift back and forth between the participants, as they sometimes
answer questions, sometimes ask them, sometimes take the conversations in new di-
rections, sometimes not. You may ask me a question, and then I respond asking you

320 CHAPTER 15

• CHATBOTS & DIALOGUE SYSTEMS

to clarify something you said, which leads the conversation in all sorts of ways. We
call such interactions mixed initiative (Carbonell, 1970).

Full mixed initiative, while the norm for human-human conversations, can be
difﬁcult for dialogue systems. The most primitive dialogue systems tend to use
system-initiative, where the system asks a question and the user can’t do anything
until they answer it, or user-initiative like simple search engines, where the user
speciﬁes a query and the system passively responds. Even modern large language
model-based dialogue systems, which come much closer to using full mixed initia-
tive, often don’t have completely natural initiative switching. Getting this right is an
important goal for modern systems.

Inference and Implicature

Inference is also important in dialogue understanding. Consider the client’s response
C2, repeated here:

A2: And, what day in May did you want to travel?
C3: OK uh I need to be there for a meeting that’s from the 12th to the 15th.

Notice that the client does not in fact answer the agent’s question. The client
merely mentions a meeting at a certain time. What is it that licenses the agent to
infer that the client is mentioning this meeting so as to inform the agent of the travel
dates?

The speaker seems to expect the hearer to draw certain inferences; in other
words, the speaker is communicating more information than seems to be present
in the uttered words. This kind of example was pointed out by Grice (1975, 1978)
as part of his theory of conversational implicature. Implicature means a particu-
lar class of licensed inferences. Grice proposed that what enables hearers to draw
these inferences is that conversation is guided by a set of maxims, general heuristics
that play a guiding role in the interpretation of conversational utterances. One such
maxim is the maxim of relevance which says that speakers attempt to be relevant,
they don’t just utter random speech acts. When the client mentions a meeting on the
12th, the agent reasons ‘There must be some relevance for mentioning this meeting.
What could it be?’. The agent knows that one precondition for having a meeting
(at least before Web conferencing) is being at the place where the meeting is held,
and therefore that maybe the meeting is a reason for the travel, and if so, then since
people like to arrive the day before a meeting, the agent should infer that the ﬂight
should be on the 11th.

These subtle characteristics of human conversations (turns, speech acts, ground-
ing, dialogue structure, initiative, and implicature) are among the reasons it is dif-
ﬁcult to build dialogue systems that can carry on natural conversations with humans.
Many of these challenges are active areas of dialogue systems research.

implicature

relevance

15.2 Frame-Based Dialogue Systems

A task-based dialogue system has the goal of helping a user solve a speciﬁc task
like making an travel reservation or buying a product. Task-based dialogue systems
are based around frames, ﬁrst introduced in the early inﬂuential GUS system for
travel planning (Bobrow et al., 1977). Frames are knowledge structures representing
the details of the user’s task speciﬁcation. Each frame consists of a collection of
slots, each of which can take a set of possible values. Together a set of frames is

frame

GUS

slot

15.2

• FRAME-BASED DIALOGUE SYSTEMS

321

sometimes called a domain ontology.

Here we’ll describe the most well-studied frame-based architecture, the dialogue-
state architecture, made up of the six components shown in Fig. 15.3. In the next
sections we’ll introduce four of them, after introducing the idea of frames (deferring
the speech recognition and synthesis components to Chapter 16).

Figure 15.3 Architecture of a dialogue-state system for task-oriented dialogue from Williams et al. (2016).

15.2.1 Frames and Slot Filling

The frame and its slots in a task-based dialogue system specify what the system
needs to know to perform its task. A hotel reservation system needs dates and loca-
tions. An alarm clock system needs a time. The system’s goal is to ﬁll the slots in
the frame with the ﬁllers the user intends, and then perform the relevant action for
the user (answering a question, or booking a ﬂight).

Fig. 15.4 shows a sample frame for booking air travel, with some sample ques-
tions used for ﬁlling slots. In the simplest frame-based systems (including most com-
mercial assistants until quite recently), these questions are pre-written templates, but
in more sophisticated systems, questions are generated on-the-ﬂy. The slot ﬁllers are
often constrained to a particular semantic type, like type CITY (taking on values like
San Francisco, or Hong Kong) or DATE, AIRLINE, or TIME.

Type Example Question
Slot
city
ORIGIN CITY
DESTINATION CITY city
DEPARTURE TIME
time
DEPARTURE DATE date
time
ARRIVAL TIME
ARRIVAL DATE
date
Figure 15.4 A frame in a frame-based dialogue system, showing the type of each slot and
a sample question used to ﬁll the slot.

“From what city are you leaving?”
“Where are you going?”
“When would you like to leave?”
“What day would you like to leave?”
“When do you want to arrive?”
“What day would you like to arrive?”

322 CHAPTER 15

• CHATBOTS & DIALOGUE SYSTEMS

intent
determination

slot ﬁlling

Many domains require multiple frames. Besides frames for car or hotel reser-
vations, we might need other frames for things like general route information (for
questions like Which airlines ﬂy from Boston to San Francisco?), That means the
system must be able to disambiguate which slot of which frame a given input is
supposed to ﬁll.

The task of slot-ﬁlling is usually combined with two other tasks, to extract 3
things from each user utterance. The ﬁrst is domain classiﬁcation: is this user for
example talking about airlines, programming an alarm clock, or dealing with their
calendar? The second is user intent determination: what general task or goal is the
user trying to accomplish? For example the task could be to Find a Movie, or Show
a Flight, or Remove a Calendar Appointment. Together, the domain classiﬁcation
and intent determination tasks decide which frame we are ﬁlling. Finally, we need
to do slot ﬁlling itself: extract the particular slots and ﬁllers that the user intends the
system to understand from their utterance with respect to their intent. From a user
utterance like this one:

Show me morning flights from Boston to San Francisco on Tuesday

a system might want to build a representation like:

DOMAIN:
ORIGIN-CITY:
ORIGIN-DATE:

AIR-TRAVEL
Boston
Tuesday

INTENT:
DEST-CITY:
ORIGIN-TIME:

SHOW-FLIGHTS
San Francisco
morning

Similarly an utterance like this:

should give an intent like this:

Wake me tomorrow at 6

DOMAIN:
INTENT:
TIME:

ALARM-CLOCK
SET-ALARM
2017-07-01 0600

The simplest dialogue systems use handwritten rules for slot-ﬁlling, like this

regular expression for recognizing the SET-ALARM intent:

wake me (up) | set (the|an) alarm | get me up

But most systems use supervised machine-learning: each sentence in a training
set is annotated with slots, domain, and intent, and a sequence model maps from
input words to slot ﬁllers, domain and intent. For example we’ll have pairs of sen-
tences that are labeled for domain (AIRLINE) and intent (SHOWFLIGHT), and are
also labeled with BIO representations for the slots and ﬁllers. (Recall from Chap-
ter 8 that in BIO tagging we introduce a tag for the beginning (B) and inside (I) of
each slot label, and one for tokens outside (O) any slot label.)

O O

O

O

O

B-DES I-DES

O

B-DEPTIME I-DEPTIME

O

AIRLINE-SHOWFLIGHT

I want to fly to San

Francisco on Monday

afternoon

please

EOS

Fig. 15.5 shows a typical architecture for inference. The input words w1...wn
are passed through a pretrained language model encoder, followed by a feedforward
layer and a softmax at each token position over possible BIO tags, with the output
a series of BIO tags s1...sn. We generally combine the domain-classiﬁcation and
intent-extraction tasks with slot-ﬁlling by adding a domain concatenated with an
intent as the desired output for the ﬁnal EOS token.

Once the sequence labeler has tagged the user utterance, a ﬁller string can be ex-
tracted for each slot from the tags (e.g., “San Francisco”), and these word strings
can then be normalized to the correct form in the ontology (perhaps the airport

15.3

• DIALOGUE ACTS AND DIALOGUE STATE

323

Figure 15.5 Slot ﬁlling by passing input words through an encoder, and then using a linear
or feedforward layer followed by a softmax to generate a series of BIO tags. Here we also
show a ﬁnal state: a domain concatenated with an intent.

code ‘SFO’), for example with dictionaries that specify that SF, SFO, and San Fran-
cisco are synonyms. Often in industrial contexts, combinations of rules and machine
learning are used for each of these components.

We can make a very simple frame-based dialogue system by wrapping a small
amount of code around this slot extractor. Mainly we just need to ask the user
questions until all the slots are full, do a database query, then report back to the user,
using hand-built templates for generating sentences.

15.2.2 Evaluating Task-Based Dialogue

task error rate

slot error rate

We evaluate task-based systems by computing the task error rate, or task success
rate: the percentage of times the system booked the right plane ﬂight, or put the
right event on the calendar. A more ﬁne-grained, but less extrinsic metric is the slot
error rate, the percentage of slots ﬁlled with the correct values:

Slot Error Rate for a Sentence =

# of inserted/deleted/subsituted slots
# of total reference slots for sentence

(15.1)

For example a system that extracted the slot structure below from this sentence:

(15.2) Make an appointment with Chris at 10:30 in Gates 104

Filler
Slot
PERSON Chris
TIME
11:30 a.m.
ROOM Gates 104

Instead of error rate, slot
has a slot error rate of 1/3, since the TIME is wrong.
precision, recall, and F-score can also be used. We can also measure efﬁciency
costs like the length of the dialogue in seconds or turns.

efﬁciency costs

15.3 Dialogue Acts and Dialogue State

While the naive slot-extractor system described above can handle simple dialogues,
often we want more complex interactions. For example, we might want to conﬁrm
that we’ve understand the user, or ask them to repeat themselves. We can build a
more sophisticated system using dialogue acts and dialogue state.

SanFranciscoonMondayEncodingsClassiﬁer+softmaxB-DESI-DESOB-DTIME…d+i<EOS>Encoder 324 CHAPTER 15

• CHATBOTS & DIALOGUE SYSTEMS

15.3.1 Dialogue Acts

dialogue acts

Dialogue acts are a generalization of speech acts that also represent grounding. The
set of acts can be general, or can be designed for particular dialogue tasks.

Sys User Description

Tag
HELLO(a = x, b = y, ...) (cid:88) (cid:88)
INFORM(a = x, b = y, ...) (cid:88) (cid:88)
(cid:88) (cid:88)
REQUEST(a, b = x, ...)
χ (cid:88)
REQALTS(a = x, ...)
CONFIRM(a = x, b = y, ...) (cid:88) (cid:88)
(cid:88) χ
CONFREQ(a = x, ..., d)
(cid:88) χ
SELECT(a = x, a = y)
AFFIRM(a = x, b = y, ...) (cid:88) (cid:88)
χ (cid:88)
NEGATE(a = x)
χ (cid:88)
DENY(a = x)
(cid:88) (cid:88)
BYE()

Open a dialogue and give info a = x, b = y, ...
Give info a = x, b = y, ...
Request value for a given b = x, ...
Request alternative with a = x, ...
Explicitly conﬁrm a = x, b = y, ...
Implicitly conﬁrm a = x, ... and request value of d
Implicitly conﬁrm a = x, ... and request value of d
Afﬁrm and give further info a = x, b = y, ...
Negate and give corrected value a = x
Deny that a = x
Close a dialogue

Figure 15.6 Dialogue acts used by the HIS restaurant recommendation system of Young
et al. (2010). The Sys and User columns indicate which acts are valid as system outputs and
user inputs, respectively.

Figure 15.6 shows a tagset for a restaurant recommendation system, and Fig. 15.7
shows these tags labeling a sample dialogue from the HIS system (Young et al.,
2010). This example also shows the content of each dialogue act, which are the slot
ﬁllers being communicated. So the user might INFORM the system that they want
Italian food near a museum, or CONFIRM with the system that the price is reasonable.

Utterance

U: Hi, I am looking for somewhere to eat.
S: You are looking for a restaurant. What

type of food do you like?

U: I’d like an Italian near the museum.
S: Roma is a nice Italian restaurant near

the museum.

U: Is it reasonably priced?
S: Yes, Roma is in the moderate price

range.

Dialogue act
hello(task = find,type=restaurant)
confreq(type = restaurant, food)

inform(food = Italian, near=museum)
inform(name = "Roma", type = restaurant,
food = Italian, near = museum)
confirm(pricerange = moderate)
affirm(name = "Roma", pricerange =
moderate)
request(phone)
inform(name = "Roma", phone = "385456")
bye()

U: What is the phone number?
S: The number of Roma is 385456.
U: Ok, thank you goodbye.
Figure 15.7 A dialogue from the HIS System of Young et al. (2010) using the dialogue acts in Fig. 15.6.

15.3.2 Dialogue State Tracking

The job of the dialogue-state tracker is to determine the current state of the frame
(the ﬁllers of each slot), and the user’s most recent dialogue act. The dialogue-state
is not just the slot-ﬁllers in the current sentence; it includes the entire state of the
frame at this point, summarizing all of the user’s constraints. Fig. 15.8 from Mrkˇsi´c
et al. (2017) shows the dialogue state after each turn.

Dialogue act detection is done just like domain or intent classiﬁcation, by passing
the input sentence through an encoder and adding an act classiﬁer. Often passing in
the prior dialogue act as well can improve classiﬁcation. And since dialogue acts

15.3

• DIALOGUE ACTS AND DIALOGUE STATE

325

User:

I’m looking for a cheaper restaurant
inform(price=cheap)

System: Sure. What kind - and where?
User:

Thai food, somewhere downtown
inform(price=cheap, food=Thai, area=centre)

System: The House serves cheap Thai food
User: Where is it?

inform(price=cheap, food=Thai, area=centre); request(address)

System: The House is at 106 Regent Street
Figure 15.8 The output of the dialogue state tracker after each turn (Mrkˇsi´c et al., 2017).

place some constraints on the slots and values, the tasks of dialogue-act detection and
slot-ﬁlling are often performed jointly. The state tracker can just take the output of
a slot-ﬁlling sequence-model (Section 15.2.1) after each sentence, or do something
more complicated like training a classiﬁer to decide if a value has been changed.

If a dialogue system misrecognizes
A special case: detecting correction acts.
or misunderstands an utterance, users will repeat or reformulate the utterance. De-
tecting these user correction acts is quite important, especially for spoken lan-
guage. Ironically, corrections are actually harder to recognize than normal sentences
(Swerts et al., 2000), because users who are frustrated adjust their speech in a way
that is difﬁcult for speech recognizers (Goldberg et al., 2003). For example speak-
ers often use a prosodic style for corrections called hyperarticulation, in which the
utterance is louder or longer or exaggerated in pitch, such as I said BAL-TI-MORE,
not Boston (Wade et al. 1992, Levow 1998, Hirschberg et al. 2001). Detecting acts
can be part of the general dialogue act detection classiﬁer, or can make use of spe-
cial features beyond the words, like those shown below (Levow 1998, Litman et al.
1999, Hirschberg et al. 2001, Bulyko et al. 2005, Awadallah et al. 2015).

user correction
acts

hyperarticula-
tion

features
semantic
phonetic

prosodic
ASR

examples
embedding similarity between correction and user’s prior utterance
phonetic overlap between candidate correction act and user’s prior utterance
(i.e. “WhatsApp” may be incorrectly recognized as “What’s up”)
hyperarticulation, increases in F0 range, pause duration, and word duration
ASR conﬁdence, language model probability

15.3.3 Dialogue Policy: Which act to generate

In early commercial frame-based systems, the dialogue policy is simple: ask ques-
tions until all the slots are full, do a database query, then report back to the user. A
more sophisticated dialogue policy can help a system decide when to answer the
user’s questions, when to instead ask the user a clariﬁcation question, and so on. A
dialogue policy thus decides what dialogue act to generate. Choosing a dialogue act
to generate, along with its arguments, is sometimes called content planning.

Let’s see how to do this for some important dialogue acts. Dialogue systems, es-
pecially speech systems, often misrecognize the users’ words or meaning. To ensure
system and user share a common ground, systems must conﬁrm understandings with
the user or reject utterances that the system don’t understand. A system might use
an explicit conﬁrmation act to conﬁrm with the user, like Is that correct? below:

dialogue policy

content
planning

explicit
conﬁrmation

326 CHAPTER 15

• CHATBOTS & DIALOGUE SYSTEMS

U: I’d like to ﬂy from Denver Colorado to New York City on September

twenty ﬁrst in the morning on United Airlines

S: Let’s see then. I have you going from Denver Colorado to New York

on September twenty ﬁrst. Is that correct?

implicit
conﬁrmation

When using an implicit conﬁrmation act, a system instead grounds more im-
plicitly, for example by repeating the system’s understanding as part of asking the
next question, as Shanghai is conﬁrmed in passing in this example:

U: I want to travel to to Shanghai
S: When do you want to travel to Shanghai?

rejection

There’s a tradeoff. Explicit conﬁrmation makes it easier for users to correct mis-
recognitions by just answering “no” to the conﬁrmation question. But explicit con-
ﬁrmation is time-consuming and awkward (Danieli and Gerbino 1995, Walker et al.
1998a). We also might want an act that expresses lack of understanding: rejection,
for example with a prompt like I’m sorry, I didn’t understand that. To decide among
these acts, we can make use of the fact that ASR systems often compute their conﬁ-
dence in their transcription (often based on the log-likelihood the system assigns the
sentence). A system can thus choose to explicitly conﬁrm only low-conﬁdence sen-
tences. Or systems might have a four-tiered level of conﬁdence with three thresholds
α, β , and γ:

< α low conﬁdence

α above the threshold
β high conﬁdence
γ very high conﬁdence don’t conﬁrm at all

reject
conﬁrm explicitly
conﬁrm implictly

≥
≥
≥

15.3.4 Natural language generation: Sentence Realization

recommend(restaurant name= Au Midi, neighborhood = midtown,
cuisine = french)

1 Au Midi is in Midtown and serves French food.
2 There is a French restaurant in Midtown called Au Midi.
Figure 15.9 Sample inputs to the sentence realization phase of NLG, showing the dialogue
act and attributes prespeciﬁed by the content planner, and two distinct potential output sen-
tences to be generated. From the restaurant recommendation system of Nayak et al. (2017).

Once a dialogue act has been chosen, we need to generate the text of the re-
sponse to the user. This part of the generation process is called sentence realiza-
tion. Fig. 15.9 shows a sample input/output for the sentence realization phase. The
content planner has chosen the dialogue act RECOMMEND and some slots (name,
neighborhood, cuisine) and ﬁllers. The sentence realizer generates a sentence like
lines 1 or 2 (by training on examples of representation/sentence pairs from a corpus
of labeled dialogues). Because we won’t see every restaurant or attribute in every
possible wording, we can delexicalize: generalize the training examples by replac-
ing speciﬁc slot value words in the training set with a generic placeholder token
representing the slot. Fig. 15.10 shows the sentences in Fig. 15.9 delexicalized.

We can map from frames to delexicalized sentences with an encoder decoder
model (Mrkˇsi´c et al. 2017, inter alia), trained on hand-labeled dialogue corpora like
MultiWOZ (Budzianowski et al., 2018). The input to the encoder is a sequence of

sentence
realization

delexicalize

15.4

• CHATBOTS

327

recommend(restaurant name= Au Midi, neighborhood = midtown,
cuisine = french)

1 restaurant name is in neighborhood and serves cuisine food.
2 There is a cuisine restaurant in neighborhood called restaurant name.
Figure 15.10 Delexicalized sentences that can be used for generating many different relex-
icalized sentences. From the restaurant recommendation system of Nayak et al. (2017).

Figure 15.11 An encoder decoder sentence realizer mapping slots/ﬁllers to English.

tokens xt that represent the dialogue act (e.g., RECOMMEND) and its arguments (e.g.,
service:decent, cuisine:null) (Nayak et al., 2017), as in Fig. 15.11.

The decoder outputs the delexicalized English sentence “name has decent ser-
vice”, which we can then relexicalize, i.e. ﬁll back in correct slot values, resulting
in “Au Midi has decent service”.

relexicalize

15.4 Chatbots

chatbot

Chatbots are systems that can carry on extended conversations with the goal of
mimicking the unstructured conversations or ‘chats’ characteristic of informal human-
human interaction. While early systems like ELIZA (Weizenbaum, 1966) or PARRY
(Colby et al., 1971) had theoretical goals like testing theories of psychological coun-
seling, for most of the last 50 years chatbots have been designed for entertainment.
That changed with the recent rise of neural chatbots like ChatGPT, which incor-
porate solutions to NLP tasks like question answering, writing tools, or machine
translation into a conversational interface. A conversation with ChatGPT is shown
in Fig. 15.12. In this section we describe neural chatbot architectures and datasets.

[TBD]
Figure 15.12 A conversation with ChatGPT.

15.4.1 Training chatbots

Data Chatbots are generally trained on a training set that includes standard large
language model training data of the type discussed in Section 10.9.2: versions of the
web from the Common Crawl, including news sites, Wikipedia, as well as books.
For training chatbots, it is common to additionally add lots of dialogue data.

This can include datasets created speciﬁcally for training chatbots by hiring
speakers of the language to have conversations, such as by having them take on
personas or talk about knowledge provided to them. For example the Topical-Chat
dataset has 11K crowdsourced conversations spanning 8 broad topics (Gopalakrish-
nan et al., 2019), the EMPATHETICDIALOGUES includes 25K crowdsourced con-

decentservice:RECOMMENDcuisine:null[name]hasdecentserviceENCODERDECODER328 CHAPTER 15

• CHATBOTS & DIALOGUE SYSTEMS

versations grounded in a speciﬁc situation where a speaker was feeling a speciﬁc
emotion (Rashkin et al., 2019), and the SaFeRDialogues dataset (Ung et al., 2022)
has 8k dialogues demonstrating graceful responses to conversational feedback about
safety failures.

Such datasets are far too small to train a language model alone, and so it’s com-
mon to also pretrain on large datasets of pseudo-conversations drawn from Twitter
(Ritter et al., 2010a), Reddit (Roller et al., 2021), Weibo (微博), and other social
media platforms. To turn social media data into data that has the structure of a con-
versation, we can treat any post on the platform as the ﬁrst turn in a conversation,
and the sequence of comments/replies as subsequent turns in that conversation.

Datasets from the web can be enormously toxic, so it’s crucial to ﬁlter the di-
alogues ﬁrst. This can be done by using the same toxicity classiﬁers we describe
below in the ﬁne-tuning section.

Architecture For training chatbots, it’s most common to use the standard causal
language model architecture, in which the model predicts each word given all the
prior words, and the loss is the standard language modeling loss. Fig. 15.13 shows
a standard training setup; no different than language model training in Chapter 10.
The only difference is the data, which has the addition of signiﬁcant conversation
and pseudo-conversation data as described in the prior section. As usual, the left
context can include the entire prior conversation (or as much as ﬁts in the context
window).

Figure 15.13 Training a causal (decoder-only) language model for a chatbot.

An alternative is to use the encoder-decoder architecture of Chapter 13. In this
case the entire conversation up to the last turn (as much as ﬁts in the context) is
presented to the encoder, and the decoder generates the next turn.

Figure 15.14 An alternative: an encoder-decoder language model for a chatbot.

TransformerBlocksLM headgotpromoted!<s>gotpromoted!<s>Next wordCongratsLM Loss…LM headLM headLM headLM headLM headICongrats!…LM headLM head!-log y!-log yCongrats-log y<s>-log y!-log ypromoted-log ygot………………promotedgot!<s>Congrats!ENCODERDECODERI15.4

• CHATBOTS

329

In practice, dialogue systems require additional customization beyond just pre-
training on dialogue data. In the next few sections we’ll discuss various stages of
ﬁne-tuning that can be used for this customization.

15.4.2 Fine Tuning for Quality and Safety

It is a common practice for dialogue systems to use further labeled data for ﬁne-
tuning. One function of this ﬁne-tuning step is to improve the quality of the dialogue,
training the system to produce responses that are sensible and interesting. Another
function might be to improve safety, keeping a dialogue system from suggesting
harmful actions (like ﬁnancial fraud, medical harm, inciting hatred, or abusing the
user or other people).

In the simplest method for improving quality and safety, speakers of the lan-
guage are given an initial prompt and instructions to have high-quality, safe dia-
logues. They then interact with an initial dialogue system and their responses are
used to ﬁnetune the model, usually as part of the instruct tuning step we introduced
in Chapter 12. Thus a dialogue system learns to answer questions, follow other
instructions, and also carry on high-quality, safe dialogues, in a single multi-task
learning format.

While ﬁne-tuning on positive examples is helpful, it is generally insufﬁcient and
so it is common to add more discriminative data that speciﬁcally downweights low-
quality or harmful responses. The simplest paradigm for this is to train a model to
predict turn-level safety and quality values, by training on human-labeled ratings.
Such ratings might be collected by ﬁrst having speakers of the language carry on
dialogues with a system, and then a second set of people act as labelers to label
every system turn for its quality and safety, resulting in a binary label for quality and
safety for each turn.

Once a dataset has been created with these labels, a language model can be used
in a classiﬁcation task to label the quality and safety of a turn. For example in the
Lamda system (Cohen et al., 2022), a single language model is used in two phases,
roughly corresponding to generative and discriminative tasks: ﬁrst generating a re-
sponse, and then generating a label. In the generative phase, the model is given the
prior turn and a special RESPONSE token and generates the blue response turn. (In
training, the training loss is given only for the blue response):

“What’s up? RESPONSE Not much.

In a second, discriminative phase, the model is ﬁne-tuned to see an attribute
(SENSIBLE, INTERESTING, UNSAFE) and then to predict a 0 or 1 value, again
with training losses given only for the blue value.

What’s up? RESPONSE Not much. SENSIBLE 1
What’s up? RESPONSE Not much. INTERESTING 0
What’s up? RESPONSE Not much. UNSAFE 0

To use the system in inference, the model ﬁrst generates a response given the context,
and then it is given the attribute and asked to generate a rating. The result is a
generated turn along with a label. This label isn’t shown to the user but can be use
for ﬁltering, either at training time or at deployment time. For example, the system
can generate multiple potential responses, ﬁlter out any response that is unsafe, and
return to the user the highest ranking response.

330 CHAPTER 15

• CHATBOTS & DIALOGUE SYSTEMS

15.4.3 Learning to perform retrieval as part of responding

Modern chatbots are also trained to do retrieval (calls to Google or Bing or other
search engines) as a component of generating a response. This is generally done
by having a sort of fake dialogue participant called something like Search Query
whose utterances are passed to a search engine. The system can be encourged to do
searches either by prompting or by ﬁne-tuning.

For example in the Sparrow chatbot (Glaese et al., 2022), the prompt includes
a few sample conversations that include two special users, Search Query, and
Search Results:

...[this is preceded by other parts of the prompt]
What color is the sky?
Blue.
Why?

User:
Sparrow:
User:
Search Query: why is sky blue
Search Results: Page title: Sky Except for direct sunlight, most of the light in
the daytime sky is caused by scattering, which is dominated by
a small-particle limit called Rayleigh scattering. The scattering
due to molecule-sized particles (as in air) is greater in the di-
rections both toward and away from the source of light than it
is in directions perpendicular to the incident path. Scattering is
signiﬁcant for light at all visible wavelengths, but is stronger at
the shorter (bluer) end of the visible spectrum, meaning that the
scattered light is bluer than its source: the Sun. The remain-
ing direct sunlight, having lost some of its shorter-wavelength
components, appears slightly less blue.
Because of the Rayleigh scattering.
It causes short waves of
blue light to be scattered more than the other colours in the spec-
trum.
User:
Who was Raleigh?
Search Query: who was Rayleigh
...
...

Sparrow:

From these prompts, the system learns to generate texts with Search Query
turns for fact-based questions from the user, and these are passed to a search engine
to generate the Search Results turns.

Alternatively, systems can be ﬁnetuned to to know when to use a search en-
gine. For example, labelers can interact with a system, fact check each of the re-
sponses, and whenever the system emits an incorrect response, perform the web
search queries that the system should have used to check its answer, and then the in-
teration is recorded and used for ﬁne-tuning. Or labelers can look at a transcript of a
language model carrying on a dialogue, and similarly mark every place where a fact
was wrong (or out-of-date) and write the set of search queries that would have been
appropriate. A system is then ﬁne-tuned to generate search query turns which
are again passed to a search engine to generate the search responses. The set
of pages or snippets returned by the search engine in the search response turn are
then treated as the context for generation, similarly to the retrieval-based question-
answering methods of Chapter 14.

15.5

• DIALOGUE SYSTEM DESIGN

331

15.4.4 RLHF

RLHF

A more sophisticated family of methods uses reinforcement learning to learn to
match human preferences for generated turns.
In this method, RLHF for Rein-
forcement Learning from Human Feedback, we give a system a dialogue context
and sample two possible turns from the language model. We then have humans la-
bel which of the two is better, creating a large dataset of sentence pairs with human
preferences. These pairs are used to train a dialogue policy, and reinforcement learn-
ing is used to train the language model to generate turns that have higher rewards
(Christiano et al., 2017; Ouyang et al., 2022). While using RLHF is the current state
of the art at the time of this writing, a number of alternatives have been recently
developed that don’t require reinforcement learning (Rafailov et al., 2023, e.g.,) and
so this aspect of the ﬁeld is changing very quickly.

15.4.5 Evaluating Chatbots

Chatbots are evaluated by humans, who assign a score. This can be the human who
talked to the chatbot (participant evaluation) or a third party who reads a transcript
of a human/chatbot conversation (observer evaluation). In the participant evalua-
tion of See et al. (2019), the human evaluator chats with the model for six turns and
rates the chatbot on 8 dimensions capturing conversational quality: avoiding repe-
tition, interestingness, making sense, ﬂuency, listening, inquisitiveness, humanness
and engagingness on Likert scales like these:

Engagingness How much did you enjoy talking to this user?

•
•

Not at all

A little

Somewhat

A lot

•

•

•

•

Making sense How often did this user say something which did NOT make sense?
Some re-

Never made any sense
•
sponses didn’t make sense

Most responses didn’t make sense
Everything made perfect sense

•

Observer evaluations use third party annotators to look at the text of a complete
conversation. Sometimes we’re interested in having raters assign a score to each
system turn; for example (Artstein et al., 2009) have raters mark how coherent each
turn is. Often, however, we just want a single high-level score to know if system A
is better than system B. The acute-eval metric (Li et al., 2019a) is such an observer
evaluation in which annotators look at two separate human-computer conversations
and choose the system which performed better on four metrics: engagingness, inter-
estingness, humanness, and knowledgability.

acute-eval

15.5 Dialogue System Design

Because of the important role of the user, the ﬁeld of dialogue systems is closely
linked with Human-Computer Interaction (HCI). This is especially true for task-
oriented dialogue and assistants, where the design of dialogue strategies, sometimes
called voice user interface design, generally follows user-centered design princi-
ples (Gould and Lewis, 1985):

voice user
interface

1. Study the user and task: Understand the users and the task by interviewing
users, investigating similar systems, and studying related human-human dialogues.

Wizard-of-Oz
system

2. Build simulations and prototypes: A crucial tool in building dialogue systems
is the Wizard-of-Oz system. In wizard systems, the users interact with what they

332 CHAPTER 15

• CHATBOTS & DIALOGUE SYSTEMS

think is a program but is in fact a human “wizard” disguised by a software interface
(Gould et al. 1983, Good et al. 1984, Fraser and
Gilbert 1991). The name comes from the chil-
dren’s book The Wizard of Oz (Baum, 1900),
in which the wizard turned out to be a simu-
lation controlled by a man behind a curtain or
screen. A wizard system can be used to test out
an architecture before implementation; only the
interface software and databases need to be in
place. The wizard gets input from the user, uses
a database interface to run queries based on the
user utterance, and then outputs sentences, ei-
ther by typing them or speaking them.

Wizard-of-Oz systems are not a perfect
simulation, since the wizard doesn’t exactly
simulate the errors or limitations of a real sys-
tem; but wizard studies can still provide a useful ﬁrst idea of the domain issues.

3. Iteratively test the design on users: An iterative design cycle with embedded
user testing is essential in system design (Nielsen 1992, Cole et al. 1997, Yankelovich
et al. 1995, Landauer 1995). For example in a well-known incident, an early dia-
logue system required the user to press a key to interrupt the system (Stifelman et al.,
1993). But user testing showed users barged in (interrupted, talking over the sys-
tem), which led to a redesign of the system to recognize overlapped speech. It’s also
important to incorporate value sensitive design, in which we carefully consider dur-
ing the design process the beneﬁts, harms and possible stakeholders of the resulting
system (Friedman et al. 2017, Friedman and Hendry 2019).

barged in

value sensitive
design

15.5.1 Ethical Issues in Dialogue System Design

Ethical issues have been key to how we think about designing artiﬁcial agents since
well before we had dialogue systems. Mary Shelley (depicted below) centered her
novel Frankenstein around the problem of creating artiﬁcial agents without consider-
ing
ethical and humanistic concerns. One issue is the
If users seek information from di-
safety of users.
alogue systems in safety-critical situations like ask-
ing medical advice, or in emergency situations, or
when indicating the intentions of self-harm, incorrect
advice can be dangerous and even life-threatening.
For example (Bickmore et al., 2018) gave participants
medical problems to pose to three commercial di-
alogue systems (Siri, Alexa, Google Assistant) and
asked them to determine an action to take based on
the system responses; many of the proposed actions,
if actually taken, would have led to harm or death.

A system can also harm users by verbally attacking them, or creating represen-
tational harms (Blodgett et al., 2020) by generating abusive or harmful stereotypes
that demean particular groups of people. Both abuse and stereotypes can cause psy-
chological harm to users. Microsoft’s 2016 Tay chatbot, for example, was taken
ofﬂine 16 hours after it went live, when it began posting messages with racial slurs,

Tay

15.6

• SUMMARY

333

conspiracy theories, and personal attacks on its users. Tay had learned these biases
and actions from its training data, including from users who seemed to be purposely
teaching the system to repeat this kind of language (Neff and Nagy 2016). Hender-
son et al. (2017) examined dialogue datasets used to train corpus-based chatbots and
found toxic and abusive language, especially in social media corpora like Twitter
and Reddit, and indeed such language then appears in the text generated by lan-
guage models and dialogue systems (Gehman et al. 2020; Xu et al. 2020) which
can even amplify the bias from the training data (Dinan et al., 2020). Liu et al.
(2020) developed another method for investigating bias, testing how neural dialogue
systems responded to pairs of simulated user turns that are identical except for men-
tioning different genders or race. They found, for example, that simple changes like
using the word ‘she’ instead of ‘he’ in a sentence caused systems to respond more
offensively and with more negative sentiment.

Another important ethical issue is privacy. Already in the ﬁrst days of ELIZA,
Weizenbaum pointed out the privacy implications of people’s revelations to the chat-
bot. The ubiquity of in-home dialogue systems means they may often overhear
private information (Henderson et al., 2017). If a chatbot is human-like, users are
also more likely to disclose private information, and less likely to worry about the
harm of this disclosure (Ischen et al., 2019). In general, chatbots that are trained
on transcripts of human-human or human-machine conversation must anonymize
personally identiﬁable information.

Finally, chatbots raise important issues of gender equality in addition to textual
bias. Current chatbots are overwhelmingly given female names, likely perpetuating
the stereotype of a subservient female servant (Paolino, 2017). And when users
use sexually harassing language, most commercial chatbots evade or give positive
responses rather than responding in clear negative ways (Fessler, 2017).

These ethical issues are an important area of investigation, including ﬁnding
ways to mitigate problems of abuse and toxicity, like detecting and responding ap-
propriately to toxic contexts (Wolf et al. 2017, Dinan et al. 2020, Xu et al. 2020).
Value sensitive design, carefully considering possible harms in advance (Friedman
et al. 2017, Friedman and Hendry 2019) is also important; (Dinan et al., 2021) give
a number of suggestions for best practices in dialogue system design. For exam-
ple getting informed consent from participants, whether they are used for training,
or whether they are interacting with a deployed system is important. Because di-
alogue systems by deﬁnition involve human participants, researchers also work on
these issues with the Institutional Review Boards (IRB) at their institutions, who
help protect the safety of experimental subjects.

IRB

15.6 Summary

Chatbots and dialogue systems are crucial speech and language processing appli-
cations that are already widely used commercially.

• In human dialogue, speaking is a kind of action; these acts are referred to
as speech acts or dialogue acts. Speakers also attempt to achieve common
ground by acknowledging that they have understand each other. Conversation
also is characterized by turn structure and dialogue structure.

• Chatbots are conversational systems designed to mimic the appearance of in-
formal human conversation. Rule-based chatbots like ELIZA and its modern

334 CHAPTER 15

• CHATBOTS & DIALOGUE SYSTEMS

descendants use rules to map user sentences into system responses. Corpus-
based chatbots mine logs of human conversation to learn to automatically map
user sentences into system responses.

• For task-based dialogue, most commercial dialogue systems use the GUS or
frame-based architecture, in which the designer speciﬁes frames consisting of
slots that the system must ﬁll by asking the user.

• The dialogue-state architecture augments the GUS frame-and-slot architec-
ture with richer representations and more sophisticated algorithms for keeping
track of user’s dialogue acts, policies for generating its own dialogue acts, and
a natural language component.

• Dialogue systems are a kind of human-computer interaction, and general HCI
principles apply in their design, including the role of the user, simulations such
as Wizard-of-Oz systems, and the importance of iterative design and testing
on real users.

Bibliographical and Historical Notes

conversation
analysis

The linguistic, philosophical, and psychological literature on dialogue is quite ex-
tensive. For example the idea that utterances in a conversation are a kind of action
being performed by the speaker was due originally to the philosopher Wittgenstein
(1953) but worked out more fully by Austin (1962) and his student John Searle.
Various sets of speech acts have been deﬁned over the years, and a rich linguistic
and philosophical literature developed, especially focused on explaining the use of
indirect speech acts. The idea of dialogue acts draws also from a number of other
sources, including the ideas of adjacency pairs, pre-sequences, and other aspects of
the interactional properties of human conversation developed in the ﬁeld of conver-
sation analysis (see Levinson (1983) for an introduction to the ﬁeld). This idea that
acts set up strong local dialogue expectations was also preﬁgured by Firth (1935, p.
70), in a famous quotation:

Most of the give-and-take of conversation in our everyday life is stereotyped
and very narrowly conditioned by our particular type of culture. It is a sort
of roughly prescribed social ritual, in which you generally say what the other
fellow expects you, one way or the other, to say.

Another important research thread modeled dialogue as a kind of collaborative
behavior, including the ideas of common ground (Clark and Marshall, 1981), ref-
erence as a collaborative process (Clark and Wilkes-Gibbs, 1986), joint intention
(Levesque et al., 1990), and shared plans (Grosz and Sidner, 1980).

The earliest conversational systems were simple pattern-action chatbots like ELIZA

(Weizenbaum, 1966). ELIZA had a widespread inﬂuence on popular perceptions of
artiﬁcial intelligence, and brought up some of the ﬁrst ethical questions in natural
language processing —such as the issues of privacy we discussed above as well the
role of algorithms in decision-making— leading its creator Joseph Weizenbaum to
ﬁght for social responsibility in AI and computer science in general.

Computational-implemented theories of dialogue blossomed in the 1970. That
period saw the very inﬂuential GUS system (Bobrow et al., 1977), which in the late
1970s established the frame-based paradigm that became the dominant industrial
paradigm for dialogue systems for over 30 years.

BDI

BIBLIOGRAPHICAL AND HISTORICAL NOTES

335

Another inﬂuential line of research from that decade focused on modeling the hi-
erarchical structure of dialogue. Grosz’s pioneering 1977b dissertation ﬁrst showed
that “task-oriented dialogues have a structure that closely parallels the structure of
the task being performed” (p. 27), leading to her work with Sidner and others show-
ing how to use similar notions of intention and plans to model discourse structure
and coherence in dialogue. See, e.g., Lochbaum et al. (2000) for a summary of the
role of intentional structure in dialogue.

Yet a third line, ﬁrst suggested by Bruce (1975), suggested that since speech acts
are actions, they should be planned like other actions, and drew on the AI planning
literature (Fikes and Nilsson, 1971). A system seeking to ﬁnd out some information
can come up with the plan of asking the interlocutor for the information. A system
hearing an utterance can interpret a speech act by running the planner “in reverse”,
using inference rules to infer from what the interlocutor said what the plan might
have been. Plan-based models of dialogue are referred to as BDI models because
such planners model the beliefs, desires, and intentions (BDI) of the system and in-
terlocutor. BDI models of dialogue were ﬁrst introduced by Allen, Cohen, Perrault,
and their colleagues in a number of inﬂuential papers showing how speech acts could
be generated (Cohen and Perrault, 1979) and interpreted (Perrault and Allen 1980,
Allen and Perrault 1980). At the same time, Wilensky (1983) introduced plan-based
models of understanding as part of the task of interpreting stories.

In the 1990s, machine learning models that had ﬁrst been applied to natural
language processing began to be applied to dialogue tasks like slot ﬁlling (Miller
et al. 1994, Pieraccini et al. 1991). This period also saw lots of analytic work on the
linguistic properties of dialogue acts and on machine-learning-based methods for
their detection. (Sag and Liberman 1975, Hinkelman and Allen 1989, Nagata and
Morimoto 1994, Goodwin 1996, Chu-Carroll 1998, Shriberg et al. 1998, Stolcke
et al. 2000, Gravano et al. 2012. This work strongly informed the development
of the dialogue-state model (Larsson and Traum, 2000). Dialogue state tracking
quickly became an important problem for task-oriented dialogue, and there has been
an inﬂuential annual evaluation of state-tracking algorithms (Williams et al., 2016).
The turn of the century saw a line of work on applying reinforcement learning
to dialogue, which ﬁrst came out of AT&T and Bell Laboratories with work on
MDP dialogue systems (Walker 2000, Levin et al. 2000, Singh et al. 2002) along
with work on cue phrases, prosody, and rejection and conﬁrmation. Reinforcement
learning research turned quickly to the more sophisticated POMDP models (Roy
et al. 2000, Lemon et al. 2006, Williams and Young 2007) applied to small slot-
ﬁlling dialogue tasks. Neural reinforcement learning models have been used both for
chatbot systems, for example simulating dialogues between two dialogue systems,
rewarding good conversational properties like coherence and ease of answering (Li
et al., 2016a), and for task-oriented dialogue (Williams et al., 2017).

By around 2010 the GUS architecture ﬁnally began to be widely used commer-
cially in dialogue systems on phones like Apple’s SIRI (Bellegarda, 2013) and other
digital assistants.

The rise of the web gave rise to corpus-based chatbot architectures around the
turn of the century, ﬁrst using information retrieval models and then in the 2010s,
after the rise of deep learning, with sequence-to-sequence models.

[TBD: Modern history of neural chatbots]
Other important dialogue areas include the study of affect in dialogue (Rashkin
et al. 2019, Lin et al. 2019) and conversational interface design (Cohen et al. 2004,
Harris 2005, Pearl 2017, Deibel and Evanhoe 2021).

336 CHAPTER 15

• CHATBOTS & DIALOGUE SYSTEMS

Exercises

dispreferred
response

15.1 Write a ﬁnite-state automaton for a dialogue manager for checking your bank

balance and withdrawing money at an automated teller machine.

15.2 A dispreferred response is a response that has the potential to make a person
uncomfortable or embarrassed in the conversational context; the most com-
mon example dispreferred responses is turning down a request. People signal
their discomfort with having to say no with surface cues (like the word well),
or via signiﬁcant silence. Try to notice the next time you or someone else
utters a dispreferred response, and write down the utterance. What are some
other cues in the response that a system might use to detect a dispreferred
response? Consider non-verbal cues like eye gaze and body gestures.

15.3 When asked a question to which they aren’t sure they know the answer, peo-
ple display their lack of conﬁdence by cues that resemble other dispreferred
responses. Try to notice some unsure answers to questions. What are some
of the cues? If you have trouble doing this, read Smith and Clark (1993) and
listen speciﬁcally for the cues they mention.

15.4 Implement a small air-travel help system based on text input. Your system
should get constraints from users about a particular ﬂight that they want to
take, expressed in natural language, and display possible ﬂights on a screen.
Make simplifying assumptions. You may build in a simple ﬂight database or
you may use a ﬂight information system on the Web as your backend.

CHAPTER

16 Automatic Speech Recognition

and Text-to-Speech

I KNOW not whether
I see your meaning: if I do, it lies
Upon the wordy wavelets of your voice,
Dim as an evening shadow in a brook,
Thomas Lovell Beddoes, 1851

Understanding spoken language, or at least transcribing the words into writing, is
one of the earliest goals of computer language processing. In fact, speech processing
predates the computer by many decades!
The ﬁrst machine that recognized speech
was a toy from the 1920s. “Radio Rex”,
shown to the right, was a celluloid dog
that moved (by means of a spring) when
the spring was released by 500 Hz acous-
tic energy. Since 500 Hz is roughly the
ﬁrst formant of the vowel [eh] in “Rex”,
Rex seemed to come when he was called
(David, Jr. and Selfridge, 1962).

In modern times, we expect more of our automatic systems. The task of auto-

ASR

matic speech recognition (ASR) is to map any waveform like this:

to the appropriate string of words:

It’s time for lunch!

Automatic transcription of speech by any speaker in any environment is still far from
solved, but ASR technology has matured to the point where it is now viable for many
practical tasks. Speech is a natural interface for communicating with smart home ap-
pliances, personal assistants, or cellphones, where keyboards are less convenient, in
telephony applications like call-routing (“Accounting, please”) or in sophisticated
dialogue applications (“I’d like to change the return date of my ﬂight”). ASR is also
useful for general transcription, for example for automatically generating captions
for audio or video text (transcribing movies or videos or live discussions). Transcrip-
tion is important in ﬁelds like law where dictation plays an important role. Finally,
ASR is important as part of augmentative communication (interaction between com-
puters and humans with some disability resulting in difﬁculties or inabilities in typ-
ing or audition). The blind Milton famously dictated Paradise Lost to his daughters,
and Henry James dictated his later novels after a repetitive stress injury.

What about the opposite problem, going from text to speech? This is a problem
with an even longer history. In Vienna in 1769, Wolfgang von Kempelen built for

338 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

the Empress Maria Theresa the famous Mechanical Turk, a chess-playing automaton
consisting of a wooden box ﬁlled with gears, behind which sat a robot mannequin
who played chess by moving pieces with his mechanical arm. The Turk toured Eu-
rope and the Americas for decades, defeating Napoleon Bonaparte and even playing
Charles Babbage. The Mechanical Turk might have been one of the early successes
of artiﬁcial intelligence were it not for the fact that it was, alas, a hoax, powered by
a human chess player hidden inside the box.

is

What

an extraordinarily

that von Kempelen,

less well known is
proliﬁc inventor, also built between
1769 and 1790 what was deﬁnitely
the ﬁrst full-sentence
not a hoax:
speech synthesizer, shown partially to
the right. His device consisted of a
bellows to simulate the lungs, a rub-
ber mouthpiece and a nose aperture, a
reed to simulate the vocal folds, var-
ious whistles for the fricatives, and a
small auxiliary bellows to provide the puff of air for plosives. By moving levers
with both hands to open and close apertures, and adjusting the ﬂexible leather “vo-
cal tract”, an operator could produce different consonants and vowels.

speech
synthesis
text-to-speech

TTS

More than two centuries later, we no longer build our synthesizers out of wood
and leather, nor do we need human operators. The modern task of speech synthesis,
also called text-to-speech or TTS, is exactly the reverse of ASR; to map text:

It’s time for lunch!

to an acoustic waveform:

Modern speech synthesis has a wide variety of applications. TTS is used in
conversational agents that conduct dialogues with people, plays a role in devices
that read out loud for the blind or in games, and can be used to speak for sufferers
of neurological disorders, such as the late astrophysicist Steven Hawking who, after
he lost the use of his voice because of ALS, spoke by manipulating a TTS system.

In the next sections we’ll show how to do ASR with encoder-decoders, intro-
duce the CTC loss functions, the standard word error rate evaluation metric, and
describe how acoustic features are extracted. We’ll then see how TTS can be mod-
eled with almost the same algorithm in reverse, and conclude with a brief mention
of other speech tasks.

16.1 The Automatic Speech Recognition Task

digit
recognition

Before describing algorithms for ASR, let’s talk about how the task itself varies.
One dimension of variation is vocabulary size. Some ASR tasks can be solved with
extremely high accuracy, like those with a 2-word vocabulary (yes versus no) or
an 11 word vocabulary like digit recognition (recognizing sequences of digits in-
cluding zero to nine plus oh). Open-ended tasks like transcribing videos or human
conversations, with large vocabularies of up to 60,000 words, are much harder.

16.1

• THE AUTOMATIC SPEECH RECOGNITION TASK

339

A second dimension of variation is who the speaker is talking to. Humans speak-
ing to machines (either dictating or talking to a dialogue system) are easier to recog-
nize than humans speaking to humans. Read speech, in which humans are reading
out loud, for example in audio books, is also relatively easy to recognize. Recog-
nizing the speech of two humans talking to each other in conversational speech,
for example, for transcribing a business meeting, is the hardest. It seems that when
humans talk to machines, or read without an audience present, they simplify their
speech quite a bit, talking more slowly and more clearly.

A third dimension of variation is channel and noise. Speech is easier to recognize
if it’s recorded in a quiet room with head-mounted microphones than if it’s recorded
by a distant microphone on a noisy city street, or in a car with the window open.

A ﬁnal dimension of variation is accent or speaker-class characteristics. Speech
is easier to recognize if the speaker is speaking the same dialect or variety that the
system was trained on. Speech by speakers of regional or ethnic dialects, or speech
by children can be quite difﬁcult to recognize if the system is only trained on speak-
ers of standard dialects, or only adult speakers.

A number of publicly available corpora with human-created transcripts are used
to create ASR test and training sets to explore this variation; we mention a few of
them here since you will encounter them in the literature. LibriSpeech is a large
open-source read-speech 16 kHz dataset with over 1000 hours of audio books from
the LibriVox project, with transcripts aligned at the sentence level (Panayotov et al.,
2015). It is divided into an easier (“clean”) and a more difﬁcult portion (“other”)
with the clean portion of higher recording quality and with accents closer to US
English. This was done by running a speech recognizer (trained on read speech from
the Wall Street Journal) on all the audio, computing the WER for each speaker based
on the gold transcripts, and dividing the speakers roughly in half, with recordings
from lower-WER speakers called “clean” and recordings from higher-WER speakers
“other”.

The Switchboard corpus of prompted telephone conversations between strangers
was collected in the early 1990s; it contains 2430 conversations averaging 6 min-
utes each, totaling 240 hours of 8 kHz speech and about 3 million words (Godfrey
et al., 1992). Switchboard has the singular advantage of an enormous amount of
auxiliary hand-done linguistic labeling, including parses, dialogue act tags, phonetic
and prosodic labeling, and discourse and information structure. The CALLHOME
corpus was collected in the late 1990s and consists of 120 unscripted 30-minute
telephone conversations between native speakers of English who were usually close
friends or family (Canavan et al., 1997).

The Santa Barbara Corpus of Spoken American English (Du Bois et al., 2005) is
a large corpus of naturally occurring everyday spoken interactions from all over the
United States, mostly face-to-face conversation, but also town-hall meetings, food
preparation, on-the-job talk, and classroom lectures. The corpus was anonymized by
removing personal names and other identifying information (replaced by pseudonyms
in the transcripts, and masked in the audio).

CORAAL is a collection of over 150 sociolinguistic interviews with African
American speakers, with the goal of studying African American Language (AAL),
the many variations of language used in African American communities (Kendall
and Farrington, 2020). The interviews are anonymized with transcripts aligned at
the utterance level. The CHiME Challenge is a series of difﬁcult shared tasks with
corpora that deal with robustness in ASR. The CHiME 5 task, for example, is ASR of
conversational speech in real home environments (speciﬁcally dinner parties). The

read speech

conversational
speech

LibriSpeech

Switchboard

CALLHOME

CORAAL

CHiME

340 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

HKUST

AISHELL-1

corpus contains recordings of twenty different dinner parties in real homes, each
with four participants, and in three locations (kitchen, dining area, living room),
recorded both with distant room microphones and with body-worn mikes. The
HKUST Mandarin Telephone Speech corpus has 1206 ten-minute telephone con-
versations between speakers of Mandarin across China, including transcripts of the
conversations, which are between either friends or strangers (Liu et al., 2006). The
AISHELL-1 corpus contains 170 hours of Mandarin read speech of sentences taken
from various domains, read by different speakers mainly from northern China (Bu
et al., 2017).

Figure 16.1 shows the rough percentage of incorrect words (the word error rate,
or WER, deﬁned on page 352) from state-of-the-art systems on some of these tasks.
Note that the error rate on read speech (like the LibriSpeech audiobook corpus) is
around 2%; this is a solved task, although these numbers come from systems that re-
quire enormous computational resources. By contrast, the error rate for transcribing
conversations between humans is much higher; 5.8 to 11% for the Switchboard and
CALLHOME corpora. The error rate is higher yet again for speakers of varieties
like African American Vernacular English, and yet again for difﬁcult conversational
tasks like transcription of 4-speaker dinner party speech, which can have error rates
as high as 81.3%. Character error rates (CER) are also much lower for read Man-
darin speech than for natural conversation.

WER%
English Tasks
1.4
LibriSpeech audiobooks 960hour clean
2.6
LibriSpeech audiobooks 960hour other
5.8
Switchboard telephone conversations between strangers
11.0
CALLHOME telephone conversations between family
27.0
Sociolinguistic interviews, CORAAL (AAL)
47.9
CHiMe5 dinner parties with body-worn microphones
81.3
CHiMe5 dinner parties with distant microphones
CER%
Chinese (Mandarin) Tasks
6.7
AISHELL-1 Mandarin read speech corpus
HKUST Mandarin Chinese telephone conversations
23.5
Figure 16.1 Rough Word Error Rates (WER = % of words misrecognized) reported around
2020 for ASR on various American English recognition tasks, and character error rates (CER)
for two Chinese recognition tasks.

16.2 Feature Extraction for ASR: Log Mel Spectrum

feature vector

The ﬁrst step in ASR is to transform the input waveform into a sequence of acoustic
feature vectors, each vector representing the information in a small time window
of the signal. Let’s see how to convert a raw waveﬁle to the most commonly used
features, sequences of log mel spectrum vectors. A speech signal processing course
is recommended for more details.

16.2.1 Sampling and Quantization

The input to a speech recognizer is a complex series of changes in air pressure.
These changes in air pressure obviously originate with the speaker and are caused

16.2

• FEATURE EXTRACTION FOR ASR: LOG MEL SPECTRUM 341

by the speciﬁc way that air passes through the glottis and out the oral or nasal cav-
ities. We represent sound waves by plotting the change in air pressure over time.
One metaphor which sometimes helps in understanding these graphs is that of a ver-
tical plate blocking the air pressure waves (perhaps in a microphone in front of a
speaker’s mouth, or the eardrum in a hearer’s ear). The graph measures the amount
of compression or rarefaction (uncompression) of the air molecules at this plate.
Figure 16.2 shows a short segment of a waveform taken from the Switchboard corpus
of telephone speech of the vowel [iy] from someone saying “she just had a baby”.

Figure 16.2 A waveform of an instance of the vowel [iy] (the last vowel in the word “baby”). The y-axis
shows the level of air pressure above and below normal atmospheric pressure. The x-axis shows time. Notice
that the wave repeats regularly.

sampling

Nyquist
frequency

quantization

The ﬁrst step in digitizing a sound wave like Fig. 16.2 is to convert the analog
representations (ﬁrst air pressure and then analog electric signals in a microphone)
into a digital signal. This analog-to-digital conversion has two steps: sampling and
quantization. To sample a signal, we measure its amplitude at a particular time; the
sampling rate is the number of samples taken per second. To accurately measure a
wave, we must have at least two samples in each cycle: one measuring the positive
part of the wave and one measuring the negative part. More than two samples per
cycle increases the amplitude accuracy, but fewer than two samples causes the fre-
quency of the wave to be completely missed. Thus, the maximum frequency wave
that can be measured is one whose frequency is half the sample rate (since every
cycle needs two samples). This maximum frequency for a given sampling rate is
called the Nyquist frequency. Most information in human speech is in frequencies
below 10,000 Hz; thus, a 20,000 Hz sampling rate would be necessary for com-
plete accuracy. But telephone speech is ﬁltered by the switching network, and only
frequencies less than 4,000 Hz are transmitted by telephones. Thus, an 8,000 Hz
sampling rate is sufﬁcient for telephone-bandwidth speech like the Switchboard
corpus, while 16,000 Hz sampling is often used for microphone speech.

Although using higher sampling rates produces higher ASR accuracy, we can’t
combine different sampling rates for training and testing ASR systems. Thus if
we are testing on a telephone corpus like Switchboard (8 KHz sampling), we must
downsample our training corpus to 8 KHz. Similarly, if we are training on mul-
tiple corpora and one of them includes telephone speech, we downsample all the
wideband corpora to 8Khz.

Amplitude measurements are stored as integers, either 8 bit (values from -128–
127) or 16 bit (values from -32768–32767). This process of representing real-valued
numbers as integers is called quantization; all values that are closer together than
the minimum granularity (the quantum size) are represented identically. We refer to
each sample at time index n in the digitized, quantized waveform as x[n].

Once data is quantized, it is stored in various formats. One parameter of these
formats is the sample rate and sample size discussed above; telephone speech is
often sampled at 8 kHz and stored as 8-bit samples, and microphone data is often
sampled at 16 kHz and stored as 16-bit samples. Another parameter is the number of

Time (s)00.03875–0.016970.022830342 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

channel

PCM

channels. For stereo data or for two-party conversations, we can store both channels
in the same ﬁle or we can store them in separate ﬁles. A ﬁnal parameter is individual
sample storage—linearly or compressed. One common compression format used for
telephone speech is µ-law (often written u-law but still pronounced mu-law). The
intuition of log compression algorithms like µ-law is that human hearing is more
sensitive at small intensities than large ones; the log represents small values with
more faithfulness at the expense of more error on large values. The linear (unlogged)
values are generally referred to as linear PCM values (PCM stands for pulse code
modulation, but never mind that). Here’s the equation for compressing a linear PCM
sample value x to 8-bit µ-law, (where µ=255 for 8 bits):

F(x) =

sgn(x) log(1 + µ
log(1 + µ)

x
|

)
|

1

−

≤

x

≤

1

(16.1)

There are a number of standard ﬁle formats for storing the resulting digitized wave-
ﬁle, such as Microsoft’s .wav and Apple’s AIFF all of which have special headers;
simple headerless “raw” ﬁles are also used. For example, the .wav format is a sub-
set of Microsoft’s RIFF format for multimedia ﬁles; RIFF is a general format that
can represent a series of nested chunks of data and control information. Figure 16.3
shows a simple .wav ﬁle with a single data chunk together with its format chunk.

Figure 16.3 Microsoft waveﬁle header format, assuming simple ﬁle with one chunk. Fol-
lowing this 44-byte header would be the data chunk.

stationary

non-stationary

frame

stride

16.2.2 Windowing

From the digitized, quantized representation of the waveform, we need to extract
spectral features from a small window of speech that characterizes part of a par-
ticular phoneme. Inside this small window, we can roughly think of the signal as
(By
stationary (that is, its statistical properties are constant within this region).
contrast, in general, speech is a non-stationary signal, meaning that its statistical
properties are not constant over time). We extract this roughly stationary portion of
speech by using a window which is non-zero inside a region and zero elsewhere, run-
ning this window across the speech signal and multiplying it by the input waveform
to produce a windowed waveform.

The speech extracted from each window is called a frame. The windowing is
characterized by three parameters: the window size or frame size of the window
(its width in milliseconds), the frame stride, (also called shift or offset) between
successive windows, and the shape of the window.

To extract the signal we multiply the value of the signal at time n, s[n] by the

value of the window at time n, w[n]:

y[n] = w[n]s[n]

(16.2)

rectangular

The window shape sketched in Fig. 16.4 is rectangular; you can see the ex-
tracted windowed signal looks just like the original signal. The rectangular window,

16.2

• FEATURE EXTRACTION FOR ASR: LOG MEL SPECTRUM 343

Figure 16.4 Windowing, showing a 25 ms rectangular window with a 10ms stride.

Hamming

however, abruptly cuts off the signal at its boundaries, which creates problems when
we do Fourier analysis. For this reason, for acoustic feature creation we more com-
monly use the Hamming window, which shrinks the values of the signal toward
zero at the window boundaries, avoiding discontinuities. Figure 16.5 shows both;
the equations are as follows (assuming a window that is L frames long):

rectangular

w[n] =

Hamming

w[n] =

1
0

0.54
0

(cid:26)

(cid:26)

1

≤

≤

−

L
n
0
otherwise
0.46 cos( 2πn
L )

−

(16.3)

1

−

(16.4)

L
n
0
otherwise

≤

≤

Figure 16.5 Windowing a sine wave with the rectangular or Hamming windows.

16.2.3 Discrete Fourier Transform

The next step is to extract spectral information for our windowed signal; we need to
know how much energy the signal contains at different frequency bands. The tool

Shift10 msWindow25 msShift10 msWindow25 msWindow25 msTime (s)00.0475896–0.50.49990Rectangular windowHamming windowTime (s)0.004559380.0256563–0.48260.49990Time (s)0.004559380.0256563–0.50.49990344 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

Discrete
Fourier
transform
DFT

for extracting spectral information for discrete frequency bands for a discrete-time
(sampled) signal is the discrete Fourier transform or DFT.

The input to the DFT is a windowed signal x[n]...x[m], and the output, for each of
N discrete frequency bands, is a complex number X[k] representing the magnitude
and phase of that frequency component in the original signal. If we plot the mag-
nitude against the frequency, we can visualize the spectrum that we introduced in
Chapter 28. For example, Fig. 16.6 shows a 25 ms Hamming-windowed portion of
a signal and its spectrum as computed by a DFT (with some additional smoothing).

(a)

(b)

Figure 16.6
and (b) its spectrum computed by a DFT.

(a) A 25 ms Hamming-windowed portion of a signal from the vowel [iy]

Euler’s formula

that Fourier analysis relies on Euler’s formula, with j as the imaginary unit:

We do not introduce the mathematical details of the DFT here, except to note

e jθ = cos θ + j sin θ

(16.5)

As a brief reminder for those students who have already studied signal processing,
the DFT is deﬁned as follows:

X[k] =

N

1
−

(cid:88)n=0

x[n]e−

j 2π
N kn

(16.6)

fast Fourier
transform
FFT

A commonly used algorithm for computing the DFT is the fast Fourier transform
or FFT. This implementation of the DFT is very efﬁcient but only works for values
of N that are powers of 2.

16.2.4 Mel Filter Bank and Log

The results of the FFT tell us the energy at each frequency band. Human hearing,
however, is not equally sensitive at all frequency bands; it is less sensitive at higher
frequencies. This bias toward low frequencies helps human recognition, since in-
formation in low frequencies (like formants) is crucial for distinguishing vowels or
nasals, while information in high frequencies (like stop bursts or fricative noise) is
less crucial for successful recognition. Modeling this human perceptual property
improves speech recognition performance in the same way.

We implement this intuition by collecting energies, not equally at each frequency
band, but according to the mel scale, an auditory frequency scale (Chapter 28). A
mel (Stevens et al. 1937, Stevens and Volkmann 1940) is a unit of pitch. Pairs of
sounds that are perceptually equidistant in pitch are separated by an equal number

mel

Time (s)0.01417520.039295–0.041210.044140Frequency (Hz)08000Sound pressure level (dB/Hz)–2002016.3

• SPEECH RECOGNITION ARCHITECTURE

345

of mels. The mel frequency m can be computed from the raw acoustic frequency by
a log transformation:

mel( f ) = 1127 ln(1 +

f
700

)

(16.7)

We implement this intuition by creating a bank of ﬁlters that collect energy from
each frequency band, spread logarithmically so that we have very ﬁne resolution
at low frequencies, and less resolution at high frequencies. Figure 16.7 shows a
sample bank of triangular ﬁlters that implement this idea, that can be multiplied by
the spectrum to get a mel spectrum.

Figure 16.7 The mel ﬁlter bank (Davis and Mermelstein, 1980). Each triangular ﬁlter,
spaced logarithmically along the mel scale, collects energy from a given frequency range.

Finally, we take the log of each of the mel spectrum values. The human response
to signal level is logarithmic (like the human response to frequency). Humans are
less sensitive to slight differences in amplitude at high amplitudes than at low ampli-
tudes. In addition, using a log makes the feature estimates less sensitive to variations
in input such as power variations due to the speaker’s mouth moving closer or further
from the microphone.

16.3 Speech Recognition Architecture

AED
listen attend
and spell

The basic architecture for ASR is the encoder-decoder (implemented with either
RNNs or Transformers), exactly the same architecture introduced for MT in Chap-
ter 13. Generally we start from the log mel spectral features described in the previous
section, and map to letters, although it’s also possible to map to induced morpheme-
like chunks like wordpieces or BPE.

Fig. 16.8 sketches the standard encoder-decoder architecture, which is com-
monly referred to as the attention-based encoder decoder or AED, or listen attend
and spell (LAS) after the two papers which ﬁrst applied it to speech (Chorowski
et al. 2014, Chan et al. 2016). The input is a sequence of t acoustic feature vectors
F = f1, f2, ..., ft , one vector per 10 ms frame. The output can be letters or word-
, y1, ..., ym(cid:104)
pieces; we’ll assume letters here. Thus the output sequence Y = (
SOS
(cid:105)
(cid:104)
assuming special start of sequence and end of sequence tokens
eos
and
sos
(cid:105)
(cid:104)
(cid:105)
(cid:104)
each yi is a character; for English we might choose the set:

),
EOS
(cid:105)
and

a, b, c, ..., z, 0, ..., 9,

yi ∈ {
Of course the encoder-decoder architecture is particularly appropriate when in-
put and output sequences have stark length differences, as they do for speech, with

apostrophe
(cid:104)

,
space
(cid:105)
(cid:104)

comma
(cid:104)

period
(cid:104)

unk
(cid:104)

,
(cid:105)

,
(cid:105)

,
(cid:105)

(cid:105)}

m1m2mM...mel spectrum0770000.51AmplitudeFrequency (Hz)8K346 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

Figure 16.8 Schematic architecture for an encoder-decoder speech recognizer.

very long acoustic feature sequences mapping to much shorter sequences of letters
or words. A single word might be 5 letters long but, supposing it lasts about 2
seconds, would take 200 acoustic frames (of 10ms each).

Because this length difference is so extreme for speech, encoder-decoder ar-
chitectures for speech need to have a special compression stage that shortens the
acoustic feature sequence before the encoder stage. (Alternatively, we can use a loss
function that is designed to deal well with compression, like the CTC loss function
we’ll introduce in the next section.)

low frame rate

3 .1

The goal of the subsampling is to produce a shorter sequence X = x1, ..., xn that
will be the input to the encoder. The simplest algorithm is a method sometimes
called low frame rate (Pundak and Sainath, 2016): for time i we stack (concatenate)
the acoustic feature vector fi with the prior two vectors fi
2 to make a new
vector three times longer. Then we simply delete fi
2. Thus instead of
(say) a 40-dimensional acoustic feature vector every 10 ms, we have a longer vector
(say 120-dimensional) every 30 ms, with a shorter sequence length n = t

−
1 and fi

1 and fi

−

−

−

After this compression stage, encoder-decoders for speech use the same archi-
tecture as for MT or other text, composed of either RNNs (LSTMs) or Transformers.

For inference, the probability of the output string Y is decomposed as:

p(y1, . . . , yn) =

n

(cid:89)i=1

p(yi|

y1, . . . , yi

1, X)

−

We can produce each letter of the output via greedy decoding:

ˆyi = argmaxchar

AlphabetP(char

∈

y1...yi
|

−

1, X)

(16.8)

(16.9)

Alternatively we can use beam search as described in the next section. This is par-
ticularly relevant when we are adding a language model.

Adding a language model Since an encoder-decoder model is essentially a con-
ditional language model, encoder-decoders implicitly learn a language model for the
output domain of letters from their training data. However, the training data (speech

1 There are also more complex alternatives for subsampling, like using a convolutional net that down-
samples with max pooling, or layers of pyramidal RNNs, RNNs where each successive layer has half
the number of RNNs as the previous layer.

ENCODER…DECODER……ymFeature ComputationSubsampling…Hftf180-dimensional log Mel spectrumper frameShorter sequence Xy1<s>iy2ity3t‘y4‘sy5s y6 ty7tiy8imy9mex1xnn-best list

rescore

16.4

• CTC 347

paired with text transcriptions) may not include sufﬁcient text to train a good lan-
guage model. After all, it’s easier to ﬁnd enormous amounts of pure text training
data than it is to ﬁnd text paired with speech. Thus we can can usually improve a
model at least slightly by incorporating a very large language model.

The simplest way to do this is to use beam search to get a ﬁnal beam of hy-
pothesized sentences; this beam is sometimes called an n-best list. We then use a
language model to rescore each hypothesis on the beam. The scoring is done by in-
terpolating the score assigned by the language model with the encoder-decoder score
used to create the beam, with a weight λ tuned on a held-out set. Also, since most
models prefer shorter sentences, ASR systems normally have some way of adding a
length factor. One way to do this is to normalize the probability by the number of
characters in the hypothesis
|c. The following is thus a typical scoring function
(Chan et al., 2016):

Y
|

score(Y

X) =
|

1
Y
|

|c

log P(Y

X) + λ log PLM(Y )
|

(16.10)

16.3.1 Learning

Encoder-decoders for speech are trained with the normal cross-entropy loss gener-
ally used for conditional language models. At timestep i of decoding, the loss is the
log probability of the correct token (letter) yi:

LCE =

−

log p(yi|

y1, . . . , yi

1, X)

−

The loss for the entire sentence is the sum of these losses:

LCE =

m

−

(cid:88)i=1

log p(yi|

y1, . . . , yi

1, X)

−

(16.11)

(16.12)

This loss is then backpropagated through the entire end-to-end model to train the
entire encoder-decoder.

As we described in Chapter 13, we normally use teacher forcing, in which the
decoder history is forced to be the correct gold yi rather than the predicted ˆyi. It’s
also possible to use a mixture of the gold and decoder output, for example using
the gold output 90% of the time, but with probability .1 taking the decoder output
instead:

LCE =

−

16.4 CTC

log p(yi|

y1, . . . , ˆyi

1, X)

−

(16.13)

We pointed out in the previous section that speech recognition has two particular
properties that make it very appropriate for the encoder-decoder architecture, where
the encoder produces an encoding of the input that the decoder uses attention to
explore. First, in speech we have a very long acoustic input sequence X mapping to
a much shorter sequence of letters Y , and second, it’s hard to know exactly which
part of X maps to which part of Y .

In this section we brieﬂy introduce an alternative to encoder-decoder: an algo-
rithm and loss function called CTC, short for Connectionist Temporal Classiﬁca-

CTC

348 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

tion (Graves et al., 2006), that deals with these problems in a very different way. The
intuition of CTC is to output a single character for every frame of the input, so that
the output is the same length as the input, and then to apply a collapsing function
that combines sequences of identical letters, resulting in a shorter sequence.

Let’s imagine inference on someone saying the word dinner, and let’s suppose
we had a function that chooses the most probable letter for each input spectral frame
representation xi. We’ll call the sequence of letters corresponding to each input
frame an alignment, because it tells us where in the acoustic signal each letter aligns
to. Fig. 16.9 shows one such alignment, and what happens if we use a collapsing
function that just removes consecutive duplicate letters.

alignment

Figure 16.9 A naive algorithm for collapsing an alignment between input and letters.

blank

Well, that doesn’t work; our naive algorithm has transcribed the speech as diner,
not dinner! Collapsing doesn’t handle double letters. There’s also another problem
with our naive function; it doesn’t tell us what symbol to align with silence in the
input. We don’t want to be transcribing silence as random letters!

The CTC algorithm solves both problems by adding to the transcription alphabet
a special symbol for a blank, which we’ll represent as . The blank can be used in
the alignment whenever we don’t want to transcribe a letter. Blank can also be used
between letters; since our collapsing function collapses only consecutive duplicate
y
letters, it won’t collapse across . More formally, let’s deﬁne the mapping B : a
between an alignment a and an output y, which collapses all repeated letters and
then removes all blanks. Fig. 16.10 sketches this collapsing function B.

→

Figure 16.10 The CTC collapsing function B, showing the space blank character
peated (consecutive) characters in an alignment A are removed to form the output Y .

; re-

The CTC collapsing function is many-to-one; lots of different alignments map
to the same output string. For example, the alignment shown in Fig. 16.10 is not
the only alignment that results in the string dinner. Fig. 16.11 shows some other
alignments that would produce the same output.

It’s useful to think of the set of all alignments that might produce the same output
1, and represent that set as

Y . We’ll use the inverse of our B function, called B−

X (input)A (alignment)Y (output)dx1ix2ix3nx4nx5nx6nx7ex8rx9rx10rx11rx12rx13rx14dinerwavefileX (input)A (alignment)remove blanksdx1ix2x3nx4nx5x6nx7ex8rx9rx10rx11rx12x13x14dinernmerge duplicatesdinernY (output)dinern␣␣␣␣␣␣␣16.4

• CTC 349

Figure 16.11 Three other legitimate alignments producing the transcript dinner.

B−

1(Y ).

16.4.1 CTC Inference

X) let’s ﬁrst see how CTC assigns a proba-
Before we see how to compute PCTC(Y
|
bility to one particular alignment ˆA =
ˆa1, . . . , ˆan}
. CTC makes a strong conditional
{
independence assumption: it assumes that, given the input X, the CTC model output
at at time t is independent of the output labels at any other time ai. Thus:

T

X) =
PCTC(A
|

X)

p(at |

(16.14)

(cid:89)t=1
Thus to ﬁnd the best alignment ˆA =
ˆa1, . . . , ˆaT }
{
ter with the max probability at each time step t:

we can greedily choose the charac-

ˆat = argmax
c

C

∈

X)
pt (c
|

(16.15)

We then pass the resulting sequence A to the CTC collapsing function B to get the
output sequence Y .

Let’s talk about how this simple inference algorithm for ﬁnding the best align-
ment A would be implemented. Because we are making a decision at each time
point, we can treat CTC as a sequence-modeling task, where we output one letter
ˆyt at time t corresponding to each input token xt , eliminating the need for a full de-
coder. Fig. 16.12 sketches this architecture, where we take an encoder, produce a
hidden state ht at each timestep, and decode by taking a softmax over the character
vocabulary at each time step.

Figure 16.12
simple softmaxes over the hidden state ht at each output step.

Inference with CTC: using an encoder-only model, with decoding done by

dinnneeerrr␣␣ddinnnerr␣␣␣dddinnnerr␣i␣␣␣␣␣ENCODER…ynFeature ComputationSubsampling…ftf1 log Mel spectrumShorter inputsequence Xy1iy2iy3iy4tx1xnClassiﬁer+softmax…ty5……output lettersequence Y350 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

Alas, there is a potential ﬂaw with the inference algorithm sketched in (Eq. 16.15)
and Fig. 16.11. The problem is that we chose the most likely alignment A, but the
most likely alignment may not correspond to the most likely ﬁnal collapsed output
string Y . That’s because there are many possible alignments that lead to the same
output string, and hence the most likely output string might not correspond to the
most probable alignment. For example, imagine the most probable alignment A for
an input X = [x1x2x3] is the string [a b (cid:15)] but the next two most probable alignments
are [b (cid:15) b] and [(cid:15) b b]. The output Y =[b b], summing over those two alignments,
might be more probable than Y =[a b].

For this reason, the most probable output sequence Y is the one that has, not
the single best CTC alignment, but the highest sum over the probability of all its
possible alignments:

PCTC(Y

X) =
|

B−
(cid:88)A
∈

1(Y )

X)
P(A
|

T

=

p(at |

ht )

1(Y )
B−
(cid:88)A
∈
ˆY = argmax

(cid:89)t=1
PCTC(Y

Y

X)
|

(16.16)

Alas, summing over all alignments is very expensive (there are a lot of alignments),
so we approximate this sum by using a version of Viterbi beam search that cleverly
keeps in the beam the high-probability alignments that map to the same output string,
and sums those as an approximation of (Eq. 16.16). See Hannun (2017) for a clear
explanation of this extension of beam search for CTC.

Because of the strong conditional independence assumption mentioned earlier
(that the output at time t is independent of the output at time t
1, given the input),
CTC does not implicitly learn a language model over the data (unlike the attention-
based encoder-decoder architectures). It is therefore essential when using CTC to
interpolate a language model (and some sort of length factor L(Y )) using interpola-
tion weights that are trained on a dev set:

−

scoreCTC(Y

X) = log PCTC(Y
|

X) + λ1 log PLM(Y )λ2L(Y )
|

(16.17)

16.4.2 CTC Training

To train a CTC-based ASR system, we use negative log-likelihood loss with a special
CTC loss function. Thus the loss for an entire dataset D is the sum of the negative
log-likelihoods of the correct output Y for each input X:

LCTC =

(cid:88)(X,Y )
∈

D

log PCTC(Y

X)
|

−

(16.18)

To compute CTC loss function for a single input pair (X,Y ), we need the probability
of the output Y given the input X. As we saw in Eq. 16.16, to compute the probability
of a given output Y we need to sum over all the possible alignments that would
collapse to Y . In other words:

T

PCTC(Y

X) =
|

p(at |

ht )

B−
(cid:88)A
∈

1(Y )

(cid:89)t=1

(16.19)

16.4

• CTC 351

Naively summing over all possible alignments is not feasible (there are too many
alignments). However, we can efﬁciently compute the sum by using dynamic pro-
gramming to merge alignments, with a version of the forward-backward algo-
rithm also used to train HMMs (Appendix A) and CRFs. The original dynamic pro-
gramming algorithms for both training and inference are laid out in (Graves et al.,
2006); see (Hannun, 2017) for a detailed explanation of both.

16.4.3 Combining CTC and Encoder-Decoder

It’s also possible to combine the two architectures/loss functions we’ve described,
the cross-entropy loss from the encoder-decoder architecture, and the CTC loss.
Fig. 16.13 shows a sketch. For training, we can simply weight the two losses with a
λ tuned on a dev set:

L =

λ log Pencdec(Y

(1

λ ) log Pctc(Y

−
For inference, we can combine the two with the language model (or the length
penalty), again with learned weights:

−

−

(16.20)

X)
|

X)
|

ˆY = argmax

Y

[λ log Pencdec(Y

X)
|

−

(1

−

λ ) log PCTC(Y

X) + γ log PLM(Y )] (16.21)
|

Figure 16.13 Combining the CTC and encoder-decoder loss functions.

16.4.4 Streaming Models: RNN-T for improving CTC

−

Because of the strong independence assumption in CTC (assuming that the output
at time t is independent of the output at time t
1), recognizers based on CTC
don’t achieve as high an accuracy as the attention-based encoder-decoder recog-
nizers. CTC recognizers have the advantage, however, that they can be used for
streaming. Streaming means recognizing words on-line rather than waiting until
the end of the sentence to recognize them. Streaming is crucial for many applica-
tions, from commands to dictation, where we want to start recognition while the
user is still talking. Algorithms that use attention need to compute the hidden state
sequence over the entire input ﬁrst in order to provide the attention distribution con-
text, before the decoder can start decoding. By contrast, a CTC algorithm can input
letters from left to right immediately.

If we want to do streaming, we need a way to improve CTC recognition to re-
move the conditional independent assumption, enabling it to know about output his-
tory. The RNN-Transducer (RNN-T), shown in Fig. 16.14, is just such a model
(Graves 2012, Graves et al. 2013). The RNN-T has two main components: a CTC

streaming

RNN-T

ENCODER…DECODER…H<s>it‘s timx1xn……i   t   ’   s      t   i   m   e  …CTC LossEncoder-Decoder Loss352 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

acoustic model, and a separate language model component called the predictor that
conditions on the output token history. At each time step t, the CTC encoder outputs
a hidden state henc
given the input x1...xt . The language model predictor takes as in-
put the previous output token (not counting blanks), outputting a hidden state hpred
.
The two are passed through another network whose output is then passed through a
softmax to predict the next character.

u

t

PRNN

T (Y

−

X) =
|

B−
(cid:88)A
∈

1(Y )

X)
P(A
|

T

=

B−
(cid:88)A
∈

1(Y )

(cid:89)t=1

p(at |

ht , y<ut )

Figure 16.14 The RNN-T model computing the output token distribution at time t by inte-
grating the output of a CTC acoustic encoder and a separate ‘predictor’ language model.

16.5 ASR Evaluation: Word Error Rate

word error

The standard evaluation metric for speech recognition systems is the word error
rate. The word error rate is based on how much the word string returned by the
recognizer (the hypothesized word string) differs from a reference transcription.
The ﬁrst step in computing word error is to compute the minimum edit distance in
words between the hypothesized and correct strings, giving us the minimum num-
ber of word substitutions, word insertions, and word deletions necessary to map
between the correct and hypothesized strings. The word error rate (WER) is then
deﬁned as follows (note that because the equation includes insertions, the error rate
can be greater than 100%):

Word Error Rate = 100

Insertions + Substitutions + Deletions
Total Words in Correct Transcript

×

alignment

Here is a sample alignment between a reference and a hypothesis utterance from

the CallHome corpus, showing the counts used to compute the error rate:

REF:
HYP:
Eval:

i *** ** UM the PHONE IS
i GOT IT TO the *****

I

I S

D

i LEFT THE portable ****

PHONE UPSTAIRS last night
last night

FULLEST i LOVE TO portable FORM OF
S

S

S

S

I

STORES
S

This utterance has six substitutions, three insertions, and one deletion:

Word Error Rate = 100

6 + 3 + 1
13

= 76.9%

ENCODERP ( yt,u | x[1..t] , y[1..u-1] )xtPREDICTIONNETWORKyu-1JOINT NETWORKhencthpreduSOFTMAXzt,uDECODERSentence error
rate

16.5

• ASR EVALUATION: WORD ERROR RATE

353

The standard method for computing word error rates is a free script called sclite,
available from the National Institute of Standards and Technologies (NIST) (NIST,
2005). Sclite is given a series of reference (hand-transcribed, gold-standard) sen-
tences and a matching set of hypothesis sentences. Besides performing alignments,
and computing word error rate, sclite performs a number of other useful tasks. For
example, for error analysis it gives useful information such as confusion matrices
showing which words are often misrecognized for others, and summarizes statistics
of words that are often inserted or deleted. sclite also gives error rates by speaker
(if sentences are labeled for speaker ID), as well as useful statistics like the sentence
error rate, the percentage of sentences with at least one word error.

Statistical signiﬁcance for ASR: MAPSSWE or MacNemar

As with other language processing algorithms, we need to know whether a particular
improvement in word error rate is signiﬁcant or not.

The standard statistical tests for determining if two word error rates are different
is the Matched-Pair Sentence Segment Word Error (MAPSSWE) test, introduced in
Gillick and Cox (1989).

The MAPSSWE test is a parametric test that looks at the difference between
the number of word errors the two systems produce, averaged across a number of
segments. The segments may be quite short or as long as an entire utterance; in
general, we want to have the largest number of (short) segments in order to justify
the normality assumption and to maximize power. The test requires that the errors
in one segment be statistically independent of the errors in another segment. Since
ASR systems tend to use trigram LMs, we can approximate this requirement by
deﬁning a segment as a region bounded on both sides by words that both recognizers
get correct (or by turn/utterance boundaries). Here’s an example from NIST (2007)
with four regions:

I

II

III

IV

REF:

|it was|the best|of|times it|was the worst|of times| |it was
|

|
|the best|of|times it|IS the worst |of times|OR|it was
|

|
|times it|WON the TEST |of times| |it was

|
SYS B:|it was|the best|

SYS A:|ITS

| |

| |

|

|

|

|

|

|

|

In region I, system A has two errors (a deletion and an insertion) and system B
has zero; in region III, system A has one error (a substitution) and system B has two.
Let’s deﬁne a sequence of variables Z representing the difference between the errors
in the two systems as follows:

Ni
A
Ni
B
Z

the number of errors made on segment i by system A
the number of errors made on segment i by system B
Ni

, n where n is the number of segments

Ni

B, i = 1, 2,

A −

· · ·
In the example above, the sequence of Z values is

. Intuitively, if
the two systems are identical, we would expect the average difference, that is, the
average of the Z values, to be zero. If we call the true average of the differences
muz, we would thus like to know whether muz = 0. Following closely the original
proposal and notation of Gillick and Cox (1989), we can estimate the true average
n
from our limited sample as ˆµz =
i=1 Zi/n. The estimate of the variance of the Zi’s
is

1, 1
}

2,
{

1,

−

−

(cid:80)

σ 2

z =

1

−

1

n

n

(cid:88)i=1

µz)2

(Zi −

(16.22)

354 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

Let

W =

ˆµz
σz/√n

(16.23)

For a large enough n (> 50), W will approximately have a normal distribution with
unit variance. The null hypothesis is H0 : µz = 0, and it can thus be rejected if
0.05 (one-tailed), where Z is
2
standard normal and w is the realized value W ; these probabilities can be looked up
in the standard tables of the normal distribution.

0.05 (two-tailed) or P(Z

)
w
|

)
w
|

P(Z

≥ |

≥ |

≤

≤

∗

McNemar’s test

Earlier work sometimes used McNemar’s test for signiﬁcance, but McNemar’s
is only applicable when the errors made by the system are independent, which is not
true in continuous speech recognition, where errors made on a word are extremely
dependent on errors made on neighboring words.

Could we improve on word error rate as a metric? It would be nice, for exam-
ple, to have something that didn’t give equal weight to every word, perhaps valuing
content words like Tuesday more than function words like a or of. While researchers
generally agree that this would be a good idea, it has proved difﬁcult to agree on
a metric that works in every application of ASR. For dialogue systems, however,
where the desired semantic output is more clear, a metric called slot error rate or
concept error rate has proved extremely useful; it is discussed in Chapter 15 on page
323.

16.6 TTS

The goal of text-to-speech (TTS) systems is to map from strings of letters to wave-
forms, a technology that’s important for a variety of applications from dialogue sys-
tems to games to education.

Like ASR systems, TTS systems are generally based on the encoder-decoder
architecture, either using LSTMs or Transformers. There is a general difference in
training. The default condition for ASR systems is to be speaker-independent: they
are trained on large corpora with thousands of hours of speech from many speakers
because they must generalize well to an unseen test speaker. By contrast, in TTS, it’s
less crucial to use multiple voices, and so basic TTS systems are speaker-dependent:
trained to have a consistent voice, on much less data, but all from one speaker. For
example, one commonly used public domain dataset, the LJ speech corpus, consists
of 24 hours of one speaker, Linda Johnson, reading audio books in the LibriVox
project (Ito and Johnson, 2017), much smaller than standard ASR corpora which are
hundreds or thousands of hours.2

We generally break up the TTS task into two components. The ﬁrst component
is an encoder-decoder model for spectrogram prediction: it maps from strings of
letters to mel spectrographs: sequences of mel spectral values over time. Thus we

2 There is also recent TTS research on the task of multi-speaker TTS, in which a system is trained on
speech from many speakers, and can switch between different voices.

16.6

• TTS

355

might map from this string:

It’s time for lunch!

to the following mel spectrogram:

vocoding

vocoder

The second component maps from mel spectrograms to waveforms. Generating
waveforms from intermediate representations like spectrograms is called vocoding
and this second component is called a vocoder:

These standard encoder-decoder algorithms for TTS are still quite computation-
ally intensive, so a signiﬁcant focus of modern research is on ways to speed them
up.

non-standard
words

16.6.1 TTS Preprocessing: Text normalization

Before either of these two steps, however, TTS systems require text normaliza-
tion preprocessing for handling non-standard words: numbers, monetary amounts,
dates, and other concepts that are verbalized differently than they are spelled. A TTS
system seeing a number like 151 needs to know to verbalize it as one hundred ﬁfty
one if it occurs as $151 but as one ﬁfty one if it occurs in the context 151 Chapulte-
pec Ave.. The number 1750 can be spoken in at least four different ways, depending
on the context:

seventeen fifty:
one seven five zero:
seventeen hundred and fifty:
one thousand, seven hundred, and fifty:

(in “The European economy in 1750”)
(in “The password is 1750”)

(in “1750 dollars”)

(in “1750 dollars”)

Often the verbalization of a non-standard word depends on its meaning (what
Taylor (2009) calls its semiotic class). Fig. 16.15 lays out some English non-
standard word types.

Many classes have preferred realizations. A year is generally read as paired
digits (e.g., seventeen fifty for 1750). $3.2 billion must be read out with the
word dollars at the end, as three point two billion dollars. Some ab-
breviations like N.Y. are expanded (to New York), while other acronyms like GPU
are pronounced as letter sequences. In languages with grammatical gender, normal-
ization may depend on morphological properties. In French, the phrase 1 mangue
(‘one mangue’) is normalized to une mangue, but 1 ananas (‘one pineapple’) is
normalized to un ananas. In German, Heinrich IV (‘Henry IV’) can be normalized
to Heinrich der Vierte, Heinrich des Vierten, Heinrich dem Vierten, or
Heinrich den Vierten depending on the grammatical case of the noun (Demberg,
2006).

356 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

verbalization
government

examples
gov’t, N.Y., mph

semiotic class
abbreviations
acronyms read as letters GPU, D.C., PC, UN, IBM G P U
twelve
cardinal numbers
seventh
ordinal numbers
one oh one
numbers read as digits
eleven forty ﬁve
times
February twenty eighth
dates
nineteen ninety nine
years
three dollars forty ﬁve
money
three point four ﬁve billion dollars
money in tr/m/billions
seventy ﬁve percent
percentage

12, 45, 1/2, 0.6
May 7, 3rd, Bill Gates III
Room 101
3.20, 11:45
28/02 (or in US, 2/28)
1999, 80s, 1900s, 2045
$3.45, e250, $200K
$3.45 billion
75% 3.4%

Figure 16.15 Some types of non-standard words in text normalization; see Sproat et al.
(2001) and (van Esch and Sproat, 2018) for many more.

Modern end-to-end TTS systems can learn to do some normalization themselves,
but TTS systems are only trained on a limited amount of data (like the 220,000 words
we mentioned above for the LJ corpus (Ito and Johnson, 2017)), and so a separate
normalization step is important.

Normalization can be done by rule or by an encoder-decoder model. Rule-based
normalization is done in two stages: tokenization and verbalization. In the tokeniza-
tion stage we hand-write write rules to detect non-standard words. These can be
regular expressions, like the following for detecting years:

(20[0-9][0-9]/
/(1[89][0-9][0-9])
|

A second pass of rules express how to verbalize each semiotic class. Larger TTS
systems instead use more complex rule-systems, like the Kestral system of (Ebden
and Sproat, 2015), which ﬁrst classiﬁes and parses each input into a normal form
and then produces text using a verbalization grammar. Rules have the advantage
that they don’t require training data, and they can be designed for high precision, but
can be brittle, and require expert rule-writers so are hard to maintain.

The alternative model is to use encoder-decoder models, which have been shown
to work better than rules for such transduction tasks, but do require expert-labeled
training sets in which non-standard words have been replaced with the appropriate
verbalization; such training sets for some languages are available (Sproat and Gor-
man 2018, Zhang et al. 2019).

In the simplest encoder-decoder setting, we simply treat the problem like ma-

chine translation, training a system to map from:
They live at 224 Mission St.

to

They live at two twenty four Mission Street

While encoder-decoder algorithms are highly accurate, they occasionally pro-
duce errors that are egregious; for example normalizing 45 minutes as forty ﬁve mil-
limeters. To address this, more complex systems use mechanisms like lightweight
covering grammars, which enumerate a large set of possible verbalizations but
don’t try to disambiguate, to constrain the decoding to avoid such outputs (Zhang
et al., 2019).

16.6.2 TTS: Spectrogram prediction

The exact same architecture we described for ASR—the encoder-decoder with attention–
can be used for the ﬁrst component of TTS. Here we’ll give a simpliﬁed overview

Tacotron2

Wavenet

location-based
attention

16.6

• TTS

357

of the Tacotron2 architecture (Shen et al., 2018), which extends the earlier Tacotron
(Wang et al., 2017) architecture and the Wavenet vocoder (van den Oord et al.,
2016). Fig. 16.16 sketches out the entire architecture.

The encoder’s job is to take a sequence of letters and produce a hidden repre-
sentation representing the letter sequence, which is then used by the attention mech-
anism in the decoder. The Tacotron2 encoder ﬁrst maps every input grapheme to
a 512-dimensional character embedding. These are then passed through a stack
of 3 convolutional layers, each containing 512 ﬁlters with shape 5
1, i.e. each
ﬁlter spanning 5 characters, to model the larger letter context. The output of the
ﬁnal convolutional layer is passed through a biLSTM to produce the ﬁnal encoding.
It’s common to use a slightly higher quality (but slower) version of attention called
location-based attention, in which the computation of the α values (Eq. 9.37 in
Chapter 9) makes use of the α values from the prior time-state.

×

In the decoder, the predicted mel spectrum from the prior time slot is passed
through a small pre-net as a bottleneck. This prior output is then concatenated with
the encoder’s attention vector context and passed through 2 LSTM layers. The out-
put of this LSTM is used in two ways. First, it is passed through a linear layer, and
some output processing, to autoregressively predict one 80-dimensional log-mel ﬁl-
terbank vector frame (50 ms, with a 12.5 ms stride) at each step. Second, it is passed
through another linear layer to a sigmoid to make a “stop token prediction” decision
about whether to stop producing output.

Figure 16.16 The Tacotron2 architecture: An encoder-decoder maps from graphemes to
mel spectrograms, followed by a vocoder that maps to waveﬁles. Figure modiﬁed from Shen
et al. (2018).

The system is trained on gold log-mel ﬁlterbank features, using teacher forcing,
that is the decoder is fed the correct log-model spectral feature at each decoder step
instead of the predicted decoder output from the prior step.

16.6.3 TTS: Vocoding

WaveNet

The vocoder for Tacotron 2 is an adaptation of the WaveNet vocoder (van den Oord
et al., 2016). Here we’ll give a somewhat simpliﬁed description of vocoding using
WaveNet.

Recall that the goal of the vocoding process here will be to invert a log mel spec-
trum representations back into a time-domain waveform representation. WaveNet is
an autoregressive network, like the language models we introduced in Chapter 9. It

Whilelinearspectrogramsdiscardphaseinformation(andarethereforelossy),algorithmssuchasGrifﬁn-Lim[14]arecapableofestimatingthisdiscardedinformation,whichenablestime-domainconversionviatheinverseshort-timeFouriertransform.Melspectro-gramsdiscardevenmoreinformation,presentingachallengingin-verseproblem.However,incomparisontothelinguisticandacousticfeaturesusedinWaveNet,themelspectrogramisasimpler,lower-levelacousticrepresentationofaudiosignals.ItshouldthereforebestraightforwardforasimilarWaveNetmodelconditionedonmelspectrogramstogenerateaudio,essentiallyasaneuralvocoder.In-deed,wewillshowthatitispossibletogeneratehighqualityaudiofrommelspectrogramsusingamodiﬁedWaveNetarchitecture.2.2.SpectrogramPredictionNetworkAsinTacotron,melspectrogramsarecomputedthroughashort-timeFouriertransform(STFT)usinga50msframesize,12.5msframehop,andaHannwindowfunction.Weexperimentedwitha5msframehoptomatchthefrequencyoftheconditioninginputsintheoriginalWaveNet,butthecorrespondingincreaseintemporalresolutionresultedinsigniﬁcantlymorepronunciationissues.WetransformtheSTFTmagnitudetothemelscaleusingan80channelmelﬁlterbankspanning125Hzto7.6kHz,followedbylogdynamicrangecompression.Priortologcompression,theﬁlterbankoutputmagnitudesareclippedtoaminimumvalueof0.01inordertolimitdynamicrangeinthelogarithmicdomain.Thenetworkiscomposedofanencoderandadecoderwithatten-tion.Theencoderconvertsacharactersequenceintoahiddenfeaturerepresentationwhichthedecoderconsumestopredictaspectrogram.Inputcharactersarerepresentedusingalearned512-dimensionalcharacterembedding,whicharepassedthroughastackof3convolu-tionallayerseachcontaining512ﬁlterswithshape5⇥1,i.e.,whereeachﬁlterspans5characters,followedbybatchnormalization[18]andReLUactivations.AsinTacotron,theseconvolutionallayersmodellonger-termcontext(e.g.,N-grams)intheinputcharactersequence.Theoutputoftheﬁnalconvolutionallayerispassedintoasinglebi-directional[19]LSTM[20]layercontaining512units(256ineachdirection)togeneratetheencodedfeatures.Theencoderoutputisconsumedbyanattentionnetworkwhichsummarizesthefullencodedsequenceasaﬁxed-lengthcontextvectorforeachdecoderoutputstep.Weusethelocation-sensitiveattentionfrom[21],whichextendstheadditiveattentionmechanism[22]tousecumulativeattentionweightsfrompreviousdecodertimestepsasanadditionalfeature.Thisencouragesthemodeltomoveforwardconsistentlythroughtheinput,mitigatingpotentialfailuremodeswheresomesubsequencesarerepeatedorignoredbythedecoder.Attentionprobabilitiesarecomputedafterprojectinginputsandlo-cationfeaturesto128-dimensionalhiddenrepresentations.Locationfeaturesarecomputedusing321-Dconvolutionﬁltersoflength31.Thedecoderisanautoregressiverecurrentneuralnetworkwhichpredictsamelspectrogramfromtheencodedinputsequenceoneframeatatime.Thepredictionfromtheprevioustimestepisﬁrstpassedthroughasmallpre-netcontaining2fullyconnectedlayersof256hiddenReLUunits.Wefoundthatthepre-netactingasaninformationbottleneckwasessentialforlearningattention.Thepre-netoutputandattentioncontextvectorareconcatenatedandpassedthroughastackof2uni-directionalLSTMlayerswith1024units.TheconcatenationoftheLSTMoutputandtheattentioncontextvectorisprojectedthroughalineartransformtopredictthetargetspectrogramframe.Finally,thepredictedmelspectrogramispassedthrougha5-layerconvolutionalpost-netwhichpredictsaresidualtoaddtothepredictiontoimprovetheoverallreconstruction.Each(cid:39)(cid:76)(cid:69)(cid:86)(cid:69)(cid:71)(cid:88)(cid:73)(cid:86)(cid:4)(cid:41)(cid:81)(cid:70)(cid:73)(cid:72)(cid:72)(cid:77)(cid:82)(cid:75)(cid:48)(cid:83)(cid:71)(cid:69)(cid:88)(cid:77)(cid:83)(cid:82)(cid:4)(cid:55)(cid:73)(cid:82)(cid:87)(cid:77)(cid:88)(cid:77)(cid:90)(cid:73)(cid:4)(cid:37)(cid:88)(cid:88)(cid:73)(cid:82)(cid:88)(cid:77)(cid:83)(cid:82)(cid:23)(cid:4)(cid:39)(cid:83)(cid:82)(cid:90)(cid:4)(cid:48)(cid:69)(cid:93)(cid:73)(cid:86)(cid:87)(cid:38)(cid:77)(cid:72)(cid:77)(cid:86)(cid:73)(cid:71)(cid:88)(cid:77)(cid:83)(cid:82)(cid:69)(cid:80)(cid:4)(cid:48)(cid:55)(cid:56)(cid:49)(cid:45)(cid:82)(cid:84)(cid:89)(cid:88)(cid:4)(cid:56)(cid:73)(cid:92)(cid:88)(cid:22)(cid:4)(cid:48)(cid:69)(cid:93)(cid:73)(cid:86)(cid:4)(cid:52)(cid:86)(cid:73)(cid:17)(cid:50)(cid:73)(cid:88)(cid:22)(cid:4)(cid:48)(cid:55)(cid:56)(cid:49)(cid:4)(cid:48)(cid:69)(cid:93)(cid:73)(cid:86)(cid:87)(cid:48)(cid:77)(cid:82)(cid:73)(cid:69)(cid:86)(cid:4)(cid:52)(cid:86)(cid:83)(cid:78)(cid:73)(cid:71)(cid:88)(cid:77)(cid:83)(cid:82)(cid:48)(cid:77)(cid:82)(cid:73)(cid:69)(cid:86)(cid:4)(cid:52)(cid:86)(cid:83)(cid:78)(cid:73)(cid:71)(cid:88)(cid:77)(cid:83)(cid:82)(cid:55)(cid:88)(cid:83)(cid:84)(cid:4)(cid:56)(cid:83)(cid:79)(cid:73)(cid:82)(cid:25)(cid:4)(cid:39)(cid:83)(cid:82)(cid:90)(cid:4)(cid:48)(cid:69)(cid:93)(cid:73)(cid:86)(cid:4)(cid:52)(cid:83)(cid:87)(cid:88)(cid:17)(cid:50)(cid:73)(cid:88)(cid:48)(cid:72)(cid:79)(cid:3)(cid:54)(cid:83)(cid:72)(cid:70)(cid:87)(cid:85)(cid:82)(cid:74)(cid:85)(cid:68)(cid:80)(cid:59)(cid:69)(cid:90)(cid:73)(cid:50)(cid:73)(cid:88)(cid:4)(cid:49)(cid:83)(cid:48)(cid:59)(cid:69)(cid:90)(cid:73)(cid:74)(cid:83)(cid:86)(cid:81)(cid:4)(cid:55)(cid:69)(cid:81)(cid:84)(cid:80)(cid:73)(cid:87)Fig.1.BlockdiagramoftheTacotron2systemarchitecture.post-netlayeriscomprisedof512ﬁlterswithshape5⇥1withbatchnormalization,followedbytanhactivationsonallbuttheﬁnallayer.Weminimizethesummedmeansquarederror(MSE)frombeforeandafterthepost-nettoaidconvergence.Wealsoexperimentedwithalog-likelihoodlossbymodelingtheoutputdistributionwithaMixtureDensityNetwork[23,24]toavoidassumingaconstantvarianceovertime,butfoundthattheseweremoredifﬁculttotrainandtheydidnotleadtobettersoundingsamples.Inparalleltospectrogramframeprediction,theconcatenationofdecoderLSTMoutputandtheattentioncontextisprojecteddowntoascalarandpassedthroughasigmoidactivationtopredicttheprobabilitythattheoutputsequencehascompleted.This“stoptoken”predictionisusedduringinferencetoallowthemodeltodynamicallydeterminewhentoterminategenerationinsteadofalwaysgeneratingforaﬁxedduration.Speciﬁcally,generationcompletesattheﬁrstframeforwhichthisprobabilityexceedsathresholdof0.5.Theconvolutionallayersinthenetworkareregularizedusingdropout[25]withprobability0.5,andLSTMlayersareregularizedusingzoneout[26]withprobability0.1.Inordertointroduceoutputvariationatinferencetime,dropoutwithprobability0.5isappliedonlytolayersinthepre-netoftheautoregressivedecoder.IncontrasttotheoriginalTacotron,ourmodelusessimplerbuild-ingblocks,usingvanillaLSTMandconvolutionallayersintheen-coderanddecoderinsteadof“CBHG”stacksandGRUrecurrentlayers.Wedonotusea“reductionfactor”,i.e.,eachdecoderstepcorrespondstoasinglespectrogramframe.2.3.WaveNetVocoderWeuseamodiﬁedversionoftheWaveNetarchitecturefrom[8]toinvertthemelspectrogramfeaturerepresentationintotime-domainwaveformsamples.Asintheoriginalarchitecture,thereare30dilatedconvolutionlayers,groupedinto3dilationcycles,i.e.,thedilationrateoflayerk(k=0...29)is2k(mod10).Toworkwiththe12.5msframehopofthespectrogramframes,only2upsamplinglayersareusedintheconditioningstackinsteadof3layers.Insteadofpredictingdiscretizedbucketswithasoftmaxlayer,wefollowPixelCNN++[27]andParallelWaveNet[28]andusea10-componentmixtureoflogisticdistributions(MoL)togenerate16-bitsamplesat24kHz.Tocomputethelogisticmixturedistribution,theWaveNetstackoutputispassedthroughaReLUactivationfollowedEncoderDecoderVocoder358 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

takes spectrograms as input and produces audio output represented as sequences of
8-bit mu-law (page 342). The probability of a waveform , a sequence of 8-bit mu-
law values Y = y1, ..., yt , given an intermediate input mel spectrogram h is computed
as:

p(Y ) =

t

(cid:89)t=1

P(yt |

y1, ..., yt

1, h1, ..., ht )

−

(16.24)

This probability distribution is modeled by a stack of special convolution layers,
which include a speciﬁc convolutional structure called dilated convolutions, and a
speciﬁc non-linearity function.

dilated
convolutions

A dilated convolution is a subtype of causal convolutional layer. Causal or
masked convolutions look only at the past input, rather than the future; the pre-
diction of yt+1 can only depend on y1, ..., yt , useful for autoregressive left-to-right
processing. In dilated convolutions, at each successive layer we apply the convolu-
tional ﬁlter over a span longer than its length by skipping input values. Thus at time
t with a dilation value of 1, a convolutional ﬁlter of length 2 would see input values
xt and xt
1. But a ﬁlter with a distillation value of 2 would skip an input, so would
see input values xt and xt
1. Fig. 16.17 shows the computation of the output at time
t with 4 dilated convolution layers with dilation values, 1, 2, 4, and 8.

−

−

Figure 16.17 Dilated convolutions, showing one dilation cycle size of 4, i.e., dilation values
of 1, 2, 4, 8. Figure from van den Oord et al. (2016).

The Tacotron 2 synthesizer uses 12 convolutional layers in two cycles with a
dilation cycle size of 6, meaning that the ﬁrst 6 layers have dilations of 1, 2, 4, 8, 16,
and 32. and the next 6 layers again have dilations of 1, 2, 4, 8, 16, and 32. Dilated
convolutions allow the vocoder to grow the receptive ﬁeld exponentially with depth.
WaveNet predicts mu-law audio samples. Recall from page 342 that this is a
standard compression for audio in which the values at each sampling timestep are
compressed into 8-bits. This means that we can predict the value of each sample
with a simple 256-way categorical classiﬁer. The output of the dilated convolutions
is thus passed through a softmax which makes this 256-way decision.

The spectrogram prediction encoder-decoder and the WaveNet vocoder are trained

separately. After the spectrogram predictor is trained, the spectrogram prediction
network is run in teacher-forcing mode, with each predicted spectral frame condi-
tioned on the encoded text input and the previous frame from the ground truth spec-
trogram. This sequence of ground truth-aligned spectral features and gold audio
output is then used to train the vocoder.

This has been only a high-level sketch of the TTS process. There are numer-
ous important details that the reader interested in going further with TTS may want

Becausemodelswithcausalconvolutionsdonothaverecurrentconnections,theyaretypicallyfastertotrainthanRNNs,especiallywhenappliedtoverylongsequences.Oneoftheproblemsofcausalconvolutionsisthattheyrequiremanylayers,orlargeﬁlterstoincreasethereceptiveﬁeld.Forexample,inFig.2thereceptiveﬁeldisonly5(=#layers+ﬁlterlength-1).Inthispaperweusedilatedconvolutionstoincreasethereceptiveﬁeldbyordersofmagnitude,withoutgreatlyincreasingcomputationalcost.Adilatedconvolution(alsocalled`atrous,orconvolutionwithholes)isaconvolutionwheretheﬁlterisappliedoveranarealargerthanitslengthbyskippinginputvalueswithacertainstep.Itisequivalenttoaconvolutionwithalargerﬁlterderivedfromtheoriginalﬁlterbydilatingitwithzeros,butissigniﬁcantlymoreefﬁcient.Adilatedconvolutioneffectivelyallowsthenetworktooperateonacoarserscalethanwithanormalconvolution.Thisissimilartopoolingorstridedconvolutions,butheretheoutputhasthesamesizeastheinput.Asaspecialcase,dilatedconvolutionwithdilation1yieldsthestandardconvolution.Fig.3depictsdilatedcausalconvolutionsfordilations1,2,4,and8.Dilatedconvolutionshavepreviouslybeenusedinvariouscontexts,e.g.signalprocessing(Holschneideretal.,1989;Dutilleux,1989),andimagesegmentation(Chenetal.,2015;Yu&Koltun,2016).InputHidden LayerDilation = 1Hidden LayerDilation = 2Hidden LayerDilation = 4OutputDilation = 8Figure3:Visualizationofastackofdilatedcausalconvolutionallayers.Stackeddilatedconvolutionsenablenetworkstohaveverylargereceptiveﬁeldswithjustafewlay-ers,whilepreservingtheinputresolutionthroughoutthenetworkaswellascomputationalefﬁciency.Inthispaper,thedilationisdoubledforeverylayeruptoalimitandthenrepeated:e.g.1,2,4,...,512,1,2,4,...,512,1,2,4,...,512.Theintuitionbehindthisconﬁgurationistwo-fold.First,exponentiallyincreasingthedilationfactorresultsinexponentialreceptiveﬁeldgrowthwithdepth(Yu&Koltun,2016).Forexampleeach1,2,4,...,512blockhasreceptiveﬁeldofsize1024,andcanbeseenasamoreefﬁcientanddis-criminative(non-linear)counterpartofa1⇥1024convolution.Second,stackingtheseblocksfurtherincreasesthemodelcapacityandthereceptiveﬁeldsize.2.2SOFTMAXDISTRIBUTIONSOneapproachtomodelingtheconditionaldistributionsp(xt|x1,...,xt 1)overtheindividualaudiosampleswouldbetouseamixturemodelsuchasamixturedensitynetwork(Bishop,1994)ormixtureofconditionalGaussianscalemixtures(MCGSM)(Theis&Bethge,2015).However,vandenOordetal.(2016a)showedthatasoftmaxdistributiontendstoworkbetter,evenwhenthedataisimplicitlycontinuous(asisthecaseforimagepixelintensitiesoraudiosamplevalues).Oneofthereasonsisthatacategoricaldistributionismoreﬂexibleandcanmoreeasilymodelarbitrarydistributionsbecauseitmakesnoassumptionsabouttheirshape.Becauserawaudioistypicallystoredasasequenceof16-bitintegervalues(onepertimestep),asoftmaxlayerwouldneedtooutput65,536probabilitiespertimesteptomodelallpossiblevalues.Tomakethismoretractable,weﬁrstapplyaµ-lawcompandingtransformation(ITU-T,1988)tothedata,andthenquantizeitto256possiblevalues:f(xt)=sign(xt)ln(1+µ|xt|)ln(1+µ),316.7

• OTHER SPEECH TASKS

359

to look into. For example WaveNet uses a special kind of a gated activation func-
In practice,
tion as its non-linearity, and contains residual and skip connections.
predicting 8-bit audio values doesn’t as work as well as 16-bit, for which a simple
softmax is insufﬁcient, so decoders use fancier ways as the last step of predicting
audio sample values, like mixtures of distributions. Finally, the WaveNet vocoder
as we have described it would be so slow as to be useless; many different kinds of
efﬁciency improvements are necessary in practice, for example by ﬁnding ways to
do non-autoregressive generation, avoiding the latency of having to wait to generate
each frame until the prior frame has been generated, and instead making predictions
in parallel. We encourage the interested reader to consult the original papers and
various version of the code.

16.6.4 TTS Evaluation

Speech synthesis systems are evaluated by human listeners. (The development of a
good automatic metric for synthesis evaluation, one that would eliminate the need
for expensive and time-consuming human listening experiments, remains an open
and exciting research topic.)

We evaluate the quality of synthesized utterances by playing a sentence to lis-
teners and ask them to give a mean opinion score (MOS), a rating of how good
the synthesized utterances are, usually on a scale from 1–5. We can then compare
systems by comparing their MOS scores on the same sentences (using, e.g., paired
t-tests to test for signiﬁcant differences).

If we are comparing exactly two systems (perhaps to see if a particular change
actually improved the system), we can use AB tests. In AB tests, we play the same
sentence synthesized by two different systems (an A and a B system). The human
listeners choose which of the two utterances they like better. We do this for say
50 sentences (presented in random order) and compare the number of sentences
preferred for each system.

MOS

AB tests

16.7 Other Speech Tasks

wake word

speaker
diarization

While we have focused on speech recognition and TTS in this chapter, there are a
wide variety of speech-related tasks.

The task of wake word detection is to detect a word or short phrase, usually in
order to wake up a voice-enable assistant like Alexa, Siri, or the Google Assistant.
The goal with wake words is build the detection into small devices at the computing
edge, to maintain privacy by transmitting the least amount of user speech to a cloud-
based server. Thus wake word detectors need to be fast, small footprint software that
can ﬁt into embedded devices. Wake word detectors usually use the same frontend
feature extraction we saw for ASR, often followed by a whole-word classiﬁer.

Speaker diarization is the task of determining ‘who spoke when’ in a long
multi-speaker audio recording, marking the start and end of each speaker’s turns in
the interaction. This can be useful for transcribing meetings, classroom speech, or
medical interactions. Often diarization systems use voice activity detection (VAD) to
ﬁnd segments of continuous speech, extract speaker embedding vectors, and cluster
the vectors to group together segments likely from the same speaker. More recent
work is investigating end-to-end algorithms to map directly from input speech to a
sequence of speaker labels for each frame.

360 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

speaker
recognition

language
identiﬁcation

Speaker recognition, is the task of identifying a speaker. We generally distin-
guish the subtasks of speaker veriﬁcation, where we make a binary decision (is
this speaker X or not?), such as for security when accessing personal information
over the telephone, and speaker identiﬁcation, where we make a one of N decision
trying to match a speaker’s voice against a database of many speakers . These tasks
are related to language identiﬁcation, in which we are given a waveﬁle and must
identify which language is being spoken; this is useful for example for automatically
directing callers to human operators that speak appropriate languages.

16.8 Summary

This chapter introduced the fundamental algorithms of automatic speech recognition
(ASR) and text-to-speech (TTS).

• The task of speech recognition (or speech-to-text) is to map acoustic wave-

forms to sequences of graphemes.

• The input to a speech recognizer is a series of acoustic waves. that are sam-
pled, quantized, and converted to a spectral representation like the log mel
spectrum.

• Two common paradigms for speech recognition are the encoder-decoder with
attention model, and models based on the CTC loss function. Attention-
based models have higher accuracies, but models based on CTC more easily
adapt to streaming: outputting graphemes online instead of waiting until the
acoustic input is complete.

• ASR is evaluated using the Word Error Rate; the edit distance between the

hypothesis and the gold transcription.

• TTS systems are also based on the encoder-decoder architecture. The en-
coder maps letters to an encoding, which is consumed by the decoder which
generates mel spectrogram output. A neural vocoder then reads the spectro-
gram and generates waveforms.

• TTS systems require a ﬁrst pass of text normalization to deal with numbers

and abbreviations and other non-standard words.

• TTS is evaluated by playing a sentence to human listeners and having them

give a mean opinion score (MOS) or by doing AB tests.

Bibliographical and Historical Notes

ASR A number of speech recognition systems were developed by the late 1940s
and early 1950s. An early Bell Labs system could recognize any of the 10 digits
from a single speaker (Davis et al., 1952). This system had 10 speaker-dependent
stored patterns, one for each digit, each of which roughly represented the ﬁrst two
vowel formants in the digit. They achieved 97%–99% accuracy by choosing the pat-
tern that had the highest relative correlation coefﬁcient with the input. Fry (1959)
and Denes (1959) built a phoneme recognizer at University College, London, that
recognized four vowels and nine consonants based on a similar pattern-recognition
principle. Fry and Denes’s system was the ﬁrst to use phoneme transition probabili-
ties to constrain the recognizer.

BIBLIOGRAPHICAL AND HISTORICAL NOTES

361

The late 1960s and early 1970s produced a number of important paradigm shifts.
First were a number of feature-extraction algorithms, including the efﬁcient fast
Fourier transform (FFT) (Cooley and Tukey, 1965), the application of cepstral pro-
cessing to speech (Oppenheim et al., 1968), and the development of LPC for speech
coding (Atal and Hanauer, 1971). Second were a number of ways of handling warp-
ing; stretching or shrinking the input signal to handle differences in speaking rate
and segment length when matching against stored patterns. The natural algorithm for
solving this problem was dynamic programming, and, as we saw in Appendix A, the
algorithm was reinvented multiple times to address this problem. The ﬁrst applica-
tion to speech processing was by Vintsyuk (1968), although his result was not picked
up by other researchers, and was reinvented by Velichko and Zagoruyko (1970) and
Sakoe and Chiba (1971) (and 1984). Soon afterward, Itakura (1975) combined this
dynamic programming idea with the LPC coefﬁcients that had previously been used
only for speech coding. The resulting system extracted LPC features from incoming
words and used dynamic programming to match them against stored LPC templates.
The non-probabilistic use of dynamic programming to match a template against in-
coming speech is called dynamic time warping.

The third innovation of this period was the rise of the HMM. Hidden Markov
models seem to have been applied to speech independently at two laboratories around
1972. One application arose from the work of statisticians, in particular Baum and
colleagues at the Institute for Defense Analyses in Princeton who applied HMMs
to various prediction problems (Baum and Petrie 1966, Baum and Eagon 1967).
James Baker learned of this work and applied the algorithm to speech processing
(Baker, 1975a) during his graduate work at CMU. Independently, Frederick Jelinek
and collaborators (drawing from their research in information-theoretical models
inﬂuenced by the work of Shannon (1948)) applied HMMs to speech at the IBM
Thomas J. Watson Research Center (Jelinek et al., 1975). One early difference was
the decoding algorithm; Baker’s DRAGON system used Viterbi (dynamic program-
ming) decoding, while the IBM system applied Jelinek’s stack decoding algorithm
(Jelinek, 1969). Baker then joined the IBM group for a brief time before founding
the speech-recognition company Dragon Systems.

The use of the HMM, with Gaussian Mixture Models (GMMs) as the phonetic
component, slowly spread through the speech community, becoming the dominant
paradigm by the 1990s. One cause was encouragement by ARPA, the Advanced
Research Projects Agency of the U.S. Department of Defense. ARPA started a
ﬁve-year program in 1971 to build 1000-word, constrained grammar, few speaker
speech understanding (Klatt, 1977), and funded four competing systems of which
Carnegie-Mellon University’s Harpy system (Lowerre, 1976), which used a simpli-
ﬁed version of Baker’s HMM-based DRAGON system was the best of the tested sys-
tems. ARPA (and then DARPA) funded a number of new speech research programs,
beginning with 1000-word speaker-independent read-speech tasks like “Resource
Management” (Price et al., 1988), recognition of sentences read from the Wall Street
Journal (WSJ), Broadcast News domain (LDC 1998, Graff 1997) (transcription of
actual news broadcasts, including quite difﬁcult passages such as on-the-street inter-
views) and the Switchboard, CallHome, CallFriend, and Fisher domains (Godfrey
et al. 1992, Cieri et al. 2004) (natural telephone conversations between friends or
strangers). Each of the ARPA tasks involved an approximately annual bakeoff at
which systems were evaluated against each other. The ARPA competitions resulted
in wide-scale borrowing of techniques among labs since it was easy to see which
ideas reduced errors the previous year, and the competitions were probably an im-

warping

dynamic time
warping

bakeoff

362 CHAPTER 16

• AUTOMATIC SPEECH RECOGNITION AND TEXT-TO-SPEECH

hybrid

Kaldi

ESPnet

portant factor in the eventual spread of the HMM paradigm.

By around 1990 neural alternatives to the HMM/GMM architecture for ASR
arose, based on a number of earlier experiments with neural networks for phoneme
recognition and other speech tasks. Architectures included the time-delay neural
network (TDNN)—the ﬁrst use of convolutional networks for speech— (Waibel
et al. 1989, Lang et al. 1990), RNNs (Robinson and Fallside, 1991), and the hybrid
HMM/MLP architecture in which a feedforward neural network is trained as a pho-
netic classiﬁer whose outputs are used as probability estimates for an HMM-based
architecture (Morgan and Bourlard 1990, Bourlard and Morgan 1994, Morgan and
Bourlard 1995).

While the hybrid systems showed performance close to the standard HMM/GMM
models, the problem was speed: large hybrid models were too slow to train on the
CPUs of that era. For example, the largest hybrid system, a feedforward network,
was limited to a hidden layer of 4000 units, producing probabilities over only a few
dozen monophones. Yet training this model still required the research group to de-
sign special hardware boards to do vector processing (Morgan and Bourlard, 1995).
A later analytic study showed the performance of such simple feedforward MLPs
for ASR increases sharply with more than 1 hidden layer, even controlling for the
total number of parameters (Maas et al., 2017). But the computational resources of
the time were insufﬁcient for more layers.

Over the next two decades a combination of Moore’s law and the rise of GPUs
allowed deep neural networks with many layers. Performance was getting close to
traditional systems on smaller tasks like TIMIT phone recognition by 2009 (Mo-
hamed et al., 2009), and by 2012, the performance of hybrid systems had surpassed
traditional HMM/GMM systems (Jaitly et al. 2012, Dahl et al. 2012, inter alia).
Originally it seemed that unsupervised pretraining of the networks using a tech-
nique like deep belief networks was important, but by 2013, it was clear that for
hybrid HMM/GMM feedforward networks, all that mattered was to use a lot of data
and enough layers, although a few other components did improve performance: us-
ing log mel features instead of MFCCs, using dropout, and using rectiﬁed linear
units (Deng et al. 2013, Maas et al. 2013, Dahl et al. 2013).

Meanwhile early work had proposed the CTC loss function by 2006 (Graves
et al., 2006), and by 2012 the RNN-Transducer was deﬁned and applied to phone
recognition (Graves 2012, Graves et al. 2013), and then to end-to-end speech recog-
nition rescoring (Graves and Jaitly, 2014), and then recognition (Maas et al., 2015),
(Our de-
with advances such as specialized beam search (Hannun et al., 2014).
scription of CTC in the chapter draws on Hannun (2017), which we encourage the
interested reader to follow).

The encoder-decoder architecture was applied to speech at about the same time
by two different groups, in the Listen Attend and Spell system of Chan et al. (2016)
and the attention-based encoder decoder architecture of Chorowski et al. (2014)
and Bahdanau et al. (2016). By 2018 Transformers were included in this encoder-
decoder architecture. Karita et al. (2019) is a nice comparison of RNNs vs Trans-
formers in encoder-architectures for ASR, TTS, and speech-to-speech translation.

Popular toolkits for speech processing include Kaldi (Povey et al., 2011) and

ESPnet (Watanabe et al. 2018, Hayashi et al. 2020).

TTS As we noted at the beginning of the chapter, speech synthesis is one of the
earliest ﬁelds of speech and language processing. The 18th century saw a number
of physical models of the articulation process, including the von Kempelen model
mentioned above, as well as the 1773 vowel model of Kratzenstein in Copenhagen

EXERCISES

363

using organ pipes.

The early 1950s saw the development of three early paradigms of waveform

synthesis: formant synthesis, articulatory synthesis, and concatenative synthesis.

Modern encoder-decoder systems are distant descendants of formant synthesiz-
ers. Formant synthesizers originally were inspired by attempts to mimic human
speech by generating artiﬁcial spectrograms. The Haskins Laboratories Pattern
Playback Machine generated a sound wave by painting spectrogram patterns on a
moving transparent belt and using reﬂectance to ﬁlter the harmonics of a wave-
form (Cooper et al., 1951); other very early formant synthesizers include those of
Lawrence (1953) and Fant (1951). Perhaps the most well-known of the formant
synthesizers were the Klatt formant synthesizer and its successor systems, includ-
ing the MITalk system (Allen et al., 1987) and the Klattalk software used in Digital
Equipment Corporation’s DECtalk (Klatt, 1982). See Klatt (1975) for details.

A second early paradigm, concatenative synthesis, seems to have been ﬁrst pro-
posed by Harris (1953) at Bell Laboratories; he literally spliced together pieces of
magnetic tape corresponding to phones. Soon afterwards, Peterson et al. (1958) pro-
posed a theoretical model based on diphones, including a database with multiple
copies of each diphone with differing prosody, each labeled with prosodic features
including F0, stress, and duration, and the use of join costs based on F0 and formant
distance between neighboring units. But such diphone synthesis models were not
actually implemented until decades later (Dixon and Maxey 1968, Olive 1977). The
1980s and 1990s saw the invention of unit selection synthesis, based on larger units
of non-uniform length and the use of a target cost, (Sagisaka 1988, Sagisaka et al.
1992, Hunt and Black 1996, Black and Taylor 1994, Syrdal et al. 2000).

A third paradigm, articulatory synthesizers attempt to synthesize speech by
modeling the physics of the vocal tract as an open tube. Representative models
include Stevens et al. (1953), Flanagan et al. (1975), and Fant (1986). See Klatt
(1975) and Flanagan (1972) for more details.

Most early TTS systems used phonemes as input; development of the text anal-
ysis components of TTS came somewhat later, drawing on NLP. Indeed the ﬁrst
true text-to-speech system seems to have been the system of Umeda and Teranishi
(Umeda et al. 1968, Teranishi and Umeda 1968, Umeda 1976), which included a
parser that assigned prosodic boundaries, as well as accent and stress.

Exercises

16.1 Analyze each of the errors in the incorrectly recognized transcription of “um
the phone is I left the. . . ” on page 352. For each one, give your best guess as
to whether you think it is caused by a problem in signal processing, pronun-
ciation modeling, lexicon size, language model, or pruning in the decoding
search.

Part III

ANNOTATING LINGUISTIC
STRUCTURE

In the ﬁnal part of the book we discuss the task of detecting linguistic structure.
In the early history of NLP these structures were an intermediate step toward deeper
language processing. In modern NLP, we don’t generally make explicit use of parse
or other structures inside the neural language models we introduced in Part I, or
directly in applications like those we discussed in Part II.

Instead linguistic structure plays a number of new roles. One of the most im-
portant roles is to provide a useful interpretive lens on neural networks. Knowing
that a particular layer or neuron may be computing something related to a particular
kind of structure can help us break open the ‘black box’ and understand what the
components of our language models are doing. A second important role for linguis-
tic structure is as as a practical tool for social scientiﬁc studies of text: knowing
which adjective modiﬁes which noun, or whether a particular implicit metaphor is
being used, can be important for measuring attitudes toward groups or individuals.
Detailed semantic structure can be helpful, for example in ﬁnding particular clauses
that have particular meanings in legal contracts. Word sense labels can help keep any
corpus study from measuring facts about the wrong word sense. Relation structures
can be used to help build knowledge bases from text. Finally, linguistic structure
can be important to answer questions about language itself. To answer linguistic
questions about how language changes over time or across individuals we’ll need to
be able, for example, to parse entire documents from different time periods.

In our study of linguistic structure, we begin with one of the oldest tasks in
computational linguistics: the extraction of syntactic structure, and give two sets of
algorithms for parsing: extracting syntactic structure, including constituency pars-
ing and dependency parsing. We then introduce model-theoretic semantics and give
algorithms for semantic parsing. We then introduce a variety of structures related
to meaning, including semantic roles, word senses, entity relations, and events. We
conclude with linguistic structures that tend to be related to discourse and meaning
over larger texts, including coreference, and discourse coherence. In each case we’ll
give algorithms for automatically annotating the relevant structure.

CHAPTER

17 Context-Free Grammars and

Constituency Parsing

syntax

Because the Night by Bruce Springsteen and Patty Smith
The Fire Next Time by James Baldwin
If on a winter’s night a traveler by Italo Calvino
Love Actually by Richard Curtis
Suddenly Last Summer by Tennessee Williams
A Scanner Darkly by Philip K. Dick

Six titles that are not constituents, from Geoffrey K. Pullum on
Language Log (who was pointing out their incredible rarity).

One morning I shot an elephant in my pajamas.
How he got into my pajamas I don’t know.

Groucho Marx, Animal Crackers, 1930

The study of grammar has an ancient pedigree. The grammar of Sanskrit was
described by the Indian grammarian P¯an. ini sometime between the 7th and 4th cen-
turies BCE, in his famous treatise the As.t.¯adhy¯ay¯ı (‘8 books’). And our word syntax
comes from the Greek s´yntaxis, meaning “setting out together or arrangement”, and
refers to the way words are arranged together. We have seen syntactic notions in
previous chapters like the use of part-of-speech categories (Chapter 8). In this chap-
ter and the next one we introduce formal models for capturing more sophisticated
notions of grammatical structure, and algorithms for parsing these structures.

Our focus in this chapter is context-free grammars and the CKY algorithm
for parsing them. Context-free grammars are the backbone of many formal mod-
els of the syntax of natural language (and, for that matter, of computer languages).
Syntactic parsing is the task of assigning a syntactic structure to a sentence. Parse
trees (whether for context-free grammars or for the dependency or CCG formalisms
we introduce in following chapters) can be used in applications such as grammar
checking: sentence that cannot be parsed may have grammatical errors (or at least
be hard to read). Parse trees can be an intermediate stage of representation for the
formal semantic analysis of Chapter 20. And parsers and the grammatical structure
they assign a sentence are a useful text analysis tool for text data science applications
that require modeling the relationship of elements in sentences.

In this chapter we introduce context-free grammars, give a small sample gram-
mar of English, introduce more formal deﬁnitions of context-free grammars and
grammar normal form, and talk about treebanks: corpora that have been anno-
tated with syntactic structure. We then discuss parse ambiguity and the problems
it presents, and turn to parsing itself, giving the famous Cocke-Kasami-Younger
(CKY) algorithm (Kasami 1965, Younger 1967), the standard dynamic program-
ming approach to syntactic parsing. The CKY algorithm returns an efﬁcient repre-
sentation of the set of parse trees for a sentence, but doesn’t tell us which parse tree
is the right one. For that, we need to augment CKY with scores for each possible
constituent. We’ll see how to do this with neural span-based parsers. Finally, we’ll
introduce the standard set of metrics for evaluating parser accuracy.

368 CHAPTER 17

• CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING

17.1 Constituency

Syntactic constituency is the idea that groups of words can behave as single units,
or constituents. Part of developing a grammar involves building an inventory of the
constituents in the language. How do words group together in English? Consider
the noun phrase, a sequence of words surrounding at least one noun. Here are some
examples of noun phrases (thanks to Damon Runyon):

noun phrase

Harry the Horse
the Broadway coppers
they

a high-class spot such as Mindy’s
the reason he comes into the Hot Box
three parties from Brooklyn

What evidence do we have that these words group together (or “form constituents”)?

One piece of evidence is that they can all appear in similar syntactic environments,
for example, before a verb.

three parties from Brooklyn arrive. . .
a high-class spot such as Mindy’s attracts. . .
the Broadway coppers love. . .
they sit

But while the whole noun phrase can occur before a verb, this is not true of each
of the individual words that make up a noun phrase. The following are not grammat-
ical sentences of English (recall that we use an asterisk (*) to mark fragments that
are not grammatical English sentences):

*from arrive. . . *as attracts. . .
*the is. . .

*spot sat. . .

Thus, to correctly describe facts about the ordering of these words in English, we
must be able to say things like “Noun Phrases can occur before verbs”. Let’s now
see how to do this in a more formal way!

17.2 Context-Free Grammars

CFG

rules

lexicon

NP

A widely used formal system for modeling constituent structure in natural lan-
guage is the context-free grammar, or CFG. Context-free grammars are also called
phrase-structure grammars, and the formalism is equivalent to Backus-Naur form,
or BNF. The idea of basing a grammar on constituent structure dates back to the psy-
chologist Wilhelm Wundt (1900) but was not formalized until Chomsky (1956) and,
independently, Backus (1959).

A context-free grammar consists of a set of rules or productions, each of which
expresses the ways that symbols of the language can be grouped and ordered to-
gether, and a lexicon of words and symbols. For example, the following productions
express that an NP (or noun phrase) can be composed of either a ProperNoun or
a determiner (Det) followed by a Nominal; a Nominal in turn can consist of one or

17.2

• CONTEXT-FREE GRAMMARS

369

more Nouns.1

NP
NP
Nominal

→
→
→

Det Nominal
ProperNoun
Noun

|

Nominal Noun

Context-free rules can be hierarchically embedded, so we can combine the previous
rules with others, like the following, that express facts about the lexicon:

Det
Det
Noun

a
the
ﬂight

→
→
→
The symbols that are used in a CFG are divided into two classes. The symbols
that correspond to words in the language (“the”, “nightclub”) are called terminal
symbols; the lexicon is the set of rules that introduce these terminal symbols. The
symbols that express abstractions over these terminals are called non-terminals. In
each context-free rule, the item to the right of the arrow (
) is an ordered list of one
or more terminals and non-terminals; to the left of the arrow is a single non-terminal
symbol expressing some cluster or generalization. The non-terminal associated with
each word in the lexicon is its lexical category, or part of speech.

→

terminal

non-terminal

A CFG can be thought of in two ways: as a device for generating sentences
and as a device for assigning a structure to a given sentence. Viewing a CFG as a
generator, we can read the
arrow as “rewrite the symbol on the left with the string
of symbols on the right”.

→

So starting from the symbol:
we can use our ﬁrst rule to rewrite NP as:
and then rewrite Nominal as:
and ﬁnally rewrite these parts-of-speech as:

NP
Det Nominal
Noun
a ﬂight

derivation

parse tree

We say the string a ﬂight can be derived from the non-terminal NP. Thus, a CFG
can be used to generate a set of strings. This sequence of rule expansions is called a
derivation of the string of words. It is common to represent a derivation by a parse
tree (commonly shown inverted with the root at the top). Figure 17.1 shows the tree
representation of this derivation.

NP

Det

Nom

a

Noun

ﬂight

Figure 17.1 A parse tree for “a ﬂight”.

dominates

start symbol

In the parse tree shown in Fig. 17.1, we can say that the node NP dominates
all the nodes in the tree (Det, Nom, Noun, a, ﬂight). We can say further that it
immediately dominates the nodes Det and Nom.

The formal language deﬁned by a CFG is the set of strings that are derivable
from the designated start symbol. Each grammar must have one designated start

1 When talking about these rules we can pronounce the rightarrow
read the ﬁrst rule above as “NP goes to Det Nominal”.

→

as “goes to”, and so we might

370 CHAPTER 17

• CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING

symbol, which is often called S. Since context-free grammars are often used to deﬁne
sentences, S is usually interpreted as the “sentence” node, and the set of strings that
are derivable from S is the set of sentences in some simpliﬁed version of English.

Let’s add a few additional rules to our inventory. The following rule expresses

verb phrase

the fact that a sentence can consist of a noun phrase followed by a verb phrase:

S

→

NP VP I prefer a morning ﬂight

A verb phrase in English consists of a verb followed by assorted other things;
for example, one kind of verb phrase consists of a verb followed by a noun phrase:

VP

→

Verb NP prefer a morning ﬂight

Or the verb may be followed by a noun phrase and a prepositional phrase:

VP

→

Verb NP PP leave Boston in the morning

Or the verb phrase may have a verb followed by a prepositional phrase alone:

VP

→

Verb PP leaving on Thursday

A prepositional phrase generally has a preposition followed by a noun phrase.
For example, a common type of prepositional phrase in the ATIS corpus is used to
indicate location or direction:

PP

→

Preposition NP from Los Angeles

The NP inside a PP need not be a location; PPs are often used with times and
dates, and with other nouns as well; they can be arbitrarily complex. Here are ten
examples from the ATIS corpus:

to Seattle
in Minneapolis
on Wednesday
in the evening
on the ninth of July

on these ﬂights
about the ground transportation in Chicago
of the round trip ﬂight on United Airlines
of the AP ﬁfty seven ﬂight
with a stopover in Nashville

Figure 17.2 gives a sample lexicon, and Fig. 17.3 summarizes the grammar rules
to

we’ve seen so far, which we’ll call L0. Note that we can use the or-symbol
indicate that a non-terminal has alternate possible expansions.

|

ﬂight

breeze
|
need

|
like
non-stop

|

|

|
ﬁrst

trip
|
want

morning
do
ﬂy

|
latest

|

|

|

Noun
Verb
Adjective

Pronoun
Proper-Noun

→
→
→

→
→

Determiner
Preposition
Conjunction

→
→
→
Figure 17.2 The lexicon for L

|

ﬂights
|
is
prefer
cheapest
other
|
me
I
|
|
Alaska
|

|

Chicago
a

|
the
|
from
and
0.

|

|

|
direct
you
it
|
Baltimore
United
this

|
an

|
on
but

|

|
to
or

|
|

|
near

|

Los Angeles
American
that

|
|
these
in

|

We can use this grammar to generate sentences of this “ATIS-language”. We
start with S, expand it to NP VP, then choose a random expansion of NP (let’s say, to

17.2

• CONTEXT-FREE GRAMMARS

371

Examples

I + want a morning ﬂight

Grammar Rules
NP VP

S

→

NP

Nominal

VP

→
|
|
→
|

→
|
|
|

Pronoun
Proper-Noun
Det Nominal
Nominal Noun morning + ﬂight
Noun

I
Los Angeles
a + ﬂight

ﬂights

Verb
Verb NP
Verb NP PP
Verb PP

do
want + a ﬂight
leave + Boston + in the morning
leaving + on Thursday

PP
Figure 17.3 The grammar for L

→

Preposition NP from + Los Angeles

0, with example phrases for each rule.

S

NP

VP

Pro

Verb

NP

I

prefer

Det

Nom

a

Nom

Noun

Noun

ﬂight

morning

Figure 17.4 The parse tree for “I prefer a morning ﬂight” according to grammar L

0.

I), and a random expansion of VP (let’s say, to Verb NP), and so on until we generate
the string I prefer a morning ﬂight. Figure 17.4 shows a parse tree that represents a
complete derivation of I prefer a morning ﬂight.

We can also represent a parse tree in a more compact format called bracketed

notation; here is the bracketed representation of the parse tree of Fig. 17.4:

(17.1)

[S [NP [Pro I]] [VP [V prefer] [NP [Det a] [Nom [N morning] [Nom [N ﬂight]]]]]]
A CFG like that of L0 deﬁnes a formal language. Sentences (strings of words)
that can be derived by a grammar are in the formal language deﬁned by that gram-
mar, and are called grammatical sentences. Sentences that cannot be derived by a
given formal grammar are not in the language deﬁned by that grammar and are re-
ferred to as ungrammatical. This hard line between “in” and “out” characterizes all
formal languages but is only a very simpliﬁed model of how natural languages really
work. This is because determining whether a given sentence is part of a given nat-
ural language (say, English) often depends on the context. In linguistics, the use of
formal languages to model natural languages is called generative grammar since
the language is deﬁned by the set of possible sentences “generated” by the gram-
mar. (Note that this is a different sense of the word ‘generate’ than we in the use of

bracketed
notation

grammatical

ungrammatical

generative
grammar

372 CHAPTER 17

• CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING

language models to generate text.)

17.2.1 Formal Deﬁnition of Context-Free Grammar

We conclude this section with a quick, formal description of a context-free gram-
mar and the language it generates. A context-free grammar G is deﬁned by four
parameters: N, Σ, R, S (technically it is a “4-tuple”).

N a set of non-terminal symbols (or variables)
Σ a set of terminal symbols (disjoint from N)
R a set of rules or productions, each of the form A

where A is a non-terminal,
β is a string of symbols from the inﬁnite set of strings (Σ

S a designated start symbol and a member of N

β ,

→

N)∗

∪

For the remainder of the book we adhere to the following conventions when dis-
cussing the formal properties of context-free grammars (as opposed to explaining
particular facts about English or other languages).

Capital letters like A, B, and S
S
Lower-case Greek letters like α, β , and γ
Lower-case Roman letters like u, v, and w

Non-terminals

The start symbol
Strings drawn from (Σ
Strings of terminals

N)∗

∪

A language is deﬁned through the concept of derivation. One string derives an-
other one if it can be rewritten as the second one by some series of rule applications.
More formally, following Hopcroft and Ullman (1979),

directly derives

∪

if A
(Σ

β is a production of R and α and γ are any strings in the set

→
N)∗, then we say that αAγ directly derives αβ γ, or αAγ

αβ γ.

⇒

Derivation is then a generalization of direct derivation:

Let α1, α2, . . . , αm be strings in (Σ

N)∗, m

∪

≥

1, such that

α1 ⇒

α2, α2 ⇒

α3, . . . , αm

αm

1 ⇒
−

derives

We say that α1 derives αm, or α1 ∗
⇒

αm.
We can then formally deﬁne the language LG generated by a grammar G as the
set of strings composed of terminal symbols that can be derived from the designated
start symbol S.

LG =

w is in Σ∗ and S ∗
w
⇒
|
{

w
}

syntactic
parsing

The problem of mapping from a string of words to its parse tree is called syn-

tactic parsing, as we’ll see in Section 17.6.

17.3 Treebanks

treebank

A corpus in which every sentence is annotated with a parse tree is called a treebank.

17.3

• TREEBANKS

373

Penn Treebank

Treebanks play an important role in parsing as well as in linguistic investigations of
syntactic phenomena.

Treebanks are generally made by running a parser over each sentence and then
having the resulting parse hand-corrected by human linguists. Figure 17.5 shows
sentences from the Penn Treebank project, which includes various treebanks in
English, Arabic, and Chinese. The Penn Treebank part-of-speech tagset was deﬁned
in Chapter 8, but we’ll see minor formatting differences across treebanks. The use
of LISP-style parenthesized notation for trees is extremely common and resembles
the bracketed notation we saw earlier in (17.1). For those who are not familiar with
it we show a standard node-and-line tree representation in Fig. 17.6.

((S

(NP-SBJ (DT That)
(JJ cold) (, ,)
(JJ empty) (NN sky) )

(VP (VBD was)

(ADJP-PRD (JJ full)

(PP (IN of)

(NP (NN fire)
(CC and)
(NN light) ))))

(. .) ))

(a)

((S

(NP-SBJ The/DT flight/NN )
(VP should/MD

(VP arrive/VB

(PP-TMP at/IN

(NP eleven/CD a.m/RB ))
(NP-TMP tomorrow/NN )))))

(b)

Figure 17.5 Parses from the LDC Treebank3 for (a) Brown and (b) ATIS sentences.

NP-SBJ

S

VP

DT

JJ

That

cold

,

,

JJ

NN

VBD

ADJP-PRD

empty

sky

was

JJ

PP

.

.

full

IN

NP

of

NN

CC

NN

ﬁre

and

light

Figure 17.6 The tree corresponding to the Brown corpus sentence in the previous ﬁgure.

The sentences in a treebank implicitly constitute a grammar of the language. For
example, from the parsed sentences in Fig. 17.5 we can extract the CFG rules shown
in Fig. 17.7 (with rule sufﬁxes (-SBJ) stripped for simplicity). The grammar used
to parse the Penn Treebank is very ﬂat, resulting in very many rules. For example,

374 CHAPTER 17

• CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING

NP VP .
NP VP

Grammar
S
→
S
→
NP
→
NP
→
NP
→
NP
→
VP
→
VP
→
VP
→
VP
→
ADJP
PP
PP

→
→

DT NN
NN CC NN
DT JJ , JJ NN
NN
MD VP
VBD ADJP
MD VP
VB PP NP
JJ PP

→
IN NP
IN NP RB

Lexicon

that
empty
ﬁre

|

full

|
light

ﬂight

|

|

tomorrow

→
→
→
→
→
→
→
→

DT
JJ
NN
CC
IN
CD
RB
VB
VBD
MD

the
|
cold
|
sky
|
and
of
at
eleven
a.m.
arrive
was
|
should

|

→
→

said

would

|

Figure 17.7 CFG grammar rules and lexicon from the treebank sentences in Fig. 17.5.

among the approximately 4,500 different rules for expanding VPs are separate rules
for PP sequences of any length and every possible arrangement of verb arguments:

VP
VP
VP
VP
VP
VP
VP

→
→
→
→
→
→
→

VBD PP
VBD PP PP
VBD PP PP PP
VBD PP PP PP PP
VB ADVP PP
VB PP ADVP
ADVP VB PP

17.4 Grammar Equivalence and Normal Form

strongly
equivalent

weakly
equivalent

normal form

Chomsky
normal form

binary
branching

A formal language is deﬁned as a (possibly inﬁnite) set of strings of words. This sug-
gests that we could ask if two grammars are equivalent by asking if they generate the
same set of strings. In fact, it is possible to have two distinct context-free grammars
generate the same language. We say that two grammars are strongly equivalent if
they generate the same set of strings and if they assign the same phrase structure
to each sentence (allowing merely for renaming of the non-terminal symbols). Two
grammars are weakly equivalent if they generate the same set of strings but do not
assign the same phrase structure to each sentence.

It is sometimes useful to have a normal form for grammars, in which each of
the productions takes a particular form. For example, a context-free grammar is in
Chomsky normal form (CNF) (Chomsky, 1963) if it is (cid:15)-free and if in addition
each production is either of the form A
a. That is, the right-hand side
of each rule either has two non-terminal symbols or one terminal symbol. Chomsky
normal form grammars are binary branching, that is they have binary trees (down
to the prelexical nodes). We make use of this binary branching property in the CKY
parsing algorithm in Chapter 17.

B C or A

→

→

Any context-free grammar can be converted into a weakly equivalent Chomsky

normal form grammar. For example, a rule of the form

can be converted into the following two CNF rules (Exercise 17.1 asks the reader to

A

→

B C D

17.5

• AMBIGUITY

375

|

Lexicon
a
the
|
ﬂight
meal
|
include
she

|
me
Houston

|

|

prefer

NWA

|

money

this

→

that

|
book
book
I

Det
Noun
→
Verb
→
Pronoun
→
Proper-Noun
Aux
does
→
Preposition

|

|
|
→

from

to

|

|

on

|

near

|

through

→

Grammar

→
→
→

NP VP
Aux NP VP
VP

Pronoun
Proper-Noun
Det Nominal

S
S
S
NP
→
NP
→
NP
→
Nominal
Nominal
Nominal
VP
VP
VP
VP
VP
PP
Figure 17.8 The L

→
→
→
Verb
Verb NP
Verb NP PP
Verb PP
VP PP
Preposition NP

→
→
→
→
→
→

Noun
Nominal Noun
Nominal PP

1 miniature English grammar and lexicon.

formulate the complete algorithm):

A

X

→

→

B X

C D

Sometimes using binary branching can actually produce smaller grammars. For

example, the sentences that might be characterized as

VP -> VBD NP PP*

are represented in the Penn Treebank by this series of rules:

VBD NP PP
VBD NP PP PP
VBD NP PP PP PP
VBD NP PP PP PP PP

VP
VP
VP
VP
...

→
→
→
→

but could also be generated by the following two-rule grammar:

VP
VP

→
→

VBD NP PP
VP PP

The generation of a symbol A with a potentially inﬁnite sequence of symbols B with
a rule of the form A

A B is known as Chomsky-adjunction.

→

Chomsky-
adjunction

17.5 Ambiguity

structural
ambiguity

Ambiguity is the most serious problem faced by syntactic parsers. Chapter 8 intro-
duced the notions of part-of-speech ambiguity and part-of-speech disambigua-
tion. Here, we introduce a new kind of ambiguity, called structural ambiguity,
illustrated with a new toy grammar L1, shown in Figure 17.8, which adds a few
rules to the L0 grammar from the last chapter.

Structural ambiguity occurs when the grammar can assign more than one parse
to a sentence. Groucho Marx’s well-known line as Captain Spaulding in Animal

376 CHAPTER 17

• CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING

S

S

NP

VP

NP

VP

Pronoun

Verb

NP

Pronoun

VP

PP

I

shot

Det

Nominal

I

Verb

NP

in my pajamas

an

Nominal

PP

shot

Det

Nominal

Noun

in my pajamas

an

Noun

elephant

elephant

Figure 17.9 Two parse trees for an ambiguous sentence. The parse on the left corresponds to the humorous
reading in which the elephant is in the pajamas, the parse on the right corresponds to the reading in which
Captain Spaulding did the shooting in his pajamas.

attachment
ambiguity

PP-attachment
ambiguity

coordination
ambiguity

Crackers is ambiguous because the phrase in my pajamas can be part of the NP
headed by elephant or a part of the verb phrase headed by shot. Figure 17.9 illus-
trates these two analyses of Marx’s line using rules from L1.

Structural ambiguity, appropriately enough, comes in many forms. Two common
kinds of ambiguity are attachment ambiguity and coordination ambiguity. A
sentence has an attachment ambiguity if a particular constituent can be attached to
the parse tree at more than one place. The Groucho Marx sentence is an example
of PP-attachment ambiguity: the preposition phrase can be attached either as part
of the NP or as part of the VP. Various kinds of adverbial phrases are also subject
to this kind of ambiguity. For instance, in the following example the gerundive-VP
ﬂying to Paris can be part of a gerundive sentence whose subject is the Eiffel Tower
or it can be an adjunct modifying the VP headed by saw:

(17.2) We saw the Eiffel Tower ﬂying to Paris.

In coordination ambiguity phrases can be conjoined by a conjunction like and.
For example, the phrase old men and women can be bracketed as [old [men and
women]], referring to old men and old women, or as [old men] and [women], in
which case it is only the men who are old. These ambiguities combine in complex
ways in real sentences, like the following news sentence from the Brown corpus:

(17.3) President Kennedy today pushed aside other White House business to

devote all his time and attention to working on the Berlin crisis address he
will deliver tomorrow night to the American people over nationwide
television and radio.

This sentence has a number of ambiguities, although since they are semantically
unreasonable, it requires a careful reading to see them. The last noun phrase could be
parsed [nationwide [television and radio]] or [[nationwide television] and radio].
The direct object of pushed aside should be other White House business but could
also be the bizarre phrase [other White House business to devote all his time and
attention to working] (i.e., a structure like Kennedy afﬁrmed [his intention to propose
a new budget to address the deﬁcit]). Then the phrase on the Berlin crisis address he

17.6

• CKY PARSING: A DYNAMIC PROGRAMMING APPROACH

377

will deliver tomorrow night to the American people could be an adjunct modifying
the verb pushed. A PP like over nationwide television and radio could be attached
to any of the higher VPs or NPs (e.g., it could modify people or night).

The fact that there are many grammatically correct but semantically unreason-
able parses for naturally occurring sentences is an irksome problem that affects all
parsers. Fortunately, the CKY algorithm below is designed to efﬁciently handle
structural ambiguities. And as we’ll see in the following section, we can augment
CKY with neural methods to choose a single correct parse by syntactic disambigua-
tion.

syntactic
disambiguation

17.6 CKY Parsing: A Dynamic Programming Approach

Dynamic programming provides a powerful framework for addressing the prob-
lems caused by ambiguity in grammars. Recall that a dynamic programming ap-
proach systematically ﬁlls in a table of solutions to subproblems. The complete
table has the solution to all the subproblems needed to solve the problem as a whole.
In the case of syntactic parsing, these subproblems represent parse trees for all the
constituents detected in the input.

The dynamic programming advantage arises from the context-free nature of our
grammar rules—once a constituent has been discovered in a segment of the input we
can record its presence and make it available for use in any subsequent derivation
that might require it. This provides both time and storage efﬁciencies since subtrees
can be looked up in a table, not reanalyzed. This section presents the Cocke-Kasami-
Younger (CKY) algorithm, the most widely used dynamic-programming based ap-
proach to parsing. Chart parsing (Kaplan 1973, Kay 1982) is a related approach,
and dynamic programming methods are often referred to as chart parsing methods.

17.6.1 Conversion to Chomsky Normal Form

→

B C or A

The CKY algorithm requires grammars to ﬁrst be in Chomsky Normal Form (CNF).
Recall from Section 17.4 that grammars in CNF are restricted to rules of the form
A
w. That is, the right-hand side of each rule must expand either to
two non-terminals or to a single terminal. Restricting a grammar to CNF does not
lead to any loss in expressiveness, since any context-free grammar can be converted
into a corresponding CNF grammar that accepts exactly the same set of strings as
the original grammar.

→

Let’s start with the process of converting a generic CFG into one represented in
CNF. Assuming we’re dealing with an (cid:15)-free grammar, there are three situations we
need to address in any generic grammar: rules that mix terminals with non-terminals
on the right-hand side, rules that have a single non-terminal on the right-hand side,
and rules in which the length of the right-hand side is greater than 2.

The remedy for rules that mix terminals and non-terminals is to simply introduce
a new dummy non-terminal that covers only the original terminal. For example, a
rule for an inﬁnitive verb phrase such as INF-VP
to VP would be replaced by the
two rules INF-VP

to.
Rules with a single non-terminal on the right are called unit productions. We
can eliminate unit productions by rewriting the right-hand side of the original rules
with the right-hand side of all the non-unit production rules that they ultimately lead
γ
to. More formally, if A ∗
⇒

B by a chain of one or more unit productions and B

TO VP and TO

→

→

→

→

chart parsing

Unit
productions

378 CHAPTER 17

• CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING

γ for each such rule in
is a non-unit production in our grammar, then we add A
the grammar and discard all the intervening unit productions. As we demonstrate
with our toy grammar, this can lead to a substantial ﬂattening of the grammar and a
consequent promotion of terminals to fairly high levels in the resulting trees.

→

Rules with right-hand sides longer than 2 are normalized through the introduc-
tion of new non-terminals that spread the longer sequences over several new rules.
Formally, if we have a rule like

A

→

B C γ

we replace the leftmost pair of non-terminals with a new non-terminal and introduce
a new production, resulting in the following new rules:

A

X1

→

→

X1 γ
B C

In the case of longer right-hand sides, we simply iterate this process until the of-
fending rule has been replaced by rules of length 2. The choice of replacing the
leftmost pair of non-terminals is purely arbitrary; any systematic scheme that results
in binary rules would sufﬁce.

rules S

In our current grammar, the rule S
Aux NP.
The entire conversion process can be summarized as follows:

X1 VP and X1

→

→

→

Aux NP VP would be replaced by the two

1. Copy all conforming rules to the new grammar unchanged.
2. Convert terminals within rules to dummy non-terminals.
3. Convert unit productions.
4. Make all rules binary and add them to new grammar.

Figure 17.10 shows the results of applying this entire conversion procedure to
the L1 grammar introduced earlier on page 375. Note that this ﬁgure doesn’t show
the original lexical rules; since these original lexical rules are already in CNF, they
all carry over unchanged to the new grammar. Figure 17.10 does, however, show
the various places where the process of eliminating unit productions has, in effect,
created new lexical rules. For example, all the original verbs have been promoted to
both VPs and to Ss in the converted grammar.

17.6.2 CKY Recognition

With our grammar now in CNF, each non-terminal node above the part-of-speech
level in a parse tree will have exactly two daughters. A two-dimensional matrix can
be used to encode the structure of an entire tree. For a sentence of length n, we will
work with the upper-triangular portion of an (n + 1)
(n + 1) matrix. Each cell [i, j]
in this matrix contains the set of non-terminals that represent all the constituents that
span positions i through j of the input. Since our indexing scheme begins with 0, it’s
natural to think of the indexes as pointing at the gaps between the input words (as in
0 Book 1 that 2 ﬂight 3). These gaps are often called fenceposts, on the metaphor of
the posts between segments of fencing. It follows then that the cell that represents
the entire input resides in position [0, n] in the matrix.

×

Since each non-terminal entry in our table has two daughters in the parse, it fol-
lows that for each constituent represented by an entry [i, j], there must be a position
in the input, k, where it can be split into two parts such that i < k < j. Given such

fenceposts

17.6

• CKY PARSING: A DYNAMIC PROGRAMMING APPROACH

379

L1 Grammar
NP VP
Aux NP VP

VP

S
S

S

→
→

→

NP
→
NP
→
NP
→
Nominal
Nominal
Nominal
VP
VP
VP

→
→
→

Pronoun
Proper-Noun
Det Nominal

Noun
Nominal Noun
Nominal PP

→
→
→
Verb
Verb NP
Verb NP PP

prefer

|

L1 in CNF

NP VP
X1 VP

Aux NP

|

include

book
Verb NP
X2 PP
Verb PP
VP PP
I
|
TWA
|
Det Nominal

she

me
|
Houston

prefer

|

|

ﬂight

book
|
Nominal Noun
Nominal PP
include

|

→
→
→
book
Verb NP
X2 PP
Verb NP
Verb PP
VP PP
Preposition NP

→

→
→

→
→
→
→
→

S
S
X1
S
S
S
S
S
NP
→
NP
→
NP
→
Nominal
Nominal
Nominal
VP
VP
VP
X2
VP
VP
PP

→
→
→
→
→
→
→

meal

|

money

→
→
→

Verb PP
VP PP
Preposition NP

VP
VP
PP
Figure 17.10 L
here, all the original lexical entries from L

1 Grammar and its conversion to CNF. Note that although they aren’t shown

1 carry over unchanged as well.

a position k, the ﬁrst constituent [i, k] must lie to the left of entry [i, j] somewhere
along row i, and the second entry [k, j] must lie beneath it, along column j.

To make this more concrete, consider the following example with its completed

parse matrix, shown in Fig. 17.11.

(17.4) Book the ﬂight through Houston.

The superdiagonal row in the matrix contains the parts of speech for each word in
the input. The subsequent diagonals above that superdiagonal contain constituents
that cover all the spans of increasing length in the input.

Given this setup, CKY recognition consists of ﬁlling the parse table in the right
way. To do this, we’ll proceed in a bottom-up fashion so that at the point where we
are ﬁlling any cell [i, j], the cells containing the parts that could contribute to this
entry (i.e., the cells to the left and the cells below) have already been ﬁlled. The
algorithm given in Fig. 17.12 ﬁlls the upper-triangular matrix a column at a time
working from left to right, with each column ﬁlled from bottom to top, as the right
side of Fig. 17.11 illustrates. This scheme guarantees that at each point in time we
have all the information we need (to the left, since all the columns to the left have
already been ﬁlled, and below since we’re ﬁlling bottom to top). It also mirrors on-
line processing, since ﬁlling the columns from left to right corresponds to processing
each word one at a time.

The outermost loop of the algorithm given in Fig. 17.12 iterates over the columns,
and the second loop iterates over the rows, from the bottom up. The purpose of the
innermost loop is to range over all the places where a substring spanning i to j in
the input might be split in two. As k ranges over the places where the string can be
split, the pairs of cells we consider move, in lockstep, to the right along row i and
down along column j. Figure 17.13 illustrates the general case of ﬁlling cell [i, j].

380 CHAPTER 17

• CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING

Figure 17.11 Completed parse table for Book the ﬂight through Houston.

function CKY-PARSE(words, grammar) returns table

for j

from 1 to LENGTH(words) do

←
for all

for i

←
for k

A
A
{
|
table[ j
from j

words[ j]

←

∈
table[ j

1, j]
−
2 down to 0 do
1 do
BC

→
−
−
i + 1 to j
−
A
A
{
→
table[i,j]

|

←
for all

grammar
1, j]

}
A

∪

grammar and B
A

∈
table[i,j]

←

∪

table[i, k] and C

table[k, j]

}

∈

∈

Figure 17.12 The CKY algorithm.

At each such split, the algorithm considers whether the contents of the two cells can
be combined in a way that is sanctioned by a rule in the grammar. If such a rule
exists, the non-terminal on its left-hand side is entered into the table.

Figure 17.14 shows how the ﬁve cells of column 5 of the table are ﬁlled after the
word Houston is read. The arrows point out the two spans that are being used to add
an entry to the table. Note that the action in cell [0, 5] indicates the presence of three
alternative parses for this input, one where the PP modiﬁes the ﬂight, one where
it modiﬁes the booking, and one that captures the second argument in the original
VP

Verb NP PP rule, now captured indirectly with the VP

X2 PP rule.

→

→

17.6.3 CKY Parsing

The algorithm given in Fig. 17.12 is a recognizer, not a parser. That is, it can tell
us whether a valid parse exists for a given sentence based on whether or not if ﬁnds
an S in cell [0, n], but it can’t provide the derivation, which is the actual job for a
parser. To turn it into a parser capable of returning all possible parses for a given
input, we can make two simple changes to the algorithm:
the ﬁrst change is to
augment the entries in the table so that each non-terminal is paired with pointers to
the table entries from which it was derived (more or less as shown in Fig. 17.14), the
second change is to permit multiple versions of the same non-terminal to be entered
into the table (again as shown in Fig. 17.14). With these changes, the completed
table contains all the possible parses for a given input. Returning an arbitrary single

Bookthe flight throughHoustonS, VP, Verb, Nominal, NounS,VP,X2S,VP,X2DetNPNPNominal,NounNominalPrepPPNP,Proper-Noun[0,1][0,2][0,3][0,4][0,5][1,2][1,3][2,3][1,4][2,5][2,4][3,4][4,5][3,5][1,5]17.6

• CKY PARSING: A DYNAMIC PROGRAMMING APPROACH

381

Figure 17.13 All the ways to ﬁll the [i, j]th cell in the CKY table.

parse consists of choosing an S from cell [0, n] and then recursively retrieving its
component constituents from the table. Of course, instead of returning every parse
for a sentence, we usually want just the best parse; we’ll see how to do that in the
next section.

17.6.4 CKY in Practice

Finally, we should note that while the restriction to CNF does not pose a problem
theoretically, it does pose some non-trivial problems in practice. The returned CNF
trees may not be consistant with the original grammar built by the grammar devel-
opers, and will complicate any syntax-driven approach to semantic analysis.

One approach to getting around these problems is to keep enough information
around to transform our trees back to the original grammar as a post-processing step
of the parse. This is trivial in the case of the transformation used for rules with length
greater than 2. Simply deleting the new dummy non-terminals and promoting their
daughters restores the original tree.

In the case of unit productions, it turns out to be more convenient to alter the ba-
sic CKY algorithm to handle them directly than it is to store the information needed
to recover the correct trees. Exercise 17.3 asks you to make this change. Many of
the probabilistic parsers presented in Appendix C use the CKY algorithm altered in

......[0,n][i,i+1][i,i+2][i,j-2][i,j-1][i+1,j][i+2,j][j-1,j][j-2,j][i,j]...[0,1][n-1, n]382 CHAPTER 17

• CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING

Figure 17.14 Filling the cells of column 5 after reading the word Houston.

Bookthe flight throughHoustonS, VP, Verb, Nominal, NounS,VP,X2DetNPNominal,NounNominalPrepNP,Proper-Noun[0,1][0,2][0,3][0,4][0,5][1,2][1,3][2,3][1,4][2,5][2,4][3,4][4,5][3,5][1,5]Bookthe flight throughHoustonS, VP, Verb, Nominal, NounS,VP,X2DetNPNPNominal,NounPrepPPNP,Proper-Noun[0,1][0,2][0,3][0,4][0,5][1,2][1,3][2,3][1,4][2,5][2,4][3,4][4,5][3,5][1,5]Bookthe flight throughHoustonS, VP, Verb, Nominal, NounS,VP,X2DetNPNPNominal,NounNominalPrepPPNP,Proper-Noun[0,1][0,2][0,3][0,4][0,5][1,2][1,3][2,3][1,4][2,5][2,4][3,4][4,5][3,5][1,5]Bookthe flight throughHoustonS, VP, Verb, Nominal, NounS,VP,X2DetNPNPNominal,NounNominalPrepPPNP,Proper-Noun[0,1][0,2][0,3][0,4][0,5][1,2][1,3][2,3][1,4][2,5][2,4][3,4][4,5][3,5][1,5]Bookthe flight throughHoustonS, VP, Verb, Nominal, NounS,VP,X2DetNPNPNominal,NounNominalPrepPPNP,Proper-Noun[0,1][0,2][0,3][0,4][1,2][1,3][2,3][1,4][2,5][2,4][3,4][4,5][3,5][1,5]S2, VPS3S1,VP, X217.7

• SPAN-BASED NEURAL CONSTITUENCY PARSING

383

just this manner.

17.7 Span-Based Neural Constituency Parsing

While the CKY parsing algorithm we’ve seen so far does great at enumerating all
the possible parse trees for a sentence, it has a large problem: it doesn’t tell us which
parse is the correct one! That is, it doesn’t disambiguate among the possible parses.
To solve the disambiguation problem we’ll use a simple neural extension of the
CKY algorithm. The intuition of such parsing algorithms (often called span-based
constituency parsing, or neural CKY), is to train a neural classiﬁer to assign a
score to each constituent, and then use a modiﬁed version of CKY to combine these
constituent scores to ﬁnd the best-scoring parse tree.

Here we’ll describe a version of the algorithm from Kitaev et al. (2019). This
parser learns to map a span of words to a constituent, and, like CKY, hierarchically
combines larger and larger spans to build the parse-tree bottom-up. But unlike clas-
sic CKY, this parser doesn’t use the hand-written grammar to constrain what con-
stituents can be combined, instead just relying on the learned neural representations
of spans to encode likely combinations.

17.7.1 Computing Scores for a Span

span

Let’s begin by considering just the constituent (we’ll call it a span) that lies between
fencepost positions i and j with non-terminal symbol label l. We’ll build a system
to assign a score s(i, j, l) to this constituent span.

Figure 17.15 A simpliﬁed outline of computing the span score for the span the ﬂight with
the label NP.

Fig. 17.15 sketches the architecture. The input word tokens are embedded by

ENCODER[START]BooktheflightthroughHouston[END]map to subwordsmap back to words013245MLPi=1hj-hij=3NPCompute score for spanRepresent spanCKY for computing best parsepostprocessing layers384 CHAPTER 17

• CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING

passing them through a pretrained language model like BERT. Because BERT oper-
ates on the level of subword (wordpiece) tokens rather than words, we’ll ﬁrst need to
convert the BERT outputs to word representations. One standard way of doing this
is to simply use the ﬁrst subword unit as the representation for the entire word; us-
ing the last subword unit, or the sum of all the subword units are also common. The
embeddings can then be passed through some postprocessing layers; Kitaev et al.
(2019), for example, use 8 Transformer layers.

The resulting word encoder outputs yt are then used to compute a span score.
First, we must map the word encodings (indexed by word positions) to span encod-
ings (indexed by fenceposts). We do this by representing each fencepost with two
separate values; the intuition is that a span endpoint to the right of a word represents
different information than a span endpoint to the left of a word. We convert each
word output yt into a (leftward-pointing) value for spans ending at this fencepost,
←−y t , and a (rightward-pointing) value −→y t for spans beginning at this fencepost, by
splitting yt into two halves. Each span then stretches from one double-vector fence-
post to another, as in the following representation of the ﬂight, which is span(1, 3):

START0

y0 −→y0 ←−y1

0
(cid:13)

Book
y1 −→y1 ←−y2

the
y2 −→y2 ←−y3

ﬂight
y3 −→y3 ←−y4

through

y4 −→y4 ←−y5

. . .

1
(cid:13)

2
(cid:13)

span(1,3)

3
(cid:13)

4
(cid:13)

A traditional way to represent a span, developed originally for RNN-based models
(Wang and Chang, 2016), but extended also to Transformers, is to take the differ-
ence between the embeddings of its start and end, i.e., representing span (i, j) by
subtracting the embedding of i from the embedding of j. Here we represent a span
by concatenating the difference of each of its fencepost components:

v(i, j) = [−→y j − −→yi ; ←−−y j+1 − ←−−yi+1]

(17.5)

The span vector v is then passed through an MLP span classiﬁer, with two fully-
connected layers and one ReLU activation function, whose output dimensionality is
the number of possible non-terminal labels:

s(i, j,

) = W2 ReLU(LayerNorm(W1v(i, j)))
·

(17.6)

The MLP then outputs a score for each possible non-terminal.

17.7.2

Integrating Span Scores into a Parse

Now we have a score for each labeled constituent span s(i, j, l). But we need a score
for an entire parse tree. Formally a tree T is represented as a set of
such labeled
spans, with the tth span starting at position it and ending at position jt , with label lt :

T
|

|

T =

{

(it , jt , lt ) : t = 1, . . . ,

T
|

|}

(17.7)

Thus once we have a score for each span, the parser can compute a score for the
whole tree s(T ) simply by summing over the scores of its constituent spans:

s(T ) =

s(i, j, l)

(17.8)

(cid:88)(i, j,l)
∈

T

17.8

• EVALUATING PARSERS

385

And we can choose the ﬁnal parse tree as the tree with the maximum score:

ˆT = argmax

s(T )

T

(17.9)

The simplest method to produce the most likely parse is to greedily choose the
highest scoring label for each span. This greedy method is not guaranteed to produce
a tree, since the best label for a span might not ﬁt into a complete tree. In practice,
however, the greedy method tends to ﬁnd trees; in their experiments Gaddy et al.
(2018) ﬁnds that 95% of predicted bracketings form valid trees.

Nonetheless it is more common to use a variant of the CKY algorithm to ﬁnd the
full parse. The variant deﬁned in Gaddy et al. (2018) works as follows. Let’s deﬁne
sbest(i, j) as the score of the best subtree spanning (i, j). For spans of length one, we
choose the best label:

sbest(i, i + 1) = max

l

s(i, i + 1, l)

For other spans (i, j), the recursion is:

sbest(i, j) = max

l

s(i, j, l)

+ max

[sbest(i, k) + sbest(k, j)]

k

(17.10)

(17.11)

Note that the parser is using the max label for span (i, j) + the max labels for spans
(i, k) and (k, j) without worrying about whether those decisions make sense given a
grammar. The role of the grammar in classical parsing is to help constrain possible
combinations of constituents (NPs like to be followed by VPs). By contrast, the
neural model seems to learn these kinds of contextual constraints during its mapping
from spans to non-terminals.

For more details on span-based parsing, including the margin-based training al-
gorithm, see Stern et al. (2017), Gaddy et al. (2018), Kitaev and Klein (2018), and
Kitaev et al. (2019).

17.8 Evaluating Parsers

PARSEVAL

The standard tool for evaluating parsers that assign a single parse tree to a sentence
is the PARSEVAL metrics (Black et al., 1991). The PARSEVAL metric measures
how much the constituents in the hypothesis parse tree look like the constituents in a
hand-labeled, reference parse. PARSEVAL thus requires a human-labeled reference
(or “gold standard”) parse tree for each sentence in the test set; we generally draw
these reference parses from a treebank like the Penn Treebank.

A constituent in a hypothesis parse Ch of a sentence s is labeled correct if there
is a constituent in the reference parse Cr with the same starting point, ending point,
and non-terminal symbol. We can then measure the precision and recall just as for
tasks we’ve seen already like named entity tagging:

labeled recall: = # of correct constituents in hypothesis parse of s
# of total constituents in reference parse of s

labeled precision: = # of correct constituents in hypothesis parse of s
# of total constituents in hypothesis parse of s

386 CHAPTER 17

• CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING

S(dumped)

NP(workers)

VP(dumped)

NNS(workers)

VBD(dumped)

NP(sacks)

PP(into)

workers

dumped

NNS(sacks)

P

NP(bin)

sacks

into

DT(a)

NN(bin)

a

bin

Figure 17.16 A lexicalized tree from Collins (1999).

As usual, we often report a combination of the two, F1:

F1 =

2PR
P + R

(17.12)

We additionally use a new metric, crossing brackets, for each sentence s:

cross-brackets: the number of constituents for which the reference parse has a
bracketing such as ((A B) C) but the hypothesis parse has a bracketing such
as (A (B C)).

For comparing parsers that use different grammars, the PARSEVAL metric in-
cludes a canonicalization algorithm for removing information likely to be grammar-
speciﬁc (auxiliaries, pre-inﬁnitival “to”, etc.) and for computing a simpliﬁed score
(Black et al., 1991). The canonical implementation of the PARSEVAL metrics is
called evalb (Sekine and Collins, 1997).

evalb

17.9 Heads and Head-Finding

Syntactic constituents can be associated with a lexical head; N is the head of an NP,
V is the head of a VP. This idea of a head for each constituent dates back to Bloom-
ﬁeld 1914, and is central to the dependency grammars and dependency parsing we’ll
introduce in Chapter 18. Indeed, heads can be used as a way to map between con-
stituency and dependency parses. Heads are also important in probabilistic pars-
ing (Appendix C) and in constituent-based grammar formalisms like Head-Driven
Phrase Structure Grammar (Pollard and Sag, 1994)..

In one simple model of lexical heads, each context-free rule is associated with
a head (Charniak 1997, Collins 1999). The head is the word in the phrase that is
grammatically the most important. Heads are passed up the parse tree; thus, each
non-terminal in a parse tree is annotated with a single word, which is its lexical head.
Figure 17.16 shows an example of such a tree from Collins (1999), in which each
non-terminal is annotated with its head.

For the generation of such a tree, each CFG rule must be augmented to identify
one right-side constituent to be the head child. The headword for a node is then set to
the headword of its head child. Choosing these head children is simple for textbook
examples (NN is the head of NP) but is complicated and indeed controversial for

17.10

• SUMMARY

387

most phrases. (Should the complementizer to or the verb be the head of an inﬁnite
verb phrase?) Modern linguistic theories of syntax generally include a component
that deﬁnes heads (see, e.g., (Pollard and Sag, 1994)).

An alternative approach to ﬁnding a head is used in most practical computational
systems. Instead of specifying head rules in the grammar itself, heads are identiﬁed
In other words, once
dynamically in the context of trees for speciﬁc sentences.
a sentence is parsed, the resulting tree is walked to decorate each node with the
appropriate head. Most current systems rely on a simple set of handwritten rules,
such as a practical one for Penn Treebank grammars given in Collins (1999) but
developed originally by Magerman (1995). For example, the rule for ﬁnding the
head of an NP is as follows (Collins, 1999, p. 238):

• If the last word is tagged POS, return last-word.
• Else search from right to left for the ﬁrst child which is an NN, NNP, NNPS, NX, POS,

or JJR.

• Else search from left to right for the ﬁrst child which is an NP.
• Else search from right to left for the ﬁrst child which is a $, ADJP, or PRN.
• Else search from right to left for the ﬁrst child which is a CD.
• Else search from right to left for the ﬁrst child which is a JJ, JJS, RB or QP.
• Else return the last word

Selected other rules from this set are shown in Fig. 17.17. For example, for VP
rules of the form VP
Yn, the algorithm would start from the left of Y1 · · ·
Yn looking for the ﬁrst Yi of type TO; if no TOs are found, it would search for the
ﬁrst Yi of type VBD; if no VBDs are found, it would search for a VBN, and so on.
See Collins (1999) for more details.

Y1 · · ·

→

Parent Direction
ADJP

Left

Priority List
NNS QP NN $ ADVP JJ VBN VBG ADJP JJR NP JJS DT FW RBR RBS
SBAR RB
RB RBR RBS FW ADVP TO CD JJR JJ IN NP JJS NN

ADVP
PRN
PRT
QP
S
SBAR
VP
Figure 17.17 Some head rules from Collins (1999). The head rules are also called a head percolation table.

RP
$ IN NNS NN JJ RB DT CD NCD QP JJR JJS
TO IN VP S SBAR ADJP UCP NP
WHNP WHPP WHADVP WHADJP IN DT S SQ SINV SBAR FRAG
TO VBD VBN MD VBZ VB VBG VBP VP ADJP NN NNS NP

Right
Left
Right
Left
Left
Left
Left

17.10 Summary

This chapter introduced constituency parsing. Here’s a summary of the main points:

• In many languages, groups of consecutive words act as a group or a con-
stituent, which can be modeled by context-free grammars (which are also
known as phrase-structure grammars).

• A context-free grammar consists of a set of rules or productions, expressed
over a set of non-terminal symbols and a set of terminal symbols. Formally,
a particular context-free language is the set of strings that can be derived
from a particular context-free grammar.

388 CHAPTER 17

• CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING

• Structural ambiguity is a signiﬁcant problem for parsers. Common sources
of structural ambiguity include PP-attachment and coordination ambiguity.
• Dynamic programming parsing algorithms, such as CKY, use a table of

partial parses to efﬁciently parse ambiguous sentences.

• CKY restricts the form of the grammar to Chomsky normal form (CNF).
• The basic CKY algorithm compactly represents all possible parses of the sen-

tence but doesn’t choose a single best parse.

• Choosing a single parse from all possible parses (disambiguation) can be

done by neural constituency parsers.

• Span-based neural constituency parses train a neural classiﬁer to assign a score
to each constituent, and then use a modiﬁed version of CKY to combine these
constituent scores to ﬁnd the best-scoring parse tree.

• Parsers are evaluated with three metrics: labeled recall, labeled precision,

and cross-brackets.

• Partial parsing and chunking are methods for identifying shallow syntac-
tic constituents in a text. They are solved by sequence models trained on
syntactically-annotated data.

Bibliographical and Historical Notes

According to Percival (1976), the idea of breaking up a sentence into a hierarchy of
constituents appeared in the V¨olkerpsychologie of the groundbreaking psychologist
Wilhelm Wundt (Wundt, 1900):

...den sprachlichen Ausdruck f¨ur die willk¨urliche Gliederung einer Ge-
sammtvorstellung in ihre in logische Beziehung zueinander gesetzten
Bestandteile

[the linguistic expression for the arbitrary division of a total idea

into its constituent parts placed in logical relations to one another]

Wundt’s idea of constituency was taken up into linguistics by Leonard Bloom-
ﬁeld in his early book An Introduction to the Study of Language (Bloomﬁeld, 1914).
By the time of his later book, Language (Bloomﬁeld, 1933), what was then called
“immediate-constituent analysis” was a well-established method of syntactic study
in the United States. By contrast, traditional European grammar, dating from the
Classical period, deﬁned relations between words rather than constituents, and Eu-
ropean syntacticians retained this emphasis on such dependency grammars, the sub-
ject of Chapter 18. (And indeed, both dependency and constituency grammars have
been in vogue in computational linguistics at different times).

American Structuralism saw a number of speciﬁc deﬁnitions of the immediate
constituent, couched in terms of their search for a “discovery procedure”: a method-
ological algorithm for describing the syntax of a language. In general, these attempt
to capture the intuition that “The primary criterion of the immediate constituent
is the degree in which combinations behave as simple units” (Bazell, 1952/1966, p.
284). The most well known of the speciﬁc deﬁnitions is Harris’ idea of distributional
similarity to individual units, with the substitutability test. Essentially, the method
proceeded by breaking up a construction into constituents by attempting to substitute
simple structures for possible constituents—if a substitution of a simple form, say,

EXERCISES

389

man, was substitutable in a construction for a more complex set (like intense young
man), then the form intense young man was probably a constituent. Harris’s test was
the beginning of the intuition that a constituent is a kind of equivalence class.

The context-free grammar was a formalization of this idea of hierarchical
constituency deﬁned in Chomsky (1956) and further expanded upon (and argued
against) in Chomsky (1957) and Chomsky (1956/1975). Shortly after Chomsky’s
initial work, the context-free grammar was reinvented by Backus (1959) and inde-
pendently by Naur et al. (1960) in their descriptions of the ALGOL programming
language; Backus (1996) noted that he was inﬂuenced by the productions of Emil
Post and that Naur’s work was independent of his (Backus’) own. After this early
work, a great number of computational models of natural language processing were
based on context-free grammars because of the early development of efﬁcient pars-
ing algorithms.

Dynamic programming parsing has a history of independent discovery. Ac-
cording to the late Martin Kay (personal communication), a dynamic programming
parser containing the roots of the CKY algorithm was ﬁrst implemented by John
Cocke in 1960. Later work extended and formalized the algorithm, as well as prov-
ing its time complexity (Kay 1967, Younger 1967, Kasami 1965). The related well-
formed substring table (WFST) seems to have been independently proposed by
Kuno (1965) as a data structure that stores the results of all previous computations
in the course of the parse. Based on a generalization of Cocke’s work, a similar
data structure had been independently described in Kay (1967) (and Kay 1973). The
top-down application of dynamic programming to parsing was described in Earley’s
Ph.D. dissertation (Earley 1968, Earley 1970). Sheil (1976) showed the equivalence
of the WFST and the Earley algorithm. Norvig (1991) shows that the efﬁciency of-
fered by dynamic programming can be captured in any language with a memoization
function (such as in LISP) simply by wrapping the memoization operation around a
simple top-down parser.

The earliest disambiguation algorithms for parsing were based on probabilistic
context-free grammars, ﬁrst worked out by Booth (1969) and Salomaa (1969); see
Appendix C for more history. Neural methods were ﬁrst applied to parsing at around
the same time as statistical parsing methods were developed (Henderson, 1994). In
the earliest work neural networks were used to estimate some of the probabilities for
statistical constituency parsers (Henderson, 2003, 2004; Emami and Jelinek, 2005)
. The next decades saw a wide variety of neural parsing algorithms, including re-
cursive neural architectures (Socher et al., 2011, 2013), encoder-decoder models
(Vinyals et al., 2015; Choe and Charniak, 2016), and the idea of focusing on spans
(Cross and Huang, 2016). For more on the span-based self-attention approach we
describe in this chapter see Stern et al. (2017), Gaddy et al. (2018), Kitaev and Klein
(2018), and Kitaev et al. (2019). See Chapter 18 for the parallel history of neural
dependency parsing.

The classic reference for parsing algorithms is Aho and Ullman (1972); although
the focus of that book is on computer languages, most of the algorithms have been
applied to natural language.

WFST

probabilistic
context-free
grammars

Exercises

17.1 Implement the algorithm to convert arbitrary context-free grammars to CNF.

390 CHAPTER 17

• CONTEXT-FREE GRAMMARS AND CONSTITUENCY PARSING

Apply your program to the L1 grammar.

17.2 Implement the CKY algorithm and test it with your converted L1 grammar.
17.3 Rewrite the CKY algorithm given in Fig. 17.12 on page 380 so that it can

accept grammars that contain unit productions.

17.4 Discuss how to augment a parser to deal with input that may be incorrect, for
example, containing spelling errors or mistakes arising from automatic speech
recognition.

17.5 Implement the PARSEVAL metrics described in Section 17.8. Next, use a
parser and a treebank, compare your metrics against a standard implementa-
tion. Analyze the errors in your approach.

CHAPTER

18 Dependency Parsing

Tout mot qui fait partie d’une phrase... Entre lui et ses voisins, l’esprit aperc¸oit
des connexions, dont l’ensemble forme la charpente de la phrase.

[Between each word in a sentence and its neighbors, the mind perceives con-
nections. These connections together form the scaffolding of the sentence.]

Lucien Tesni`ere. 1959. ´El´ements de syntaxe structurale, A.1.§4

dependency
grammars

The focus of the last chapter was on context-free grammars and constituent-
based representations. Here we present another important family of grammar for-
malisms called dependency grammars. In dependency formalisms, phrasal con-
stituents and phrase-structure rules do not play a direct role. Instead, the syntactic
structure of a sentence is described solely in terms of directed binary grammatical
relations between the words, as in the following dependency parse:

root

obj

det

nsubj

compound

nmod

case

(18.1)

I prefer the morning

ﬂight through Denver

Relations among the words are illustrated above the sentence with directed, labeled
arcs from heads to dependents. We call this a typed dependency structure because
the labels are drawn from a ﬁxed inventory of grammatical relations. A root node
explicitly marks the root of the tree, the head of the entire structure.

Figure 18.1 on the next page shows the dependency analysis from (18.1) but vi-
sualized as a tree, alongside its corresponding phrase-structure analysis of the kind
given in the prior chapter. Note the absence of nodes corresponding to phrasal con-
stituents or lexical categories in the dependency parse; the internal structure of the
dependency parse consists solely of directed relations between words. These head-
dependent relationships directly encode important information that is often buried in
the more complex phrase-structure parses. For example, the arguments to the verb
prefer are directly linked to it in the dependency structure, while their connection
to the main verb is more distant in the phrase-structure tree. Similarly, morning
and Denver, modiﬁers of ﬂight, are linked to it directly in the dependency structure.
This fact that the head-dependent relations are a good proxy for the semantic rela-
tionship between predicates and their arguments is an important reason why depen-
dency grammars are currently more common than constituency grammars in natural
language processing.

Another major advantage of dependency grammars is their ability to deal with
languages that have a relatively free word order. For example, word order in Czech
can be much more ﬂexible than in English; a grammatical object might occur before
or after a location adverbial. A phrase-structure grammar would need a separate rule

typed
dependency

free word order

392 CHAPTER 18

• DEPENDENCY PARSING

prefer

S

I

ﬂight

NP

VP

the

morning

Denver

Pro

Verb

NP

I

prefer

Det

Nom

through

the

Nom

PP

Nom

Noun

P

NP

Noun

ﬂight

through

Pro

morning

Denver

Figure 18.1 Dependency and constituent analyses for I prefer the morning ﬂight through Denver.

for each possible place in the parse tree where such an adverbial phrase could occur.
A dependency-based approach can have just one link type representing this particu-
lar adverbial relation; dependency grammar approaches can thus abstract away a bit
more from word order information.

In the following sections, we’ll give an inventory of relations used in dependency
parsing, discuss two families of parsing algorithms (transition-based, and graph-
based), and discuss evaluation.

18.1 Dependency Relations

grammatical
relation

head

dependent

grammatical
function

The traditional linguistic notion of grammatical relation provides the basis for the
binary relations that comprise these dependency structures. The arguments to these
relations consist of a head and a dependent. The head plays the role of the central
organizing word, and the dependent as a kind of modiﬁer. The head-dependent rela-
tionship is made explicit by directly linking heads to the words that are immediately
dependent on them.

In addition to specifying the head-dependent pairs, dependency grammars allow
us to classify the kinds of grammatical relations, or grammatical function that the
dependent plays with respect to its head. These include familiar notions such as
subject, direct object and indirect object. In English these notions strongly corre-
late with, but by no means determine, both position in a sentence and constituent
type and are therefore somewhat redundant with the kind of information found in
phrase-structure trees. However, in languages with more ﬂexible word order, the
information encoded directly in these grammatical relations is critical since phrase-
based constituent syntax provides little help.

Linguists have developed taxonomies of relations that go well beyond the famil-
iar notions of subject and object. While there is considerable variation from theory

18.1

• DEPENDENCY RELATIONS

393

Clausal Argument Relations Description
NSUBJ

OBJ
IOBJ
CCOMP
Nominal Modiﬁer Relations Description
NMOD
AMOD

Nominal subject
Direct object
Indirect object
Clausal complement

APPOS
DET
CASE
Other Notable Relations
CONJ
CC
Figure 18.2 Some of the Universal Dependency relations (de Marneffe et al., 2021).

Nominal modiﬁer
Adjectival modiﬁer
Appositional modiﬁer
Determiner
Prepositions, postpositions and other case markers
Description
Conjunct
Coordinating conjunction

Universal
Dependencies

to theory, there is enough commonality that cross-linguistic standards have been
developed. The Universal Dependencies (UD) project (de Marneffe et al., 2021),
an open community effort to annotate dependencies and other aspects of grammar
across more than 100 languages, provides an inventory of 37 dependency relations.
Fig. 18.2 shows a subset of the UD relations and Fig. 18.3 provides some examples.
The motivation for all of the relations in the Universal Dependency scheme is
beyond the scope of this chapter, but the core set of frequently used relations can be
broken into two sets: clausal relations that describe syntactic roles with respect to a
predicate (often a verb), and modiﬁer relations that categorize the ways that words
can modify their heads.

Consider, for example, the following sentence:

root

obj

det

nsubj

compound

nmod

case

(18.2)

United canceled the morning

ﬂights to Houston

Here the clausal relations NSUBJ and DOBJ identify the subject and direct object of
the predicate cancel, while the NMOD, DET, and CASE relations denote modiﬁers of
the nouns ﬂights and Houston.

18.1.1 Dependency Formalisms

A dependency structure can be represented as a directed graph G = (V, A), consisting
of a set of vertices V , and a set of ordered pairs of vertices A, which we’ll call arcs.
For the most part we will assume that the set of vertices, V , corresponds exactly
to the set of words in a given sentence. However, they might also correspond to
punctuation, or when dealing with morphologically complex languages the set of
vertices might consist of stems and afﬁxes. The set of arcs, A, captures the head-
dependent and grammatical function relationships between the elements in V .

Different grammatical theories or formalisms may place further constraints on
these dependency structures. Among the more frequent restrictions are that the struc-
tures must be connected, have a designated root node, and be acyclic or planar. Of
most relevance to the parsing approaches discussed in this chapter is the common,

394 CHAPTER 18

• DEPENDENCY PARSING

Relation
NSUBJ

OBJ

IOBJ
COMPOUND
NMOD
AMOD

APPOS
DET

Examples with head and dependent
United canceled the ﬂight.
United diverted the ﬂight to Reno.
We booked her the ﬁrst ﬂight to Miami.
We booked her the ﬂight to Miami.
We took the morning ﬂight.
ﬂight to Houston.
Book the cheapest ﬂight.
United, a unit of UAL, matched the fares.
The ﬂight was canceled.
Which ﬂight was delayed?
We ﬂew to Denver and drove to Steamboat.
We ﬂew to Denver and drove to Steamboat.
Book the ﬂight through Houston.

CONJ
CC
CASE
Figure 18.3 Examples of some Universal Dependency relations.

dependency
tree

computationally-motivated, restriction to rooted trees. That is, a dependency tree
is a directed graph that satisﬁes the following constraints:

1. There is a single designated root node that has no incoming arcs.
2. With the exception of the root node, each vertex has exactly one incoming arc.
3. There is a unique path from the root node to each vertex in V .

Taken together, these constraints ensure that each word has a single head, that the
dependency structure is connected, and that there is a single root node from which
one can follow a unique directed path to each of the words in the sentence.

18.1.2 Projectivity

projective

The notion of projectivity imposes an additional constraint that is derived from the
order of the words in the input. An arc from a head to a dependent is said to be
projective if there is a path from the head to every word that lies between the head
and the dependent in the sentence. A dependency tree is then said to be projective if
all the arcs that make it up are projective. All the dependency trees we’ve seen thus
far have been projective. There are, however, many valid constructions which lead
to non-projective trees, particularly in languages with relatively ﬂexible word order.

Consider the following example.

root

obl

nsubj

obj

det

acl:relcl

det

nsubj

adv

cop

(18.3)

JetBlue canceled our

ﬂight this morning which was already late

In this example, the arc from ﬂight to its modiﬁer late is non-projective since there
is no path from ﬂight to the intervening words this and morning. As we can see from
this diagram, projectivity (and non-projectivity) can be detected in the way we’ve
been drawing our trees. A dependency tree is projective if it can be drawn with
no crossing edges. Here there is no way to link ﬂight to its dependent late without
crossing the arc that links morning to its head.

18.1

• DEPENDENCY RELATIONS

395

Our concern with projectivity arises from two related issues. First, the most
widely used English dependency treebanks were automatically derived from phrase-
structure treebanks through the use of head-ﬁnding rules. The trees generated in such
a fashion will always be projective, and hence will be incorrect when non-projective
examples like this one are encountered.

Second, there are computational limitations to the most widely used families of
parsing algorithms. The transition-based approaches discussed in Section 18.2 can
only produce projective trees, hence any sentences with non-projective structures
will necessarily contain some errors. This limitation is one of the motivations for
the more ﬂexible graph-based parsing approach described in Section 18.3.

18.1.3 Dependency Treebanks

Treebanks play a critical role in the development and evaluation of dependency
parsers. They are used for training parsers, they act as the gold labels for evaluating
parsers, and they also provide useful information for corpus linguistics studies.

Dependency treebanks are created by having human annotators directly generate
dependency structures for a given corpus, or by hand-correcting the output of an
automatic parser. A few early treebanks were also based on using a deterministic
process to translate existing constituent-based treebanks into dependency trees.

The largest open community project for building dependency trees is the Univer-
sal Dependencies project at https://universaldependencies.org/ introduced
above, which currently has almost 200 dependency treebanks in more than 100 lan-
guages (de Marneffe et al., 2021). Here are a few UD examples showing dependency
trees for sentences in Spanish, Basque, and Mandarin Chinese:

punct

obl:tmod

obl

case

det

case

det

VERB
Subiremos

a
we-will-board on

ADP DET NOUN ADP DET NUM PUNCT
a
at

cinco
ﬁve

tren
train

las
the

el
the

.
.

[Spanish] Subiremos al tren a las cinco. “We will be boarding the train at ﬁve.”(18.4)

nsubj

punct

obj

aux

NOUN
Ekaitzak

NOUN

itsasontzia hondoratu

VERB AUX PUNCT
du
has

sunk

.
.

storm (Erg.) ship (Abs.)

[Basque] Ekaitzak itsasontzia hondoratu du. “The storm has sunk the ship.”(18.5)

396 CHAPTER 18

• DEPENDENCY PARSING

adv

nsubj

obj:tmod

obj

advmod

compound:vv

ADV PRON NOUN
昨天

ADV
才
yesterday only-then receive

VERB
收

但 我
I
but

VERB NOUN

到
arrive

信
letter

.

[Chinese] 但我昨天才收到信 “But I didn’t receive the letter until yesterday”(18.6)

18.2 Transition-Based Dependency Parsing

transition-based

Our ﬁrst approach to dependency parsing is called transition-based parsing. This
architecture draws on shift-reduce parsing, a paradigm originally developed for
In transition-based
analyzing programming languages (Aho and Ullman, 1972).
parsing we’ll have a stack on which we build the parse, a buffer of tokens to be
parsed, and a parser which takes actions on the parse via a predictor called an oracle,
as illustrated in Fig. 18.4.

Figure 18.4 Basic transition-based parser. The parser examines the top two elements of the
stack and selects an action by consulting an oracle that examines the current conﬁguration.

The parser walks through the sentence left-to-right, successively shifting items
from the buffer onto the stack. At each time point we examine the top two elements
on the stack, and the oracle makes a decision about what transition to apply to build
the parse. The possible transitions correspond to the intuitive actions one might take
in creating a dependency tree by examining the words in a single pass over the input
from left to right (Covington, 2001):

• Assign the current word as the head of some previously seen word,
• Assign some previously seen word as the head of the current word,
• Postpone dealing with the current word, storing it for later processing.

We’ll formalize this intuition with the following three transition operators that

will operate on the top two elements of the stack:

• LEFTARC: Assert a head-dependent relation between the word at the top of

the stack and the second word; remove the second word from the stack.

• RIGHTARC: Assert a head-dependent relation between the second word on

the stack and the word at the top; remove the top word from the stack;

wnw1w2s2...s1snParserInput buﬀerStackOracleLEFTARCRIGHTARCSHIFTActionDependencyRelationsw3w218.2

• TRANSITION-BASED DEPENDENCY PARSING

397

• SHIFT: Remove the word from the front of the input buffer and push it onto

the stack.

We’ll sometimes call operations like LEFTARC and RIGHTARC reduce operations,
based on a metaphor from shift-reduce parsing, in which reducing means combin-
ing elements on the stack. There are some preconditions for using operators. The
LEFTARC operator cannot be applied when ROOT is the second element of the stack
(since by deﬁnition the ROOT node cannot have any incoming arcs). And both the
LEFTARC and RIGHTARC operators require two elements to be on the stack to be
applied.

This particular set of operators implements what is known as the arc standard
approach to transition-based parsing (Covington 2001, Nivre 2003). In arc standard
parsing the transition operators only assert relations between elements at the top of
the stack, and once an element has been assigned its head it is removed from the
stack and is not available for further processing. As we’ll see, there are alterna-
tive transition systems which demonstrate different parsing behaviors, but the arc
standard approach is quite effective and is simple to implement.

The speciﬁcation of a transition-based parser is quite simple, based on repre-
senting the current state of the parse as a conﬁguration: the stack, an input buffer
of words or tokens, and a set of relations representing a dependency tree. Parsing
means making a sequence of transitions through the space of possible conﬁgura-
tions. We start with an initial conﬁguration in which the stack contains the ROOT
node, the buffer has the tokens in the sentence, and an empty set of relations repre-
sents the parse. In the ﬁnal goal state, the stack and the word list should be empty,
and the set of relations will represent the ﬁnal parse. Fig. 18.5 gives the algorithm.

function DEPENDENCYPARSE(words) returns dependency tree

arc standard

conﬁguration

[root], [words], []

← {

state
while state not ﬁnal
ORACLE(state)

; initial conﬁguration

}

; choose a transition operator to apply

APPLY(t, state) ; apply it, creating a new state

t
←
state
return state

←

Figure 18.5 A generic transition-based dependency parser

At each step, the parser consults an oracle (we’ll come back to this shortly) that
provides the correct transition operator to use given the current conﬁguration. It then
applies that operator to the current conﬁguration, producing a new conﬁguration.
The process ends when all the words in the sentence have been consumed and the
ROOT node is the only element remaining on the stack.

The efﬁciency of transition-based parsers should be apparent from the algorithm.
The complexity is linear in the length of the sentence since it is based on a single
left to right pass through the words in the sentence. (Each word must ﬁrst be shifted
onto the stack and then later reduced.)

Note that unlike the dynamic programming and search-based approaches dis-
cussed in Chapter 17, this approach is a straightforward greedy algorithm—the or-
acle provides a single choice at each step and the parser proceeds with that choice,
no other options are explored, no backtracking is employed, and a single parse is
returned in the end.

Figure 18.6 illustrates the operation of the parser with the sequence of transitions

398 CHAPTER 18

• DEPENDENCY PARSING

leading to a parse for the following example.

root

obj

det

iobj

compound

Book me the morning

ﬂight

(18.7)

Let’s consider the state of the conﬁguration at Step 2, after the word me has been

pushed onto the stack.

Stack

Word List

Relations

[root, book, me] [the, morning, ﬂight]

The correct operator to apply here is RIGHTARC which assigns book as the head of
me and pops me from the stack resulting in the following conﬁguration.

Stack

Word List

Relations

[root, book] [the, morning, ﬂight] (book

me)

→

After several subsequent applications of the SHIFT and LEFTARC operators, the con-
ﬁguration in Step 6 looks like the following:

Stack
[root, book, the, morning, ﬂight]

Word List
[]

Relations

(book

me)

→

Here, all the remaining words have been passed onto the stack and all that is left
to do is to apply the appropriate reduce operators. In the current conﬁguration, we
employ the LEFTARC operator resulting in the following state.

Stack
[root, book, the, ﬂight]

Word List
[]

Relations

(book
(morning

me)
ﬂight)

→
←

At this point, the parse for this sentence consists of the following structure.

iobj

compound

Book me the morning ﬂight

(18.8)

There are several important things to note when examining sequences such as
the one in Figure 18.6. First, the sequence given is not the only one that might lead
to a reasonable parse. In general, there may be more than one path that leads to the
same result, and due to ambiguity, there may be other transition sequences that lead
to different equally valid parses.

Second, we are assuming that the oracle always provides the correct operator
at each point in the parse—an assumption that is unlikely to be true in practice.
As a result, given the greedy nature of this algorithm, incorrect choices will lead to
incorrect parses since the parser has no opportunity to go back and pursue alternative
choices. Section 18.2.4 will introduce several techniques that allow transition-based
approaches to explore the search space more fully.

18.2

• TRANSITION-BASED DEPENDENCY PARSING

399

Stack Word List
[root]
[root, book]
[root, book, me]
[root, book]
[root, book, the]
[root, book, the, morning]
[root, book, the, morning, ﬂight]
[root, book, the, ﬂight]
[root, book, ﬂight]
[root, book]
[root]

Step
0
1
2
3
4
5
6
7
8
9
10
Figure 18.6 Trace of a transition-based parse.

[book, me, the, morning, ﬂight]
[me, the, morning, ﬂight]
[the, morning, ﬂight]
[the, morning, ﬂight]
[morning, ﬂight]
[ﬂight]
[]
[]
[]
[]
[]

Action
SHIFT

SHIFT
RIGHTARC
SHIFT

SHIFT

SHIFT
LEFTARC
LEFTARC
RIGHTARC
RIGHTARC
Done

Relation Added

(book

me)

→

ﬂight)

(morning
(the
(book
(root

←
→
→

←
ﬂight)
ﬂight)
book)

Finally, for simplicity, we have illustrated this example without the labels on
the dependency relations. To produce labeled trees, we can parameterize the LEFT-
ARC and RIGHTARC operators with dependency labels, as in LEFTARC(NSUBJ) or
RIGHTARC(OBJ). This is equivalent to expanding the set of transition operators from
our original set of three to a set that includes LEFTARC and RIGHTARC operators for
each relation in the set of dependency relations being used, plus an additional one
for the SHIFT operator. This, of course, makes the job of the oracle more difﬁcult
since it now has a much larger set of operators from which to choose.

18.2.1 Creating an Oracle

The oracle for greedily selecting the appropriate transition is trained by supervised
machine learning. As with all supervised machine learning methods, we will need
training data: conﬁgurations annotated with the correct transition to take. We can
draw these from dependency trees. And we need to extract features of the con-
ﬁguration. We’ll introduce neural classiﬁers that represent the conﬁguration via
embeddings, as well as classic systems that use hand-designed features.

Generating Training Data

The oracle from the algorithm in Fig. 18.5 takes as input a conﬁguration and returns a
transition operator. Therefore, to train a classiﬁer, we will need conﬁgurations paired
with transition operators (i.e., LEFTARC, RIGHTARC, or SHIFT). Unfortunately,
treebanks pair entire sentences with their corresponding trees, not conﬁgurations
with transitions.

To generate the required training data, we employ the oracle-based parsing algo-
rithm in a clever way. We supply our oracle with the training sentences to be parsed
along with their corresponding reference parses from the treebank. To produce train-
ing instances, we then simulate the operation of the parser by running the algorithm
and relying on a new training oracle to give us correct transition operators for each
successive conﬁguration.

To see how this works, let’s ﬁrst review the operation of our parser. It begins with
a default initial conﬁguration where the stack contains the ROOT, the input list is just
the list of words, and the set of relations is empty. The LEFTARC and RIGHTARC
operators each add relations between the words at the top of the stack to the set of
relations being accumulated for a given sentence. Since we have a gold-standard
reference parse for each training sentence, we know which dependency relations are
valid for a given sentence. Therefore, we can use the reference parse to guide the

training oracle

400 CHAPTER 18

• DEPENDENCY PARSING

Predicted Action
SHIFT

Stack
[root]
[root, book]
[root, book, the]
[root, book, the, ﬂight]
[root, book, ﬂight]
[root, book, ﬂight, through]
[root, book, ﬂight, through, houston]
[root, book, ﬂight, houston ]
[root, book, ﬂight]
[root, book]
[root]

Step
0
1
2
3
4
5
6
7
8
9
10
Figure 18.7 Generating training items consisting of conﬁguration/predicted action pairs by simulating a parse
with a given reference parse.

Word List
[book, the, ﬂight, through, houston]
[the, ﬂight, through, houston]
[ﬂight, through, houston]
[through, houston]
[through, houston]
[houston]
[]
[]
[]
[]
[]

SHIFT
LEFTARC
RIGHTARC
RIGHTARC
RIGHTARC
Done

SHIFT
LEFTARC
SHIFT

SHIFT

selection of operators as the parser steps through a sequence of conﬁgurations.

To be more precise, given a reference parse and a conﬁguration, the training

oracle proceeds as follows:

• Choose LEFTARC if it produces a correct head-dependent relation given the

reference parse and the current conﬁguration,

• Otherwise, choose RIGHTARC if (1) it produces a correct head-dependent re-
lation given the reference parse and (2) all of the dependents of the word at
the top of the stack have already been assigned,

• Otherwise, choose SHIFT.

The restriction on selecting the RIGHTARC operator is needed to ensure that a
word is not popped from the stack, and thus lost to further processing, before all its
dependents have been assigned to it.

More formally, during training the oracle has access to the following:

• A current conﬁguration with a stack S and a set of dependency relations Rc
• A reference parse consisting of a set of vertices V and a set of dependency

relations Rp

Given this information, the oracle chooses transitions as follows:

LEFTARC(r): if (S1 r S2)
∈
RIGHTARC(r): if (S2 r S1)
SHIFT: otherwise

Rp

Rp and

r(cid:48), w s.t.(S1 r(cid:48) w)

∀

∈

Rp then (S1 r(cid:48) w)

Rc

∈

∈

Let’s walk through the processing of the following example as shown in Fig. 18.7.

root

obj

det

nmod

case

Book the ﬂight through Houston

(18.9)

At Step 1, LEFTARC is not applicable in the initial conﬁguration since it asserts
book), not in the reference answer; RIGHTARC does assert a
a relation, (root
book), however book has not been
relation contained in the ﬁnal answer (root
attached to any of its dependents yet, so we have to defer, leaving SHIFT as the only

→

←

18.2

• TRANSITION-BASED DEPENDENCY PARSING

401

possible action. The same conditions hold in the next two steps. In step 3, LEFTARC
is selected to link the to its head.

Now consider the situation in Step 4.

Stack
[root, book, ﬂight] [through, Houston] (the

Word buffer

Relations

ﬂight)

←

Here, we might be tempted to add a dependency relation between book and ﬂight,
which is present in the reference parse. But doing so now would prevent the later
attachment of Houston since ﬂight would have been removed from the stack. For-
tunately, the precondition on choosing RIGHTARC prevents this choice and we’re
again left with SHIFT as the only viable option. The remaining choices complete the
set of operators needed for this example.

To recap, we derive appropriate training instances consisting of conﬁguration-
transition pairs from a treebank by simulating the operation of a parser in the con-
text of a reference dependency tree. We can deterministically record correct parser
actions at each step as we progress through each training example, thereby creating
the training set we require.

18.2.2 A feature-based classiﬁer

We’ll now introduce two classiﬁers for choosing transitions, here a classic feature-
based algorithm and in the next section a neural classiﬁer using embedding features.
Featured-based classiﬁers generally use the same features we’ve seen with part-
of-speech tagging and partial parsing: Word forms, lemmas, parts of speech, the
head, and the dependency relation to the head. Other features may be relevant for
some languages, for example morphosyntactic features like case marking on subjects
or objects. The features are extracted from the training conﬁgurations, which consist
of the stack, the buffer and the current set of relations. Most useful are features
referencing the top levels of the stack, the words near the front of the buffer, and the
dependency relations already associated with any of those elements.

We’ll use a feature template as we did for sentiment analysis and part-of-speech
tagging. Feature templates allow us to automatically generate large numbers of spe-
ciﬁc features from a training set. For example, consider the following feature tem-
plates that are based on single positions in a conﬁguration.

feature
template

s1.w, op
(cid:104)

s2.w, op
,
(cid:105)
(cid:104)
,
b1.w, op
(cid:105)
(cid:104)

,
s1.t, op
s2.t, op
(cid:105)(cid:104)
(cid:105)
(cid:104)
s1.wt, op
b1.t, op
(cid:104)

(cid:105)(cid:104)

(cid:105)

(cid:105)

(18.10)

Here features are denoted as location.property, where s = stack, b = the word
buffer, w = word forms, t = part-of-speech, and op = operator. Thus the feature for
the word form at the top of the stack would be s1.w, the part of speech tag at the
front of the buffer b1.t, and the concatenated feature s1.wt represents the word form
concatenated with the part of speech of the word at the top of the stack. Consider
applying these templates to the following intermediate conﬁguration derived from a
training oracle for (18.2).

Stack
[root, canceled, ﬂights] [to Houston] (canceled

Word buffer

Relations

(ﬂights

→
(ﬂights

United)
→
morning)
the)

→

402 CHAPTER 18

• DEPENDENCY PARSING

The correct transition here is SHIFT (you should convince yourself of this before
proceeding). The application of our set of feature templates to this conﬁguration
would result in the following set of instantiated features.

(18.11)

s1.w = ﬂights, op = shift
(cid:105)
(cid:104)
s2.w = canceled, op = shift
(cid:105)
(cid:104)
s1.t = NNS, op = shift
(cid:104)
(cid:105)
s2.t = VBD, op = shift
(cid:105)
(cid:104)
b1.w = to, op = shift
(cid:105)
(cid:104)
b1.t = TO, op = shift
(cid:105)
(cid:104)
s1.wt = ﬂightsNNS, op = shift
(cid:105)
(cid:104)

Given that the left and right arc transitions operate on the top two elements of the
stack, features that combine properties from these positions are even more useful.
For example, a feature like s1.t
s2.t concatenates the part of speech tag of the word
at the top of the stack with the tag of the word beneath it.

◦

s1.t
(cid:104)

s2.t = NNSVBD, op = shift
(cid:105)

◦

(18.12)

Given the training data and features, any classiﬁer, like multinomial logistic re-

gression or support vector machines, can be used.

18.2.3 A neural classiﬁer

The oracle can also be implemented by a neural classiﬁer. A standard architecture
is simply to pass the sentence through an encoder, then take the presentation of the
top 2 words on the stack and the ﬁrst word of the buffer, concatenate them, and
present to a feedforward network that predicts the transition to take (Kiperwasser
and Goldberg, 2016; Kulmizev et al., 2019). Fig. 18.8 sketches this model. Learning
can be done with cross-entropy loss.

Figure 18.8 Neural classiﬁer for the oracle for the transition-based parser. The parser takes
the top 2 words on the stack and the ﬁrst word of the buffer, represents them by their encodings
(from running the whole sentence through the encoder), concatenates the embeddings and
passes through a softmax to choose a parser action (transition).

w…s2...s1Input buﬀerStackLEFTARCRIGHTARCSHIFTActionDependencyRelationsw3w2ENCODERw1w2w3w4w5w6Parser OracleSoftmaxFFNws1s2e(w)e(s1)e(s2)18.2

• TRANSITION-BASED DEPENDENCY PARSING

403

18.2.4 Advanced Methods in Transition-Based Parsing

The basic transition-based approach can be elaborated in a number of ways to im-
prove performance by addressing some of the most obvious ﬂaws in the approach.

Alternative Transition Systems

arc eager

The arc-standard transition system described above is only one of many possible sys-
tems. A frequently used alternative is the arc eager transition system. The arc eager
approach gets its name from its ability to assert rightward relations much sooner
than in the arc standard approach. To see this, let’s revisit the arc standard trace of
Example 18.9, repeated here.

root

obj

det

nmod

case

Book the ﬂight through Houston

Consider the dependency relation between book and ﬂight in this analysis. As
is shown in Fig. 18.7, an arc-standard approach would assert this relation at Step 8,
despite the fact that book and ﬂight ﬁrst come together on the stack much earlier at
Step 4. The reason this relation can’t be captured at this point is due to the presence
of the postnominal modiﬁer through Houston. In an arc-standard approach, depen-
dents are removed from the stack as soon as they are assigned their heads. If ﬂight
had been assigned book as its head in Step 4, it would no longer be available to serve
as the head of Houston.

While this delay doesn’t cause any issues in this example, in general the longer
a word has to wait to get assigned its head the more opportunities there are for
something to go awry. The arc-eager system addresses this issue by allowing words
to be attached to their heads as early as possible, before all the subsequent words
dependent on them have been seen. This is accomplished through minor changes to
the LEFTARC and RIGHTARC operators and the addition of a new REDUCE operator.

• LEFTARC: Assert a head-dependent relation between the word at the front of

the input buffer and the word at the top of the stack; pop the stack.

• RIGHTARC: Assert a head-dependent relation between the word on the top of
the stack and the word at the front of the input buffer; shift the word at the
front of the input buffer to the stack.

• SHIFT: Remove the word from the front of the input buffer and push it onto

the stack.

• REDUCE: Pop the stack.

The LEFTARC and RIGHTARC operators are applied to the top of the stack and
the front of the input buffer, instead of the top two elements of the stack as in the
arc-standard approach. The RIGHTARC operator now moves the dependent to the
stack from the buffer rather than removing it, thus making it available to serve as the
head of following words. The new REDUCE operator removes the top element from
the stack. Together these changes permit a word to be eagerly assigned its head and
still allow it to serve as the head for later dependents. The trace shown in Fig. 18.9
illustrates the new decision sequence for this example.

In addition to demonstrating the arc-eager transition system, this example demon-
strates the power and ﬂexibility of the overall transition-based approach. We were
able to swap in a new transition system without having to make any changes to the

404 CHAPTER 18

• DEPENDENCY PARSING

Action

Relation Added
book)
(root

Stack Word List
[root]
[root, book]
[root, book, the]
[root, book]
[root, book, ﬂight]
[root, book, ﬂight, through]
[root, book, ﬂight]
[root, book, ﬂight, houston]
[root, book, ﬂight]
[root, book]
[root]

Step
0
1
2
3
4
5
6
7
8
9
10
Figure 18.9 A processing trace of Book the ﬂight through Houston using the arc-eager transition operators.

[book, the, ﬂight, through, houston] RIGHTARC
[the, ﬂight, through, houston]
[ﬂight, through, houston]
[ﬂight, through, houston]
[through, houston]
[houston]
[houston]
[]
[]
[]
[]

SHIFT
LEFTARC
RIGHTARC
SHIFT
LEFTARC
RIGHTARC
REDUCE

(through
(ﬂight

REDUCE
Done

ﬂight)
ﬂight)

(the
(book

←
→

←
→

houston)
houston)

REDUCE

→

beam search

beam width

underlying parsing algorithm. This ﬂexibility has led to the development of a di-
verse set of transition systems that address different aspects of syntax and semantics
including: assigning part of speech tags (Choi and Palmer, 2011a), allowing the
generation of non-projective dependency structures (Nivre, 2009), assigning seman-
tic roles (Choi and Palmer, 2011b), and parsing texts containing multiple languages
(Bhat et al., 2017).

Beam Search

The computational efﬁciency of the transition-based approach discussed earlier de-
rives from the fact that it makes a single pass through the sentence, greedily making
decisions without considering alternatives. Of course, this is also a weakness – once
a decision has been made it can not be undone, even in the face of overwhelming
evidence arriving later in a sentence. We can use beam search to explore alternative
decision sequences. Recall from Chapter 10 that beam search uses a breadth-ﬁrst
search strategy with a heuristic ﬁlter that prunes the search frontier to stay within a
ﬁxed-size beam width.

In applying beam search to transition-based parsing, we’ll elaborate on the al-
gorithm given in Fig. 18.5. Instead of choosing the single best transition operator
at each iteration, we’ll apply all applicable operators to each state on an agenda and
then score the resulting conﬁgurations. We then add each of these new conﬁgura-
tions to the frontier, subject to the constraint that there has to be room within the
beam. As long as the size of the agenda is within the speciﬁed beam width, we can
add new conﬁgurations to the agenda. Once the agenda reaches the limit, we only
add new conﬁgurations that are better than the worst conﬁguration on the agenda
(removing the worst element so that we stay within the limit). Finally, to insure that
we retrieve the best possible state on the agenda, the while loop continues as long as
there are non-ﬁnal states on the agenda.

The beam search approach requires a more elaborate notion of scoring than we
used with the greedy algorithm. There, we assumed that the oracle would be a
supervised classiﬁer that chose the best transition operator based on features of the
current conﬁguration. This choice can be viewed as assigning a score to all the
possible transitions and picking the best one.

ˆT (c) = argmax Score(t, c)

With beam search we are now searching through the space of decision sequences,
so it makes sense to base the score for a conﬁguration on its entire history. So we
can deﬁne the score for a new conﬁguration as the score of its predecessor plus the

18.3

• GRAPH-BASED DEPENDENCY PARSING

405

score of the operator used to produce it.

ConﬁgScore(c0) = 0.0
ConﬁgScore(ci) = ConﬁgScore(ci

1) + Score(ti, ci

1)

−

−

This score is used both in ﬁltering the agenda and in selecting the ﬁnal answer. The
new beam search version of transition-based parsing is given in Fig. 18.10.

function DEPENDENCYBEAMPARSE(words, width) returns dependency tree

state
agenda

← {

state
(cid:105)

← (cid:104)

[root], [words], [], 0.0

;initial conﬁguration

;initial agenda

}

while agenda contains non-ﬁnal states

newagenda
for each state
for all
{
|
child
←
newagenda

t

← (cid:104)(cid:105)
∈
t
∈
APPLY(t, state)

agenda do
VALIDOPERATORS(state)

do

}

ADDTOBEAM(child, newagenda, width)

agenda

newagenda
←
return BESTOF(agenda)

←

function ADDTOBEAM(state, agenda, width) returns updated agenda

if LENGTH(agenda) < width then

agenda

INSERT(state, agenda)
else if SCORE(state) > SCORE(WORSTOF(agenda))

←

agenda
←
agenda
←
return agenda

REMOVE(WORSTOF(agenda))
INSERT(state, agenda)

Figure 18.10 Beam search applied to transition-based dependency parsing.

18.3 Graph-Based Dependency Parsing

Graph-based methods are the second important family of dependency parsing algo-
rithms. Graph-based parsers are more accurate than transition-based parsers, espe-
cially on long sentences; transition-based methods have trouble when the heads are
very far from the dependents (McDonald and Nivre, 2011). Graph-based methods
avoid this difﬁculty by scoring entire trees, rather than relying on greedy local de-
cisions. Furthermore, unlike transition-based approaches, graph-based parsers can
produce non-projective trees. Although projectivity is not a signiﬁcant issue for
English, it is deﬁnitely a problem for many of the world’s languages.

Graph-based dependency parsers search through the space of possible trees for a
given sentence for a tree (or trees) that maximize some score. These methods encode
the search space as directed graphs and employ methods drawn from graph theory
to search the space for optimal solutions. More formally, given a sentence S we’re
looking for the best dependency tree in Gs, the space of all possible trees for that
sentence, that maximizes some score.

ˆT (S) = argmax

G

S

t

∈

Score(t, S)

406 CHAPTER 18

• DEPENDENCY PARSING

edge-factored

We’ll make the simplifying assumption that this score can be edge-factored,
meaning that the overall score for a tree is the sum of the scores of each of the scores
of the edges that comprise the tree.

Score(t, S) =

Score(e)

t
e
(cid:88)
∈
Graph-based algorithms have to solve two problems: (1) assigning a score to
each edge, and (2) ﬁnding the best parse tree given the scores of all potential edges.
In the next few sections we’ll introduce solutions to these two problems, beginning
with the second problem of ﬁnding trees, and then giving a feature-based and a
neural algorithm for solving the ﬁrst problem of assigning scores.

18.3.1 Parsing via ﬁnding the maximum spanning tree

In graph-based parsing, given a sentence S we start by creating a graph G which is a
fully-connected, weighted, directed graph where the vertices are the input words and
the directed edges represent all possible head-dependent assignments. We’ll include
an additional ROOT node with outgoing edges directed at all of the other vertices.
The weights of each edge in G reﬂect the score for each possible head-dependent
relation assigned by some scoring algorithm.

It turns out that ﬁnding the best dependency parse for S is equivalent to ﬁnding
the maximum spanning tree over G. A spanning tree over a graph G is a subset
of G that is a tree and covers all the vertices in G; a spanning tree over G that starts
from the ROOT is a valid parse of S. A maximum spanning tree is the spanning tree
with the highest score. Thus a maximum spanning tree of G emanating from the
ROOT is the optimal dependency parse for the sentence.

A directed graph for the example Book that ﬂight is shown in Fig. 18.11, with the
maximum spanning tree corresponding to the desired parse shown in blue. For ease
of exposition, we’ll describe here the algorithm for unlabeled dependency parsing.

maximum
spanning tree

Figure 18.11

Initial rooted, directed graph for Book that ﬂight.

Before describing the algorithm it’s useful to consider two intuitions about di-
rected graphs and their spanning trees. The ﬁrst intuition begins with the fact that
every vertex in a spanning tree has exactly one incoming edge. It follows from this
that every connected component of a spanning tree (i.e., every set of vertices that
are linked to each other by paths over edges) will also have one incoming edge.
The second intuition is that the absolute values of the edge scores are not critical
to determining its maximum spanning tree. Instead, it is the relative weights of the
edges entering each vertex that matters. If we were to subtract a constant amount
from each edge entering a given vertex it would have no impact on the choice of

rootBookthatﬂight124456875718.3

• GRAPH-BASED DEPENDENCY PARSING

407

the maximum spanning tree since every possible spanning tree would decrease by
exactly the same amount.

The ﬁrst step of the algorithm itself is quite straightforward. For each vertex
in the graph, an incoming edge (representing a possible head assignment) with the
highest score is chosen. If the resulting set of edges produces a spanning tree then
we’re done. More formally, given the original fully-connected graph G = (V, E), a
subgraph T = (V, F) is a spanning tree if it has no cycles and each vertex (other than
the root) has exactly one edge entering it. If the greedy selection process produces
such a tree then it is the best possible one.

Unfortunately, this approach doesn’t always lead to a tree since the set of edges
selected may contain cycles. Fortunately, in yet another case of multiple discovery,
there is a straightforward way to eliminate cycles generated during the greedy se-
lection phase. Chu and Liu (1965) and Edmonds (1967) independently developed
an approach that begins with greedy selection and follows with an elegant recursive
cleanup phase that eliminates cycles.

The cleanup phase begins by adjusting all the weights in the graph by subtracting
the score of the maximum edge entering each vertex from the score of all the edges
entering that vertex. This is where the intuitions mentioned earlier come into play.
We have scaled the values of the edges so that the weights of the edges in the cycle
have no bearing on the weight of any of the possible spanning trees. Subtracting the
value of the edge with maximum weight from each edge entering a vertex results
in a weight of zero for all of the edges selected during the greedy selection phase,
including all of the edges involved in the cycle.

Having adjusted the weights, the algorithm creates a new graph by selecting a
cycle and collapsing it into a single new node. Edges that enter or leave the cycle
are altered so that they now enter or leave the newly collapsed node. Edges that do
not touch the cycle are included and edges within the cycle are dropped.

Now, if we knew the maximum spanning tree of this new graph, we would have
what we need to eliminate the cycle. The edge of the maximum spanning tree di-
rected towards the vertex representing the collapsed cycle tells us which edge to
delete in order to eliminate the cycle. How do we ﬁnd the maximum spanning tree
of this new graph? We recursively apply the algorithm to the new graph. This will
either result in a spanning tree or a graph with a cycle. The recursions can continue
as long as cycles are encountered. When each recursion completes we expand the
collapsed vertex, restoring all the vertices and edges from the cycle with the excep-
tion of the single edge to be deleted.

Putting all this together, the maximum spanning tree algorithm consists of greedy
edge selection, re-scoring of edge costs and a recursive cleanup phase when needed.
The full algorithm is shown in Fig. 18.12.

Fig. 18.13 steps through the algorithm with our Book that ﬂight example. The
ﬁrst row of the ﬁgure illustrates greedy edge selection with the edges chosen shown
in blue (corresponding to the set F in the algorithm). This results in a cycle between
that and ﬂight. The scaled weights using the maximum value entering each node are
shown in the graph to the right.

Collapsing the cycle between that and ﬂight to a single node (labelled tf) and
recursing with the newly scaled costs is shown in the second row. The greedy selec-
tion step in this recursion yields a spanning tree that links root to book, as well as an
edge that links book to the contracted node. Expanding the contracted node, we can
see that this edge corresponds to the edge from book to ﬂight in the original graph.
This in turn tells us which edge to drop to eliminate the cycle.

408 CHAPTER 18

• DEPENDENCY PARSING

function MAXSPANNINGTREE(G=(V,E), root, score) returns spanning tree

F
[]
←
T’
[]
←
score’
[]
for each v

←

argmaxe=(u,v)
∈

E score[e]

V do

←

∈
bestInEdge
F
F
∪
for each e=(u,v)
score’[e]

←

←

bestInEdge

E do
score[e]

∈

−

score[bestInEdge]

if T=(V,F) is a spanning tree then return it
else
C
G’
T’
T
return T

a cycle in F
CONTRACT(G, C)
MAXSPANNINGTREE(G’, root, score’)
EXPAND(T’, C)

←
←
←
←

function CONTRACT(G, C) returns contracted graph

function EXPAND(T, C) returns expanded graph

Figure 18.12 The Chu-Liu Edmonds algorithm for ﬁnding a maximum spanning tree in a
weighted directed graph.

On arbitrary directed graphs, this version of the CLE algorithm runs in O(mn)
time, where m is the number of edges and n is the number of nodes. Since this par-
ticular application of the algorithm begins by constructing a fully connected graph
m = n2 yielding a running time of O(n3). Gabow et al. (1986) present a more efﬁ-
cient implementation with a running time of O(m + nlogn).

18.3.2 A feature-based algorithm for assigning scores

Recall that given a sentence, S, and a candidate tree, T , edge-factored parsing models
make the simpliﬁcation that the score for the tree is the sum of the scores of the edges
that comprise the tree:

score(S, T ) =

score(S, e)

T
(cid:88)e
∈

In a feature-based algorithm we compute the edge score as a weighted sum of fea-
tures extracted from it:

Or more succinctly.

N

score(S, e) =

wi fi(S, e)

(cid:88)i=1

score(S, e) = w

f

·

Given this formulation, we need to identify relevant features and train the weights.
The features (and feature combinations) used to train edge-factored models mir-

ror those used in training transition-based parsers, such as

18.3

• GRAPH-BASED DEPENDENCY PARSING

409

Figure 18.13 Chu-Liu-Edmonds graph-based example for Book that ﬂight

• Wordforms, lemmas, and parts of speech of the headword and its dependent.

• Corresponding features from the contexts before, after and between the words.

• Word embeddings.

• The dependency relation itself.

• The direction of the relation (to the right or left).

• The distance from the head to the dependent.

inference-based
learning

Given a set of features, our next problem is to learn a set of weights correspond-
ing to each. Unlike many of the learning problems discussed in earlier chapters,
here we are not training a model to associate training items with class labels, or
parser actions. Instead, we seek to train a model that assigns higher scores to cor-
rect trees than to incorrect ones. An effective framework for problems like this is to
use inference-based learning combined with the perceptron learning rule. In this
framework, we parse a sentence (i.e, perform inference) from the training set using
some initially random set of initial weights. If the resulting parse matches the cor-
responding tree in the training data, we do nothing to the weights. Otherwise, we
ﬁnd those features in the incorrect parse that are not present in the reference parse
and we lower their weights by a small amount based on the learning rate. We do this
incrementally for each sentence in our training data until the weights converge.

rootBooktfrootBookthatﬂight0-3-4-7-1-6-2rootBook12that7ﬂight8-4-30-2-6-1-700rootBook0tf-10-3-4-7-1-6-2rootBook12that7ﬂight81244568757Deleted from cycle410 CHAPTER 18

• DEPENDENCY PARSING

18.3.3 A neural algorithm for assigning scores

State-of-the-art graph-based multilingual parsers are based on neural networks. In-
stead of extracting hand-designed features to represent each edge between words wi
and w j, these parsers run the sentence through an encoder, and then pass the encoded
representation of the two words wi and w j through a network that estimates a score
for the edge i

j.

→

ﬂight) in the biafﬁne parser of
Figure 18.14 Computing scores for a single edge (book
Dozat and Manning (2017); Dozat et al. (2017). The parser uses distinct feedforward net-
works to turn the encoder output for each word into a head and dependent representation for
the word. The biafﬁne function turns the head embedding of the head and the dependent
embedding of the dependent into a score for the dependency edge.

→

Here we’ll sketch the biafﬁne algorithm of Dozat and Manning (2017) and Dozat
et al. (2017) shown in Fig. 18.14, drawing on the work of Gr¨unewald et al. (2021)
who tested many versions of the algorithm via their STEPS system. The algorithm
ﬁrst runs the sentence X = x1, ..., xn through an encoder to produce a contextual
embedding representation for each token R = r1, ..., rn. The embedding for each
token is now passed through two separate feedforward networks, one to produce a
representation of this token as a head, and one to produce a representation of this
token as a dependent:

i = FFNhead(ri)
hhead
hdep
i = FFNdep(ri)

(18.13)

(18.14)

Now to assign a score to the directed edge i
dent), we feed the head representation of i, hhead
of j, hdep
, into a biafﬁne scoring function:

→
i

j

j, (wi is the head and w j is the depen-
, and the dependent representation

Score(i

→

j) = Biaff(hhead

i

, hdep
j

)

Biaff(x, y) = x(cid:124)Uy + W(x

y) + b

⊕

(18.15)

(18.16)

bookthatﬂightr1score(h1head, h3dep)BiaﬃnebENCODERUh1 headFFNheadFFNheadFFNdepFFNdeph1 depFFNheadFFNdeph2 headh2 deph3 headh3 depWr2r3∑+18.4

• EVALUATION

411

where U, W, and b are weights learned by the model. The idea of using a biafﬁne
function is to allow the system to learn multiplicative interactions between the vec-
tors x and y.

If we pass Score(i

j) through a softmax, we end up with a probability distri-

bution, for each token j, over potential heads i (all other tokens in the sentence):

→

p(i

→

j) = softmax([Score(k

j);

k
∀

→

= j, 1

k

≤

≤

n])

(18.17)

This probability can then be passed to the maximum spanning tree algorithm of
Section 18.3.1 to ﬁnd the best tree.

→

j) classiﬁer is trained by optimizing the cross-entropy loss.

This p(i
Note that the algorithm as we’ve described it is unlabeled. To make this into
a labeled algorithm, the Dozat and Manning (2017) algorithm actually trains two
classiﬁers. The ﬁrst classiﬁer, the edge-scorer, the one we described above, assigns
j) to each word wi and w j. Then the Maximum Spanning Tree
a probability p(i
algorithm is run to get a single best dependency parse tree for the second. We then
apply a second classiﬁer, the label-scorer, whose job is to ﬁnd the maximum prob-
ability label for each edge in this parse. This second classiﬁer has the same form
as (18.15-18.17), but instead of being trained to predict with binary softmax the
probability of an edge existing between two words, it is trained with a softmax over
dependency labels to predict the dependency label between the words.

→

18.4 Evaluation

As with phrase structure-based parsing, the evaluation of dependency parsers pro-
ceeds by measuring how well they work on a test set. An obvious metric would be
exact match (EM)—how many sentences are parsed correctly. This metric is quite
pessimistic, with most sentences being marked wrong. Such measures are not ﬁne-
grained enough to guide the development process. Our metrics need to be sensitive
enough to tell if actual improvements are being made.

For these reasons, the most common method for evaluating dependency parsers
are labeled and unlabeled attachment accuracy. Labeled attachment refers to the
proper assignment of a word to its head along with the correct dependency relation.
Unlabeled attachment simply looks at the correctness of the assigned head, ignor-
ing the dependency relation. Given a system output and a corresponding reference
parse, accuracy is simply the percentage of words in an input that are assigned the
correct head with the correct relation. These metrics are usually referred to as the
labeled attachment score (LAS) and unlabeled attachment score (UAS). Finally, we
can make use of a label accuracy score (LS), the percentage of tokens with correct
labels, ignoring where the relations are coming from.

As an example, consider the reference parse and system parse for the following

example shown in Fig. 18.15.

(18.18) Book me the ﬂight through Houston.

The system correctly ﬁnds 4 of the 6 dependency relations present in the reference
parse and receives an LAS of 2/3. However, one of the 2 incorrect relations found
by the system holds between book and ﬂight, which are in a head-dependent relation
in the reference parse; the system therefore achieves a UAS of 5/6.

Beyond attachment scores, we may also be interested in how well a system is
performing on a particular kind of dependency relation, for example NSUBJ, across

(cid:54)
412 CHAPTER 18

• DEPENDENCY PARSING

root

obj

iobj

det

nmod

case

root

xcomp

nsubj

det

nmod

case

Book me the

ﬂight
(a) Reference

through Houston

Book me the

ﬂight
(b) System

through Houston

Figure 18.15 Reference and system parses for Book me the ﬂight through Houston, resulting in an LAS of
2/3 and an UAS of 5/6.

a development corpus. Here we can make use of the notions of precision and recall
introduced in Chapter 8, measuring the percentage of relations labeled NSUBJ by
the system that were correct (precision), and the percentage of the NSUBJ relations
present in the development set that were in fact discovered by the system (recall).
We can employ a confusion matrix to keep track of how often each dependency type
was confused for another.

18.5 Summary

This chapter has introduced the concept of dependency grammars and dependency
parsing. Here’s a summary of the main points that we covered:

• In dependency-based approaches to syntax, the structure of a sentence is de-
scribed in terms of a set of binary relations that hold between the words in a
sentence. Larger notions of constituency are not directly encoded in depen-
dency analyses.

• The relations in a dependency structure capture the head-dependent relation-

ship among the words in a sentence.

• Dependency-based analysis provides information directly useful in further
language processing tasks including information extraction, semantic parsing
and question answering.

• Transition-based parsing systems employ a greedy stack-based algorithm to

create dependency structures.

• Graph-based methods for creating dependency structures are based on the use

of maximum spanning tree methods from graph theory.

• Both transition-based and graph-based approaches are developed using super-

vised machine learning techniques.

• Treebanks provide the data needed to train these systems. Dependency tree-
banks can be created directly by human annotators or via automatic transfor-
mation from phrase-structure treebanks.

• Evaluation of dependency parsers is based on labeled and unlabeled accuracy

scores as measured against withheld development and test corpora.

BIBLIOGRAPHICAL AND HISTORICAL NOTES

413

Bibliographical and Historical Notes

The dependency-based approach to grammar is much older than the relatively recent
phrase-structure or constituency grammars, which date only to the 20th century. De-
pendency grammar dates back to the Indian grammarian P¯an. ini sometime between
the 7th and 4th centuries BCE, as well as the ancient Greek linguistic traditions.
Contemporary theories of dependency grammar all draw heavily on the 20th cen-
tury work of Tesni`ere (1959).

Automatic parsing using dependency grammars was ﬁrst introduced into compu-
tational linguistics by early work on machine translation at the RAND Corporation
led by David Hays. This work on dependency parsing closely paralleled work on
constituent parsing and made explicit use of grammars to guide the parsing process.
After this early period, computational work on dependency parsing remained inter-
mittent over the following decades. Notable implementations of dependency parsers
for English during this period include Link Grammar (Sleator and Temperley, 1993),
Constraint Grammar (Karlsson et al., 1995), and MINIPAR (Lin, 2003).

Dependency parsing saw a major resurgence in the late 1990’s with the appear-
ance of large dependency-based treebanks and the associated advent of data driven
approaches described in this chapter. Eisner (1996) developed an efﬁcient dynamic
programming approach to dependency parsing based on bilexical grammars derived
from the Penn Treebank. Covington (2001) introduced the deterministic word by
word approach underlying current transition-based approaches. Yamada and Mat-
sumoto (2003) and Kudo and Matsumoto (2002) introduced both the shift-reduce
paradigm and the use of supervised machine learning in the form of support vector
machines to dependency parsing.

Transition-based parsing is based on the shift-reduce parsing algorithm orig-
inally developed for analyzing programming languages (Aho and Ullman, 1972).
Shift-reduce parsing also makes use of a context-free grammar. Input tokens are
successively shifted onto the stack and the top two elements of the stack are matched
against the right-hand side of the rules in the grammar; when a match is found the
matched elements are replaced on the stack (reduced) by the non-terminal from the
left-hand side of the rule being matched. In transition-based dependency parsing
we skip the grammar, and alter the reduce operation to add a dependency relation
between a word and its head.

Nivre (2003) deﬁned the modern, deterministic, transition-based approach to
dependency parsing. Subsequent work by Nivre and his colleagues formalized and
analyzed the performance of numerous transition systems, training methods, and
methods for dealing with non-projective language (Nivre and Scholz 2004, Nivre
2006, Nivre and Nilsson 2005, Nivre et al. 2007b, Nivre 2007). The neural ap-
proach was pioneered by Chen and Manning (2014) and extended by Kiperwasser
and Goldberg (2016); Kulmizev et al. (2019).

The graph-based maximum spanning tree approach to dependency parsing was
introduced by McDonald et al. 2005a, McDonald et al. 2005b. The neural classiﬁer
was introduced by (Kiperwasser and Goldberg, 2016).

The long-running Prague Dependency Treebank project (Hajiˇc, 1998) is the most
signiﬁcant effort to directly annotate a corpus with multiple layers of morphological,
syntactic and semantic information. PDT 3.0 contains over 1.5 M tokens (Bejˇcek
et al., 2013).

Universal Dependencies (UD) (de Marneffe et al., 2021) is an open community

414 CHAPTER 18

• DEPENDENCY PARSING

project to create a framework for dependency treebank annotation, with nearly 200
treebanks in over 100 languages. The UD annotation scheme evolved out of several
distinct efforts including Stanford dependencies (de Marneffe et al. 2006, de Marn-
effe and Manning 2008, de Marneffe et al. 2014), Google’s universal part-of-speech
tags (Petrov et al., 2012), and the Interset interlingua for morphosyntactic tagsets
(Zeman, 2008).

The Conference on Natural Language Learning (CoNLL) has conducted an in-
ﬂuential series of shared tasks related to dependency parsing over the years (Buch-
holz and Marsi 2006, Nivre et al. 2007a, Surdeanu et al. 2008, Hajiˇc et al. 2009).
More recent evaluations have focused on parser robustness with respect to morpho-
logically rich languages (Seddah et al., 2013), and non-canonical language forms
such as social media, texts, and spoken language (Petrov and McDonald, 2012).
Choi et al. (2015) presents a performance analysis of 10 dependency parsers across
a range of metrics, as well as DEPENDABLE, a robust parser evaluation tool.

Exercises

CHAPTER

19 Information

Relations, Events, and Time

Extraction:

Time will explain.
Jane Austen, Persuasion

Imagine that you are an analyst with an investment ﬁrm that tracks airline stocks.
You’re given the task of determining the relationship (if any) between airline an-
nouncements of fare increases and the behavior of their stocks the next day. His-
torical data about stock prices is easy to come by, but what about the airline an-
nouncements? You will need to know at least the name of the airline, the nature of
the proposed fare hike, the dates of the announcement, and possibly the response of
other airlines. Fortunately, these can be all found in news articles like this one:

Citing high fuel prices, United Airlines said Friday it has increased fares
by $6 per round trip on ﬂights to some cities also served by lower-
cost carriers. American Airlines, a unit of AMR Corp., immediately
matched the move, spokesman Tim Wagner said. United, a unit of UAL
Corp., said the increase took effect Thursday and applies to most routes
where it competes against discount carriers, such as Chicago to Dallas
and Denver to San Francisco.

This chapter presents techniques for extracting limited kinds of semantic con-
tent from text. This process of information extraction (IE) turns the unstructured
information embedded in texts into structured data, for example for populating a
relational database to enable further processing.

We begin with the task of relation extraction: ﬁnding and classifying semantic
relations among entities mentioned in a text, like child-of (X is the child-of Y), or
part-whole or geospatial relations. Relation extraction has close links to populat-
ing a relational database, and knowledge graphs, datasets of structured relational
knowledge, are a useful way for search engines to present information to users.

Next, we discuss event extraction, the task of ﬁnding events in which these en-
tities participate, like, in our sample text, the fare increases by United and American
and the reporting events said and cite. Events are also situated in time, occurring at
a particular date or time, and events can be related temporally, happening before or
after or simultaneously with each other. We’ll need to recognize temporal expres-
sions like Friday, Thursday or two days from now and times such as 3:30 P.M., and
normalize them onto speciﬁc calendar dates or times. We’ll need to link Friday to
the time of United’s announcement, Thursday to the previous day’s fare increase,
and we’ll need to produce a timeline in which United’s announcement follows the
fare increase and American’s announcement follows both of those events.

The related task of template ﬁlling is to ﬁnd recurring stereotypical events or
situations in documents and ﬁll in the template slots. These slot-ﬁllers may consist
of text segments extracted directly from the text, or concepts like times, amounts, or
ontology entities that have been inferred through additional processing. Our airline

information
extraction

relation
extraction

knowledge
graphs

event
extraction

template ﬁlling

416 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

Figure 19.1 The 17 relations used in the ACE relation extraction task.

text presents such a stereotypical situation since airlines often raise fares and then
wait to see if competitors follow along. Here we can identify United as a lead air-
line that initially raised its fares, $6 as the amount, Thursday as the increase date,
and American as an airline that followed along, leading to a ﬁlled template like the
following:

FARE-RAISE ATTEMPT:

LEAD AIRLINE:
AMOUNT:
EFFECTIVE DATE:
FOLLOWER:

UNITED AIRLINES
$6
2006-10-26
AMERICAN AIRLINES















19.1 Relation Extraction

Let’s assume that we have detected the named entities in our sample text (perhaps
using the techniques of Chapter 8), and would like to discern the relationships that
exist among the detected entities:

Citing high fuel prices, [ORG United Airlines] said [TIME Friday] it
has increased fares by [MONEY $6] per round trip on ﬂights to some
cities also served by lower-cost carriers. [ORG American Airlines], a
unit of [ORG AMR Corp.], immediately matched the move, spokesman
[PER Tim Wagner] said. [ORG United], a unit of [ORG UAL Corp.],
said the increase took effect [TIME Thursday] and applies to most
routes where it competes against discount carriers, such as [LOC Chicago]
to [LOC Dallas] and [LOC Denver] to [LOC San Francisco].

The text tells us, for example, that Tim Wagner is a spokesman for American
Airlines, that United is a unit of UAL Corp., and that American is a unit of AMR.
These binary relations are instances of more generic relations such as part-of or
employs that are fairly frequent in news-style texts. Figure 19.1 lists the 17 relations
used in the ACE relation extraction evaluations and Fig. 19.2 shows some sample
relations. We might also extract more domain-speciﬁc relation such as the notion of
an airline route. For example from this text we can conclude that United has routes
to Chicago, Dallas, Denver, and San Francisco.

ARTIFACTGENERALAFFILIATIONORGAFFILIATIONPART-WHOLEPERSON-SOCIALPHYSICALLocatedNearBusinessFamilyLasting PersonalCitizen-Resident-Ethnicity-ReligionOrg-Location-OriginFounderEmploymentMembershipOwnershipStudent-AlumInvestorUser-Owner-Inventor-ManufacturerGeographicalSubsidiarySports-Affiliation19.1

• RELATION EXTRACTION

417

Relations
Physical-Located
Part-Whole-Subsidiary
Person-Social-Family
Org-AFF-Founder
Figure 19.2 Semantic relations with examples and the named entity types they involve.

Examples
He was in Tennessee
XYZ, the parent company of ABC
Yoko’s husband John
Steve Jobs, co-founder of Apple...

Types
PER-GPE
ORG-ORG
PER-PER
PER-ORG

Sets of relations have been deﬁned for many other domains as well. For example
UMLS, the Uniﬁed Medical Language System from the US National Library of
Medicine has a network that deﬁnes 134 broad subject categories, entity types, and
54 relations between the entities, such as the following:

Relation
Entity
disrupts
Injury
location-of Biologic Function
Bodily Location
Anatomical Structure
part-of
Pharmacologic Substance causes
Pharmacologic Substance treats

Organism
Pathological Function
Pathologic Function

Entity
Physiological Function

Given a medical sentence like this one:

(19.1) Doppler echocardiography can be used to diagnose left anterior descending

artery stenosis in patients with type 2 diabetes

We could thus extract the UMLS relation:

Echocardiography, Doppler Diagnoses Acquired stenosis

infoboxes

RDF

RDF triple

Wikipedia also offers a large supply of relations, drawn from infoboxes, struc-
tured tables associated with certain Wikipedia articles. For example, the Wikipedia
infobox for Stanford includes structured facts like state = "California" or
president = "Marc Tessier-Lavigne". These facts can be turned into rela-
tions like president-of or located-in. or into relations in a metalanguage called RDF
(Resource Description Framework). An RDF triple is a tuple of entity-relation-
entity, called a subject-predicate-object expression. Here’s a sample RDF triple:

subject
Golden Gate Park location

predicate object

San Francisco

Freebase

For example the crowdsourced DBpedia (Bizer et al., 2009) is an ontology de-
rived from Wikipedia containing over 2 billion RDF triples. Another dataset from
Wikipedia infoboxes, Freebase (Bollacker et al., 2008), now part of Wikidata (Vrandeˇci´c
and Kr¨otzsch, 2014), has relations between people and their nationality, or locations,
and other locations they are contained in.

is-a

hypernym

WordNet or other ontologies offer useful ontological relations that express hier-
archical relations between words or concepts. For example WordNet has the is-a or
hypernym relation between classes,

Giraffe is-a ruminant is-a ungulate is-a mammal is-a vertebrate ...

WordNet also has Instance-of relation between individuals and classes, so that for
example San Francisco is in the Instance-of relation with city. Extracting these
relations is an important step in extending or building ontologies.

Finally, there are large datasets that contain sentences hand-labeled with their
relations, designed for training and testing relation extractors. The TACRED dataset
(Zhang et al., 2017) contains 106,264 examples of relation triples about particular
people or organizations, labeled in sentences from news and web text drawn from the

418 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

annual TAC Knowledge Base Population (TAC KBP) challenges. TACRED contains
41 relation types (like per:city of birth, org:subsidiaries, org:member of, per:spouse),
plus a no relation tag; examples are shown in Fig. 19.3. About 80% of all examples
are annotated as no relation; having sufﬁcient negative data is important for training
supervised classiﬁers.

Example
Carey will succeed Cathleen P. Black, who held the position for 15
years and will take on a new role as chairwoman of Hearst Maga-
zines, the company said.
Irene Morgan Kirkaldy, who was born and reared in Baltimore, lived
on Long Island and ran a child-care center in Queens with her second
husband, Stanley Kirkaldy.
Baldwin declined further comment, and said JetBlue chief executive
Dave Barger was unavailable.
Figure 19.3 Example sentences and labels from the TACRED dataset (Zhang et al., 2017).

PERSON/CITY
Relation: per:city of birth

Types: PERSON/TITLE
Relation: no relation

Entity Types & Label
PERSON/TITLE
Relation: per:title

A standard dataset was also produced for the SemEval 2010 Task 8, detecting
relations between nominals (Hendrickx et al., 2009). The dataset has 10,717 exam-
ples, each with a pair of nominals (untyped) hand-labeled with one of 9 directed
relations like product-producer ( a factory manufactures suits) or component-whole
(my apartment has a large kitchen).

19.2 Relation Extraction Algorithms

There are ﬁve main classes of algorithms for relation extraction: handwritten pat-
terns, supervised machine learning, semi-supervised (via bootstrapping or dis-
tant supervision), and unsupervised. We’ll introduce each of these in the next
sections.

19.2.1 Using Patterns to Extract Relations

The earliest and still common algorithm for relation extraction is lexico-syntactic
patterns, ﬁrst developed by Hearst (1992a), and therefore often called Hearst pat-
terns. Consider the following sentence:

Hearst patterns

Agar is a substance prepared from a mixture of red algae, such as Ge-
lidium, for laboratory or industrial use.

Hearst points out that most human readers will not know what Gelidium is, but that
they can readily infer that it is a kind of (a hyponym of) red algae, whatever that is.
She suggests that the following lexico-syntactic pattern

NP0 such as NP1{

, NP2 . . . , (and

, i
or)NPi}
|

≥

1

implies the following semantics

allowing us to infer

NPi, i

∀

≥

1, hyponym(NPi, NP0)

hyponym(Gelidium, red algae)

(19.2)

(19.3)

(19.4)

19.2

• RELATION EXTRACTION ALGORITHMS

419

NP
,
*
, NP
or) other NPH
(and
}
{
}
{
|
NP,
NPH such as
NP
and)
(or
*
}
{
}
|
{
NP
and)
(or
*
such NPH as
NP,
}
}
{
|
{
and)
(or
*
NP,
including
,
NPH {
}
|
{
}
{
and)
(or
*
NP
especially
,
NPH {
}
|
{
}
{
Figure 19.4 Hand-built lexico-syntactic patterns for ﬁnding hypernyms, using
1992a, Hearst 1998).

temples, treasuries, and other important civic buildings
red algae such as Gelidium
such authors as Herrick, Goldsmith, and Shakespeare
common-law countries, including Canada and England
European countries, especially France, England, and Spain
to mark optionality (Hearst

NP
NP

}
}

{}

Figure 19.4 shows ﬁve patterns Hearst (1992a, 1998) suggested for inferring
the hyponym relation; we’ve shown NPH as the parent/hyponym. Modern versions
of the pattern-based approach extend it by adding named entity constraints. For
example if our goal is to answer questions about “Who holds what ofﬁce in which
organization?”, we can use patterns like the following:

PER, POSITION of ORG:
George Marshall, Secretary of State of the United States

PER (named
chose
|
Truman appointed Marshall Secretary of State

etc.) PER Prep? POSITION
|

appointed
|

PER [be]? (named
etc.) Prep? ORG POSITION
appointed
|
|
George Marshall was named US Secretary of State

Hand-built patterns have the advantage of high-precision and they can be tailored
to speciﬁc domains. On the other hand, they are often low-recall, and it’s a lot of
work to create them for all possible patterns.

19.2.2 Relation Extraction via Supervised Learning

Supervised machine learning approaches to relation extraction follow a scheme that
should be familiar by now. A ﬁxed set of relations and entities is chosen, a training
corpus is hand-annotated with the relations and entities, and the annotated texts are
then used to train classiﬁers to annotate an unseen test set.

The most straightforward approach, illustrated in Fig. 19.5 is: (1) Find pairs of
named entities (usually in the same sentence). (2): Apply a relation-classiﬁcation
on each pair. The classiﬁer can use any supervised technique (logistic regression,
RNN, Transformer, random forest, etc.).

An optional intermediate ﬁltering classiﬁer can be used to speed up the process-
ing by making a binary decision on whether a given pair of named entities are related
(by any relation). It’s trained on positive examples extracted directly from all rela-
tions in the annotated corpus, and negative examples generated from within-sentence
entity pairs that are not annotated with a relation.

Feature-based supervised relation classiﬁers. Let’s consider sample features for
a feature-based classiﬁer (like logistic regression or random forests), classifying the
relationship between American Airlines (Mention 1, or M1) and Tim Wagner (Men-
tion 2, M2) from this sentence:

(19.5) American Airlines, a unit of AMR, immediately matched the move,

spokesman Tim Wagner said

These include word features (as embeddings, or 1-hot, stemmed or not):

• The headwords of M1 and M2 and their concatenation

Airlines Wagner

Airlines-Wagner

420 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

function FINDRELATIONS(words) returns relations

nil

relations
entities
←
forall entity pairs

←

e1, e2
(cid:105)
(cid:104)
if RELATED?(e1, e2)

FINDENTITIES(words)

in entities do

relations

←

relations+CLASSIFYRELATION(e1, e2)

Figure 19.5 Finding and classifying the relations among entities in a text.

• Bag-of-words and bigrams in M1 and M2

American, Airlines, Tim, Wagner, American Airlines, Tim Wagner

• Words or bigrams in particular positions

M2: -1 spokesman
M2: +1 said

• Bag of words or bigrams between M1 and M2:

a, AMR, of, immediately, matched, move, spokesman, the, unit

Named entity features:

• Named-entity types and their concatenation
(M1: ORG, M2: PER, M1M2: ORG-PER)

• Entity Level of M1 and M2 (from the set NAME, NOMINAL, PRONOUN)

M1: NAME [it or he would be PRONOUN]
M2: NAME [the company would be NOMINAL]

• Number of entities between the arguments (in this case 1, for AMR)

Syntactic structure is a useful signal, often represented as the dependency or

constituency syntactic path traversed through the tree between the entities.

• Constituent paths between M1 and M2

↑

S

S

NP

NP

NP
↑
• Dependency-tree paths
←sub j matched

Airlines

↑

↓

←comp said

→sub j Wagner

Neural supervised relation classiﬁers Neural models for relation extraction sim-
ilarly treat the task as supervised classiﬁcation. Let’s consider a typical system ap-
plied to the TACRED relation extraction dataset and task (Zhang et al., 2017). In
TACRED we are given a sentence and two spans within it: a subject, which is a
person or organization, and an object, which is any other entity. The task is to assign
a relation from the 42 TAC relations, or no relation.

A typical Transformer-encoder algorithm, shown in Fig. 19.6, simply takes a
pretrained encoder like BERT and adds a linear layer on top of the sentence repre-
sentation (for example the BERT [CLS] token), a linear layer that is ﬁnetuned as a
1-of-N classiﬁer to assign one of the 43 labels. The input to the BERT encoder is
partially de-lexiﬁed; the subject and object entities are replaced in the input by their
NER tags. This helps keep the system from overﬁtting to the individual lexical items
(Zhang et al., 2017). When using BERT-type Transformers for relation extraction, it
helps to use versions of BERT like RoBERTa (Liu et al., 2019) or spanBERT (Joshi
et al., 2020) that don’t have two sequences separated by a [SEP] token, but instead
form the input from a single long sequence of sentences.

In general, if the test set is similar enough to the training set, and if there is
enough hand-labeled data, supervised relation extraction systems can get high ac-

19.2

• RELATION EXTRACTION ALGORITHMS

421

Figure 19.6 Relation extraction as a linear layer on top of an encoder (in this case BERT),
with the subject and object entities replaced in the input by their NER tags (Zhang et al. 2017,
Joshi et al. 2020).

curacies. But labeling a large training set is extremely expensive and supervised
models are brittle: they don’t generalize well to different text genres. For this rea-
son, much research in relation extraction has focused on the semi-supervised and
unsupervised approaches we turn to next.

19.2.3 Semisupervised Relation Extraction via Bootstrapping

Supervised machine learning assumes that we have lots of labeled data. Unfortu-
nately, this is expensive. But suppose we just have a few high-precision seed pat-
terns, like those in Section 19.2.1, or perhaps a few seed tuples. That’s enough
to bootstrap a classiﬁer! Bootstrapping proceeds by taking the entities in the seed
pair, and then ﬁnding sentences (on the web, or whatever dataset we are using) that
contain both entities. From all such sentences, we extract and generalize the context
around the entities to learn new patterns. Fig. 19.7 sketches a basic algorithm.

seed patterns

seed tuples

bootstrapping

function BOOTSTRAP(Relation R) returns new relation tuples

Gather a set of seed tuples that have relation R

tuples
iterate

←

←

sentences
patterns
newpairs
newpairs
tuples
←
return tuples

ﬁnd sentences that contain entities in tuples

generalize the context between and around entities in sentences
use patterns to identify more tuples
newpairs with high conﬁdence

←
←
←
tuples + newpairs

Figure 19.7 Bootstrapping from seed entity pairs to learn relations.

Suppose, for example, that we need to create a list of airline/hub pairs, and we
know only that Ryanair has a hub at Charleroi. We can use this seed fact to discover
new patterns by ﬁnding other mentions of this relation in our corpus. We search
for the terms Ryanair, Charleroi and hub in some proximity. Perhaps we ﬁnd the
following set of sentences:

(19.6) Budget airline Ryanair, which uses Charleroi as a hub, scrapped all

weekend ﬂights out of the airport.

(19.7) All ﬂights in and out of Ryanair’s hub at Charleroi airport were grounded on

Friday...

(19.8) A spokesman at Charleroi, a main hub for Ryanair, estimated that 8000

passengers had already been affected.

ENCODER[CLS][SUBJ_PERSON]wasbornin[OBJ_LOC],MichiganLinearClassiﬁerp(relation|SUBJ,OBJ)422 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

From these results, we can use the context of words between the entity mentions,
the words before mention one, the word after mention two, and the named entity
types of the two mentions, and perhaps other features, to extract general patterns
such as the following:

/ [ORG], which uses [LOC] as a hub /
/ [ORG]’s hub at [LOC] /
/ [LOC], a main hub for [ORG] /

conﬁdence
values
semantic drift

These new patterns can then be used to search for additional tuples.

Bootstrapping systems also assign conﬁdence values to new tuples to avoid se-
mantic drift. In semantic drift, an erroneous pattern leads to the introduction of
erroneous tuples, which, in turn, lead to the creation of problematic patterns and the
meaning of the extracted relations ‘drifts’. Consider the following example:

(19.9) Sydney has a ferry hub at Circular Quay.

If accepted as a positive example, this expression could lead to the incorrect in-
Sydney,CircularQuay
troduction of the tuple
. Patterns based on this tuple could
(cid:105)
(cid:104)
propagate further errors into the database.

Conﬁdence values for patterns are based on balancing two factors: the pattern’s
performance with respect to the current set of tuples and the pattern’s productivity
in terms of the number of matches it produces in the document collection. More
formally, given a document collection D, a current set of tuples T , and a proposed
pattern p, we need to track two factors:

• hits(p): the set of tuples in T that p matches while looking in D
• ﬁnds(p): The total set of tuples that p ﬁnds in D

The following equation balances these considerations (Riloff and Jones, 1999).

hits(p)
Conf RlogF (p) = |
|
ﬁnds(p)
|
|

)
ﬁnds(p)
log(
|
|

(19.10)

This metric is generally normalized to produce a probability.

We can assess the conﬁdence in a proposed new tuple by combining the evidence
supporting it from all the patterns P(cid:48) that match that tuple in D (Agichtein and Gra-
vano, 2000). One way to combine such evidence is the noisy-or technique. Assume
that a given tuple is supported by a subset of the patterns in P, each with its own
conﬁdence assessed as above. In the noisy-or model, we make two basic assump-
tions. First, that for a proposed tuple to be false, all of its supporting patterns must
have been in error, and second, that the sources of their individual failures are all
independent. If we loosely treat our conﬁdence measures as probabilities, then the
Conf (p); the probability of all
probability of any individual pattern p failing is 1
of the supporting patterns for a tuple being wrong is the product of their individual
failure probabilities, leaving us with the following equation for our conﬁdence in a
new tuple.

−

Conf (t) = 1

Conf (p))

(1

−

−

P(cid:48)
(cid:89)p
∈

(19.11)

Setting conservative conﬁdence thresholds for the acceptance of new patterns
and tuples during the bootstrapping process helps prevent the system from drifting
away from the targeted relation.

noisy-or

distant
supervision

19.2

• RELATION EXTRACTION ALGORITHMS

423

19.2.4 Distant Supervision for Relation Extraction

Although hand-labeling text with relation labels is expensive to produce, there are
ways to ﬁnd indirect sources of training data. The distant supervision method
(Mintz et al., 2009) combines the advantages of bootstrapping with supervised learn-
ing. Instead of just a handful of seeds, distant supervision uses a large database to
acquire a huge number of seed examples, creates lots of noisy pattern features from
all these examples and then combines them in a supervised classiﬁer.

For example suppose we are trying to learn the place-of-birth relationship be-
tween people and their birth cities. In the seed-based approach, we might have only
5 examples to start with. But Wikipedia-based databases like DBPedia or Freebase
have tens of thousands of examples of many relations; including over 100,000 ex-
amples of place-of-birth, (<Edwin Hubble, Marshfield>, <Albert Einstein,
Ulm>, etc.,). The next step is to run named entity taggers on large amounts of text—
Mintz et al. (2009) used 800,000 articles from Wikipedia—and extract all sentences
that have two named entities that match the tuple, like the following:

...Hubble was born in Marshﬁeld...
...Einstein, born (1879), Ulm...
...Hubble’s birthplace in Marshﬁeld...

Training instances can now be extracted from this data, one training instance
for each identical tuple <relation, entity1, entity2>. Thus there will be one
training instance for each of:

<born-in, Edwin Hubble, Marshfield>
<born-in, Albert Einstein, Ulm>
<born-year, Albert Einstein, 1879>

and so on.

We can then apply feature-based or neural classiﬁcation. For feature-based
classiﬁcation, we can use standard supervised relation extraction features like the
named entity labels of the two mentions, the words and dependency paths in be-
tween the mentions, and neighboring words. Each tuple will have features col-
lected from many training instances; the feature vector for a single training instance
like (<born-in,Albert Einstein, Ulm> will have lexical and syntactic features
from many different sentences that mention Einstein and Ulm.

Because distant supervision has very large training sets, it is also able to use very
rich features that are conjunctions of these individual features. So we will extract
thousands of patterns that conjoin the entity types with the intervening words or
dependency paths like these:

PER was born in LOC
PER, born (XXXX), LOC
PER’s birthplace in LOC

To return to our running example, for this sentence:

(19.12) American Airlines, a unit of AMR, immediately matched the move,

spokesman Tim Wagner said

we would learn rich conjunction features like this one:

M1 = ORG & M2 = PER & nextword=“said”& path= NP

NP

S

↑

↑

S

↓

NP

↑

The result is a supervised classiﬁer that has a huge rich set of features to use
in detecting relations. Since not every test sentence will have one of the training

424 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

relations, the classiﬁer will also need to be able to label an example as no-relation.
This label is trained by randomly selecting entity pairs that do not appear in any
Freebase relation, extracting features for them, and building a feature vector for
each such tuple. The ﬁnal algorithm is sketched in Fig. 19.8.

function DISTANT SUPERVISION(Database D, Text T) returns relation classiﬁer C

foreach relation R

foreach tuple (e1,e2) of entities with relation R in D
Sentences in T that contain e1 and e2

Frequent features in sentences

sentences
f
←
observations
Train supervised classiﬁer on observations

←

←

observations + new training tuple (e1, e2, f, R)

C
return C

←

Figure 19.8 The distant supervision algorithm for relation extraction. A neural classiﬁer
would skip the feature set f .

Distant supervision shares advantages with each of the methods we’ve exam-
ined. Like supervised classiﬁcation, distant supervision uses a classiﬁer with lots
of features, and supervised by detailed hand-created knowledge. Like pattern-based
classiﬁers, it can make use of high-precision evidence for the relation between en-
tities. Indeed, distance supervision systems learn patterns just like the hand-built
patterns of early relation extractors. For example the is-a or hypernym extraction
system of Snow et al. (2005) used hypernym/hyponym NP pairs from WordNet as
distant supervision, and then learned new patterns from large amounts of text. Their
system induced exactly the original 5 template patterns of Hearst (1992a), but also
70,000 additional patterns including these four:

NPH like NP Many hormones like leptin...
NPH called NP ...using a markup language called XHTML
NP is a NPH
NP, a NPH

Ruby is a programming language...
IBM, a company with a long...

This ability to use a large number of features simultaneously means that, un-
like the iterative expansion of patterns in seed-based systems, there’s no semantic
drift. Like unsupervised classiﬁcation, it doesn’t use a labeled training corpus of
texts, so it isn’t sensitive to genre issues in the training corpus, and relies on very
large amounts of unlabeled data. Distant supervision also has the advantage that it
can create training tuples to be used with neural classiﬁers, where features are not
required.

The main problem with distant supervision is that it tends to produce low-precision

results, and so current research focuses on ways to improve precision. Furthermore,
distant supervision can only help in extracting relations for which a large enough
database already exists. To extract new relations without datasets, or relations for
new domains, purely unsupervised methods must be used.

19.2.5 Unsupervised Relation Extraction

The goal of unsupervised relation extraction is to extract relations from the web
when we have no labeled training data, and not even any list of relations. This task
is often called open information extraction or Open IE. In Open IE, the relations

open
information
extraction

19.2

• RELATION EXTRACTION ALGORITHMS

425

are simply strings of words (usually beginning with a verb).

For example, the ReVerb system (Fader et al., 2011) extracts a relation from a

sentence s in 4 steps:

1. Run a part-of-speech tagger and entity chunker over s
2. For each verb in s, ﬁnd the longest sequence of words w that start with a verb

and satisfy syntactic and lexical constraints, merging adjacent matches.

3. For each phrase w, ﬁnd the nearest noun phrase x to the left which is not a
relative pronoun, wh-word or existential “there”. Find the nearest noun phrase
y to the right.

4. Assign conﬁdence c to the relation r = (x, w, y) using a conﬁdence classiﬁer

and return it.

A relation is only accepted if it meets syntactic and lexical constraints. The
syntactic constraints ensure that it is a verb-initial sequence that might also include
nouns (relations that begin with light verbs like make, have, or do often express the
core of the relation with a noun, like have a hub in):

|

|

VP

V
VW*P
V = verb particle? adv?
W = (noun
P = (prep

adj
|
particle

adv

|

|

|

|

pron

det )
|
inﬁnitive “to”)

The lexical constraints are based on a dictionary D that is used to prune very rare,
long relation strings. The intuition is to eliminate candidate relations that don’t oc-
cur with sufﬁcient number of distinct argument types and so are likely to be bad
examples. The system ﬁrst runs the above relation extraction algorithm ofﬂine on
500 million web sentences and extracts a list of all the relations that occur after nor-
malizing them (removing inﬂection, auxiliary verbs, adjectives, and adverbs). Each
relation r is added to the dictionary if it occurs with at least 20 different arguments.
Fader et al. (2011) used a dictionary of 1.7 million normalized relations.

Finally, a conﬁdence value is computed for each relation using a logistic re-
gression classiﬁer. The classiﬁer is trained by taking 1000 random web sentences,
running the extractor, and hand labeling each extracted relation as correct or incor-
rect. A conﬁdence classiﬁer is then trained on this hand-labeled data, using features
of the relation and the surrounding words. Fig. 19.9 shows some sample features
used in the classiﬁcation.

≤

10

(x,r,y) covers all words in s
the last preposition in r is for
the last preposition in r is on
len(s)
there is a coordinating conjunction to the left of r in s
r matches a lone V in the syntactic constraints
there is preposition to the left of x in s
there is an NP to the right of y in s
Figure 19.9 Features for the classiﬁer that assigns conﬁdence to relations extracted by the
Open Information Extraction system REVERB (Fader et al., 2011).

For example the following sentence:

(19.13) United has a hub in Chicago, which is the headquarters of United

Continental Holdings.

426 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

has the relation phrases has a hub in and is the headquarters of (it also has has and
is, but longer phrases are preferred). Step 3 ﬁnds United to the left and Chicago to
the right of has a hub in, and skips over which to ﬁnd Chicago to the left of is the
headquarters of. The ﬁnal output is:

r1:
r2:

<United, has a hub in, Chicago>
<Chicago, is the headquarters of, United Continental Holdings>

The great advantage of unsupervised relation extraction is its ability to handle
a huge number of relations without having to specify them in advance. The dis-
advantage is the need to map all the strings into some canonical form for adding
to databases or knowledge graphs. Current methods focus heavily on relations ex-
pressed with verbs, and so will miss many relations that are expressed nominally.

19.2.6 Evaluation of Relation Extraction

Supervised relation extraction systems are evaluated by using test sets with human-
annotated, gold-standard relations and computing precision, recall, and F-measure.
Labeled precision and recall require the system to classify the relation correctly,
whereas unlabeled methods simply measure a system’s ability to detect entities that
are related.

Semi-supervised and unsupervised methods are much more difﬁcult to evalu-
ate, since they extract totally new relations from the web or a large text. Because
these methods use very large amounts of text, it is generally not possible to run them
solely on a small labeled test set, and as a result it’s not possible to pre-annotate a
gold set of correct instances of relations.

For these methods it’s possible to approximate (only) precision by drawing a
random sample of relations from the output, and having a human check the accuracy
of each of these relations. Usually this approach focuses on the tuples to be extracted
from a body of text rather than on the relation mentions; systems need not detect
every mention of a relation to be scored correctly. Instead, the evaluation is based
on the set of tuples occupying the database when the system is ﬁnished. That is,
we want to know if the system can discover that Ryanair has a hub at Charleroi; we
don’t really care how many times it discovers it. The estimated precision ˆP is then

ˆP =

# of correctly extracted relation tuples in the sample
total # of extracted relation tuples in the sample.

(19.14)

Another approach that gives us a little bit of information about recall is to com-
pute precision at different levels of recall. Assuming that our system is able to
rank the relations it produces (by probability, or conﬁdence) we can separately com-
pute precision for the top 1000 new relations, the top 10,000 new relations, the top
100,000, and so on. In each case we take a random sample of that set. This will
show us how the precision curve behaves as we extract more and more tuples. But
there is no way to directly evaluate recall.

19.3 Extracting Events

event
extraction

The task of event extraction is to identify mentions of events in texts. For the
purposes of this task, an event mention is any expression denoting an event or state
that can be assigned to a particular point, or interval, in time. The following markup
of the sample text on page 415 shows all the events in this text.

19.4

• REPRESENTING TIME

427

[EVENT Citing] high fuel prices, United Airlines [EVENT said] Fri-
day it has [EVENT increased] fares by $6 per round trip on ﬂights to
some cities also served by lower-cost carriers. American Airlines, a unit
of AMR Corp., immediately [EVENT matched]
[EVENT the move],
spokesman Tim Wagner [EVENT said]. United, a unit of UAL Corp.,
[EVENT said] [EVENT the increase] took effect Thursday and [EVENT
applies] to most routes where it [EVENT competes] against discount
carriers, such as Chicago to Dallas and Denver to San Francisco.

In English, most event mentions correspond to verbs, and most verbs introduce
events. However, as we can see from our example, this is not always the case. Events
can be introduced by noun phrases, as in the move and the increase, and some verbs
fail to introduce events, as in the phrasal verb took effect, which refers to when the
event began rather than to the event itself. Similarly, light verbs such as make, take,
and have often fail to denote events. A light verb is a verb that has very little meaning
itself, and the associated event is instead expressed by its direct object noun. In light
verb examples like took a ﬂight, it’s the word ﬂight that deﬁnes the event; these light
verbs just provide a syntactic structure for the noun’s arguments.

Various versions of the event extraction task exist, depending on the goal. For
example in the TempEval shared tasks (Verhagen et al. 2009) the goal is to extract
events and aspects like their aspectual and temporal properties. Events are to be
classiﬁed as actions, states, reporting events (say, report, tell, explain), perception
events, and so on. The aspect, tense, and modality of each event also needs to be
extracted. Thus for example the various said events in the sample text would be
annotated as (class=REPORTING, tense=PAST, aspect=PERFECTIVE).

Event extraction is generally modeled via supervised learning, detecting events
via IOB sequence models and assigning event classes and attributes with multi-class
classiﬁers. The input can be neural models starting from encoders; or classic feature-
based models using features like those in Fig. 19.10.

light verbs

reporting
events

Explanation
Character-level preﬁxes and sufﬁxes of target word
Character-level sufﬁxes for nominalizations (e.g., -tion)
Part of speech of the target word
Binary feature indicating that the target is governed by a light verb

Feature
Character afﬁxes
Nominalization sufﬁx
Part of speech
Light verb
Subject syntactic category Syntactic category of the subject of the sentence
Morphological stem
Verb root
WordNet hypernyms
Figure 19.10 Features commonly used in classic feature-based approaches to event detection.

Stemmed version of the target word
Root form of the verb basis for a nominalization
Hypernym set for the target

19.4 Representing Time

temporal logic

Let’s begin by introducing the basics of temporal logic and how human languages
convey temporal information. The most straightforward theory of time holds that it
ﬂows inexorably forward and that events are associated with either points or inter-
vals in time, as on a timeline. We can order distinct events by situating them on the
timeline; one event precedes another if the ﬂow of time leads from the ﬁrst event

428 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

to the second. Accompanying these notions in most theories is the idea of the cur-
rent moment in time. Combining this notion with the idea of a temporal ordering
relationship yields the familiar notions of past, present, and future.

Various kinds of temporal representation systems can be used to talk about tem-
poral ordering relationship. One of the most commonly used in computational mod-
eling is the interval algebra of Allen (1984). Allen models all events and time
expressions as intervals there is no representation for points (although intervals can
be very short). In order to deal with intervals without points, he identiﬁes 13 primi-
tive relations that can hold between these temporal intervals. Fig. 19.11 shows these
13 Allen relations.

interval algebra

Allen relations

Figure 19.11 The 13 temporal relations from Allen (1984).

19.4.1 Reichenbach’s reference point

The relation between simple verb tenses and points in time is by no means straight-
forward. The present tense can be used to refer to a future event, as in this example:

(19.15) Ok, we ﬂy from San Francisco to Boston at 10.

Or consider the following examples:

(19.16) Flight 1902 arrived late.
(19.17) Flight 1902 had arrived late.

Although both refer to events in the past, representing them in the same way seems
wrong. The second example seems to have another unnamed event lurking in the
background (e.g., Flight 1902 had already arrived late when something else hap-
pened).

BABABAAABBABTime A  before BB after  AA overlaps BB overlaps' AA meets BB meets' AA equals B(B equals A)A starts BB starts' AA finishes BB finishes' ABA during BB during' AA19.4

• REPRESENTING TIME

429

reference point

To account for this phenomena, Reichenbach (1947) introduced the notion of
a reference point. In our simple temporal scheme, the current moment in time is
equated with the time of the utterance and is used as a reference point for when
the event occurred (before, at, or after). In Reichenbach’s approach, the notion of
the reference point is separated from the utterance time and the event time. The
following examples illustrate the basics of this approach:

(19.18) When Mary’s ﬂight departed, I ate lunch.
(19.19) When Mary’s ﬂight departed, I had eaten lunch.

In both of these examples, the eating event has happened in the past, that is, prior
to the utterance. However, the verb tense in the ﬁrst example indicates that the eating
event began when the ﬂight departed, while the second example indicates that the
eating was accomplished prior to the ﬂight’s departure. Therefore, in Reichenbach’s
terms the departure event speciﬁes the reference point. These facts can be accom-
modated by additional constraints relating the eating and departure events. In the
ﬁrst example, the reference point precedes the eating event, and in the second exam-
ple, the eating precedes the reference point. Figure 19.12 illustrates Reichenbach’s
approach with the primary English tenses. Exercise 19.4 asks you to represent these
examples in FOL.

Figure 19.12 Reichenbach’s approach applied to various English tenses. In these diagrams,
time ﬂows from left to right, E denotes the time of the event, R denotes the reference time,
and U denotes the time of the utterance.

Languages have many other ways to convey temporal information besides tense.
Most useful for our purposes will be temporal expressions like in the morning or
6:45 or afterwards.

(19.20) I’d like to go at 6:45 in the morning.
(19.21) Somewhere around noon, please.
(19.22) I want to take the train back afterwards.

Incidentally, temporal expressions display a fascinating metaphorical conceptual
organization. Temporal expressions in English are frequently expressed in spatial
terms, as is illustrated by the various uses of at, in, somewhere, and near in these
examples (Lakoff and Johnson 1980, Jackendoff 1983). Metaphorical organizations
such as these, in which one domain is systematically expressed in terms of another,
are very common in languages of the world.

Past PerfectSimple PastPresent PerfectSimple FutureFuture PerfectPresentEEEERRUR,EUR,UU,R,EU,RU430 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

19.5 Representing Aspect

aspect

aktionsart

events

states

stative

A related notion to time is aspect, which is what we call the way events can be
categorized by their internal temporal structure or temporal contour. By this we
mean questions like whether events are ongoing or have ended, or whether they are
conceptualized as happening at a point in time or over some interval. Such notions
of temporal contour have been used to divide event expressions into classes since
Aristotle, although the set of four classes we’ll introduce here is due to Vendler
(1967) (you may also see the German term aktionsart used to refer to these classes).
The most basic aspectual distinction is between events (which involve change)
and states (which do not involve change). Stative expressions represent the notion
of an event participant being in a state, or having a particular property, at a given
point in time. Stative expressions capture aspects of the world at a single point in
time, and conceptualize the participant as unchanging and continuous. Consider the
following ATIS examples.

(19.23) I like express trains.
(19.24) I need the cheapest fare.
(19.25) I want to go ﬁrst class.

activity

In examples like these, the event participant denoted by the subject can be seen as
experiencing something at a speciﬁc point in time, and don’t involve any kind of
internal change over time (the liking or needing is conceptualized as continuous and
unchanging).

Non-states (which we’ll refer to as events) are divided into subclasses; we’ll
introduce three here. Activity expressions describe events undertaken by a partic-
ipant that occur over a span of time (rather than being conceptualized as a single
point in time like stative expressions), and have no particular end point. Of course
in practice all things end, but the meaning of the expression doesn’t represent this
fact. Consider the following examples:

(19.26) She drove a Mazda.
(19.27) I live in Brooklyn.

These examples both specify that the subject is engaged in, or has engaged in, the
activity speciﬁed by the verb for some period of time, but doesn’t specify when the
driving or living might have stopped.

Two more classes of expressions, achievement expressions and accomplish-
ment expressions, describe events that take place over time, but also conceptualize
the event as having a particular kind of endpoint or goal. The Greek word telos
means ‘end’ or ’goal’ and so the events described by these kinds of expressions are
often called telic events.

Accomplishment expressions describe events that have a natural end point and

result in a particular state. Consider the following examples:

(19.28) He booked me a reservation.
(19.29) The 7:00 train got me to New York City.

telic
accomplishment
expressions

In these examples, an event is seen as occurring over some period of time that ends
when the intended state is accomplished (i.e., the state of me having a reservation,
or me being in New York City).

The ﬁnal aspectual class, achievement expressions, is only subtly different than

accomplishments. Consider the following:

achievement
expressions

19.6

• TEMPORALLY ANNOTATED DATASETS: TIMEBANK

431

(19.30) She found her gate.
(19.31) I reached New York.

Like accomplishment expressions, achievement expressions result in a state. But
unlike accomplishments, achievement events are ‘punctual’: they are thought of as
happening in an instant and the verb doesn’t conceptualize the process or activ-
ity leading up the state. Thus the events in these examples may in fact have been
preceded by extended searching or traveling events, but the verb doesn’t conceptu-
alize these preceding processes, but rather conceptualizes the events corresponding
to ﬁnding and reaching as points, not intervals.

In summary, a standard way of categorizing event expressions by their temporal

contours is via these four general classes:

Stative: I know my departure gate.
Activity: John is ﬂying.
Accomplishment: Sally booked her ﬂight.
Achievement: She found her gate.

Before moving on, note that event expressions can easily be shifted from one

class to another. Consider the following examples:

(19.32) I ﬂew.
(19.33) I ﬂew to New York.

The ﬁrst example is a simple activity; it has no natural end point. The second ex-
ample is clearly an accomplishment event since it has an end point, and results in a
particular state. Clearly, the classiﬁcation of an event is not solely governed by the
verb, but by the semantics of the entire expression in context.

19.6 Temporally Annotated Datasets: TimeBank

TimeBank

The TimeBank corpus consists of American English text annotated with temporal
information (Pustejovsky et al., 2003). The annotations use TimeML (Saur´ı et al.,
2006), a markup language for time based on Allen’s interval algebra discussed above
(Allen, 1984). There are three types of TimeML objects: an EVENT represent events
and states, a TIME represents time expressions like dates, and a LINK represents
various relationships between events and times (event-event, event-time, and time-
time). The links include temporal links (TLINK) for the 13 Allen relations, aspec-
tual links (ALINK) for aspectual relationships between events and subevents, and
SLINKS which mark factuality.

Consider the following sample sentence and its corresponding markup shown in

Fig. 19.13, selected from one of the TimeBank documents.

(19.34) Delta Air Lines earnings soared 33% to a record in the ﬁscal ﬁrst quarter,

bucking the industry trend toward declining proﬁts.

This text has three events and two temporal expressions (including the creation
time of the article, which serves as the document time), and four temporal links that
capture the using the Allen relations:

• Soaringe1 is included in the ﬁscal ﬁrst quartert58
• Soaringe1 is before 1989-10-26t57
• Soaringe1 is simultaneous with the buckinge3

432 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

<TIMEX3 tid="t57" type="DATE" value="1989-10-26"
10/26/89 </TIMEX3>

functionInDocument="CREATION_TIME">

<TIMEX3 tid="t58" type="DATE" value="1989-Q1" anchorTimeID="t57"> the

Delta Air Lines earnings <EVENT eid="e1" class="OCCURRENCE"> soared </EVENT> 33% to a
record in
fiscal first quarter </TIMEX3>, <EVENT eid="e3"
the industry trend toward <EVENT eid="e4" class="OCCURRENCE">declining</EVENT>
profits.

class="OCCURRENCE">bucking</EVENT>

Figure 19.13 Example from the TimeBank corpus.

• Declininge4 includes soaringe1

We can also visualize the links as a graph. The TimeBank snippet in Eq. 19.35

would be represented with a graph like Fig. 19.14.

(19.35) [DCT:11/02/891]1: Paciﬁc First Financial Corp. said2 shareholders

approved3 its acquisition4 by Royal Trustco Ltd. of Toronto for $27 a share,
or $212 million. The thrift holding company said5 it expects6 to obtain7
regulatory approval8 and complete9 the transaction10 by year-end11.

Figure 19.14 A graph of the text in Eq. 19.35, adapted from (Ocal et al., 2022). TLINKS
are shown in blue, ALINKS in red, and SLINKS in green.

19.7 Automatic Temporal Analysis

Here we introduce the three common steps used in analyzing time in text:

1. Extracting temporal expressions
2. Normalizing these expressions, by converting them to a standard format.
3. Linking events to times and extracting time graphs and timelines

19.7.1 Extracting Temporal Expressions

absolute

relative

duration

lexical triggers

Temporal expressions are phrases that refer to absolute points in time, relative times,
durations, and sets of these. Absolute temporal expressions are those that can be
mapped directly to calendar dates, times of day, or both. Relative temporal expres-
sions map to particular times through some other reference point (as in a week from
last Tuesday). Finally, durations denote spans of time at varying levels of granular-
ity (seconds, minutes, days, weeks, centuries, etc.). Figure 19.15 lists some sample
temporal expressions in each of these categories.

Temporal expressions are grammatical constructions that often have temporal
lexical triggers as their heads, making them easy to ﬁnd. Lexical triggers might
be nouns, proper nouns, adjectives, and adverbs; full temporal expressions consist

1234567811910BEFOREBEFOREAFTERSIMULTANEOUSENDSCULMINATESBEFOREEVIDENTIALMODALFACTIVEMODALEVIDENTIALMODAL19.7

• AUTOMATIC TEMPORAL ANALYSIS

433

Absolute
April 24, 1916
The summer of ’77
10:15 AM
The 3rd quarter of 2006
Figure 19.15 Examples of absolute, relational and durational temporal expressions.

Relative
yesterday
next semester
two weeks from yesterday
last quarter

Durations
four hours
three weeks
six days
the last three quarters

of their phrasal projections: noun phrases, adjective phrases, and adverbial phrases
(Figure 19.16).

Examples
morning, noon, night, winter, dusk, dawn

Category
Noun
Proper Noun January, Monday, Ides, Easter, Rosh Hashana, Ramadan, Tet
Adjective
Adverb
Figure 19.16 Examples of temporal lexical triggers.

recent, past, annual, former
hourly, daily, monthly, yearly

The task is to detect temporal expressions in running text, like this examples,

shown with TIMEX3 tags (Pustejovsky et al. 2005, Ferro et al. 2005).

A fare increase initiated <TIMEX3>last week</TIMEX3> by UAL
Corp’s United Airlines was matched by competitors over <TIMEX3>the
weekend</TIMEX3>, marking the second successful fare increase in
<TIMEX3>two weeks</TIMEX3>.

Rule-based approaches use cascades of regular expressions to recognize larger
and larger chunks from previous stages, based on patterns containing parts of speech,
trigger words (e.g., February) or classes (e.g., MONTH) (Chang and Manning, 2012;
Str¨otgen and Gertz, 2013; Chambers, 2013). Here’s a rule from SUTime (Chang and
Manning, 2012) for detecting expressions like 3 years old:

/(\d+)[-\s]($TEUnits)(s)?([-\s]old)?/

Sequence-labeling approaches use the standard IOB scheme, marking words

that are either (I)nside, (O)utside or at the (B)eginning of a temporal expression:

A
O

fare
O

increase
O

initiated
O

last
B

week
I

by
O

UAL
O

Corp’s...
O

A statistical sequence labeler is trained, using either embeddings or a ﬁne-tuned
encoder, or classic features extracted from the token and context including words,
lexical triggers, and POS.

Temporal expression recognizers are evaluated with the usual recall, precision,
and F-measures. A major difﬁculty for all of these very lexicalized approaches is
avoiding expressions that trigger false positives:

(19.36) 1984 tells the story of Winston Smith...
(19.37) ...U2’s classic Sunday Bloody Sunday

19.7.2 Temporal Normalization

temporal
normalization

Temporal normalization is the task of mapping a temporal expression to a point
in time or to a duration. Points in time correspond to calendar dates, to times of
day, or both. Durations primarily consist of lengths of time. Normalized times
are represented via the ISO 8601 standard for encoding temporal values (ISO8601,
2004). Fig. 19.17 reproduces our earlier example with these value attributes.

434 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

<TIMEX3 i d =” t 1 ’ ’

t y p e =”DATE” v a l u e =” 2007 −07 −02 ” f u n c t i o n I n D o c u m e n t =”CREATION TIME”>

J u l y 2 , 2007 </TIMEX3> A f a r e

i n c r e a s e

i n i t i a t e d <TIMEX3 i d =” t 2 ” t y p e =”DATE”

v a l u e =” 2007 −W26” a n c h o r T i m e I D =” t 1 ”> l a s t week </TIMEX3> by U n i t e d A i r l i n e s was
m a t c h e d by c o m p e t i t o r s o v e r <TIMEX3 i d =” t 3 ” t y p e =”DURATION” v a l u e =”P1WE”
a n c h o r T i m e I D =” t 1 ”> t h e weekend </TIMEX3>, m a r k i n g t h e s e c o n d s u c c e s s f u l
i n c r e a s e
weeks </TIMEX3>.

i n <TIMEX3 i d =” t 4 ” t y p e =”DURATION” v a l u e =”P2W” a n c h o r T i m e I D =” t 1 ”> two

f a r e

Figure 19.17 TimeML markup including normalized values for temporal expressions.

The dateline, or document date, for this text was July 2, 2007. The ISO repre-
sentation for this kind of expression is YYYY-MM-DD, or in this case, 2007-07-02.
The encodings for the temporal expressions in our sample text all follow from this
date, and are shown here as values for the VALUE attribute.

The ﬁrst temporal expression in the text proper refers to a particular week of the
year. In the ISO standard, weeks are numbered from 01 to 53, with the ﬁrst week
of the year being the one that has the ﬁrst Thursday of the year. These weeks are
represented with the template YYYY-Wnn. The ISO week for our document date is
week 27; thus the value for last week is represented as “2007-W26”.

The next temporal expression is the weekend. ISO weeks begin on Monday;
thus, weekends occur at the end of a week and are fully contained within a single
week. Weekends are treated as durations, so the value of the VALUE attribute has
to be a length. Durations are represented according to the pattern Pnx, where n is
an integer denoting the length and x represents the unit, as in P3Y for three years
or P2D for two days. In this example, one weekend is captured as P1WE. In this
case, there is also sufﬁcient information to anchor this particular weekend as part of
a particular week. Such information is encoded in the ANCHORTIMEID attribute.
Finally, the phrase two weeks also denotes a duration captured as P2W. Figure 19.18
give some more examples, but there is a lot more to the various temporal annotation
standards; consult ISO8601 (2004), Ferro et al. (2005), and Pustejovsky et al. (2005)
for more details.

Unit
Fully speciﬁed dates
Weeks
Weekends
24-hour clock times
Dates and times
Financial quarters
Figure 19.18 Sample ISO patterns for representing various times and durations.

Pattern
YYYY-MM-DD
YYYY-Wnn
PnWE
HH:MM:SS
YYYY-MM-DDTHH:MM:SS
Qn

Sample Value
1991-09-28
2007-W27
P1WE
11:13:45
1991-09-28T11:00:00
1999-Q3

Most current approaches to temporal normalization are rule-based (Chang and
Manning 2012, Str¨otgen and Gertz 2013). Patterns that match temporal expressions
are associated with semantic analysis procedures. For example, the pattern above for
recognizing phrases like 3 years old can be associated with the predicate Duration
that takes two arguments, the length and the unit of time:
pattern: /(\d+)[-\s]($TEUnits)(s)?([-\s]old)?/
result: Duration($1, $2)

The task is difﬁcult because fully qualiﬁed temporal expressions are fairly rare
in real texts. Most temporal expressions in news articles are incomplete and are only
implicitly anchored, often with respect to the dateline of the article, which we refer
to as the document’s temporal anchor. The values of temporal expressions such
as today, yesterday, or tomorrow can all be computed with respect to this temporal

temporal
anchor

19.7

• AUTOMATIC TEMPORAL ANALYSIS

435

anchor. The semantic procedure for today simply assigns the anchor, and the attach-
ments for tomorrow and yesterday add a day and subtract a day from the anchor,
respectively. Of course, given the cyclic nature of our representations for months,
weeks, days, and times of day, our temporal arithmetic procedures must use modulo
arithmetic appropriate to the time unit being used.

Unfortunately, even simple expressions such as the weekend or Wednesday in-
troduce a fair amount of complexity. In our current example, the weekend clearly
refers to the weekend of the week that immediately precedes the document date. But
this won’t always be the case, as is illustrated in the following example.

(19.38) Random security checks that began yesterday at Sky Harbor will continue

at least through the weekend.

In this case, the expression the weekend refers to the weekend of the week that the
anchoring date is part of (i.e., the coming weekend). The information that signals
this meaning comes from the tense of continue, the verb governing the weekend.

Relative temporal expressions are handled with temporal arithmetic similar to
that used for today and yesterday. The document date indicates that our example
article is ISO week 27, so the expression last week normalizes to the current week
minus 1. To resolve ambiguous next and last expressions we consider the distance
from the anchoring date to the nearest unit. Next Friday can refer either to the
immediately next Friday or to the Friday following that, but the closer the document
date is to a Friday, the more likely it is that the phrase will skip the nearest one. Such
ambiguities are handled by encoding language and domain-speciﬁc heuristics into
the temporal attachments.

19.7.3 Temporal Ordering of Events

The goal of temporal analysis, is to link times to events and then ﬁt all these events
into a complete timeline. This ambitious task is the subject of considerable current
research but solving it with a high level of accuracy is beyond the capabilities of
current systems. A somewhat simpler, but still useful, task is to impose a partial or-
dering on the events and temporal expressions mentioned in a text. Such an ordering
can provide many of the same beneﬁts as a true timeline. An example of such a par-
tial ordering is the determination that the fare increase by American Airlines came
after the fare increase by United in our sample text. Determining such an ordering
can be viewed as a binary relation detection and classiﬁcation task.

Even this partial ordering task assumes that in addition to the detecting and nor-
malizing time expressions steps described above, we have already detected all the
events in the text. Indeed, many temporal expressions are anchored to events men-
tioned in a text and not directly to other temporal expressions. Consider the follow-
ing example:

(19.39) One week after the storm, JetBlue issued its customer bill of rights.

To determine when JetBlue issued its customer bill of rights we need to determine
the time of the storm event, and then we need to modify that time by the temporal
expression one week after.

Thus once the events and times have been detected, our goal next is to assert links
between all the times and events: i.e. creating event-event, event-time, time-time,
DCT-event, and DCT-time TimeML TLINKS. This can be done by training time
relation classiﬁers to predict the correct T:INK between each pair of times/events,
supervised by the gold labels in the TimeBank corpus with features like words/em-
beddings, parse paths, tense and aspect The sieve-based architecture using precision-

436 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

ranked sets of classiﬁers, which we’ll introduce in Chapter 26, is also commonly
used.

Systems that perform all 4 tasks (time extraction creation and normalization,
event extraction, and time/event linking) include TARSQI (Verhagen et al., 2005)
CLEARTK (Bethard, 2013), CAEVO (Chambers et al., 2014), and CATENA (Mirza
and Tonelli, 2016).

19.8 Template Filling

scripts

templates

template ﬁlling

Many texts contain reports of events, and possibly sequences of events, that often
correspond to fairly common, stereotypical situations in the world. These abstract
situations or stories, related to what have been called scripts (Schank and Abel-
son, 1977), consist of prototypical sequences of sub-events, participants, and their
roles. The strong expectations provided by these scripts can facilitate the proper
classiﬁcation of entities, the assignment of entities into roles and relations, and most
critically, the drawing of inferences that ﬁll in things that have been left unsaid. In
their simplest form, such scripts can be represented as templates consisting of ﬁxed
sets of slots that take as values slot-ﬁllers belonging to particular classes. The task
of template ﬁlling is to ﬁnd documents that invoke particular scripts and then ﬁll the
slots in the associated templates with ﬁllers extracted from the text. These slot-ﬁllers
may consist of text segments extracted directly from the text, or they may consist of
concepts that have been inferred from text elements through some additional pro-
cessing.

A ﬁlled template from our original airline story might look like the following.

FARE-RAISE ATTEMPT:



LEAD AIRLINE:
AMOUNT:
EFFECTIVE DATE:
FOLLOWER:

UNITED AIRLINES
$6
2006-10-26
AMERICAN AIRLINES













This template has four slots (LEAD AIRLINE, AMOUNT, EFFECTIVE DATE, FOL-
LOWER). The next section describes a standard sequence-labeling approach to ﬁlling
slots. Section 19.8.2 then describes an older system based on the use of cascades of
ﬁnite-state transducers and designed to address a more complex template-ﬁlling task
that current learning-based systems don’t yet address.

19.8.1 Machine Learning Approaches to Template Filling

In the standard paradigm for template ﬁlling, we are given training documents with
text spans annotated with predeﬁned templates and their slot ﬁllers. Our goal is to
create one template for each event in the input, ﬁlling in the slots with text spans.

The task is generally modeled by training two separate supervised systems. The
ﬁrst system decides whether the template is present in a particular sentence. This
task is called template recognition or sometimes, in a perhaps confusing bit of
terminology, event recognition. Template recognition can be treated as a text classi-
ﬁcation task, with features extracted from every sequence of words that was labeled
in training documents as ﬁlling any slot from the template being detected. The usual
set of features can be used: tokens, embeddings, word shapes, part-of-speech tags,
syntactic chunk tags, and named entity tags.

template
recognition

role-ﬁller
extraction

19.8

• TEMPLATE FILLING

437

The second system has the job of role-ﬁller extraction. A separate classiﬁer is
trained to detect each role (LEAD-AIRLINE, AMOUNT, and so on). This can be a
binary classiﬁer that is run on every noun-phrase in the parsed input sentence, or a
sequence model run over sequences of words. Each role classiﬁer is trained on the
labeled data in the training set. Again, the usual set of features can be used, but now
trained only on an individual noun phrase or the ﬁllers of a single slot.

Multiple non-identical text segments might be labeled with the same slot la-
bel. For example in our sample text, the strings United or United Airlines might be
labeled as the LEAD AIRLINE. These are not incompatible choices and the corefer-
ence resolution techniques introduced in Chapter 26 can provide a path to a solution.
A variety of annotated collections have been used to evaluate this style of ap-
proach to template ﬁlling, including sets of job announcements, conference calls for
papers, restaurant guides, and biological texts. A key open question is extracting
templates in cases where there is no training data or even predeﬁned templates, by
inducing templates as sets of linked events (Chambers and Jurafsky, 2011).

19.8.2 Earlier Finite-State Template-Filling Systems

The templates above are relatively simple. But consider the task of producing a
template that contained all the information in a text like this one (Grishman and
Sundheim, 1995):

Bridgestone Sports Co. said Friday it has set up a joint venture in Taiwan
with a local concern and a Japanese trading house to produce golf clubs to be
shipped to Japan. The joint venture, Bridgestone Sports Taiwan Co., capital-
ized at 20 million new Taiwan dollars, will start production in January 1990
with production of 20,000 iron and “metal wood” clubs a month.

The MUC-5 ‘joint venture’ task (the Message Understanding Conferences were
a series of U.S. government-organized information-extraction evaluations) was to
produce hierarchically linked templates describing joint ventures. Figure 19.19
shows a structure produced by the FASTUS system (Hobbs et al., 1997). Note how
the ﬁller of the ACTIVITY slot of the TIE-UP template is itself a template with slots.

Tie-up-1
RELATIONSHIP
ENTITIES

tie-up
Bridgestone Sports Co.
a local concern
a Japanese trading house

Activity-1:
COMPANY
PRODUCT
START DATE DURING: January 1990

Bridgestone Sports Taiwan Co.
iron and “metal wood” clubs

JOINT VENTURE Bridgestone Sports Taiwan Co.
Activity-1
ACTIVITY
AMOUNT
NT$20000000
Figure 19.19 The templates produced by FASTUS given the input text on page 437.

Early systems for dealing with these complex templates were based on cascades

of transducers based on handwritten rules, as sketched in Fig. 19.20.

The ﬁrst four stages use handwritten regular expression and grammar rules to
do basic tokenization, chunking, and parsing. Stage 5 then recognizes entities and
events with a recognizer based on ﬁnite-state transducers (FSTs), and inserts the rec-
ognized objects into the appropriate slots in templates. This FST recognizer is based
on hand-built regular expressions like the following (NG indicates Noun-Group and
VG Verb-Group), which matches the ﬁrst sentence of the news story above.

438 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

No. Step
1
2
3
4
5
6

Tokens
Complex Words
Basic phrases
Complex phrases
Semantic Patterns
Merging

Description
Tokenize input stream of characters
Multiword phrases, numbers, and proper names.
Segment sentences into noun and verb groups
Identify complex noun groups and verb groups
Identify entities and events, insert into templates.
Merge references to the same entity or event

Figure 19.20 Levels of processing in FASTUS (Hobbs et al., 1997). Each level extracts a
speciﬁc type of information which is then passed on to the next higher level.

NG(Company/ies) VG(Set-up) NG(Joint-Venture) with NG(Company/ies)

VG(Produce) NG(Product)

The result of processing these two sentences is the ﬁve draft templates (Fig. 19.21)
that must then be merged into the single hierarchical structure shown in Fig. 19.19.
The merging algorithm, after performing coreference resolution, merges two activi-
ties that are likely to be describing the same events.

# Template/Slot
1 RELATIONSHIP:

ENTITIES:
2 ACTIVITY:
PRODUCT:

Value
TIE-UP
Bridgestone Co., a local concern, a Japanese trading house

PRODUCTION
“golf clubs”

3 RELATIONSHIP:

TIE-UP

JOINT VENTURE: “Bridgestone Sports Taiwan Co.”
AMOUNT:
NT$20000000
4 ACTIVITY:
COMPANY:
STARTDATE:

PRODUCTION
“Bridgestone Sports Taiwan Co.”
DURING: January 1990

5 ACTIVITY:
PRODUCT:

PRODUCTION
“iron and “metal wood” clubs”

Figure 19.21 The ﬁve partial templates produced by stage 5 of FASTUS. These templates
are merged in stage 6 to produce the ﬁnal template shown in Fig. 19.19 on page 437.

19.9 Summary

This chapter has explored techniques for extracting limited forms of semantic con-
tent from texts.

• Relations among entities can be extracted by pattern-based approaches, su-
pervised learning methods when annotated training data is available, lightly
supervised bootstrapping methods when small numbers of seed tuples or
seed patterns are available, distant supervision when a database of relations
is available, and unsupervised or Open IE methods.

• Reasoning about time can be facilitated by detection and normalization of

temporal expressions.

• Events can be ordered in time using sequence models and classiﬁers trained

on temporally- and event-labeled data like the TimeBank corpus.

BIBLIOGRAPHICAL AND HISTORICAL NOTES

439

• Template-ﬁlling applications can recognize stereotypical situations in texts
and assign elements from the text to roles represented as ﬁxed sets of slots.

Bibliographical and Historical Notes

The earliest work on information extraction addressed the template-ﬁlling task in the
context of the Frump system (DeJong, 1982). Later work was stimulated by the U.S.
government-sponsored MUC conferences (Sundheim 1991, Sundheim 1992, Sund-
heim 1993, Sundheim 1995). Early MUC systems like CIRCUS system (Lehnert
et al., 1991) and SCISOR (Jacobs and Rau, 1990) were quite inﬂuential and inspired
later systems like FASTUS (Hobbs et al., 1997). Chinchor et al. (1993) describe the
MUC evaluation techniques.

Due to the difﬁculty of porting systems from one domain to another, attention
shifted to machine learning approaches. Early supervised learning approaches to
IE (Cardie 1993, Cardie 1994, Riloff 1993, Soderland et al. 1995, Huffman 1996)
focused on automating the knowledge acquisition process, mainly for ﬁnite-state
rule-based systems. Their success, and the earlier success of HMM-based speech
recognition, led to the use of sequence labeling (HMMs: Bikel et al. 1997; MEMMs
McCallum et al. 2000; CRFs: Lafferty et al. 2001), and a wide exploration of fea-
tures (Zhou et al., 2005). Neural approaches followed from the pioneering results of
Collobert et al. (2011), who applied a CRF on top of a convolutional net.

Progress in this area continues to be stimulated by formal evaluations with shared
benchmark datasets, including the Automatic Content Extraction (ACE) evaluations
of 2000-2007 on named entity recognition, relation extraction, and temporal ex-
pressions1, the KBP (Knowledge Base Population) evaluations (Ji et al. 2010, Sur-
deanu 2013) of relation extraction tasks like slot ﬁlling (extracting attributes (‘slots’)
like age, birthplace, and spouse for a given entity) and a series of SemEval work-
shops (Hendrickx et al., 2009).

Semisupervised relation extraction was ﬁrst proposed by Hearst (1992b), and
extended by systems like AutoSlog-TS (Riloff, 1996), DIPRE (Brin, 1998), SNOW-
BALL (Agichtein and Gravano, 2000), and Jones et al. (1999). The distant super-
vision algorithm we describe was drawn from Mintz et al. (2009), who ﬁrst used
the term ‘distant supervision’ (which was suggested to them by Chris Manning)
but similar ideas had occurred in earlier systems like Craven and Kumlien (1999)
and Morgan et al. (2004) under the name weakly labeled data, as well as in Snow
et al. (2005) and Wu and Weld (2007). Among the many extensions are Wu and
Weld (2010), Riedel et al. (2010), and Ritter et al. (2013). Open IE systems include
KNOWITALL Etzioni et al. (2005), TextRunner (Banko et al., 2007), and REVERB
(Fader et al., 2011). See Riedel et al. (2013) for a universal schema that combines
the advantages of distant supervision and Open IE.

KBP

slot ﬁlling

Exercises

19.1 Acronym expansion, the process of associating a phrase with an acronym, can

1 www.nist.gov/speech/tests/ace/

440 CHAPTER 19

•

INFORMATION EXTRACTION: RELATIONS, EVENTS, AND TIME

be accomplished by a simple form of relational analysis. Develop a system
based on the relation analysis approaches described in this chapter to populate
a database of acronym expansions.
If you focus on English Three Letter
Acronyms (TLAs) you can evaluate your system’s performance by comparing
it to Wikipedia’s TLA page.

19.2 Acquire the CMU seminar corpus and develop a template-ﬁlling system by
using any of the techniques mentioned in Section 19.8. Analyze how well
your system performs as compared with state-of-the-art results on this corpus.

19.3 A useful functionality in newer email and calendar applications is the ability
to associate temporal expressions connected with events in email (doctor’s
appointments, meeting planning, party invitations, etc.) with speciﬁc calendar
entries. Collect a corpus of email containing temporal expressions related to
event planning. How do these expressions compare to the kinds of expressions
commonly found in news text that we’ve been discussing in this chapter?

19.4 For the following sentences, give FOL translations that capture the temporal

relationships between the events.

1. When Mary’s ﬂight departed, I ate lunch.
2. When Mary’s ﬂight departed, I had eaten lunch.

CHAPTER

20 Semantic Role Labeling

“Who, What, Where, When, With what, Why, How”

The seven circumstances, associated with Hermagoras and Aristotle (Sloan, 2010)

Sometime between the 7th and 4th centuries BCE, the Indian grammarian P¯an. ini1
wrote a famous treatise on Sanskrit grammar, the As.t.¯adhy¯ay¯ı (‘8 books’), a treatise
that has been called “one of the greatest monuments of hu-
man intelligence” (Bloomﬁeld, 1933, 11). The work de-
scribes the linguistics of the Sanskrit language in the form
of 3959 sutras, each very efﬁciently (since it had to be
memorized!) expressing part of a formal rule system that
brilliantly preﬁgured modern mechanisms of formal lan-
guage theory (Penn and Kiparsky, 2012). One set of rules
describes the k¯arakas, semantic relationships between a
verb and noun arguments, roles like agent, instrument, or
destination. P¯an. ini’s work was the earliest we know of
that modeled the linguistic realization of events and their
participants. This task of understanding how participants relate to events—being
able to answer the question “Who did what to whom” (and perhaps also “when and
where”)—is a central question of natural language processing.

Let’s move forward 2.5 millennia to the present and consider the very mundane
goal of understanding text about a purchase of stock by XYZ Corporation. This
purchasing event and its participants can be described by a wide variety of surface
forms. The event can be described by a verb (sold, bought) or a noun (purchase),
and XYZ Corp can be the syntactic subject (of bought), the indirect object (of sold),
or in a genitive or noun compound relation (with the noun purchase) despite having
notionally the same role in all of them:

• XYZ corporation bought the stock.
• They sold the stock to XYZ corporation.
• The stock was bought by XYZ corporation.
• The purchase of the stock by XYZ corporation...
• The stock purchase by XYZ corporation...

In this chapter we introduce a level of representation that captures the common-
ality between these sentences:
there was a purchase event, the participants were
XYZ Corp and some stock, and XYZ Corp was the buyer. These shallow semantic
representations , semantic roles, express the role that arguments of a predicate take
in the event, codiﬁed in databases like PropBank and FrameNet. We’ll introduce
semantic role labeling, the task of assigning roles to spans in sentences, and selec-
tional restrictions, the preferences that predicates express about their arguments,
such as the fact that the theme of eat is generally something edible.

1 Figure shows a birch bark manuscript from Kashmir of the Rupavatra, a grammatical textbook based
on the Sanskrit grammar of Panini. Image from the Wellcome Collection.

442 CHAPTER 20

• SEMANTIC ROLE LABELING

20.1 Semantic Roles

Consider the meanings of the arguments Sasha, Pat, the window, and the door in
these two sentences.
(20.1) Sasha broke the window.
(20.2) Pat opened the door.

The subjects Sasha and Pat, what we might calll the breaker of the window-
breaking event and the opener of the door-opening event have something in com-
mon. They are both volitional actors, often animate, and they have direct causal
responsibility for their events.

Thematic roles are a way to capture this semantic commonality between break-
ers and openers. We say that the subjects of both these verbs are agents. Thus,
AGENT is the thematic role that represents an abstract idea such as volitional causa-
tion. Similarly, the direct objects of both these verbs, the BrokenThing and OpenedThing,
are both prototypically inanimate objects that are affected in some way by the action.
The semantic role for these participants is theme.

thematic roles

agents

theme

Thematic Role
AGENT
EXPERIENCER
FORCE
THEME
RESULT

Deﬁnition
The volitional causer of an event
The experiencer of an event
The non-volitional causer of the event
The participant most directly affected by an event
The end product of an event
The proposition or content of a propositional event
CONTENT
An instrument used in an event
INSTRUMENT
The beneﬁciary of an event
BENEFICIARY
The origin of the object of a transfer event
SOURCE
The destination of an object of a transfer event
GOAL
Figure 20.1 Some commonly used thematic roles with their deﬁnitions.

Although thematic roles are one of the oldest linguistic models, as we saw above,
their modern formulation is due to Fillmore (1968) and Gruber (1965). Although
there is no universally agreed-upon set of roles, Figs. 20.1 and 20.2 list some the-
matic roles that have been used in various computational papers, together with rough
deﬁnitions and examples. Most thematic role sets have about a dozen roles, but we’ll
see sets with smaller numbers of roles with even more abstract meanings, and sets
with very large numbers of roles that are speciﬁc to situations. We’ll use the general
term semantic roles for all sets of roles, whether small or large.

semantic roles

20.2 Diathesis Alternations

The main reason computational systems use semantic roles is to act as a shallow
meaning representation that can let us make simple inferences that aren’t possible
from the pure surface string of words, or even from the parse tree. To extend the
earlier examples, if a document says that Company A acquired Company B, we’d
like to know that this answers the query Was Company B acquired? despite the fact
that the two sentences have very different surface syntax. Similarly, this shallow
semantics might act as a useful intermediate language in machine translation.

20.2

• DIATHESIS ALTERNATIONS

443

Thematic Role
AGENT

EXPERIENCER
FORCE
THEME
RESULT
CONTENT
INSTRUMENT

Example
The waiter spilled the soup.
John has a headache.
The wind blows debris from the mall into our yards.
Only after Benjamin Franklin broke the ice...
The city built a regulation-size baseball diamond...
Mona asked “You met Mary Ann at a supermarket?”
He poached catﬁsh, stunning them with a shocking device...
Whenever Ann Callahan makes hotel reservations for her boss...
I ﬂew in from Boston.
I drove to Portland.

BENEFICIARY
SOURCE
GOAL
Figure 20.2 Some prototypical examples of various thematic roles.

Semantic roles thus help generalize over different surface realizations of pred-
icate arguments. For example, while the AGENT is often realized as the subject of
the sentence, in other cases the THEME can be the subject. Consider these possible
realizations of the thematic arguments of the verb break:

(20.3) John

AGENT

(20.4) John

AGENT

(20.5) The rock

broke the window.
THEME
broke the window
THEME
broke the window.
THEME

INSTRUMENT

with a rock.

INSTRUMENT

(20.6) The window

broke.

THEME

(20.7) The window

was broken by John.

THEME

AGENT

thematic grid

case frame

These examples suggest that break has (at least) the possible arguments AGENT,
THEME, and INSTRUMENT. The set of thematic role arguments taken by a verb is
often called the thematic grid, θ -grid, or case frame. We can see that there are
(among others) the following possibilities for the realization of these arguments of
break:

AGENT/Subject, THEME/Object
AGENT/Subject, THEME/Object,
INSTRUMENT/Subject, THEME/Object
THEME/Subject

INSTRUMENT/PPwith

It turns out that many verbs allow their thematic roles to be realized in various
syntactic positions. For example, verbs like give can realize the THEME and GOAL
arguments in two different ways:

(20.8)

a. Doris
AGENT

gave the book

THEME

to Cary.
GOAL

b. Doris
AGENT

gave Cary
GOAL

the book.
THEME

verb
alternation
dative
alternation

These multiple argument structure realizations (the fact that break can take AGENT,

INSTRUMENT, or THEME as subject, and give can realize its THEME and GOAL in
either order) are called verb alternations or diathesis alternations. The alternation
we showed above for give, the dative alternation, seems to occur with particular se-
mantic classes of verbs, including “verbs of future having” (advance, allocate, offer,

444 CHAPTER 20

• SEMANTIC ROLE LABELING

owe), “send verbs” (forward, hand, mail), “verbs of throwing” (kick, pass, throw),
and so on. Levin (1993) lists for 3100 English verbs the semantic classes to which
they belong (47 high-level classes, divided into 193 more speciﬁc classes) and the
various alternations in which they participate. These lists of verb classes have been
incorporated into the online resource VerbNet (Kipper et al., 2000), which links each
verb to both WordNet and FrameNet entries.

20.3 Semantic Roles: Problems with Thematic Roles

Representing meaning at the thematic role level seems like it should be useful in
dealing with complications like diathesis alternations. Yet it has proved quite difﬁ-
cult to come up with a standard set of roles, and equally difﬁcult to produce a formal
deﬁnition of roles like AGENT, THEME, or INSTRUMENT.

For example, researchers attempting to deﬁne role sets often ﬁnd they need to
fragment a role like AGENT or THEME into many speciﬁc roles. Levin and Rappa-
port Hovav (2005) summarize a number of such cases, such as the fact there seem
to be at least two kinds of INSTRUMENTS, intermediary instruments that can appear
as subjects and enabling instruments that cannot:

(20.9)

(20.10)

a. The cook opened the jar with the new gadget.
b. The new gadget opened the jar.

a. Shelly ate the sliced banana with a fork.
b. *The fork ate the sliced banana.

In addition to the fragmentation problem, there are cases in which we’d like to
reason about and generalize across semantic roles, but the ﬁnite discrete lists of roles
don’t let us do this.

Finally, it has proved difﬁcult to formally deﬁne the thematic roles. Consider the
AGENT role; most cases of AGENTS are animate, volitional, sentient, causal, but any
individual noun phrase might not exhibit all of these properties.

semantic role

These problems have led to alternative semantic role models that use either

proto-agent

proto-patient

many fewer or many more roles.

The ﬁrst of these options is to deﬁne generalized semantic roles that abstract
over the speciﬁc thematic roles. For example, PROTO-AGENT and PROTO-PATIENT
are generalized roles that express roughly agent-like and roughly patient-like mean-
ings. These roles are deﬁned, not by necessary and sufﬁcient conditions, but rather
by a set of heuristic features that accompany more agent-like or more patient-like
meanings. Thus, the more an argument displays agent-like properties (being voli-
tionally involved in the event, causing an event or a change of state in another par-
ticipant, being sentient or intentionally involved, moving) the greater the likelihood
that the argument can be labeled a PROTO-AGENT. The more patient-like the proper-
ties (undergoing change of state, causally affected by another participant, stationary
relative to other participants, etc.), the greater the likelihood that the argument can
be labeled a PROTO-PATIENT.

The second direction is instead to deﬁne semantic roles that are speciﬁc to a

particular verb or a particular group of semantically related verbs or nouns.

In the next two sections we describe two commonly used lexical resources that
make use of these alternative versions of semantic roles. PropBank uses both proto-
roles and verb-speciﬁc semantic roles. FrameNet uses semantic roles that are spe-
ciﬁc to a general semantic idea called a frame.

20.4 The Proposition Bank

20.4

• THE PROPOSITION BANK

445

PropBank

The Proposition Bank, generally referred to as PropBank, is a resource of sen-
tences annotated with semantic roles. The English PropBank labels all the sentences
in the Penn TreeBank; the Chinese PropBank labels sentences in the Penn Chinese
TreeBank. Because of the difﬁculty of deﬁning a universal set of thematic roles,
the semantic roles in PropBank are deﬁned with respect to an individual verb sense.
Each sense of each verb thus has a speciﬁc set of roles, which are given only numbers
rather than names: Arg0, Arg1, Arg2, and so on. In general, Arg0 represents the
PROTO-AGENT, and Arg1, the PROTO-PATIENT. The semantics of the other roles
are less consistent, often being deﬁned speciﬁcally for each verb. Nonetheless there
are some generalization; the Arg2 is often the benefactive, instrument, attribute, or
end state, the Arg3 the start point, benefactive, instrument, or attribute, and the Arg4
the end point.

Here are some slightly simpliﬁed PropBank entries for one sense each of the
verbs agree and fall. Such PropBank entries are called frame ﬁles; note that the
deﬁnitions in the frame ﬁle for each role (“Other entity agreeing”, “Extent, amount
fallen”) are informal glosses intended to be read by humans, rather than being formal
deﬁnitions.

(20.11) agree.01

Arg0: Agreer
Arg1: Proposition
Arg2: Other entity agreeing

Ex1:
Ex2:

[Arg0 The group] agreed [Arg1 it wouldn’t make an offer].
[ArgM-TMP Usually] [Arg0 John] agrees [Arg2 with Mary]
[Arg1 on everything].

(20.12) fall.01

Arg1: Logical subject, patient, thing falling
Arg2: Extent, amount fallen
Arg3: start point
Arg4: end point, end state of arg1
Ex1:
Ex2:

[Arg1 Sales] fell [Arg4 to $25 million] [Arg3 from $27 million].
[Arg1 The average junk bond] fell [Arg2 by 4.2%].

Note that there is no Arg0 role for fall, because the normal subject of fall is a

PROTO-PATIENT.

The PropBank semantic roles can be useful in recovering shallow semantic in-

formation about verbal arguments. Consider the verb increase:

(20.13) increase.01 “go up incrementally”

thing increasing

Arg0: causer of increase
Arg1:
Arg2: amount increased by, EXT, or MNR
Arg3: start point
Arg4: end point

A PropBank semantic role labeling would allow us to infer the commonality in
the event structures of the following three examples, that is, that in each case Big
Fruit Co. is the AGENT and the price of bananas is the THEME, despite the differing
surface forms.

446 CHAPTER 20

• SEMANTIC ROLE LABELING

(20.14)
(20.15)
(20.16)

[Arg0 Big Fruit Co. ] increased [Arg1 the price of bananas].
[Arg1 The price of bananas] was increased again [Arg0 by Big Fruit Co. ]
[Arg1 The price of bananas] increased [Arg2 5%].

PropBank also has a number of non-numbered arguments called ArgMs, (ArgM-
TMP, ArgM-LOC, etc.) which represent modiﬁcation or adjunct meanings. These
are relatively stable across predicates, so aren’t listed with each frame ﬁle. Data
labeled with these modiﬁers can be helpful in training systems to detect temporal,
location, or directional modiﬁcation across predicates. Some of the ArgM’s include:

when?
TMP
where?
LOC
where to/from?
DIR
how?
MNR
PRP/CAU why?
REC
ADV
PRD

miscellaneous
secondary predication

yesterday evening, now
at the museum, in San Francisco
down, to Bangkok
clearly, with much enthusiasm
because ... , in response to the ruling
themselves, each other

...ate the meat raw

NomBank

While PropBank focuses on verbs, a related project, NomBank (Meyers et al.,
2004) adds annotations to noun predicates. For example the noun agreement in
Apple’s agreement with IBM would be labeled with Apple as the Arg0 and IBM as
the Arg2. This allows semantic role labelers to assign labels to arguments of both
verbal and nominal predicates.

20.5 FrameNet

While making inferences about the semantic commonalities across different sen-
tences with increase is useful, it would be even more useful if we could make such
inferences in many more situations, across different verbs, and also between verbs
and nouns. For example, we’d like to extract the similarity among these three sen-
tences:

[Arg1 The price of bananas] increased [Arg2 5%].
[Arg1 The price of bananas] rose [Arg2 5%].

(20.17)
(20.18)
(20.19) There has been a [Arg2 5%] rise [Arg1 in the price of bananas].

Note that the second example uses the different verb rise, and the third example
uses the noun rather than the verb rise. We’d like a system to recognize that the
price of bananas is what went up, and that 5% is the amount it went up, no matter
whether the 5% appears as the object of the verb increased or as a nominal modiﬁer
of the noun rise.

The FrameNet project is another semantic-role-labeling project that attempts
to address just these kinds of problems (Baker et al. 1998, Fillmore et al. 2003,
Fillmore and Baker 2009, Ruppenhofer et al. 2016). Whereas roles in the PropBank
project are speciﬁc to an individual verb, roles in the FrameNet project are speciﬁc
to a frame.

What is a frame? Consider the following set of words:

reservation, ﬂight, travel, buy, price, cost, fare, rates, meal, plane

There are many individual lexical relations of hyponymy, synonymy, and so on
between many of the words in this list. The resulting set of relations does not,

FrameNet

frame

model

script

frame elements

20.5

• FRAMENET

447

however, add up to a complete account of how these words are related. They are
clearly all deﬁned with respect to a coherent chunk of common-sense background
information concerning air travel.

We call the holistic background knowledge that unites these words a frame (Fill-
more, 1985). The idea that groups of words are deﬁned with respect to some back-
ground information is widespread in artiﬁcial intelligence and cognitive science,
where besides frame we see related works like a model (Johnson-Laird, 1983), or
even script (Schank and Abelson, 1977).

A frame in FrameNet is a background knowledge structure that deﬁnes a set of
frame-speciﬁc semantic roles, called frame elements, and includes a set of predi-
cates that use these roles. Each word evokes a frame and proﬁles some aspect of the
frame and its elements. The FrameNet dataset includes a set of frames and frame
elements, the lexical units associated with each frame, and a set of labeled exam-
ple sentences. For example, the change position on a scale frame is deﬁned as
follows:

This frame consists of words that indicate the change of an Item’s posi-
tion on a scale (the Attribute) from a starting point (Initial value) to an
end point (Final value).

core roles

non-core roles

Some of the semantic roles (frame elements) in the frame are deﬁned as in
Fig. 20.3. Note that these are separated into core roles, which are frame speciﬁc, and
non-core roles, which are more like the Arg-M arguments in PropBank, expressing
more general properties of time, location, and so on.

ATTRIBUTE
DIFFERENCE
FINAL STATE

Core Roles
The ATTRIBUTE is a scalar property that the ITEM possesses.
The distance by which an ITEM changes its position on the scale.
A description that presents the ITEM’s state after the change in the ATTRIBUTE’s
value as an independent predication.
The position on the scale where the ITEM ends up.

FINAL VALUE
INITIAL STATE A description that presents the ITEM’s state before the change in the AT-

TRIBUTE’s value as an independent predication.
INITIAL VALUE The initial position on the scale from which the ITEM moves away.
ITEM
VALUE RANGE A portion of the scale, typically identiﬁed by its end points, along which the

The entity that has a position on the scale.

DURATION
SPEED
GROUP

values of the ATTRIBUTE ﬂuctuate.

Some Non-Core Roles

The length of time over which the change takes place.
The rate of change of the VALUE.
The GROUP in which an ITEM changes the value of an
ATTRIBUTE in a speciﬁed way.

Figure 20.3 The frame elements in the change position on a scale frame from the FrameNet Labelers
Guide (Ruppenhofer et al., 2016).

Here are some example sentences:

(20.20)
(20.21)
(20.22)
(20.23)

[ITEM Oil] rose [ATTRIBUTE in price] [DIFFERENCE by 2%].
[ITEM It] has increased [FINAL STATE to having them 1 day a month].
[ITEM Microsoft shares] fell [FINAL VALUE to 7 5/8].
[ITEM Colon cancer incidence] fell [DIFFERENCE by 50%] [GROUP among

men].

448 CHAPTER 20

• SEMANTIC ROLE LABELING

(20.24) a steady increase [INITIAL VALUE from 9.5] [FINAL VALUE to 14.3] [ITEM

in dividends]

(20.25) a [DIFFERENCE 5%] [ITEM dividend] increase...

Note from these example sentences that the frame includes target words like rise,

fall, and increase. In fact, the complete frame consists of the following words:

soar
mushroom swell
swing
triple
tumble

VERBS: dwindle move
edge
advance
explode plummet
climb
decline
fall
decrease ﬂuctuate rise
diminish gain
grow
dip
increase skyrocket
double
jump
drop

rocket
shift

reach

slide

NOUNS: hike
decline
decrease

increase
rise

tumble

escalation shift
explosion
fall
ﬂuctuation ADVERBS:
gain
increasingly
growth

FrameNet also codes relationships between frames, allowing frames to inherit
from each other, or representing relations between frames like causation (and gen-
eralizations among frame elements in different frames can be represented by inheri-
tance as well). Thus, there is a Cause change of position on a scale frame that is
linked to the Change of position on a scale frame by the cause relation, but that
adds an AGENT role and is used for causative examples such as the following:
(20.26)

[AGENT They] raised [ITEM the price of their soda] [DIFFERENCE by 2%].
Together, these two frames would allow an understanding system to extract the
common event semantics of all the verbal and nominal causative and non-causative
usages.

FrameNets have also been developed for many other languages including Span-

ish, German, Japanese, Portuguese, Italian, and Chinese.

20.6 Semantic Role Labeling

semantic role
labeling

Semantic role labeling (sometimes shortened as SRL) is the task of automatically
ﬁnding the semantic roles of each argument of each predicate in a sentence. Cur-
rent approaches to semantic role labeling are based on supervised machine learning,
often using the FrameNet and PropBank resources to specify what counts as a pred-
icate, deﬁne the set of roles used in the task, and provide training and test sets.

Recall that the difference between these two models of semantic roles is that
FrameNet (20.27) employs many frame-speciﬁc frame elements as roles, while Prop-
Bank (20.28) uses a smaller number of numbered argument labels that can be inter-
preted as verb-speciﬁc labels, along with the more general ARGM labels. Some
examples:

(20.27)

(20.28)

[You]
COGNIZER

can’t

[blame]
TARGET EVALUEE

REASON

[the program] [for being unable to identify it]

[The San Francisco Examiner]
ARG0

issued
TARGET ARG1

[a special edition]

[yesterday]
ARGM-TMP

20.6.1 A Feature-based Algorithm for Semantic Role Labeling

A simpliﬁed feature-based semantic role labeling algorithm is sketched in Fig. 20.4.
Feature-based algorithms—from the very earliest systems like (Simmons, 1973)—
begin by parsing, using broad-coverage parsers to assign a parse to the input string.

20.6

• SEMANTIC ROLE LABELING

449

Figure 20.5 shows a parse of (20.28) above. The parse is then traversed to ﬁnd all
words that are predicates.

For each of these predicates, the algorithm examines each node in the parse
tree and uses supervised classiﬁcation to decide the semantic role (if any) it plays
for this predicate. Given a labeled training set such as PropBank or FrameNet, a
feature vector is extracted for each node, using feature templates described in the
next subsection. A 1-of-N classiﬁer is then trained to predict a semantic role for
each constituent given these features, where N is the number of potential semantic
roles plus an extra NONE role for non-role constituents. Any standard classiﬁcation
algorithms can be used. Finally, for each test sentence to be labeled, the classiﬁer is
run on each relevant constituent.

function SEMANTICROLELABEL(words) returns labeled tree

←

PARSE(words)
parse
for each predicate in parse do
for each node in parse do

featurevector
CLASSIFYNODE(node, featurevector, parse)

EXTRACTFEATURES(node, predicate, parse)

←

Figure 20.4 A generic semantic-role-labeling algorithm. CLASSIFYNODE is a 1-of-N clas-
siﬁer that assigns a semantic role (or NONE for non-role constituents), trained on labeled data
such as FrameNet or PropBank.

Figure 20.5 Parse tree for a PropBank sentence, showing the PropBank argument labels. The dotted line
S
shows the path feature NP
↑

VBD for ARG0, the NP-SBJ constituent The San Francisco Examiner.
VP
↓
↓

Instead of training a single-stage classiﬁer as in Fig. 20.5, the node-level classi-

ﬁcation task can be broken down into multiple steps:

1. Pruning: Since only a small number of the constituents in a sentence are
arguments of any given predicate, many systems use simple heuristics to prune
unlikely constituents.

2. Identiﬁcation: a binary classiﬁcation of each node as an argument to be la-

beled or a NONE.

3. Classiﬁcation: a 1-of-N classiﬁcation of all the constituents that were labeled

as arguments by the previous stage

SNP-SBJ=ARG0VPDTNNPNNPNNPTheSanFranciscoExaminerVBD=TARGETNP=ARG1PP-TMP=ARGM-TMPissuedDTJJNNINNPaspecialeditionaroundNNNP-TMPnoonyesterday450 CHAPTER 20

• SEMANTIC ROLE LABELING

The separation of identiﬁcation and classiﬁcation may lead to better use of fea-
tures (different features may be useful for the two tasks) or to computational efﬁ-
ciency.

Global Optimization

The classiﬁcation algorithm of Fig. 20.5 classiﬁes each argument separately (‘lo-
cally’), making the simplifying assumption that each argument of a predicate can be
labeled independently. This assumption is false; there are interactions between argu-
ments that require a more ‘global’ assignment of labels to constituents. For example,
constituents in FrameNet and PropBank are required to be non-overlapping. More
signiﬁcantly, the semantic roles of constituents are not independent. For example
PropBank does not allow multiple identical arguments; two constituents of the same
verb cannot both be labeled ARG0 .

Role labeling systems thus often add a fourth step to deal with global consistency
across the labels in a sentence. For example, the local classiﬁers can return a list of
possible labels associated with probabilities for each constituent, and a second-pass
Viterbi decoding or re-ranking approach can be used to choose the best consensus
label. Integer linear programming (ILP) is another common way to choose a solution
that conforms best to multiple constraints.

Features for Semantic Role Labeling

Most systems use some generalization of the core set of features introduced by
Gildea and Jurafsky (2000). Common basic features templates (demonstrated on
the NP-SBJ constituent The San Francisco Examiner in Fig. 20.5) include:

• The governing predicate, in this case the verb issued. The predicate is a cru-
cial feature since labels are deﬁned only with respect to a particular predicate.
• The phrase type of the constituent, in this case, NP (or NP-SBJ). Some se-

mantic roles tend to appear as NPs, others as S or PP, and so on.

• The headword of the constituent, Examiner. The headword of a constituent
can be computed with standard head rules, such as those given in Appendix D
in Fig. 17.17. Certain headwords (e.g., pronouns) place strong constraints on
the possible semantic roles they are likely to ﬁll.

• The headword part of speech of the constituent, NNP.
• The path in the parse tree from the constituent to the predicate. This path is
marked by the dotted line in Fig. 20.5. Following Gildea and Jurafsky (2000),
and
we can use a simple linear representation of the path, NP
represent upward and downward movement in the tree, respectively. The
↓
path is very useful as a compact representation of many kinds of grammatical
function relationships between the constituent and the predicate.

VBD.
VP
↓

S
↓
↑

↑

• The voice of the clause in which the constituent appears, in this case, active
(as contrasted with passive). Passive sentences tend to have strongly different
linkings of semantic roles to surface form than do active ones.

• The binary linear position of the constituent with respect to the predicate,

either before or after.

• The subcategorization of the predicate, the set of expected arguments that
appear in the verb phrase. We can extract this information by using the phrase-
structure rule that expands the immediate parent of the predicate; VP
VBD
NP PP for the predicate in Fig. 20.5.

→

• The named entity type of the constituent.

20.6

• SEMANTIC ROLE LABELING

451

• The ﬁrst words and the last word of the constituent.

The following feature vector thus represents the ﬁrst NP in our example (recall
that most observations will have the value NONE rather than, for example, ARG0,
since most constituents in the parse tree will not bear a semantic role):

S
ARG0: [issued, NP, Examiner, NNP, NP
↓
↑
ORG, The, Examiner]

VBD, active, before, VP
VP
↓

→

NP PP,

Other features are often used in addition, such as sets of n-grams inside the
constituent, or more complex versions of the path features (the upward or downward
halves, or whether particular nodes occur in the path).

It’s also possible to use dependency parses instead of constituency parses as the
basis of features, for example using dependency parse paths instead of constituency
paths.

20.6.2 A Neural Algorithm for Semantic Role Labeling

A simple neural approach to SRL is to treat it as a sequence labeling task like named-
entity recognition, using the BIO approach. Let’s assume that we are given the
predicate and the task is just detecting and labeling spans. Recall that with BIO
tagging, we have a begin and end tag for each possible role (B-ARG0, I-ARG0; B-
ARG1, I-ARG1, and so on), plus an outside tag O.

Figure 20.6 A simple neural approach to semantic role labeling. The input sentence is
followed by [SEP] and an extra input for the predicate, in this case love. The encoder outputs
are concatenated to an indicator variable which is 1 for the predicate and 0 for all other words
After He et al. (2017) and Shi and Lin (2019).

As with all the taggers, the goal is to compute the highest probability tag se-

quence ˆy, given the input sequence of words w:

ˆy = argmax

P(y

y

T

∈

w)
|

Fig. 20.6 shows a sketch of a standard algorithm from He et al. (2017). Here each
input word is mapped to pretrained embeddings, and then each token is concatenated
with the predicate embedding and then passed through a feedforward network with
a softmax which outputs a distribution over each SRL label. For decoding, a CRF
layer can be used instead of the MLP layer on top of the biLSTM output to do global
inference, but in practice this doesn’t seem to provide much beneﬁt.

ENCODER[CLS]thecatslovehats[SEP]love[SEP]FFNB-ARG0I-ARG0B-PREDconcatenate with predicateB-ARG1FFNSoftmaxFFNFFNFFN452 CHAPTER 20

• SEMANTIC ROLE LABELING

20.6.3 Evaluation of Semantic Role Labeling

The standard evaluation for semantic role labeling is to require that each argument
label must be assigned to the exactly correct word sequence or parse constituent, and
then compute precision, recall, and F-measure. Identiﬁcation and classiﬁcation can
also be evaluated separately. Two common datasets used for evaluation are CoNLL-
2005 (Carreras and M`arquez, 2005) and CoNLL-2012 (Pradhan et al., 2013).

20.7 Selectional Restrictions

selectional
restriction

We turn in this section to another way to represent facts about the relationship be-
tween predicates and arguments. A selectional restriction is a semantic type con-
straint that a verb imposes on the kind of concepts that are allowed to ﬁll its argument
roles. Consider the two meanings associated with the following example:

(20.29) I want to eat someplace nearby.

There are two possible parses and semantic interpretations for this sentence.
In
the sensible interpretation, eat is intransitive and the phrase someplace nearby is
an adjunct that gives the location of the eating event. In the nonsensical speaker-as-
Godzilla interpretation, eat is transitive and the phrase someplace nearby is the direct
object and the THEME of the eating, like the NP Malaysian food in the following
sentences:

(20.30)

I want to eat Malaysian food.

How do we know that someplace nearby isn’t the direct object in this sentence?
One useful cue is the semantic fact that the THEME of EATING events tends to be
something that is edible. This restriction placed by the verb eat on the ﬁller of its
THEME argument is a selectional restriction.

Selectional restrictions are associated with senses, not entire lexemes. We can

see this in the following examples of the lexeme serve:

(20.31) The restaurant serves green-lipped mussels.
(20.32) Which airlines serve Denver?
Example (20.31) illustrates the offering-food sense of serve, which ordinarily re-
stricts its THEME to be some kind of food Example (20.32) illustrates the provides a
commercial service to sense of serve, which constrains its THEME to be some type
of appropriate location.

Selectional restrictions vary widely in their speciﬁcity. The verb imagine, for
example, imposes strict requirements on its AGENT role (restricting it to humans
and other animate entities) but places very few semantic requirements on its THEME
role. A verb like diagonalize, on the other hand, places a very speciﬁc constraint
on the ﬁller of its THEME role: it has to be a matrix, while the arguments of the
adjective odorless are restricted to concepts that could possess an odor:
(20.33) In rehearsal, I often ask the musicians to imagine a tennis game.
(20.34) Radon is an odorless gas that can’t be detected by human senses.
(20.35) To diagonalize a matrix is to ﬁnd its eigenvalues.

These examples illustrate that the set of concepts we need to represent selectional
restrictions (being a matrix, being able to possess an odor, etc) is quite open ended.
This distinguishes selectional restrictions from other features for representing lexical
knowledge, like parts-of-speech, which are quite limited in number.

20.7

• SELECTIONAL RESTRICTIONS

453

20.7.1 Representing Selectional Restrictions

One way to capture the semantics of selectional restrictions is to use and extend the
event representation of Chapter 19. Recall that the neo-Davidsonian representation
of an event consists of a single variable that stands for the event, a predicate denoting
the kind of event, and variables and relations for the event roles. Ignoring the issue of
the λ -structures and using thematic roles rather than deep event roles, the semantic
contribution of a verb like eat might look like the following:

e, x, y Eating(e)

∃

Agent(e, x)

∧

∧

T heme(e, y)

With this representation, all we know about y, the ﬁller of the THEME role, is that
it is associated with an Eating event through the Theme relation. To stipulate the
selectional restriction that y must be something edible, we simply add a new term to
that effect:

e, x, y Eating(e)

∃

Agent(e, x)

∧

∧

T heme(e, y)

∧

EdibleT hing(y)

When a phrase like ate a hamburger is encountered, a semantic analyzer can form
the following kind of representation:

e, x, y Eating(e)

∃

Eater(e, x)

∧

∧

T heme(e, y)

∧

EdibleT hing(y)

∧

Hamburger(y)

This representation is perfectly reasonable since the membership of y in the category
Hamburger is consistent with its membership in the category EdibleThing, assuming
a reasonable set of facts in the knowledge base. Correspondingly, the representation
for a phrase such as ate a takeoff would be ill-formed because membership in an
event-like category such as Takeoff would be inconsistent with membership in the
category EdibleThing.

While this approach adequately captures the semantics of selectional restrictions,
there are two problems with its direct use. First, using FOL to perform the simple
task of enforcing selectional restrictions is overkill. Other, far simpler, formalisms
can do the job with far less computational cost. The second problem is that this
approach presupposes a large, logical knowledge base of facts about the concepts
that make up selectional restrictions. Unfortunately, although such common-sense
knowledge bases are being developed, none currently have the kind of coverage
necessary to the task.

A more practical approach is to state selectional restrictions in terms of WordNet
synsets rather than as logical concepts. Each predicate simply speciﬁes a WordNet
synset as the selectional restriction on each of its arguments. A meaning representa-
tion is well-formed if the role ﬁller word is a hyponym (subordinate) of this synset.
For our ate a hamburger example, for instance, we could set the selectional
restriction on the THEME role of the verb eat to the synset
, glossed
as any substance that can be metabolized by an animal to give energy and build
tissue. Luckily, the chain of hypernyms for hamburger shown in Fig. 20.7 reveals
that hamburgers are indeed food. Again, the ﬁller of a role need not match the
restriction synset exactly; it just needs to have the synset as one of its superordinates.
We can apply this approach to the THEME roles of the verbs imagine, lift, and di-
agonalize, discussed earlier. Let us restrict imagine’s THEME to the synset
,
entity
}
lift’s THEME to
. This arrangement
matrix
}
correctly permits imagine a hamburger and lift a hamburger, while also correctly
ruling out diagonalize a hamburger.

physical entity
{

, and diagonalize to

food, nutrient

{

}

{

}

{

454 CHAPTER 20

• SEMANTIC ROLE LABELING

Sense 1
hamburger, beefburger --
(a fried cake of minced beef served on a bun)
=> sandwich

=> snack food
=> dish

=> nutriment, nourishment, nutrition...

=> food, nutrient
=> substance
=> matter

=> physical entity

=> entity

Figure 20.7 Evidence from WordNet that hamburgers are edible.

20.7.2 Selectional Preferences

In the earliest implementations, selectional restrictions were considered strict con-
straints on the kind of arguments a predicate could take (Katz and Fodor 1963,
Hirst 1987). For example, the verb eat might require that its THEME argument be
[+FOOD]. Early word sense disambiguation systems used this idea to rule out senses
that violated the selectional restrictions of their governing predicates.

Very quickly, however, it became clear that these selectional restrictions were
better represented as preferences rather than strict constraints (Wilks 1975b, Wilks
1975a). For example, selectional restriction violations (like inedible arguments of
eat) often occur in well-formed sentences, for example because they are negated
(20.36), or because selectional restrictions are overstated (20.37):

(20.36) But it fell apart in 1931, perhaps because people realized you can’t eat

gold for lunch if you’re hungry.

(20.37) In his two championship trials, Mr. Kulkarni ate glass on an empty

stomach, accompanied only by water and tea.

Modern systems for selectional preferences therefore specify the relation be-

tween a predicate and its possible arguments with soft constraints of some kind.

Selectional Association

One of the most inﬂuential has been the selectional association model of Resnik
(1993). Resnik deﬁnes the idea of selectional preference strength as the general
amount of information that a predicate tells us about the semantic class of its argu-
ments. For example, the verb eat tells us a lot about the semantic class of its direct
objects, since they tend to be edible. The verb be, by contrast, tells us less about
its direct objects. The selectional preference strength can be deﬁned by the differ-
ence in information between two distributions: the distribution of expected semantic
classes P(c) (how likely is it that a direct object will fall into class c) and the dis-
tribution of expected semantic classes for the particular verb P(c
v) (how likely is
|
it that the direct object of the speciﬁc verb v will fall into semantic class c). The
greater the difference between these distributions, the more information the verb
is giving us about possible objects. The difference between these two distributions
can be quantiﬁed by relative entropy, or the Kullback-Leibler divergence (Kullback
Q) expresses the
and Leibler, 1951). The Kullback-Leibler or KL divergence D(P

||

selectional
preference
strength

relative entropy

KL divergence

20.7

• SELECTIONAL RESTRICTIONS

455

difference between two probability distributions P and Q

D(P

Q) =

P(x) log

||

P(x)
Q(x)

(20.38)

x
(cid:88)
The selectional preference SR(v) uses the KL divergence to express how much in-
formation, in bits, the verb v expresses about the possible semantic class of its argu-
ment.

v)
SR(v) = D(P(c
||
|
v) log
P(c
|

=

P(c))

c
(cid:88)

v)
P(c
|
P(c)

(20.39)

selectional
association

Resnik then deﬁnes the selectional association of a particular class and verb as the
relative contribution of that class to the general selectional preference of the verb:

AR(v, c) =

1
SR(v)

v) log
P(c
|

P(c
v)
|
P(c)

(20.40)

The selectional association is thus a probabilistic measure of the strength of asso-
ciation between a predicate and a class dominating the argument to the predicate.
Resnik estimates the probabilities for these associations by parsing a corpus, count-
ing all the times each predicate occurs with each argument word, and assuming
that each word is a partial observation of all the WordNet concepts containing the
word. The following table from Resnik (1996) shows some sample high and low
selectional associations for verbs and some WordNet semantic classes of their direct
objects.

Verb
read
write
see

Direct Object
Semantic Class Assoc
WRITING
WRITING
ENTITY

6.80
7.26
5.79

Direct Object
Semantic Class Assoc
ACTIVITY
COMMERCE
METHOD

-.20
0
-0.01

Selectional Preference via Conditional Probability

An alternative to using selectional association between a verb and the WordNet class
of its arguments is to use the conditional probability of an argument word given a
predicate verb, directly modeling the strength of association of one verb (predicate)
with one noun (argument).

The conditional probability model can be computed by parsing a very large cor-
pus (billions of words), and computing co-occurrence counts: how often a given
verb occurs with a given noun in a given relation. The conditional probability of an
argument noun given a verb for a particular relation P(n
v, r) can then be used as a
|
selectional preference metric for that pair of words (Brockmann and Lapata 2003,
Keller and Lapata 2003):

P(n

v, r) =
|

(cid:40)

C(n,v,r)
C(v,r)

if C(n, v, r) > 0

0 otherwise

The inverse probability P(v
n, r) was found to have better performance in some cases
|
(Brockmann and Lapata, 2003):

n, r) =
P(v
|

(cid:40)

C(n,v,r)
C(n,r)

if C(n, v, r) > 0

0 otherwise

456 CHAPTER 20

• SEMANTIC ROLE LABELING

pseudowords

An even simpler approach is to use the simple log co-occurrence frequency of
the predicate with the argument log count(v, n, r) instead of conditional probability;
this seems to do better for extracting preferences for syntactic subjects rather than
objects (Brockmann and Lapata, 2003).

Evaluating Selectional Preferences

One way to evaluate models of selectional preferences is to use pseudowords (Gale
et al. 1992b, Sch¨utze 1992a). A pseudoword is an artiﬁcial word created by concate-
nating a test word in some context (say banana) with a confounder word (say door)
to create banana-door). The task of the system is to identify which of the two words
is the original word. To evaluate a selectional preference model (for example on the
relationship between a verb and a direct object) we take a test corpus and select all
verb tokens. For each verb token (say drive) we select the direct object (e.g., car),
concatenated with a confounder word that is its nearest neighbor, the noun with the
frequency closest to the original (say house), to make car/house). We then use the
selectional preference model to choose which of car and house are more preferred
objects of drive, and compute how often the model chooses the correct original ob-
ject (e.g., car) (Chambers and Jurafsky, 2010).

Another evaluation metric is to get human preferences for a test set of verb-
argument pairs, and have them rate their degree of plausibility. This is usually done
by using magnitude estimation, a technique from psychophysics, in which subjects
rate the plausibility of an argument proportional to a modulus item. A selectional
preference model can then be evaluated by its correlation with the human prefer-
ences (Keller and Lapata, 2003).

20.8 Primitive Decomposition of Predicates

One way of thinking about the semantic roles we have discussed through the chapter
is that they help us deﬁne the roles that arguments play in a decompositional way,
based on ﬁnite lists of thematic roles (agent, patient, instrument, proto-agent, proto-
patient, etc.). This idea of decomposing meaning into sets of primitive semantic
elements or features, called primitive decomposition or componential analysis,
has been taken even further, and focused particularly on predicates.

componential
analysis

Consider these examples of the verb kill:

(20.41) Jim killed his philodendron.

(20.42) Jim did something to cause his philodendron to become not alive.

There is a truth-conditional (‘propositional semantics’) perspective from which these
two sentences have the same meaning. Assuming this equivalence, we could repre-
sent the meaning of kill as:

(20.43) KILL(x,y)

⇔

CAUSE(x, BECOME(NOT(ALIVE(y))))

thus using semantic primitives like do, cause, become not, and alive.

Indeed, one such set of potential semantic primitives has been used to account
for some of the verbal alternations discussed in Section 20.2 (Lakoff 1965, Dowty
1979). Consider the following examples.

(20.44) John opened the door.
(20.45) The door opened.

⇒
BECOME(OPEN(door))

CAUSE(John, BECOME(OPEN(door)))

⇒

conceptual
dependency

20.9

• SUMMARY

457

(20.46) The door is open.

OPEN(door)

⇒

The decompositional approach asserts that a single state-like predicate associ-
ated with open underlies all of these examples. The differences among the meanings
of these examples arises from the combination of this single predicate with the prim-
itives CAUSE and BECOME.

While this approach to primitive decomposition can explain the similarity be-
tween states and actions or causative and non-causative predicates, it still relies on
having a large number of predicates like open. More radical approaches choose to
break down these predicates as well. One such approach to verbal predicate decom-
position that played a role in early natural language systems is conceptual depen-
dency (CD), a set of ten primitive predicates, shown in Fig. 20.8.

Primitive
ATRANS

PTRANS
MTRANS

MBUILD
PROPEL
MOVE
INGEST
EXPEL
SPEAK
ATTEND

Deﬁnition
The abstract transfer of possession or control from one entity to
another
The physical transfer of an object from one location to another
The transfer of mental concepts between entities or within an
entity
The creation of new information within an entity
The application of physical force to move an object
The integral movement of a body part by an animal
The taking in of a substance by an animal
The expulsion of something from an animal
The action of producing a sound
The action of focusing a sense organ

Figure 20.8 A set of conceptual dependency primitives.

Below is an example sentence along with its CD representation. The verb brought
is translated into the two primitives ATRANS and PTRANS to indicate that the waiter
both physically conveyed the check to Mary and passed control of it to her. Note
that CD also associates a ﬁxed set of thematic roles with each primitive to represent
the various participants in the action.

(20.47) The waiter brought Mary the check.

x, y Atrans(x)

∧
Ptrans(y)

Actor(x,Waiter)

∧
Actor(y,Waiter)

∃

∧

∧

Ob ject(x,Check)
∧
Ob ject(y,Check)
∧

∧

To(x, Mary)
To(y, Mary)

20.9 Summary

• Semantic roles are abstract models of the role an argument plays in the event

described by the predicate.

• Thematic roles are a model of semantic roles based on a single ﬁnite list of
roles. Other semantic role models include per-verb semantic role lists and
proto-agent/proto-patient, both of which are implemented in PropBank,
and per-frame role lists, implemented in FrameNet.

458 CHAPTER 20

• SEMANTIC ROLE LABELING

• Semantic role labeling is the task of assigning semantic role labels to the
constituents of a sentence. The task is generally treated as a supervised ma-
chine learning task, with models trained on PropBank or FrameNet. Algo-
rithms generally start by parsing a sentence and then automatically tag each
parse tree node with a semantic role. Neural models map straight from words
end-to-end.

• Semantic selectional restrictions allow words (particularly predicates) to post
constraints on the semantic properties of their argument words. Selectional
preference models (like selectional association or simple conditional proba-
bility) allow a weight or probability to be assigned to the association between
a predicate and an argument word or class.

Bibliographical and Historical Notes

Although the idea of semantic roles dates back to P¯an. ini, they were re-introduced
into modern linguistics by Gruber (1965), Fillmore (1966) and Fillmore (1968). Fill-
more had become interested in argument structure by studying Lucien Tesni`ere’s
groundbreaking ´El´ements de Syntaxe Structurale (Tesni`ere, 1959) in which the term
‘dependency’ was introduced and the foundations were laid for dependency gram-
mar. Following Tesni`ere’s terminology, Fillmore ﬁrst referred to argument roles as
actants (Fillmore, 1966) but quickly switched to the term case, (see Fillmore (2003))
and proposed a universal list of semantic roles or cases (Agent, Patient, Instrument,
etc.), that could be taken on by the arguments of predicates. Verbs would be listed in
the lexicon with their case frame, the list of obligatory (or optional) case arguments.
The idea that semantic roles could provide an intermediate level of semantic
representation that could help map from syntactic parse structures to deeper, more
fully-speciﬁed representations of meaning was quickly adopted in natural language
processing, and systems for extracting case frames were created for machine transla-
tion (Wilks, 1973), question-answering (Hendrix et al., 1973), spoken-language pro-
cessing (Nash-Webber, 1975), and dialogue systems (Bobrow et al., 1977). General-
purpose semantic role labelers were developed. The earliest ones (Simmons, 1973)
ﬁrst parsed a sentence by means of an ATN (Augmented Transition Network) parser.
Each verb then had a set of rules specifying how the parse should be mapped to se-
mantic roles. These rules mainly made reference to grammatical functions (subject,
object, complement of speciﬁc prepositions) but also checked constituent internal
features such as the animacy of head nouns. Later systems assigned roles from pre-
built parse trees, again by using dictionaries with verb-speciﬁc case frames (Levin
1977, Marcus 1980).

By 1977 case representation was widely used and taught in AI and NLP courses,
and was described as a standard of natural language processing in the ﬁrst edition of
Winston’s 1977 textbook Artiﬁcial Intelligence.

In the 1980s Fillmore proposed his model of frame semantics, later describing

the intuition as follows:

“The idea behind frame semantics is that speakers are aware of possi-
bly quite complex situation types, packages of connected expectations,
that go by various names—frames, schemas, scenarios, scripts, cultural
narratives, memes—and the words in our language are understood with
such frames as their presupposed background.” (Fillmore, 2012, p. 712)

BIBLIOGRAPHICAL AND HISTORICAL NOTES

459

The word frame seemed to be in the air for a suite of related notions proposed at
about the same time by Minsky (1974), Hymes (1974), and Goffman (1974), as
well as related notions with other names like scripts (Schank and Abelson, 1975)
and schemata (Bobrow and Norman, 1975) (see Tannen (1979) for a comparison).
Fillmore was also inﬂuenced by the semantic ﬁeld theorists and by a visit to the Yale
AI lab where he took notice of the lists of slots and ﬁllers used by early information
extraction systems like DeJong (1982) and Schank and Abelson (1977). In the 1990s
Fillmore drew on these insights to begin the FrameNet corpus annotation project.

At the same time, Beth Levin drew on her early case frame dictionaries (Levin,
1977) to develop her book which summarized sets of verb classes deﬁned by shared
argument realizations (Levin, 1993). The VerbNet project built on this work (Kipper
et al., 2000), leading soon afterwards to the PropBank semantic-role-labeled corpus
created by Martha Palmer and colleagues (Palmer et al., 2005).

The combination of rich linguistic annotation and corpus-based approach in-
stantiated in FrameNet and PropBank led to a revival of automatic approaches to
semantic role labeling, ﬁrst on FrameNet (Gildea and Jurafsky, 2000) and then on
PropBank data (Gildea and Palmer, 2002, inter alia). The problem ﬁrst addressed in
the 1970s by handwritten rules was thus now generally recast as one of supervised
machine learning enabled by large and consistent databases. Many popular features
used for role labeling are deﬁned in Gildea and Jurafsky (2002), Surdeanu et al.
(2003), Xue and Palmer (2004), Pradhan et al. (2005), Che et al. (2009), and Zhao
et al. (2009). The use of dependency rather than constituency parses was introduced
in the CoNLL-2008 shared task (Surdeanu et al., 2008). For surveys see Palmer
et al. (2010) and M`arquez et al. (2008).

The use of neural approaches to semantic role labeling was pioneered by Col-
lobert et al. (2011), who applied a CRF on top of a convolutional net. Early work
like Foland, Jr. and Martin (2015) focused on using dependency features. Later work
eschewed syntactic features altogether; Zhou and Xu (2015b) introduced the use of
a stacked (6-8 layer) biLSTM architecture, and (He et al., 2017) showed how to
augment the biLSTM architecture with highway networks and also replace the CRF
with A* decoding that make it possible to apply a wide variety of global constraints
in SRL decoding.

Most semantic role labeling schemes only work within a single sentence, fo-
cusing on the object of the verbal (or nominal, in the case of NomBank) predicate.
However, in many cases, a verbal or nominal predicate may have an implicit argu-
ment: one that appears only in a contextual sentence, or perhaps not at all and must
be inferred. In the two sentences This house has a new owner. The sale was ﬁnalized
10 days ago. the sale in the second sentence has no ARG1, but a reasonable reader
would infer that the Arg1 should be the house mentioned in the prior sentence. Find-
ing these arguments, implicit argument detection (sometimes shortened as iSRL)
was introduced by Gerber and Chai (2010) and Ruppenhofer et al. (2010). See Do
et al. (2017) for more recent neural models.

To avoid the need for huge labeled training sets, unsupervised approaches for
semantic role labeling attempt to induce the set of semantic roles by clustering over
arguments. The task was pioneered by Riloff and Schmelzenbach (1998) and Swier
and Stevenson (2004); see Grenager and Manning (2006), Titov and Klementiev
(2012), Lang and Lapata (2014), Woodsend and Lapata (2015), and Titov and Khod-
dam (2014).

Recent innovations in frame labeling include connotation frames, which mark
richer information about the argument of predicates. Connotation frames mark the

implicit
argument

iSRL

460 CHAPTER 20

• SEMANTIC ROLE LABELING

sentiment of the writer or reader toward the arguments (for example using the verb
survive in he survived a bombing expresses the writer’s sympathy toward the subject
he and negative sentiment toward the bombing. See Chapter 25 for more details.

Selectional preference has been widely studied beyond the selectional associa-
tion models of Resnik (1993) and Resnik (1996). Methods have included clustering
(Rooth et al., 1999), discriminative learning (Bergsma et al., 2008a), and topic mod-
els (S´eaghdha 2010, Ritter et al. 2010b), and constraints can be expressed at the level
of words or classes (Agirre and Martinez, 2001). Selectional preferences have also
been successfully integrated into semantic role labeling (Erk 2007, Zapirain et al.
2013, Do et al. 2017).

Exercises

CHAPTER

21 Lexicons for Sentiment, Affect,

and Connotation

Some day we’ll be able to measure the power of words

Maya Angelou

affective

subjectivity

In this chapter we turn to tools for interpreting affective meaning, extending our
study of sentiment analysis in Chapter 4. We use the word ‘affective’, following the
tradition in affective computing (Picard, 1995) to mean emotion, sentiment, per-
sonality, mood, and attitudes. Affective meaning is closely related to subjectivity,
the study of a speaker or writer’s evaluations, opinions, emotions, and speculations
(Wiebe et al., 1999).

How should affective meaning be deﬁned? One inﬂuential typology of affec-
tive states comes from Scherer (2000), who deﬁnes each class of affective states by
factors like its cognitive realization and time course (Fig. 21.1).

Emotion: Relatively brief episode of response to the evaluation of an external

or internal event as being of major signiﬁcance.
(angry, sad, joyful, fearful, ashamed, proud, elated, desperate)

Mood: Diffuse affect state, most pronounced as change in subjective feeling, of

low intensity but relatively long duration, often without apparent cause.
(cheerful, gloomy, irritable, listless, depressed, buoyant)

Interpersonal stance: Affective stance taken toward another person in a spe-
ciﬁc interaction, coloring the interpersonal exchange in that situation.
(distant, cold, warm, supportive, contemptuous, friendly)

Attitude: Relatively enduring, affectively colored beliefs, preferences, and pre-

dispositions towards objects or persons.
(liking, loving, hating, valuing, desiring)

Personality traits: Emotionally laden, stable personality dispositions and be-

havior tendencies, typical for a person.
(nervous, anxious, reckless, morose, hostile, jealous)

Figure 21.1 The Scherer typology of affective states (Scherer, 2000).

We can design extractors for each of these kinds of affective states. Chapter 4
already introduced sentiment analysis, the task of extracting the positive or negative
orientation that a writer expresses in a text. This corresponds in Scherer’s typology
to the extraction of attitudes: ﬁguring out what people like or dislike, from affect-
rich texts like consumer reviews of books or movies, newspaper editorials, or public
sentiment in blogs or tweets.

Detecting emotion and moods is useful for detecting whether a student is con-
fused, engaged, or certain when interacting with a tutorial system, whether a caller
to a help line is frustrated, whether someone’s blog posts or tweets indicated depres-
sion. Detecting emotions like fear in novels, for example, could help us trace what
groups or situations are feared and how that changes over time.

462 CHAPTER 21

• LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION

Detecting different interpersonal stances can be useful when extracting infor-
mation from human-human conversations. The goal here is to detect stances like
friendliness or awkwardness in interviews or friendly conversations, for example for
summarizing meetings or ﬁnding parts of a conversation where people are especially
excited or engaged, conversational hot spots that can help in meeting summariza-
tion. Detecting the personality of a user—such as whether the user is an extrovert
or the extent to which they are open to experience— can help improve conversa-
tional agents, which seem to work better if they match users’ personality expecta-
tions (Mairesse and Walker, 2008). And affect is important for generation as well
as recognition; synthesizing affect is important for conversational agents in various
domains, including literacy tutors such as children’s storybooks, or computer games.
In Chapter 4 we introduced the use of naive Bayes classiﬁcation to classify a
document’s sentiment. Various classiﬁers have been successfully applied to many of
these tasks, using all the words in the training set as input to a classiﬁer which then
determines the affect status of the text.

In this chapter we focus on an alternative model, in which instead of using every
word as a feature, we focus only on certain words, ones that carry particularly strong
cues to affect or sentiment. We call these lists of words affective lexicons or senti-
ment lexicons. These lexicons presuppose a fact about semantics: that words have
affective meanings or connotations. The word connotation has different meanings
in different ﬁelds, but here we use it to mean the aspects of a word’s meaning that
are related to a writer or reader’s emotions, sentiment, opinions, or evaluations. In
addition to their ability to help determine the affective status of a text, connotation
lexicons can be useful features for other kinds of affective tasks, and for computa-
tional social science analysis.

In the next sections we introduce basic theories of emotion, show how sentiment
lexicons are a special case of emotion lexicons, and mention some useful lexicons.
We then survey three ways for building lexicons: human labeling, semi-supervised,
and supervised. Finally, we talk about how to detect affect toward a particular entity,
and introduce connotation frames.

connotations

21.1 Deﬁning Emotion

emotion

basic emotions

One of the most important affective classes is emotion, which Scherer (2000) deﬁnes
as a “relatively brief episode of response to the evaluation of an external or internal
event as being of major signiﬁcance”.

Detecting emotion has the potential to improve a number of language processing
tasks. Emotion recognition could help dialogue systems like tutoring systems detect
that a student was unhappy, bored, hesitant, conﬁdent, and so on. Automatically
detecting emotions in reviews or customer responses (anger, dissatisfaction, trust)
could help businesses recognize speciﬁc problem areas or ones that are going well.
Emotion can play a role in medical NLP tasks like helping diagnose depression or
suicidal intent. Detecting emotions expressed toward characters in novels might
play a role in understanding how different social groups were viewed by society at
different times.

Computational models of emotion in NLP have mainly been based on two fami-
lies of theories of emotion (out of the many studied in the ﬁeld of affective science).
In one of these families, emotions are viewed as ﬁxed atomic units, limited in num-
ber, and from which others are generated, often called basic emotions (Tomkins

21.1

• DEFINING EMOTION

463

1962, Plutchik 1962), a model dating back to Darwin. Perhaps the most well-known
of this family of theories are the 6 emotions proposed by Ekman (e.g., Ekman 1999)
to be universally present in all cultures: surprise, happiness, anger, fear, disgust,
sadness. Another atomic theory is the Plutchik (1980) wheel of emotion, consisting
of 8 basic emotions in four opposing pairs: joy–sadness, anger–fear, trust–disgust,
and anticipation–surprise, together with the emotions derived from them, shown in
Fig. 21.2.

Figure 21.2 Plutchik wheel of emotion.

The second class of emotion theories widely used in NLP views emotion as a
space in 2 or 3 dimensions (Russell, 1980). Most models include the two dimensions
valence and arousal, and many add a third, dominance. These can be deﬁned as:

valence: the pleasantness of the stimulus
arousal: the level of alertness, activeness, or energy provoked by the stimulus
dominance: the degree of control or dominance exerted by the stimulus or the

emotion

Sentiment can be viewed as a special case of this second view of emotions as points
in space. In particular, the valence dimension, measuring how pleasant or unpleasant
a word is, is often used directly as a measure of sentiment.

In these lexicon-based models of affect, the affective meaning of a word is gen-
erally ﬁxed, irrespective of the linguistic context in which a word is used, or the
dialect or culture of the speaker. By contrast, other models in affective science repre-
sent emotions as much richer processes involving cognition (Barrett et al., 2007). In
appraisal theory, for example, emotions are complex processes, in which a person
considers how an event is congruent with their goals, taking into account variables
like the agency, certainty, urgency, novelty and control associated with the event
(Moors et al., 2013). Computational models in NLP taking into account these richer
theories of emotion will likely play an important role in future work.

464 CHAPTER 21

• LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION

21.2 Available Sentiment and Affect Lexicons

General
Inquirer

A wide variety of affect lexicons have been created and released. The most basic
lexicons label words along one dimension of semantic variability, generally called
“sentiment” or “valence”.

In the simplest lexicons this dimension is represented in a binary fashion, with
a wordlist for positive words and a wordlist for negative words. The oldest is the
General Inquirer (Stone et al., 1966), which drew on content analysis and on early
work in the cognitive psychology of word meaning (Osgood et al., 1957). The Gen-
eral Inquirer has a lexicon of 1915 positive words and a lexicon of 2291 negative
words (as well as other lexicons discussed below). The MPQA Subjectivity lexicon
(Wilson et al., 2005) has 2718 positive and 4912 negative words drawn from prior
lexicons plus a bootstrapped list of subjective words and phrases (Riloff and Wiebe,
2003). Each entry in the lexicon is hand-labeled for sentiment and also labeled for
reliability (strongly subjective or weakly subjective). The polarity lexicon of Hu
and Liu (2004b) gives 2006 positive and 4783 negative words, drawn from product
reviews, labeled using a bootstrapping method from WordNet.

Positive

admire, amazing, assure, celebration, charm, eager, enthusiastic, excellent, fancy, fan-
tastic, frolic, graceful, happy, joy, luck, majesty, mercy, nice, patience, perfect, proud,
rejoice, relief, respect, satisfactorily, sensational, super, terriﬁc, thank, vivid, wise, won-
derful, zest

Negative abominable, anger, anxious, bad, catastrophe, cheap, complaint, condescending, deceit,
defective, disappointment, embarrass, fake, fear, ﬁlthy, fool, guilt, hate, idiot, inﬂict, lazy,
miserable, mourn, nervous, objection, pest, plot, reject, scream, silly, terrible, unfriendly,
vile, wicked

Figure 21.3 Some words with consistent sentiment across the General Inquirer (Stone et al., 1966), the
MPQA Subjectivity lexicon (Wilson et al., 2005), and the polarity lexicon of Hu and Liu (2004b).

Slightly more general than these sentiment lexicons are lexicons that assign each
word a value on all three affective dimensions. The NRC Valence, Arousal, and
Dominance (VAD) lexicon (Mohammad, 2018a) assigns valence, arousal, and dom-
inance scores to 20,000 words. Some examples are shown in Fig. 21.4.

Valence

Arousal

Dominance

vacation
delightful
whistle
consolation
torture

.840
.918
.653
.408
.115

enraged
party
organized
effortless
napping

.962
.840
.337
.120
.046

powerful
authority
saxophone
discouraged
weak

.991
.935
.482
.0090
.045

Figure 21.4 Values of sample words on the emotional dimensions of Mohammad (2018a).

EmoLex

The NRC Word-Emotion Association Lexicon, also called EmoLex (Moham-
mad and Turney, 2013), uses the Plutchik (1980) 8 basic emotions deﬁned above.
The lexicon includes around 14,000 words including words from prior lexicons as
well as frequent nouns, verbs, adverbs and adjectives. Values from the lexicon for
some sample words:

21.3

• CREATING AFFECT LEXICONS BY HUMAN LABELING

465

n
o
i
t
a
p
i
c
i
t
n
a

r
e
g
n
a

t
s
u
g
s
i
d

r
a
e
f

y
o
j

s
s
e
n
d
a
s

e
s
i
r
p
r
u
s

e
v
i
t
i
s
o
p

e
v
i
t
a
g
e
n

t
s
u
r
t

Word
reward
0 1 0 0 1 0 1 1 1 0
0 1 0 1 0 1 0 0 0 1
worry
tenderness 0 0 0 0 1 0 0 0 1 0
sweetheart 0 1 0 0 1 1 0 1 1 0
0 0 0 0 0 0 1 0 0 0
suddenly
0 1 0 0 0 1 1 0 0 0
thirst
0 0 1 0 0 0 0 0 0 1
garbage

For a smaller set of 5,814 words, the NRC Emotion/Affect Intensity Lexicon
(Mohammad, 2018b) contains real-valued scores of association for anger, fear, joy,
and sadness; Fig. 21.5 shows examples.

Anger

Fear

Joy

Sadness

0.964
outraged
0.742
violence
0.578
coup
oust
0.484
suspicious 0.484
0.059
nurture

0.864
superb
0.923
horror
cheered
0.773
anguish
0.703
rainbow 0.531
pestilence 0.625
0.387
0.531
stressed
gesture
0.391
0.531 warms
failing
.031
0.094
conﬁdent

hardship

0.844
sad
0.750
guilt
unkind
0.547
difﬁculties 0.421
0.422
beggar
0.017
sing

Figure 21.5 Sample emotional intensities for words for anger, fear, joy, and sadness from
Mohammad (2018b).

LIWC

concrete

abstract

LIWC, Linguistic Inquiry and Word Count, is a widely used set of 73 lex-
icons containing over 2300 words (Pennebaker et al., 2007), designed to capture
aspects of lexical meaning relevant for social psychological tasks. In addition to
sentiment-related lexicons like ones for negative emotion (bad, weird, hate, prob-
lem, tough) and positive emotion (love, nice, sweet), LIWC includes lexicons for
categories like anger, sadness, cognitive mechanisms, perception, tentative, and in-
hibition, shown in Fig. 21.6.

There are various other hand-built affective lexicons. The General Inquirer in-
cludes additional lexicons for dimensions like strong vs. weak, active vs. passive,
overstated vs. understated, as well as lexicons for categories like pleasure, pain,
virtue, vice, motivation, and cognitive orientation.

Another useful feature for various tasks is the distinction between concrete
words like banana or bathrobe and abstract words like belief and although. The
lexicon in Brysbaert et al. (2014) used crowdsourcing to assign a rating from 1 to 5
of the concreteness of 40,000 words, thus assigning banana, bathrobe, and bagel 5,
belief 1.19, although 1.07, and in between words like brisk a 2.5.

21.3 Creating Affect Lexicons by Human Labeling

crowdsourcing

The earliest method used to build affect lexicons, and still in common use, is to have
humans label each word. This is now most commonly done via crowdsourcing:
breaking the task into small pieces and distributing them to a large number of anno-

466 CHAPTER 21

• LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION

Positive
Emotion
appreciat*
comfort*
great
happy
interest
joy*
perfect*
please*
safe*
terriﬁc
value
wow*

Negative
Emotion
anger*
bore*
cry
despair*
fail*
fear
griev*
hate*
panic*
suffers
terrify
violent*

Insight
aware*
believe
decid*
feel
ﬁgur*
know
knew
means
notice*
recogni*
sense
think

Inhibition
avoid*
careful*
hesitat*
limit*
oppos*
prevent*
reluctan*
safe*
stop
stubborn*
wait
wary

Family
brother*
cousin*
daughter*
family
father*
grandf*
grandm*
husband
mom
mother
niece*
wife

Negate
aren’t
cannot
didn’t
neither
never
no
nobod*
none
nor
nothing
nowhere
without

Figure 21.6 Samples from 5 of the 73 lexical categories in LIWC (Pennebaker et al., 2007).
The * means the previous letters are a word preﬁx and all words with that preﬁx are included
in the category.

tators. Let’s take a look at some of the methodological choices for two crowdsourced
emotion lexicons.

The NRC Emotion Lexicon (EmoLex) (Mohammad and Turney, 2013), labeled
emotions in two steps. To ensure that the annotators were judging the correct sense
of the word, they ﬁrst answered a multiple-choice synonym question that primed
the correct sense of the word (without requiring the annotator to read a potentially
confusing sense deﬁnition). These were created automatically using the headwords
associated with the thesaurus category of the sense in question in the Macquarie
dictionary and the headwords of 3 random distractor categories. An example:

Which word is closest in meaning (most related) to startle?

• automobile
• shake
• honesty
• entertain

For each word (e.g. startle), the annotator was then asked to rate how associated
that word is with each of the 8 emotions (joy, fear, anger, etc.). The associations
were rated on a scale of not, weakly, moderately, and strongly associated. Outlier
ratings were removed, and then each term was assigned the class chosen by the ma-
jority of the annotators, with ties broken by choosing the stronger intensity, and then
the 4 levels were mapped into a binary label for each word (no and weak mapped to
0, moderate and strong mapped to 1).

The NRC VAD Lexicon (Mohammad, 2018a) was built by selecting words and
emoticons from prior lexicons and annotating them with crowd-sourcing using best-
worst scaling (Louviere et al. 2015, Kiritchenko and Mohammad 2017). In best-
worst scaling, annotators are given N items (usually 4) and are asked which item is
the best (highest) and which is the worst (lowest) in terms of some property. The
set of words used to describe the ends of the scales are taken from prior literature.
For valence, for example, the raters were asked:

Q1. Which of the four words below is associated with the MOST happi-
ness / pleasure / positiveness / satisfaction / contentedness / hopefulness
OR LEAST unhappiness / annoyance / negativeness / dissatisfaction /

best-worst
scaling

21.4

• SEMI-SUPERVISED INDUCTION OF AFFECT LEXICONS

467

melancholy / despair? (Four words listed as options.)
Q2. Which of the four words below is associated with the LEAST hap-
piness / pleasure / positiveness / satisfaction / contentedness / hopeful-
ness OR MOST unhappiness / annoyance / negativeness / dissatisfaction
/ melancholy / despair? (Four words listed as options.)

The score for each word in the lexicon is the proportion of times the item was chosen
as the best (highest V/A/D) minus the proportion of times the item was chosen as the
worst (lowest V/A/D). The agreement between annotations are evaluated by split-
half reliability: split the corpus in half and compute the correlations between the
annotations in the two halves.

split-half
reliability

21.4 Semi-supervised Induction of Affect Lexicons

Another common way to learn sentiment lexicons is to start from a set of seed words
that deﬁne two poles of a semantic axis (words like good or bad), and then ﬁnd ways
to label each word w by its similarity to the two seed sets. Here we summarize two
families of seed-based semi-supervised lexicon induction algorithms, axis-based and
graph-based.

21.4.1 Semantic Axis Methods

One of the most well-known lexicon induction methods, the Turney and Littman
(2003) algorithm, is given seed words like good or bad, and then for each word w to
be labeled, measures both how similar it is to good and how different it is from bad.
Here we describe a slight extension of the algorithm due to An et al. (2018), which
is based on computing a semantic axis.

In the ﬁrst step, we choose seed words by hand. There are two methods for
dealing with the fact that the affect of a word is different in different contexts: (1)
start with a single large seed lexicon and rely on the induction algorithm to ﬁne-tune
it to the domain, or (2) choose different seed words for different genres. Hellrich
et al. (2019) suggests that for modeling affect across different historical time periods,
starting with a large modern affect dictionary is better than small seedsets tuned to be
stable across time. As an example of the second approach, Hamilton et al. (2016a)
deﬁne one set of seed words for general sentiment analysis, a different set for Twitter,
and yet another set for sentiment in ﬁnancial text:

Domain

Positive seeds

Negative seeds

General

Twitter

Finance

loved,

loved,

good, lovely, excellent, fortunate, pleas-
ant, delightful, perfect,
love,
happy
loves, awesome, nice,
love,
amazing, best, fantastic, correct, happy
successful, excellent, proﬁt, beneﬁcial,
improving,
improved, success, gains,
positive

bad, horrible, poor, unfortunate, un-
pleasant, disgusting, evil, hated, hate,
unhappy
hate, hated, hates, terrible, nasty, awful,
worst, horrible, wrong, sad
negligent, loss, volatile, wrong, losses,
damages, bad, litigation, failure, down,
negative

In the second step, we compute embeddings for each of the pole words. These
embeddings can be off-the-shelf word2vec embeddings, or can be computed directly

468 CHAPTER 21

• LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION

on a speciﬁc corpus (for example using a ﬁnancial corpus if a ﬁnance lexicon is the
goal), or we can ﬁne-tune off-the-shelf embeddings to a corpus. Fine-tuning is espe-
cially important if we have a very speciﬁc genre of text but don’t have enough data
to train good embeddings. In ﬁne-tuning, we begin with off-the-shelf embeddings
like word2vec, and continue training them on the small target corpus.

Once we have embeddings for each pole word, we create an embedding that
represents each pole by taking the centroid of the embeddings of each of the seed
words; recall that the centroid is the multidimensional version of the mean. Given
1 ), E(w+
2 ), ..., E(w+
a set of embeddings for the positive seed words S+ =
n )
,
}
and embeddings for the negative seed words S− =
E(w−1 ), E(w−2 ), ..., E(w−m)
, the
}
{
pole centroids are:

E(w+

{

V+ =

1
n

V− =

1
m

n

(cid:88)1
m

E(w+
i )

E(w−i )

(21.1)

(cid:88)1
The semantic axis deﬁned by the poles is computed just by subtracting the two vec-
tors:

Vaxis = V+

V−

−

(21.2)

Vaxis, the semantic axis, is a vector in the direction of positive sentiment. Finally,
we compute (via cosine similarity) the angle between the vector in the direction of
positive sentiment and the direction of w’s embedding. A higher cosine means that
w is more aligned with S+ than S−.

score(w) = cos

E(w), Vaxis
Vaxis
Vaxis(cid:107)

·
(cid:107)(cid:107)

E(w)
(cid:0)
E(w)
(cid:107)

=

(cid:1)

(21.3)

If a dictionary of words with sentiment scores is sufﬁcient, we’re done! Or if we
need to group words into a positive and a negative lexicon, we can use a threshold
or other method to give us discrete lexicons.

21.4.2 Label Propagation

An alternative family of methods deﬁnes lexicons by propagating sentiment labels
on graphs, an idea suggested in early work by Hatzivassiloglou and McKeown
(1997). We’ll describe the simple SentProp (Sentiment Propagation) algorithm of
Hamilton et al. (2016a), which has four steps:

1. Deﬁne a graph: Given word embeddings, build a weighted lexical graph by
connecting each word with its k nearest neighbors (according to cosine simi-
larity). The weights of the edge between words wi and w j are set as:

Ei, j = arccos

wi(cid:62)wj
wj
wi
(cid:107)

(cid:107)(cid:107)

.

(cid:107) (cid:19)

−

(cid:18)

(21.4)

2. Deﬁne a seed set: Choose positive and negative seed words.
3. Propagate polarities from the seed set: Now we perform a random walk on
this graph, starting at the seed set. In a random walk, we start at a node and

21.4

• SEMI-SUPERVISED INDUCTION OF AFFECT LEXICONS

469

then choose a node to move to with probability proportional to the edge prob-
ability. A word’s polarity score for a seed set is proportional to the probability
of a random walk from the seed set landing on that word (Fig. 21.7).

4. Create word scores: We walk from both positive and negative seed sets,
resulting in positive (rawscore+(wi)) and negative (rawscore−(wi)) raw label
scores. We then combine these values into a positive-polarity score as:

score+(wi) =

rawscore+(wi)
rawscore+(wi) + rawscore−(wi)

(21.5)

It’s often helpful to standardize the scores to have zero mean and unit variance
within a corpus.

5. Assign conﬁdence to each score: Because sentiment scores are inﬂuenced by
the seed set, we’d like to know how much the score of a word would change if
a different seed set is used. We can use bootstrap sampling to get conﬁdence
regions, by computing the propagation B times over random subsets of the
positive and negative seed sets (for example using B = 50 and choosing 7 of
the 10 seed words each time). The standard deviation of the bootstrap sampled
polarity scores gives a conﬁdence measure.

(a)

(b)

Figure 21.7
polarity scores (shown here as colors green or red) based on the frequency of random walk visits.

Intuition of the SENTPROP algorithm. (a) Run random walks from the seed words. (b) Assign

21.4.3 Other Methods

The core of semisupervised algorithms is the metric for measuring similarity with
the seed words. The Turney and Littman (2003) and Hamilton et al. (2016a) ap-
proaches above used embedding cosine as the distance metric: words were labeled
as positive basically if their embeddings had high cosines with positive seeds and
low cosines with negative seeds. Other methods have chosen other kinds of distance
metrics besides embedding cosine.

For example the Hatzivassiloglou and McKeown (1997) algorithm uses syntactic
cues; two adjectives are considered similar if they were frequently conjoined by and
and rarely conjoined by but. This is based on the intuition that adjectives conjoined
by the words and tend to have the same polarity; positive adjectives are generally
coordinated with positive, negative with negative:

fair and legitimate, corrupt and brutal

but less often positive adjectives coordinated with negative:

*fair and brutal, *corrupt and legitimate

By contrast, adjectives conjoined by but are likely to be of opposite polarity:

idolizeloveadoreappreciatelikeﬁnddislikeseenoticedisapproveabhorhateloathedespiseuncoveridolizeloveadoreappreciatelikeﬁnddislikeseenoticedisapproveabhorhateloathedespiseuncover470 CHAPTER 21

• LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION

fair but brutal

Another cue to opposite polarity comes from morphological negation (un-, im-,
-less). Adjectives with the same root but differing in a morphological negative (ad-
equate/inadequate, thoughtful/thoughtless) tend to be of opposite polarity.

Yet another method for ﬁnding words that have a similar polarity to seed words is
to make use of a thesaurus like WordNet (Kim and Hovy 2004, Hu and Liu 2004b).
A word’s synonyms presumably share its polarity while a word’s antonyms probably
have the opposite polarity. After a seed lexicon is built, each lexicon is updated as
follows, possibly iterated.

Lex+: Add synonyms of positive words (well) and antonyms (like ﬁne) of negative

words

Lex−: Add synonyms of negative words (awful) and antonyms (like evil) of positive

words

SentiWordNet

An extension of this algorithm assigns polarity to WordNet senses, called Senti-
WordNet (Baccianella et al., 2010). Fig. 21.8 shows some examples.

‘deserving of esteem’

‘may be computed or estimated’

Synset
good#6
‘agreeable or pleasing’
respectable#2 honorable#4 good#4 estimable#2
estimable#3 computable#1
sting#1 burn#4 bite#2
acute#6
acute#4
acute#1
Figure 21.8 Examples from SentiWordNet 3.0 (Baccianella et al., 2010). Note the differences between senses
of homonymous words: estimable#3 is purely objective, while estimable#2 is positive; acute can be positive
(acute#6), negative (acute#1), or neutral (acute #4).

‘of critical importance and consequence’
‘of an angle; less than 90 degrees’
‘having or experiencing a rapid onset and short but severe course’

Pos Neg Obj
0
1
0
0.75
0
0
0.875 .125
0
0.625 0.125 .250
0
0

‘cause a sharp or stinging pain’

0
0.25
1

1
0.5

0
0.5

In this algorithm, polarity is assigned to entire synsets rather than words. A
positive lexicon is built from all the synsets associated with 7 positive words, and a
negative lexicon from synsets associated with 7 negative words. A classiﬁer is then
trained from this data to take a WordNet gloss and decide if the sense being deﬁned
is positive, negative or neutral. A further step (involving a random-walk algorithm)
assigns a score to each WordNet synset for its degree of positivity, negativity, and
neutrality.

In summary, semisupervised algorithms use a human-deﬁned set of seed words
for the two poles of a dimension, and use similarity metrics like embedding cosine,
coordination, morphology, or thesaurus structure to score words by how similar they
are to the positive seeds and how dissimilar to the negative seeds.

21.5 Supervised Learning of Word Sentiment

Semi-supervised methods require only minimal human supervision (in the form of
seed sets). But sometimes a supervision signal exists in the world and can be made
use of. One such signal is the scores associated with online reviews.

The web contains an enormous number of online reviews for restaurants, movies,
books, or other products, each of which have the text of the review along with an

21.5

• SUPERVISED LEARNING OF WORD SENTIMENT

471

Movie review excerpts (IMDb)
10 A great movie. This ﬁlm is just a wonderful experience. It’s surreal, zany, witty and slapstick

all at the same time. And terriﬁc performances too.

1 This was probably the worst movie I have ever seen. The story went nowhere even though they

could have done some interesting stuff with it.

Restaurant review excerpts (Yelp)
5 The service was impeccable. The food was cooked and seasoned perfectly... The watermelon

2

1

was perfectly square ... The grilled octopus was ... mouthwatering...
...it took a while to get our waters, we got our entree before our starter, and we never received
silverware or napkins until we requested them...

I am going to try and stop being deceived by eye-catching titles. I so wanted to like this book
and was so disappointed by it.

Book review excerpts (GoodReads)

5 This book is hilarious. I would recommend it to anyone looking for a satirical read with a

romantic twist and a narrator that keeps butting in

Product review excerpts (Amazon)
5 The lid on this blender though is probably what I like the best about it... enables you to pour
into something without even taking the lid off! ... the perfect pitcher! ... works fantastic.
I hate this blender... It is nearly impossible to get frozen fruit and ice to turn into a smoothie...
You have to add a TON of liquid. I also wish it had a spout ...

1

Figure 21.9 Excerpts from some reviews from various review websites, all on a scale of 1 to 5 stars except
IMDb, which is on a scale of 1 to 10 stars.

associated review score: a value that may range from 1 star to 5 stars, or scoring 1
to 10. Fig. 21.9 shows samples extracted from restaurant, book, and movie reviews.
We can use this review score as supervision: positive words are more likely to
appear in 5-star reviews; negative words in 1-star reviews. And instead of just a
binary polarity, this kind of supervision allows us to assign a word a more complex
representation of its polarity: its distribution over stars (or other scores).

Thus in a ten-star system we could represent the sentiment of each word as a
10-tuple, each number a score representing the word’s association with that polarity
c), or some other
level. This association can be a raw count, or a likelihood P(w
|
function of the count, for each class c from 1 to 10.

For example, we could compute the IMDb likelihood of a word like disap-
point(ed/ing) occurring in a 1 star review by dividing the number of times disap-
point(ed/ing) occurs in 1-star reviews in the IMDb dataset (8,557) by the total num-
ber of words occurring in 1-star reviews (25,395,214), so the IMDb estimate of
1) is .0003.
P(disappointing
|

A slight modiﬁcation of this weighting, the normalized likelihood, can be used

as an illuminating visualization (Potts, 2011)1

c) =
P(w
|

PottsScore(w) =

count(w, c)

C count(w, c)
w
∈
c)
P(w
|
c)
c P(w
|

(cid:80)

(21.6)

(cid:80)
Dividing the IMDb estimate P(disappointing
1) of .0003 by the sum of the likeli-
|
hood P(w
c) over all categories gives a Potts score of 0.10. The word disappointing
|
thus is associated with the vector [.10, .12, .14, .14, .13, .11, .08, .06, .06, .05]. The

1 Each element of the Potts score of a word w and category c can be shown to be a variant of the
pointwise mutual information pmi(w, c) without the log term; see Exercise 25.1.

472 CHAPTER 21

• LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION

Potts diagram

Potts diagram (Potts, 2011) is a visualization of these word scores, representing the
prior sentiment of a word as a distribution over the rating categories.

Fig. 21.10 shows the Potts diagrams for 3 positive and 3 negative scalar adjec-
tives. Note that the curve for strongly positive scalars have the shape of the letter
J, while strongly negative scalars look like a reverse J. By contrast, weakly posi-
tive and negative scalars have a hump-shape, with the maximum either below the
mean (weakly negative words like disappointing) or above the mean (weakly pos-
itive words like good). These shapes offer an illuminating typology of affective
meaning.

Figure 21.10 Potts diagrams (Potts, 2011) for positive and negative scalar adjectives, show-
ing the J-shape and reverse J-shape for strongly positive and negative adjectives, and the
hump-shape for more weakly polarized adjectives.

Fig. 21.11 shows the Potts diagrams for emphasizing and attenuating adverbs.
Note that emphatics tend to have a J-shape (most likely to occur in the most posi-
tive reviews) or a U-shape (most likely to occur in the strongly positive and nega-
tive). Attenuators all have the hump-shape, emphasizing the middle of the scale and
downplaying both extremes. The diagrams can be used both as a typology of lexical
sentiment, and also play a role in modeling sentiment compositionality.

c), or normalized
w), likelihood P(w
In addition to functions like posterior P(c
|
|
likelihood (Eq. 21.6) many other functions of the count of a word occurring with a
sentiment label have been used. We’ll introduce some of these on page 476, includ-
ing ideas like normalizing the counts per writer in Eq. 21.14.

21.5.1 Log Odds Ratio Informative Dirichlet Prior

One thing we often want to do with word polarity is to distinguish between words
that are more likely to be used in one category of texts than in another. We may, for
example, want to know the words most associated with 1 star reviews versus those
associated with 5 star reviews. These differences may not be just related to senti-
ment. We might want to ﬁnd words used more often by Democratic than Republican
members of Congress, or words used more often in menus of expensive restaurants

OverviewDataMethodsCategorizationScaleinductionLookingaheadExample:attenuatorsIMDB – 53,775 tokensCategory-0.50-0.39-0.28-0.17-0.060.060.170.280.390.500.050.090.15Cat = 0.33 (p = 0.004)Cat^2 = -4.02 (p < 0.001)OpenTable – 3,890 tokensCategory-0.50-0.250.000.250.500.080.38Cat = 0.11 (p = 0.707)Cat^2 = -6.2 (p = 0.014)Goodreads – 3,424 tokensCategory-0.50-0.250.000.250.500.080.190.36Cat = -0.55 (p = 0.128)Cat^2 = -5.04 (p = 0.016)Amazon/Tripadvisor – 2,060 tokensCategory-0.50-0.250.000.250.500.120.28Cat = 0.42 (p = 0.207)Cat^2 = -2.74 (p = 0.05)somewhat/rIMDB – 33,515 tokensCategory-0.50-0.39-0.28-0.17-0.060.060.170.280.390.500.040.090.17Cat = -0.13 (p = 0.284)Cat^2 = -5.37 (p < 0.001)OpenTable – 2,829 tokensCategory-0.50-0.250.000.250.500.080.31Cat = 0.2 (p = 0.265)Cat^2 = -4.16 (p = 0.007)Goodreads – 1,806 tokensCategory-0.50-0.250.000.250.500.050.120.180.35Cat = -0.87 (p = 0.016)Cat^2 = -5.74 (p = 0.004)Amazon/Tripadvisor – 2,158 tokensCategory-0.50-0.250.000.250.500.110.29Cat = 0.54 (p = 0.183)Cat^2 = -3.32 (p = 0.045)fairly/rIMDB – 176,264 tokensCategory-0.50-0.39-0.28-0.17-0.060.060.170.280.390.500.050.090.13Cat = -0.43 (p < 0.001)Cat^2 = -3.6 (p < 0.001)OpenTable – 8,982 tokensCategory-0.50-0.250.000.250.500.080.140.190.32Cat = -0.64 (p = 0.035)Cat^2 = -4.47 (p = 0.007)Goodreads – 11,895 tokensCategory-0.50-0.250.000.250.500.070.150.34Cat = -0.71 (p = 0.072)Cat^2 = -4.59 (p = 0.018)Amazon/Tripadvisor – 5,980 tokensCategory-0.50-0.250.000.250.500.150.28Cat = 0.26 (p = 0.496)Cat^2 = -2.23 (p = 0.131)pretty/r“Potts&diagrams”Potts,&Christopher.&2011.&NSF&workshop&on&restructuring&adjectives.goodgreatexcellentdisappointingbadterribletotallyabsolutelyutterlysomewhatfairlyprettyPositive scalarsNegative scalarsEmphaticsAttenuators1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating21.5

• SUPERVISED LEARNING OF WORD SENTIMENT

473

Figure 21.11 Potts diagrams (Potts, 2011) for emphatic and attenuating adverbs.

than cheap restaurants.

Given two classes of documents, to ﬁnd words more associated with one cate-
gory than another, we could measure the difference in frequencies (is a word w more
frequent in class A or class B?). Or instead of the difference in frequencies we could
compute the ratio of frequencies, or compute the log odds ratio (the log of the ratio
between the odds of the two words). We could then sort words by whichever associ-
ation measure we pick, ranging from words overrepresented in category A to words
overrepresented in category B.

The problem with simple log-likelihood or log odds methods is that they overem-
phasize differences in very rare words, and often also in very frequent words. Very
rare words will seem to occur very differently in the two corpora since with tiny
counts there may be statistical ﬂuctations, or even zero occurrences in one corpus
compared to non-zero occurrences in the other. Very frequent words will also seem
different since all counts are large.

In this section we walk through the details of one solution to this problem: the
“log odds ratio informative Dirichlet prior” method of Monroe et al. (2008) that is a
particularly useful method for ﬁnding words that are statistically overrepresented in
one particular category of texts compared to another. It’s based on the idea of using
another large corpus to get a prior estimate of what we expect the frequency of each
word to be.

Let’s start with the goal: assume we want to know whether the word horrible
occurs more in corpus i or corpus j. We could compute the log likelihood ratio,
using f i(w) to mean the frequency of word w in corpus i, and ni to mean the total
number of words in corpus i:

log likelihood
ratio

llr(horrible) = log

Pi(horrible)
P j(horrible)
= log Pi(horrible)
fi(horrible)
ni

= log

log P j(horrible)
f j(horrible)
n j

log

(21.7)

−

−

log odds ratio

Instead, let’s compute the log odds ratio: does horrible have higher odds in i or in

OverviewDataMethodsCategorizationScaleinductionLookingaheadExample:attenuatorsIMDB – 53,775 tokensCategory-0.50-0.39-0.28-0.17-0.060.060.170.280.390.500.050.090.15Cat = 0.33 (p = 0.004)Cat^2 = -4.02 (p < 0.001)OpenTable – 3,890 tokensCategory-0.50-0.250.000.250.500.080.38Cat = 0.11 (p = 0.707)Cat^2 = -6.2 (p = 0.014)Goodreads – 3,424 tokensCategory-0.50-0.250.000.250.500.080.190.36Cat = -0.55 (p = 0.128)Cat^2 = -5.04 (p = 0.016)Amazon/Tripadvisor – 2,060 tokensCategory-0.50-0.250.000.250.500.120.28Cat = 0.42 (p = 0.207)Cat^2 = -2.74 (p = 0.05)somewhat/rIMDB – 33,515 tokensCategory-0.50-0.39-0.28-0.17-0.060.060.170.280.390.500.040.090.17Cat = -0.13 (p = 0.284)Cat^2 = -5.37 (p < 0.001)OpenTable – 2,829 tokensCategory-0.50-0.250.000.250.500.080.31Cat = 0.2 (p = 0.265)Cat^2 = -4.16 (p = 0.007)Goodreads – 1,806 tokensCategory-0.50-0.250.000.250.500.050.120.180.35Cat = -0.87 (p = 0.016)Cat^2 = -5.74 (p = 0.004)Amazon/Tripadvisor – 2,158 tokensCategory-0.50-0.250.000.250.500.110.29Cat = 0.54 (p = 0.183)Cat^2 = -3.32 (p = 0.045)fairly/rIMDB – 176,264 tokensCategory-0.50-0.39-0.28-0.17-0.060.060.170.280.390.500.050.090.13Cat = -0.43 (p < 0.001)Cat^2 = -3.6 (p < 0.001)OpenTable – 8,982 tokensCategory-0.50-0.250.000.250.500.080.140.190.32Cat = -0.64 (p = 0.035)Cat^2 = -4.47 (p = 0.007)Goodreads – 11,895 tokensCategory-0.50-0.250.000.250.500.070.150.34Cat = -0.71 (p = 0.072)Cat^2 = -4.59 (p = 0.018)Amazon/Tripadvisor – 5,980 tokensCategory-0.50-0.250.000.250.500.150.28Cat = 0.26 (p = 0.496)Cat^2 = -2.23 (p = 0.131)pretty/r“Potts&diagrams”Potts,&Christopher.&2011.&NSF&workshop&on&restructuring&adjectives.goodgreatexcellentdisappointingbadterribletotallyabsolutelyutterlysomewhatfairlyprettyPositive scalarsNegative scalarsEmphaticsAttenuators1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating1  2  3  4  5  6  7  8  9  10rating474 CHAPTER 21

• LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION

j:

lor(horrible) = log

1

(cid:18)

Pi(horrible)

Pi(horrible)
−
fi(horrible)
ni

fi(horrible)
ni

−
fi(horrible)

log

1

(cid:18)

−

(cid:19)

log 

−









1

log

P j(horrible)

−

P j(horrible)
f j(horrible)
n j

f j(horrible)
n j

−
f j(horrible)

(cid:19)






1

= log 




= log

(21.8)

(cid:19)

(cid:18)

−

−

ni

n j

fi(horrible)
The Dirichlet intuition is to use a large background corpus to get a prior estimate of
what we expect the frequency of each word w to be. We’ll do this very simply by
adding the counts from that corpus to the numerator and denominator, so that we’re
essentially shrinking the counts toward that prior. It’s like asking how large are the
differences between i and j given what we would expect given their frequencies in
a well-estimated large background corpus.

f j(horrible)

−

(cid:18)

(cid:19)

The method estimates the difference between the frequency of word w in two
, which is estimated

corpora i and j via the prior-modiﬁed log odds ratio for w, δ (i
−
w
as:

j)

j)

−

(cid:18)

δ (i
w

= log

f i
w + αw
( f i
ni + α0 −

f j
w + αw
( f j
n j + α0 −
(where ni is the size of corpus i, n j is the size of corpus j, f i
w is the count of word
w in corpus i, f j
w is the count of word w in corpus j, α0 is the scaled size of the
background corpus, and αw is the scaled count of word w in the background corpus.)
In addition, Monroe et al. (2008) make use of an estimate for the variance of the

w + αw) (cid:33)

w + αw)

(21.9)

log

(cid:32)

−

(cid:19)

log–odds–ratio:

σ 2

j)

ˆδ (i
−
w

1
f i
w + αw

+

1
f j
w + αw

≈

(cid:17)
The ﬁnal statistic for a word is then the z–score of its log–odds–ratio:

(cid:16)

j)

ˆδ (i
−
w

σ 2

j)

ˆδ (i
w

−

(21.10)

(21.11)

(cid:114)

(cid:16)

(cid:17)

The Monroe et al. (2008) method thus modiﬁes the commonly used log odds ratio
in two ways: it uses the z-scores of the log odds ratio, which controls for the amount
of variance in a word’s frequency, and it uses counts from a background corpus to
provide a prior count for words.

Fig. 21.12 shows the method applied to a dataset of restaurant reviews from
Yelp, comparing the words used in 1-star reviews to the words used in 5-star reviews
(Jurafsky et al., 2014). The largest difference is in obvious sentiment words, with the
1-star reviews using negative sentiment words like worse, bad, awful and the 5-star
reviews using positive sentiment words like great, best, amazing. But there are other
illuminating differences. 1-star reviews use logical negation (no, not), while 5-star
reviews use emphatics and emphasize universality (very, highly, every, always). 1-
star reviews use ﬁrst person plurals (we, us, our) while 5 star reviews use the second
person. 1-star reviews talk about people (manager, waiter, customer) while 5-star
reviews talk about dessert and properties of expensive restaurants like courses and
atmosphere. See Jurafsky et al. (2014) for more details.

21.6

• USING LEXICONS FOR SENTIMENT RECOGNITION

475

Class
Negative

Negation

Words in 1-star reviews
worst, rude, terrible, horrible, bad,
tasteless,
awful, disgusting, bland,
gross, mediocre, overpriced, worse,
poor
no, not

1Pl pro
3 pro
Past verb was, were, asked,

we, us, our
she, he, her, him

told, said, did,

charged, waited, left, took

Sequencers after, then
Nouns

manager, waitress, waiter, customer,
customers, attitude, waste, poisoning,
money, bill, minutes
would, should

Class
Positive

Emphatics/
universals
2 pro
Articles
Advice

Conjunct
Nouns

Words in 5-star reviews
great, best, love(d), delicious, amazing,
favorite, perfect, excellent, awesome,
friendly, fantastic, fresh, wonderful, in-
credible, sweet, yum(my)
very, highly, perfectly, deﬁnitely, abso-
lutely, everything, every, always
you
a, the
try, recommend

also, as, well, with, and
atmosphere, dessert, chocolate, wine,
course, menu

Irrealis
modals
Comp
Figure 21.12 The top 50 words associated with one–star and ﬁve-star restaurant reviews in a Yelp dataset of
900,000 reviews, using the Monroe et al. (2008) method (Jurafsky et al., 2014).

in, of, die, city, mouth

Prep, other

Auxiliaries

is/’s, can, ’ve, are

to, that

21.6 Using Lexicons for Sentiment Recognition

In Chapter 4 we introduced the naive Bayes algorithm for sentiment analysis. The
lexicons we have focused on throughout the chapter so far can be used in a number
of ways to improve sentiment detection.

In the simplest case, lexicons can be used when we don’t have sufﬁcient training
data to build a supervised sentiment analyzer; it can often be expensive to have a
human assign sentiment to each document to train the supervised classiﬁer.

In such situations, lexicons can be used in a rule-based algorithm for classiﬁca-
tion. The simplest version is just to use the ratio of positive to negative words: if a
document has more positive than negative words (using the lexicon to decide the po-
larity of each word in the document), it is classiﬁed as positive. Often a threshold λ
is used, in which a document is classiﬁed as positive only if the ratio is greater than
λ . If the sentiment lexicon includes positive and negative weights for each word,
θ +
w and θ −w , these can be used as well. Here’s a simple such sentiment algorithm:

f + =

f − =

(cid:88)w s.t. w
∈

positivelexicon

θ +
w count(w)

θ −w count(w)

> λ

negativelexicon

(cid:88)w s.t. w
∈
+ if f +
f −
if f −
f + > λ
otherwise.

−
0

sentiment = 



(21.12)

If supervised training data is available, these counts computed from sentiment lex-
icons, sometimes weighted or normalized in various ways, can also be used as fea-
tures in a classiﬁer along with other lexical or non-lexical features. We return to
such algorithms in Section 21.7.

476 CHAPTER 21

• LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION

21.7 Using Lexicons for Affect Recognition

Detection of emotion (and the other kinds of affective meaning described by Scherer
(2000)) can be done by generalizing the algorithms described above for detecting
sentiment.

The most common algorithms involve supervised classiﬁcation: a training set is
labeled for the affective meaning to be detected, and a classiﬁer is built using features
extracted from the training set. As with sentiment analysis, if the training set is large
enough, and the test set is sufﬁciently similar to the training set, simply using all
the words or all the bigrams as features in a powerful classiﬁer like SVM or logistic
regression, as described in Fig. 4.2 in Chapter 4, is an excellent algorithm whose
performance is hard to beat. Thus we can treat affective meaning classiﬁcation of a
text sample as simple document classiﬁcation.

Some modiﬁcations are nonetheless often necessary for very large datasets. For
example, the Schwartz et al. (2013) study of personality, gender, and age using 700
million words of Facebook posts used only a subset of the n-grams of lengths 1-
3. Only words and phrases used by at least 1% of the subjects were included as
features, and 2-grams and 3-grams were only kept if they had sufﬁciently high PMI
(PMI greater than 2

length, where length is the number of words):

∗

pmi(phrase) = log

p(phrase)

p(w)

phrase

(cid:89)w
∈

(21.13)

Various weights can be used for the features, including the raw count in the training
set, or some normalized probability or log probability. Schwartz et al. (2013), for
example, turn feature counts into phrase likelihoods by normalizing them by each
subject’s total word use.

p(phrase

subject) =
|

freq(phrase, subject)

freq(phrase(cid:48), subject)

(21.14)

phrase(cid:48)

vocab(subject)
(cid:88)
∈

If the training data is sparser, or not as similar to the test set, any of the lexicons
we’ve discussed can play a helpful role, either alone or in combination with all the
words and n-grams.

Many possible values can be used for lexicon features. The simplest is just an
indicator function, in which the value of a feature fL takes the value 1 if a particular
text has any word from the relevant lexicon L. Using the notation of Chapter 4, in
which a feature value is deﬁned for a particular output class c and document x.

fL(c, x) =

(cid:26)

w : w
1 if
∃
0 otherwise

∈

L & w

∈

x & class = c

Alternatively the value of a feature fL for a particular lexicon L can be the total
number of word tokens in the document that occur in L:

fL =

count(w)

For lexica in which each word is associated with a score or weight, the count can be
multiplied by a weight θ L
w:

L
(cid:88)w
∈

fL =

θ L
wcount(w)

L
(cid:88)w
∈

21.8

• LEXICON-BASED METHODS FOR ENTITY-CENTRIC AFFECT

477

Counts can alternatively be logged or normalized per writer as in Eq. 21.14.

However they are deﬁned, these lexicon features are then used in a supervised
classiﬁer to predict the desired affective category for the text or document. Once
a classiﬁer is trained, we can examine which lexicon features are associated with
which classes. For a classiﬁer like logistic regression the feature weight gives an
indication of how associated the feature is with the class.

21.8 Lexicon-based methods for Entity-Centric Affect

What if we want to get an affect score not for an entire document, but for a particular
entity in the text? The entity-centric method of Field and Tsvetkov (2019) combines
affect lexicons with contextual embeddings to assign an affect score to an entity in
text. In the context of affect about people, they relabel the Valence/Arousal/Domi-
nance dimension as Sentiment/Agency/Power. The algorithm ﬁrst trains classiﬁers
to map embeddings to scores:

1. For each word w in the training corpus:

(a) Use off-the-shelf pretrained encoders (like BERT) to extract a contextual
embedding e for each instance of the word. No additional ﬁne-tuning is
done.

(b) Average over the e embeddings of each instance of w to obtain a single

embedding vector for one training point w.

(c) Use the NRC VAD Lexicon to get S, A, and P scores for w.

2. Train (three) regression models on all words w to predict V, A, D scores from

a word’s average embedding.

Now given an entity mention m in a text, we assign affect scores as follows:

1. Use the same pretrained LM to get contextual embeddings for m in context.
2. Feed this embedding through the 3 regression models to get S, A, P scores for

the entity.

This results in a (S,A,P) tuple for a given entity mention; To get scores for the rep-
resentation of an entity in a complete document, we can run coreference resolution
and average the (S,A,P) scores for all the mentions. Fig. 21.13 shows the scores
from their algorithm for characters from the movie The Dark Knight when run on
Wikipedia plot summary texts with gold coreference.

21.9 Connotation Frames

connotation
frame

The lexicons we’ve described so far deﬁne a word as a point in affective space. A
connotation frame, by contrast, is a lexicon that incorporates a richer kind of gram-
matical structure, by combining affective lexicons with the frame semantic lexicons
of Chapter 24. The basic insight of connotation frame lexicons is that a predicate
like a verb expresses connotations about the verb’s arguments (Rashkin et al. 2016,
Rashkin et al. 2017).

Consider sentences like:

(21.15) Country A violated the sovereignty of Country B

478 CHAPTER 21

• LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION

Figure 21.13 Power (dominance), sentiment (valence) and agency (arousal) for characters
in the movie The Dark Knight computed from embeddings trained on the NRC VAD Lexicon.
Note the protagonist (Batman) and the antagonist (the Joker) have high power and agency
scores but differ in sentiment, while the love interest Rachel has low power and agency but
high sentiment.

(21.16) the teenager ... survived the Boston Marathon bombing”

By using the verb violate in (21.15), the author is expressing their sympathies with
Country B, portraying Country B as a victim, and expressing antagonism toward
the agent Country A. By contrast, in using the verb survive, the author of (21.16) is
expressing that the bombing is a negative experience, and the subject of the sentence,
the teenager, is a sympathetic character. These aspects of connotation are inherent
in the meaning of the verbs violate and survive, as shown in Fig. 21.14.

(a)

(b)

Figure 21.14 Connotation frames for survive and violate. (a) For survive, the writer and reader have positive
sentiment toward Role1, the subject, and negative sentiment toward Role2, the direct object. (b) For violate, the
writer and reader have positive sentiment instead toward Role2, the direct object.

The connotation frame lexicons of Rashkin et al. (2016) and Rashkin et al.
(2017) also express other connotative aspects of the predicate toward each argu-
ment, including the effect (something bad happened to x) value: (x is valuable), and
mental state: (x is distressed by the event). Connotation frames can also mark the
power differential between the arguments (using the verb implore means that the
theme argument has greater power than the agent), and the agency of each argument
(waited is low agency). Fig. 21.15 shows a visualization from Sap et al. (2017).

Connotation frames can be built by hand (Sap et al., 2017), or they can be learned
by supervised learning (Rashkin et al., 2016), for example using hand-labeled train-

Power ScoreweaklyRachelDentGordanBatmanJokerpowerfullySentiment ScorenegativeJokerDentGordanRachelBatmanpositiveAgency ScoredullDentGordanRachelBatmanJokerscaryFigure1:Power,sentiment,andagencyscoresforchar-actersinTheDarkNightaslearnedthroughtheregres-sionmodelwithELMoembeddings.Scoresgenerallyalignwithcharacterarchetypes,i.e.theantagonisthasthelowestsentimentscore.menthaveresultedinhiseffectiveremovalfromtheindustry.Whilearticlesaboutthe#MeToomovementportraymenlikeWeinsteinasunpow-erful,wecanspeculatethatthecorporausedtotrainELMoandBERTportraythemaspowerful.Thus,inacorpuswheretraditionalpowerroleshavebeeninverted,theembeddingsextractedfromELMoandBERTperformworsethanran-dom,astheyarebiasedtowardsthepowerstruc-turesinthedatatheyaretrainedon.Furtherev-idenceofthisexistsintheperformanceoftheBERT-maskedembeddings-whereastheseem-beddingsgenerallycapturepowerpoorlyascom-paredtotheunmaskedembeddings(Table2),theyoutperformtheunmaskedembeddingsonthistask,andevenoutperformthefrequencybaselineinonesetting.Nevertheless,theydonotoutper-formFieldetal.(2019),likelybecausetheydonotcaptureaffectinformationaswellastheunmaskedembeddings(Table2).4.3QualitativeDocument-levelAnalysisFinally,wequalitativelyanalyzehowwellourmethodcapturesaffectdimensionsbyanalyzingsingledocumentsindetail.Weconductthisanal-ysisinadomainwhereweexpectentitiestofulﬁlltraditionalpowerrolesandwhereentityportray-alsareknown.FollowingBammanetal.(2013),weanalyzetheWikipediaplotsummaryofthemovieTheDarkKnight,7focusingonBatman(protagonist),8theJoker(antagonist),JimGordan(lawenforcementofﬁcer,allytoBatman),Har-7http://bit.ly/2XmhRDR8WeconsiderBatman/BruceWaynetobethesameentity.Power ScoreweaklyRachelJokerDentGordanBatmanpowerfullySentiment ScorenegativeJokerGordanBatmanDentRachelpositiveAgency ScoredullRachelDentGordanBatmanJokerscaryFigure2:Power,sentiment,andagencyscoresforchar-actersinTheDarkNightaslearnedthroughASPwithELMoembeddings.Thesescoresreﬂectthesamepat-ternsastheregressionmodelwithgreaterseparationbetweencharacters.veyDent(allytoBatmanwhoturnsevil)andRachelDawes(primaryloveinterest).Tofacil-itateextractingexamplesentences,wescoreeachinstanceoftheseentitiesinthenarrativeseparatelyandaverageacrossinstancestoobtainanentityscoreforthedocument.9Tomaximizeourdatabycapturingeverymentionofanentity,weper-formco-referenceresolutionbyhand.Addition-ally,basedonourresultsfromTable3aswellastheuseofWikipediadataintrainingtheELMomodel(Petersetal.,2018),weuseELMoembed-dingsforouranalysis.Figures1and2showresults.Forrefer-ence,weshowtheentityscoresascomparedtoonepolaroppositepairidentiﬁedbyASP.BoththeregressionmodelandASPshowsimilarpat-terns.Batmanhashighpower,whileRachelhaslowpower.Additionally,theJokerisassociatedwiththemostnegativesentiment,butthehigh-estagency.Throughouttheplotsummary,themovieprogressesbytheJokertakinganaggres-siveactionandtheothercharactersresponding.WecanseethisdynamicreﬂectedintheJoker’sproﬁlescore,asahigh-powered,high-agency,low-sentimentcharacter,whoistheprimaryplot-driver.Ingeneral,ASPshowsagreaterseparationbetweencharactersthantheregressionmodel.WehypothesizethatthisoccursbecauseASPisolatesthedimensionsofinterest,whiletheregressionap-proachcapturesotherconfounds,suchasthathu-9Whenweusedthisaveragingmetricinotherevaluations,wefoundnosigniﬁcantchangeinresults.Thus,inothersce-narios,wecomputescoresoveraveragedembeddings,ratherthanaveragingscoresseparatelycomputedforeachembed-dingtoreducecomputationallycomplexity.WriterRole1Role2Role1 is asympathetic victimThere issome typeof hardshipReader+_+__S(writer→role1)S(writer→role2)Connotation Frame for “Role1 survives Role2” S(role1→role2)WriterRole1Role2Role1 is the antagonistRole2 is asympathetic victimReader+_+__S(writer→role1)S(writer→role2)Connotation Frame for “Role1 violates Role2” S(role1→role2)21.10

• SUMMARY

479

Figure 21.15 The connotation frames of Sap et al. (2017), showing that the verb implore
implies the agent has lower power than the theme (in contrast, say, with a verb like demanded),
and showing the low level of agency of the subject of waited. Figure from Sap et al. (2017).

ing data to supervise classiﬁers for each of the individual relations, e.g., whether
S(writer
Role1) is + or -, and then improving accuracy via global constraints
→
across all relations.

21.10 Summary

• Many kinds of affective states can be distinguished, including emotions, moods,
attitudes (which include sentiment), interpersonal stance, and personality.

• Emotion can be represented by ﬁxed atomic units often called basic emo-
tions, or as points in space deﬁned by dimensions like valence and arousal.

• Words have connotational aspects related to these affective states, and this

connotational aspect of word meaning can be represented in lexicons.

• Affective lexicons can be built by hand, using crowd sourcing to label the

affective content of each word.

• Lexicons can be built with semi-supervised, bootstrapping from seed words

using similarity metrics like embedding cosine.

• Lexicons can be learned in a fully supervised manner, when a convenient
training signal can be found in the world, such as ratings assigned by users on
a review site.

• Words can be assigned weights in a lexicon by using various functions of word
counts in training texts, and ratio metrics like log odds ratio informative
Dirichlet prior.

• Affect can be detected, just like sentiment, by using standard supervised text
classiﬁcation techniques, using all the words or bigrams in a text as features.
Additional features can be drawn from counts of words in lexicons.

• Lexicons can also be used to detect affect in a rule-based classiﬁer by picking

the simple majority sentiment based on counts of words in each lexicon.

• Connotation frames express richer relations of affective meaning that a pred-

icate encodes about its arguments.

AGENTTHEMEpower(AG < TH)VERBimploreHe implored the tribunal to show mercy.The princess waited for her prince.AGENTTHEMEagency(AG) = -VERBwaitFigure2:Theformalnotationoftheconnotationframesofpowerandagency.Theﬁrstexampleshowstherelativepowerdifferentialimpliedbytheverb“implored”,i.e.,theagent(“he”)isinapositionoflesspowerthanthetheme(“thetri-bunal”).Incontrast,“Hedemandedthetribunalshowmercy”impliesthattheagenthasauthorityoverthetheme.Thesecondexampleshowsthelowlevelofagencyimpliedbytheverb“waited”.interactivedemowebsiteofourﬁndings(seeFig-ure5intheappendixforascreenshot).2Further-more,aswillbeseeninSection4.1,connotationframesoffernewinsightsthatcomplementandde-viatefromthewell-knownBechdeltest(Bechdel,1986).Inparticular,weﬁndthathigh-agencywomenthroughthelensofconnotationframesarerareinmodernﬁlms.Itis,inpart,becausesomemovies(e.g.,SnowWhite)accidentallypasstheBechdeltestandalsobecauseevenmovieswithstrongfemalecharactersarenotentirelyfreefromthedeeplyingrainedbiasesinsocialnorms.2ConnotationFramesofPowerandAgencyWecreatetwonewconnotationrelations,powerandagency(examplesinFigure3),asanexpan-sionoftheexistingconnotationframelexicons.3ThreeAMTcrowdworkersannotatedtheverbswithplaceholderstoavoidgenderbiasinthecon-text(e.g.,XrescuedY;anexampletaskisshownintheappendixinFigure7).Wedeﬁnetheanno-tatedconstructsasfollows:PowerDifferentialsManyverbsimplytheau-thoritylevelsoftheagentandthemerelativeto2http://homes.cs.washington.edu/˜msap/movie-bias/.3Thelexiconsandademoareavailableathttp://homes.cs.washington.edu/˜msap/movie-bias/.power(AG<TH)power(AG>TH)agency(AG)= agency(AG)=+Figure3:Sampleverbsintheconnotationframeswithhighannotatoragreement.Sizeisindicativeofverbfrequencyinourcorpus(bigger=morefrequent),colordifferencesareonlyforlegibility.oneanother.Forexample,iftheagent“dom-inates”thetheme(denotedaspower(AG>TH)),thentheagentisimpliedtohavealevelofcontroloverthetheme.Alternatively,iftheagent“hon-ors”thetheme(denotedaspower(AG<TH)),thewriterimpliesthatthethemeismoreimportantorauthoritative.WeusedAMTcrowdsourcingtola-bel1700transitiveverbsforpowerdifferentials.Withthreeannotatorsperverb,theinter-annotatoragreementis0.34(Krippendorff’s↵).AgencyTheagencyattributedtotheagentoftheverbdenoteswhethertheactionbeingdescribedimpliesthattheagentispowerful,decisive,andcapableofpushingforwardtheirownstoryline.Forexample,apersonwhoisdescribedas“ex-periencing”thingsdoesnotseemasactiveandde-cisiveassomeonewhoisdescribedas“determin-ing”things.AMTworkerslabeled2000transi-tiveverbsforimplyinghigh/moderate/lowagency(inter-annotatoragreementof0.27).Wedenotehighagencyasagency(AG)=+,andlowagencyasagency(AG)= .Pairwiseagreementsonahardconstraintare56%and51%forpowerandagency,respec-tively.Despitethis,agreementsreach96%and94%whenmoderatelabelsarecountedasagree-ingwitheitherhighorlowlabels,showingthatan-notatorsrarelystronglydisagreewithoneanother.SomecontributingfactorsinthelowerKAscoresincludethesubtletyofchoosingbetweenneutral480 CHAPTER 21

• LEXICONS FOR SENTIMENT, AFFECT, AND CONNOTATION

Bibliographical and Historical Notes

subjectivity

The idea of formally representing the subjective meaning of words began with Os-
good et al. (1957), the same pioneering study that ﬁrst proposed the vector space
model of meaning described in Chapter 6. Osgood et al. (1957) had participants rate
words on various scales, and ran factor analysis on the ratings. The most signiﬁcant
factor they uncovered was the evaluative dimension, which distinguished between
pairs like good/bad, valuable/worthless, pleasant/unpleasant. This work inﬂuenced
the development of early dictionaries of sentiment and affective meaning in the ﬁeld
of content analysis (Stone et al., 1966).

Wiebe (1994) began an inﬂuential line of work on detecting subjectivity in text,
beginning with the task of identifying subjective sentences and the subjective char-
acters who are described in the text as holding private states, beliefs or attitudes.
Learned sentiment lexicons such as the polarity lexicons of Hatzivassiloglou and
McKeown (1997) were shown to be a useful feature in subjectivity detection (Hatzi-
vassiloglou and Wiebe 2000, Wiebe 2000).

The term sentiment seems to have been introduced in 2001 by Das and Chen
(2001), to describe the task of measuring market sentiment by looking at the words in
stock trading message boards. In the same paper Das and Chen (2001) also proposed
the use of a sentiment lexicon. The list of words in the lexicon was created by
hand, but each word was assigned weights according to how much it discriminated
a particular class (say buy versus sell) by maximizing across-class variation and
minimizing within-class variation. The term sentiment, and the use of lexicons,
caught on quite quickly (e.g., inter alia, Turney 2002). Pang et al. (2002) ﬁrst showed
the power of using all the words without a sentiment lexicon; see also Wang and
Manning (2012).

Most of the semi-supervised methods we describe for extending sentiment dic-
tionaries drew on the early idea that synonyms and antonyms tend to co-occur in the
same sentence (Miller and Charles 1991, Justeson and Katz 1991, Riloff and Shep-
herd 1997). Other semi-supervised methods for learning cues to affective mean-
ing rely on information extraction techniques, like the AutoSlog pattern extractors
(Riloff and Wiebe, 2003). Graph based algorithms for sentiment were ﬁrst sug-
gested by Hatzivassiloglou and McKeown (1997), and graph propagation became a
standard method (Zhu and Ghahramani 2002, Zhu et al. 2003, Zhou et al. 2004a,
Velikovich et al. 2010). Crowdsourcing can also be used to improve precision by
ﬁltering the result of semi-supervised lexicon learning (Riloff and Shepherd 1997,
Fast et al. 2016).

Much recent work focuses on ways to learn embeddings that directly encode sen-
timent or other properties, such as the DENSIFIER algorithm of Rothe et al. (2016)
that learns to transform the embedding space to focus on sentiment (or other) infor-
mation.

Exercises

21.1 Show that the relationship between a word w and a category c in the Potts
Score in Eq. 21.6 is a variant of the pointwise mutual information pmi(w, c)
without the log term.

CHAPTER

22 Coreference Resolution and

Entity Linking

and even Stigand, the patriotic archbishop of Canterbury, found it advisable–”’
‘Found WHAT?’ said the Duck.
‘Found IT,’ the Mouse replied rather crossly: ‘of course you know what “it”means.’
‘I know what “it”means well enough, when I ﬁnd a thing,’ said the Duck: ‘it’s gener-
ally a frog or a worm. The question is, what did the archbishop ﬁnd?’

Lewis Carroll, Alice in Wonderland

An important component of language processing is knowing who is being talked
about in a text. Consider the following passage:

(22.1) Victoria Chen, CFO of Megabucks Banking, saw her pay jump to $2.3

million, as the 38-year-old became the company’s president. It is widely
known that she came to Megabucks from rival Lotsabucks.

Each of the underlined phrases in this passage is used by the writer to refer to
a person named Victoria Chen. We call linguistic expressions like her or Victoria
Chen mentions or referring expressions, and the discourse entity that is referred
to (Victoria Chen) the referent. (To distinguish between referring expressions and
their referents, we italicize the former.)1 Two or more referring expressions that are
used to refer to the same discourse entity are said to corefer; thus, Victoria Chen
and she corefer in (22.1).

Coreference is an important component of natural language processing. A dia-
logue system that has just told the user “There is a 2pm ﬂight on United and a 4pm
one on Cathay Paciﬁc” must know which ﬂight the user means by “I’ll take the sec-
ond one”. A question answering system that uses Wikipedia to answer a question
about Marie Curie must know who she was in the sentence “She was born in War-
saw”. And a machine translation system translating from a language like Spanish, in
which pronouns can be dropped, must use coreference from the previous sentence to
decide whether the Spanish sentence ‘“Me encanta el conocimiento”, dice.’ should
be translated as ‘“I love knowledge”, he says’, or ‘“I love knowledge”, she says’.
Indeed, this example comes from an actual news article in El Pa´ıs about a female
professor and was mistranslated as “he” in machine translation because of inaccurate
coreference resolution (Schiebinger, 2013).

Natural language processing systems (and humans) interpret linguistic expres-
sions with respect to a discourse model (Karttunen, 1969). A discourse model
(Fig. 22.1) is a mental model that the understander builds incrementally when in-
terpreting a text, containing representations of the entities referred to in the text,
as well as properties of the entities and relations among them. When a referent is
ﬁrst mentioned in a discourse, we say that a representation for it is evoked into the
model. Upon subsequent mention, this representation is accessed from the model.

1 As a convenient shorthand, we sometimes speak of a referring expression referring to a referent, e.g.,
saying that she refers to Victoria Chen. However, the reader should keep in mind that what we really
mean is that the speaker is performing the act of referring to Victoria Chen by uttering she.

mention

referent

corefer

discourse
model

evoked

accessed

482 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

Figure 22.1 How mentions evoke and access discourse entities in a discourse model.

anaphora

anaphor

antecedent

singleton
coreference
resolution

coreference
chain
cluster

Reference in a text to an entity that has been previously introduced into the
discourse is called anaphora, and the referring expression used is said to be an
anaphor, or anaphoric.2 In passage (22.1), the pronouns she and her and the deﬁ-
nite NP the 38-year-old are therefore anaphoric. The anaphor corefers with a prior
mention (in this case Victoria Chen) that is called the antecedent. Not every refer-
ring expression is an antecedent. An entity that has only a single mention in a text
(like Lotsabucks in (22.1)) is called a singleton.

In this chapter we focus on the task of coreference resolution. Coreference
resolution is the task of determining whether two mentions corefer, by which we
mean they refer to the same entity in the discourse model (the same discourse entity).
The set of coreferring expressions is often called a coreference chain or a cluster.
For example, in processing (22.1), a coreference resolution algorithm would need
to ﬁnd at least four coreference chains, corresponding to the four entities in the
discourse model in Fig. 22.1.

1.
2.
3.
4.

Victoria Chen, her, the 38-year-old, She
{
Megabucks Banking, the company, Megabucks
{
her pay
{
Lotsabucks
}
{

}

}

}

Note that mentions can be nested; for example the mention her is syntactically
part of another mention, her pay, referring to a completely different discourse entity.
Coreference resolution thus comprises two tasks (although they are often per-
formed jointly): (1) identifying the mentions, and (2) clustering them into corefer-
ence chains/discourse entities.

entity linking

We said that two mentions corefered if they are associated with the same dis-
course entity. But often we’d like to go further, deciding which real world entity is
associated with this discourse entity. For example, the mention Washington might
refer to the US state, or the capital city, or the person George Washington; the inter-
pretation of the sentence will of course be very different for each of these. The task
of entity linking (Ji and Grishman, 2011) or entity resolution is the task of mapping
a discourse entity to some real-world individual.3 We usually operationalize entity

2 We will follow the common NLP usage of anaphor to mean any mention that has an antecedent, rather
than the more narrow usage to mean only mentions (like pronouns) whose interpretation depends on the
antecedent (under the narrower interpretation, repeated names are not anaphors).
3 Computational linguistics/NLP thus differs in its use of the term reference from the ﬁeld of formal
semantics, which uses the words reference and coreference to describe the relation between a mention
and a real-world entity. By contrast, we follow the functional linguistics tradition in which a mention
refers to a discourse entity (Webber, 1978) and the relation between a discourse entity and the real world
individual requires an additional step of linking.

VDiscourse Model“Victoria”“she”coreferrefer (evoke)refer (access)$LotsabucksMegabuckspay483

linking or resolution by mapping to an ontology: a list of entities in the world, like
a gazeteer (Chapter 19). Perhaps the most common ontology used for this task is
Wikipedia; each Wikipedia page acts as the unique id for a particular entity. Thus
the entity linking task of wikiﬁcation (Mihalcea and Csomai, 2007) is the task of de-
ciding which Wikipedia page corresponding to an individual is being referred to by
a mention. But entity linking can be done with any ontology; for example if we have
an ontology of genes, we can link mentions of genes in text to the disambiguated
gene name in the ontology.

In the next sections we introduce the task of coreference resolution in more de-
tail, and survey a variety of architectures for resolution. We also introduce two
architectures for the task of entity linking.

Before turning to algorithms, however, we mention some important tasks we
will only touch on brieﬂy at the end of this chapter. First are the famous Winograd
Schema problems (so-called because they were ﬁrst pointed out by Terry Winograd
in his dissertation). These entity coreference resolution problems are designed to be
too difﬁcult to be solved by the resolution methods we describe in this chapter, and
the kind of real-world knowledge they require has made them a kind of challenge
task for natural language processing. For example, consider the task of determining
the correct antecedent of the pronoun they in the following example:
(22.2) The city council denied the demonstrators a permit because

a. they feared violence.
b. they advocated violence.

Determining the correct antecedent for the pronoun they requires understanding
that the second clause is intended as an explanation of the ﬁrst clause, and also
that city councils are perhaps more likely than demonstrators to fear violence and
that demonstrators might be more likely to advocate violence. Solving Winograd
Schema problems requires ﬁnding way to represent or discover the necessary real
world knowledge.

A problem we won’t discuss in this chapter is the related task of event corefer-
ence, deciding whether two event mentions (such as the buy and the acquisition in
these two sentences from the ECB+ corpus) refer to the same event:
(22.3) AMD agreed to [buy] Markham, Ontario-based ATI for around $5.4 billion

in cash and stock, the companies announced Monday.

(22.4) The [acquisition] would turn AMD into one of the world’s largest providers

of graphics chips.

Event mentions are much harder to detect than entity mentions, since they can be ver-
bal as well as nominal. Once detected, the same mention-pair and mention-ranking
models used for entities are often applied to events.

An even more complex kind of coreference is discourse deixis (Webber, 1988),
in which an anaphor refers back to a discourse segment, which can be quite hard to
delimit or categorize, like the examples in (22.5) adapted from Webber (1991):
(22.5) According to Soleil, Beau just opened a restaurant

a. But that turned out to be a lie.
b. But that was false.
c. That struck me as a funny way to describe the situation.

The referent of that is a speech act (see Chapter 15) in (22.5a), a proposition in
(22.5b), and a manner of description in (22.5c). We don’t give algorithms in this
chapter for these difﬁcult types of non-nominal antecedents, but see Kolhatkar
et al. (2018) for a survey.

event
coreference

discourse deixis

484 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

22.1 Coreference Phenomena: Linguistic Background

We now offer some linguistic background on reference phenomena. We introduce
the four types of referring expressions (deﬁnite and indeﬁnite NPs, pronouns, and
names), describe how these are used to evoke and access entities in the discourse
model, and talk about linguistic features of the anaphor/antecedent relation (like
number/gender agreement, or properties of verb semantics).

22.1.1 Types of Referring Expressions

Indeﬁnite Noun Phrases: The most common form of indeﬁnite reference in En-
glish is marked with the determiner a (or an), but it can also be marked by a quan-
tiﬁer such as some or even the determiner this. Indeﬁnite reference generally intro-
duces into the discourse context entities that are new to the hearer.

(22.6) a. Mrs. Martin was so very kind as to send Mrs. Goddard a beautiful goose.

b. He had gone round one day to bring her some walnuts.
c. I saw this beautiful cauliﬂower today.

Deﬁnite Noun Phrases: Deﬁnite reference, such as via NPs that use the English
article the, refers to an entity that is identiﬁable to the hearer. An entity can be
identiﬁable to the hearer because it has been mentioned previously in the text and
thus is already represented in the discourse model:

(22.7)

It concerns a white stallion which I have sold to an ofﬁcer. But the pedigree
of the white stallion was not fully established.

Alternatively, an entity can be identiﬁable because it is contained in the hearer’s
set of beliefs about the world, or the uniqueness of the object is implied by the
description itself, in which case it evokes a representation of the referent into the
discourse model, as in (22.9):

(22.8) I read about it in the New York Times.
(22.9) Have you seen the car keys?

These last uses are quite common; more than half of deﬁnite NPs in newswire
texts are non-anaphoric, often because they are the ﬁrst time an entity is mentioned
(Poesio and Vieira 1998, Bean and Riloff 1999).

Pronouns: Another form of deﬁnite reference is pronominalization, used for enti-
ties that are extremely salient in the discourse, (as we discuss below):

(22.10) Emma smiled and chatted as cheerfully as she could,

cataphora

Pronouns can also participate in cataphora, in which they are mentioned before

their referents are, as in (22.11).

(22.11) Even before she saw it, Dorothy had been thinking about the Emerald City

every day.

Here, the pronouns she and it both occur before their referents are introduced.

Pronouns also appear in quantiﬁed contexts in which they are considered to be

bound

bound, as in (22.12).
(22.12) Every dancer brought her left arm forward.

Under the relevant reading, her does not refer to some woman in context, but instead
behaves like a variable bound to the quantiﬁed expression every dancer. We are not
concerned with the bound interpretation of pronouns in this chapter.

22.1

• COREFERENCE PHENOMENA: LINGUISTIC BACKGROUND

485

In some languages, pronouns can appear as clitics attached to a word, like lo

(‘it’) in this Spanish example from AnCora (Recasens and Mart´ı, 2010):

(22.13) La intenci´on es reconocer el gran prestigio que tiene la marat´on y unirlo

con esta gran carrera.
‘The aim is to recognize the great prestige that the Marathon has and join
it
|
with this great race.”

Demonstrative Pronouns: Demonstrative pronouns this and that can appear ei-
ther alone or as determiners, for instance, this ingredient, that spice:

(22.14) I just bought a copy of Thoreau’s Walden. I had bought one ﬁve years ago.

That one had been very tattered; this one was in much better condition.

Note that this NP is ambiguous; in colloquial spoken English, it can be indeﬁnite,

as in (22.6), or deﬁnite, as in (22.14).

zero anaphor

Instead of using a pronoun, in some languages (including Chi-
Zero Anaphora:
nese, Japanese, and Italian) it is possible to have an anaphor that has no lexical
realization at all, called a zero anaphor or zero pronoun, as in the following Italian
and Japanese examples from Poesio et al. (2016):

(22.15) EN [John]i went to visit some friends. On the way [he]i bought some

wine.

IT [Giovanni]i and`o a far visita a degli amici. Per via φi compr`o del vino.
JA [John]i-wa yujin-o houmon-sita. Tochu-de φi wain-o ka-tta.

or this Chinese example:

(22.16)

[我] 前一会精神上太紧张。[0] 现在比较平静了
[I] was too nervous a while ago. ... [0] am now calmer.

Zero anaphors complicate the task of mention detection in these languages.

Names: Names (such as of people, locations, or organizations) can be used to refer
to both new and old entities in the discourse:

(22.17)

a. Miss Woodhouse certainly had not done him justice.
b. International Business Machines sought patent compensation
from Amazon; IBM had previously sued other companies.

22.1.2

Information Status

The way referring expressions are used to evoke new referents into the discourse
(introducing new information), or access old entities from the model (old informa-
tion), is called their information status or information structure. Entities can be
discourse-new or discourse-old, and indeed it is common to distinguish at least
three kinds of entities informationally (Prince, 1981):

information
status
discourse-new

discourse-old

new NPs:

brand new NPs: these introduce entities that are discourse-new and hearer-

new like a fruit or some walnuts.

unused NPs: these introduce entities that are discourse-new but hearer-old

(like Hong Kong, Marie Curie, or the New York Times.

old NPs: also called evoked NPs, these introduce entities that already in the dis-
course model, hence are both discourse-old and hearer-old, like it in “I went
to a new restaurant. It was...”.

486 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

bridging
inference

given-new

accessible

salience

inferrables: these introduce entities that are neither hearer-old nor discourse-old,
but the hearer can infer their existence by reasoning based on other entities
that are in the discourse. Consider the following examples:

(22.18) I went to a superb restaurant yesterday. The chef had just opened it.
(22.19) Mix ﬂour, butter and water. Knead the dough until shiny.

Neither the chef nor the dough were in the discourse model based on the ﬁrst
sentence of either example, but the reader can make a bridging inference
that these entities should be added to the discourse model and associated with
the restaurant and the ingredients, based on world knowledge that restaurants
have chefs and dough is the result of mixing ﬂour and liquid (Haviland and
Clark 1974, Webber and Baldwin 1992, Nissim et al. 2004, Hou et al. 2018).

The form of an NP gives strong clues to its information status. We often talk
about an entity’s position on the given-new dimension, the extent to which the refer-
ent is given (salient in the discourse, easier for the hearer to call to mind, predictable
by the hearer), versus new (non-salient in the discourse, unpredictable) (Chafe 1976,
Prince 1981, Gundel et al. 1993). A referent that is very accessible (Ariel, 2001)
i.e., very salient in the hearer’s mind or easy to call to mind, can be referred to with
less linguistic material. For example pronouns are used only when the referent has
a high degree of activation or salience in the discourse model.4 By contrast, less
salient entities, like a new referent being introduced to the discourse, will need to be
introduced with a longer and more explicit referring expression to help the hearer
recover the referent.

Thus when an entity is ﬁrst introduced into a discourse its mentions are likely
to have full names, titles or roles, or appositive or restrictive relative clauses, as in
the introduction of our protagonist in (22.1): Victoria Chen, CFO of Megabucks
Banking. As an entity is discussed over a discourse, it becomes more salient to the
hearer and its mentions on average typically becomes shorter and less informative,
for example with a shortened name (for example Ms. Chen), a deﬁnite description
(the 38-year-old), or a pronoun (she or her) (Hawkins 1978). However, this change
in length is not monotonic, and is sensitive to discourse structure (Grosz 1977b,
Reichman 1985, Fox 1993).

22.1.3 Complications: Non-Referring Expressions

Many noun phrases or other nominals are not referring expressions, although they
may bear a confusing superﬁcial resemblance. For example in some of the earliest
computational work on reference resolution, Karttunen (1969) pointed out that the
NP a car in the following example does not create a discourse referent:

(22.20) Janet doesn’t have a car.

and cannot be referred back to by anaphoric it or the car:

(22.21) *It is a Toyota.

(22.22) *The car is red.

We summarize here four common types of structures that are not counted as men-
tions in coreference tasks and hence complicate the task of mention-detection:

4 Pronouns also usually (but not always) refer to entities that were introduced no further than one or two
sentences back in the ongoing discourse, whereas deﬁnite noun phrases can often refer further back.

22.1

• COREFERENCE PHENOMENA: LINGUISTIC BACKGROUND

487

Appositives: An appositional structure is a noun phrase that appears next to a
head noun phrase, describing the head. In English they often appear in commas, like
“a unit of UAL” appearing in apposition to the NP United, or CFO of Megabucks
Banking in apposition to Victoria Chen.

(22.23) Victoria Chen, CFO of Megabucks Banking, saw ...
(22.24) United, a unit of UAL, matched the fares.

Appositional NPs are not referring expressions, instead functioning as a kind of
supplementary parenthetical description of the head NP. Nonetheless, sometimes it
is useful to link these phrases to an entity they describe, and so some datasets like
OntoNotes mark appositional relationships.

Predicative and Prenominal NPs: Predicative or attributive NPs describe prop-
erties of the head noun. In United is a unit of UAL, the NP a unit of UAL describes
a property of United, rather than referring to a distinct entity. Thus they are not
marked as mentions in coreference tasks; in our example the NPs $2.3 million and
the company’s president, are attributive, describing properties of her pay and the
38-year-old; Example (22.27) shows a Chinese example in which the predicate NP
(中国最大的城市; China’s biggest city) is not a mention.
(22.25) her pay jumped to $2.3 million
(22.26) the 38-year-old became the company’s president
(22.27) 上海是[中国最大的城市]

[Shanghai is China’s biggest city]

expletive

clefts

Expletives: Many uses of pronouns like it in English and corresponding pronouns
in other languages are not referential. Such expletive or pleonastic cases include
it is raining, in idioms like hit it off, or in particular syntactic situations like clefts
(22.28a) or extraposition (22.28b):
(22.28)

a. It was Emma Goldman who founded Mother Earth
b. It surprised me that there was a herring hanging on her wall.

Generics: Another kind of expression that does not refer back to an entity explic-
itly evoked in the text is generic reference. Consider (22.29).

(22.29) I love mangos. They are very tasty.

Here, they refers, not to a particular mango or set of mangos, but instead to the class
of mangos in general. The pronoun you can also be used generically:

(22.30) In July in San Francisco you have to wear a jacket.

22.1.4 Linguistic Properties of the Coreference Relation

Now that we have seen the linguistic properties of individual referring expressions
we turn to properties of the antecedent/anaphor pair. Understanding these properties
is helpful both in designing novel features and performing error analyses.

Number Agreement: Referring expressions and their referents must generally
agree in number; English she/her/he/him/his/it are singular, we/us/they/them are plu-
ral, and you is unspeciﬁed for number. So a plural antecedent like the chefs cannot
generally corefer with a singular anaphor like she. However, algorithms cannot
enforce number agreement too strictly. First, semantically plural entities can be re-
ferred to by either it or they:

(22.31) IBM announced a new machine translation product yesterday. They have

been working on it for 20 years.

488 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

singular they

Second, singular they has become much more common, in which they is used to
describe singular individuals, often useful because they is gender neutral. Although
recently increasing, singular they is quite old, part of English for many centuries.5

Person Agreement: English distinguishes between ﬁrst, second, and third person,
and a pronoun’s antecedent must agree with the pronoun in person. Thus a third
person pronoun (he, she, they, him, her, them, his, her, their) must have a third person
antecedent (one of the above or any other noun phrase). However, phenomena like
quotation can cause exceptions; in this example I, my, and she are coreferent:

(22.32) “I voted for Nader because he was most aligned with my values,” she said.

In many languages, all nouns have grammat-
Gender or Noun Class Agreement:
ical gender or noun class6 and pronouns generally agree with the grammatical gender
of their antecedent. In English this occurs only with third-person singular pronouns,
which distinguish between male (he, him, his), female (she, her), and nonpersonal
(it) grammatical genders. Non-binary pronouns like ze or hir may also occur in more
recent texts. Knowing which gender to associate with a name in text can be complex,
and may require world knowledge about the individual. Some examples:

(22.33) Maryam has a theorem. She is exciting. (she=Maryam, not the theorem)
(22.34) Maryam has a theorem. It is exciting. (it=the theorem, not Maryam)

reﬂexive

Binding Theory Constraints: The binding theory is a name for syntactic con-
straints on the relations between a mention and an antecedent in the same sentence
(Chomsky, 1981). Oversimplifying a bit, reﬂexive pronouns like himself and her-
self corefer with the subject of the most immediate clause that contains them (22.35),
whereas nonreﬂexives cannot corefer with this subject (22.36).

(22.35) Janet bought herself a bottle of ﬁsh sauce. [herself=Janet]
(22.36) Janet bought her a bottle of ﬁsh sauce. [her

=Janet]

Recency: Entities introduced in recent utterances tend to be more salient than
those introduced from utterances further back. Thus, in (22.37), the pronoun it is
more likely to refer to Jim’s map than the doctor’s map.

(22.37) The doctor found an old map in the captain’s chest. Jim found an even

older map hidden on the shelf. It described an island.

Grammatical Role: Entities mentioned in subject position are more salient than
those in object position, which are in turn more salient than those mentioned in
oblique positions. Thus although the ﬁrst sentence in (22.38) and (22.39) expresses
roughly the same propositional content, the preferred referent for the pronoun he
varies with the subject—John in (22.38) and Bill in (22.39).

(22.38) Billy Bones went to the bar with Jim Hawkins. He called for a glass of

rum. [ he = Billy ]

(22.39) Jim Hawkins went to the bar with Billy Bones. He called for a glass of

rum. [ he = Jim ]

5 Here’s a bound pronoun example from Shakespeare’s Comedy of Errors: There’s not a man I meet but
doth salute me As if I were their well-acquainted friend
6 The word “gender” is generally only used for languages with 2 or 3 noun classes, like most Indo-
European languages; many languages, like the Bantu languages or Chinese, have a much larger number
of noun classes.

(cid:54)
22.2

• COREFERENCE TASKS AND DATASETS

489

Verb Semantics: Some verbs semantically emphasize one of their arguments, bi-
asing the interpretation of subsequent pronouns. Compare (22.40) and (22.41).

(22.40) John telephoned Bill. He lost the laptop.
(22.41) John criticized Bill. He lost the laptop.

These examples differ only in the verb used in the ﬁrst sentence, yet “he” in (22.40)
is typically resolved to John, whereas “he” in (22.41) is resolved to Bill. This may
be partly due to the link between implicit causality and saliency: the implicit cause
of a “criticizing” event is its object, whereas the implicit cause of a “telephoning”
event is its subject. In such verbs, the entity which is the implicit cause may be more
salient.

Selectional Restrictions: Many other kinds of semantic knowledge can play a role
in referent preference. For example, the selectional restrictions that a verb places on
its arguments (Chapter 24) can help eliminate referents, as in (22.42).

(22.42) I ate the soup in my new bowl after cooking it for hours

There are two possible referents for it, the soup and the bowl. The verb eat, however,
requires that its direct object denote something edible, and this constraint can rule
out bowl as a possible referent.

22.2 Coreference Tasks and Datasets

We can formulate the task of coreference resolution as follows: Given a text T , ﬁnd
all entities and the coreference links between them. We evaluate our task by com-
paring the links our system creates with those in human-created gold coreference
annotations on T .

Let’s return to our coreference example, now using superscript numbers for each
coreference chain (cluster), and subscript letters for individual mentions in the clus-
ter:
(22.43) [Victoria Chen]1

a, CFO of [Megabucks Banking]2

a, saw [[her]1

a jump

c also became [[the company]2
d came to [Megabucks]2

b pay]3
b’s
c from rival

to $2.3 million, as [the 38-year-old]1
president. It is widely known that [she]1
[Lotsabucks]4
a.

Assuming example (22.43) was the entirety of the article, the chains for her pay and
Lotsabucks are singleton mentions:

1.
2.
3.
4.

Victoria Chen, her, the 38-year-old, She
{
Megabucks Banking, the company, Megabucks
{
her pay
{
Lotsabucks
}
{

}

}

}

For most coreference evaluation campaigns, the input to the system is the raw
text of articles, and systems must detect mentions and then link them into clusters.
Solving this task requires dealing with pronominal anaphora (ﬁguring out that her
refers to Victoria Chen), ﬁltering out non-referential pronouns like the pleonastic It
in It has been ten years), dealing with deﬁnite noun phrases to ﬁgure out that the
38-year-old is coreferent with Victoria Chen, and that the company is the same as
Megabucks. And we need to deal with names, to realize that Megabucks is the same
as Megabucks Banking.

490 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

Exactly what counts as a mention and what links are annotated differs from task
to task and dataset to dataset. For example some coreference datasets do not label
singletons, making the task much simpler. Resolvers can achieve much higher scores
on corpora without singletons, since singletons constitute the majority of mentions in
running text, and they are often hard to distinguish from non-referential NPs. Some
tasks use gold mention-detection (i.e. the system is given human-labeled mention
boundaries and the task is just to cluster these gold mentions), which eliminates the
need to detect and segment mentions from running text.

Coreference is usually evaluated by the CoNLL F1 score, which combines three

metrics: MUC, B3, and CEAFe; Section 22.8 gives the details.

Let’s mention a few characteristics of one popular coreference dataset, OntoNotes
(Pradhan et al. 2007c, Pradhan et al. 2007a), and the CoNLL 2012 Shared Task
based on it (Pradhan et al., 2012a). OntoNotes contains hand-annotated Chinese
and English coreference datasets of roughly one million words each, consisting of
newswire, magazine articles, broadcast news, broadcast conversations, web data and
conversational speech data, as well as about 300,000 words of annotated Arabic
newswire. The most important distinguishing characteristic of OntoNotes is that
it does not label singletons, simplifying the coreference task, since singletons rep-
In other ways, it is similar to other coreference
resent 60%-70% of all entities.
datasets. Referring expression NPs that are coreferent are marked as mentions, but
generics and pleonastic pronouns are not marked. Appositive clauses are not marked
as separate mentions, but they are included in the mention. Thus in the NP, “Richard
Godown, president of the Industrial Biotechnology Association” the mention is the
entire phrase. Prenominal modiﬁers are annotated as separate entities only if they
are proper nouns. Thus wheat is not an entity in wheat ﬁelds, but UN is an entity in
UN policy (but not adjectives like American in American policy).

A number of corpora mark richer discourse phenomena. The ISNotes corpus
annotates a portion of OntoNotes for information status, include bridging examples
(Hou et al., 2018). The LitBank coreference corpus (Bamman et al., 2020) contains
coreference annotations for 210,532 tokens from 100 different literary novels, in-
cluding singletons and quantiﬁed and negated noun phrases. The AnCora-CO coref-
erence corpus (Recasens and Mart´ı, 2010) contains 400,000 words each of Spanish
(AnCora-CO-Es) and Catalan (AnCora-CO-Ca) news data, and includes labels for
complex phenomena like discourse deixis in both languages. The ARRAU corpus
(Uryupina et al., 2020) contains 350,000 words of English marking all NPs, which
means singleton clusters are available. ARRAU includes diverse genres like dialog
(the TRAINS data) and ﬁction (the Pear Stories), and has labels for bridging refer-
ences, discourse deixis, generics, and ambiguous anaphoric relations.

22.3 Mention Detection

mention
detection

The ﬁrst stage of coreference is mention detection: ﬁnding the spans of text that
constitute each mention. Mention detection algorithms are usually very liberal in
proposing candidate mentions (i.e., emphasizing recall), and only ﬁltering later. For
example many systems run parsers and named entity taggers on the text and extract
every span that is either an NP, a possessive pronoun, or a named entity.

Doing so from our sample text repeated in (22.44):

(22.44) Victoria Chen, CFO of Megabucks Banking, saw her pay jump to $2.3

22.3

• MENTION DETECTION

491

million, as the 38-year-old also became the company’s president. It is
widely known that she came to Megabucks from rival Lotsabucks.

might result in the following list of 13 potential mentions:

$2.3 million

Victoria Chen
CFO of Megabucks Banking the 38-year-old
Megabucks Banking
her
her pay

the company
the company’s president
It

she
Megabucks
Lotsabucks

More recent mention detection systems are even more generous; the span-based
algorithm we will describe in Section 22.6 ﬁrst extracts literally all n-gram spans
of words up to N=10. Of course recall from Section 22.1.3 that many NPs—and
the overwhelming majority of random n-gram spans—are not referring expressions.
Therefore all such mention detection systems need to eventually ﬁlter out pleonas-
tic/expletive pronouns like It above, appositives like CFO of Megabucks Banking
Inc, or predicate nominals like the company’s president or $2.3 million.

Some of this ﬁltering can be done by rules. Early rule-based systems designed
regular expressions to deal with pleonastic it, like the following rules from Lappin
and Leass (1994) that use dictionaries of cognitive verbs (e.g., believe, know, antic-
ipate) to capture pleonastic it in “It is thought that ketchup...”, or modal adjectives
(e.g., necessary, possible, certain, important), for, e.g., “It is likely that I...”. Such
rules are sometimes used as part of modern systems:

It is Modaladjective that S
It is Modaladjective (for NP) to VP
It is Cogv-ed that S
It seems/appears/means/follows (that) S

Mention-detection rules are sometimes designed speciﬁcally for particular eval-
uation campaigns. For OntoNotes, for example, mentions are not embedded within
larger mentions, and while numeric quantities are annotated, they are rarely coref-
erential. Thus for OntoNotes tasks like CoNLL 2012 (Pradhan et al., 2012a), a
common ﬁrst pass rule-based mention detection algorithm (Lee et al., 2013) is:

1. Take all NPs, possessive pronouns, and named entities.
2. Remove numeric quantities (100 dollars, 8%), mentions embedded in
larger mentions, adjectival forms of nations, and stop words (like there).

3. Remove pleonastic it based on regular expression patterns.

Rule-based systems, however, are generally insufﬁcient to deal with mention-
detection, and so modern systems incorporate some sort of learned mention detec-
tion component, such as a referentiality classiﬁer, an anaphoricity classiﬁer—
detecting whether an NP is an anaphor—or a discourse-new classiﬁer— detecting
whether a mention is discourse-new and a potential antecedent for a future anaphor.
An anaphoricity detector, for example, can draw its positive training examples
from any span that is labeled as an anaphoric referring expression in hand-labeled
datasets like OntoNotes, ARRAU, or AnCora. Any other NP or named entity can be
marked as a negative training example. Anaphoricity classiﬁers use features of the
candidate mention such as its head word, surrounding words, deﬁniteness, animacy,
length, position in the sentence/discourse, many of which were ﬁrst proposed in
early work by Ng and Cardie (2002a); see Section 22.5 for more on features.

anaphoricity
detector

492 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

Referentiality or anaphoricity detectors can be run as ﬁlters, in which only men-
tions that are classiﬁed as anaphoric or referential are passed on to the coreference
system. The end result of such a ﬁltering mention detection system on our example
above might be the following ﬁltered set of 9 potential mentions:

Victoria Chen
her pay
Megabucks Bank the 38-year-old Megabucks
Lotsabucks
her

the company

she

It turns out, however, that hard ﬁltering of mentions based on an anaphoricity
or referentiality classiﬁer leads to poor performance. If the anaphoricity classiﬁer
threshold is set too high, too many mentions are ﬁltered out and recall suffers. If the
classiﬁer threshold is set too low, too many pleonastic or non-referential mentions
are included and precision suffers.

The modern approach is instead to perform mention detection, anaphoricity, and
coreference jointly in a single end-to-end model (Ng 2005b, Denis and Baldridge
2007, Rahman and Ng 2009). For example mention detection in the Lee et al.
(2017b),2018 system is based on a single end-to-end neural network that computes
a score for each mention being referential, a score for two mentions being corefer-
ence, and combines them to make a decision, training all these scores with a single
end-to-end loss. We’ll describe this method in detail in Section 22.6. 7

Despite these advances, correctly detecting referential mentions seems to still be
an unsolved problem, since systems incorrectly marking pleonastic pronouns like
it and other non-referential NPs as coreferent is a large source of errors of modern
coreference resolution systems (Kummerfeld and Klein 2013, Martschat and Strube
2014, Martschat and Strube 2015, Wiseman et al. 2015, Lee et al. 2017a).

Mention, referentiality, or anaphoricity detection is thus an important open area
of investigation. Other sources of knowledge may turn out to be helpful, especially
in combination with unsupervised and semisupervised algorithms, which also mit-
igate the expense of labeled datasets. In early work, for example Bean and Riloff
(1999) learned patterns for characterizing anaphoric or non-anaphoric NPs; (by ex-
tracting and generalizing over the ﬁrst NPs in a text, which are guaranteed to be
non-anaphoric). Chang et al. (2012) look for head nouns that appear frequently in
the training data but never appear as gold mentions to help ﬁnd non-referential NPs.
Bergsma et al. (2008b) use web counts as a semisupervised way to augment standard
features for anaphoricity detection for English it, an important task because it is both
common and ambiguous; between a quarter and half it examples are non-anaphoric.
Consider the following two examples:

(22.45) You can make [it] in advance. [anaphoric]
(22.46) You can make [it] in Hollywood. [non-anaphoric]

The it in make it is non-anaphoric, part of the idiom make it. Bergsma et al. (2008b)
turn the context around each example into patterns, like “make * in advance” from
(22.45), and “make * in Hollywood” from (22.46). They then use Google n-grams to
enumerate all the words that can replace it in the patterns. Non-anaphoric contexts
tend to only have it in the wildcard positions, while anaphoric contexts occur with
many other NPs (for example make them in advance is just as frequent in their data

7 Some systems try to avoid mention detection or anaphoricity detection altogether. For datasets like
OntoNotes which don’t label singletons, an alternative to ﬁltering out non-referential mentions is to run
coreference resolution, and then simply delete any candidate mentions which were not corefered with
another mention. This likely doesn’t work as well as explicitly modeling referentiality, and cannot solve
the problem of detecting singletons, which is important for tasks like entity linking.

22.4

• ARCHITECTURES FOR COREFERENCE ALGORITHMS

493

as make it in advance, but make them in Hollywood did not occur at all). These
n-gram contexts can be used as features in a supervised anaphoricity classiﬁer.

22.4 Architectures for Coreference Algorithms

Modern systems for coreference are based on supervised neural machine learning,
supervised from hand-labeled datasets like OntoNotes. In this section we overview
the various architecture of modern systems, using the categorization of Ng (2010),
which distinguishes algorithms based on whether they make each coreference deci-
sion in a way that is entity-based—representing each entity in the discourse model—
or only mention-based—considering each mention independently, and whether they
use ranking models to directly compare potential antecedents. Afterwards, we go
into more detail on one state-of-the-art algorithm in Section 22.6.

22.4.1 The Mention-Pair Architecture

mention-pair

mention-pair

We begin with the mention-pair architecture, the simplest and most inﬂuential
coreference architecture, which introduces many of the features of more complex
algorithms, even though other architectures perform better. The mention-pair ar-
chitecture is based around a classiﬁer that— as its name suggests—is given a pair
of mentions, a candidate anaphor and a candidate antecedent, and makes a binary
classiﬁcation decision: coreferring or not.

Let’s consider the task of this classiﬁer for the pronoun she in our example, and

assume the slightly simpliﬁed set of potential antecedents in Fig. 22.2.

Figure 22.2 For each pair of a mention (like she), and a potential antecedent mention (like
Victoria Chen or her), the mention-pair classiﬁer assigns a probability of a coreference link.

For each prior mention (Victoria Chen, Megabucks Banking, her, etc.), the binary
classiﬁer computes a probability: whether or not the mention is the antecedent of
she. We want this probability to be high for actual antecedents (Victoria Chen, her,
the 38-year-old) and low for non-antecedents (Megabucks Banking, her pay).

Early classiﬁers used hand-built features (Section 22.5); more recent classiﬁers

use neural representation learning (Section 22.6)

For training, we need a heuristic for selecting training samples; since most pairs
of mentions in a document are not coreferent, selecting every pair would lead to
a massive overabundance of negative samples. The most common heuristic, from
(Soon et al., 2001), is to choose the closest antecedent as a positive example, and all
pairs in between as the negative examples. More formally, for each anaphor mention
mi we create

• one positive instance (mi, m j) where m j is the closest antecedent to mi, and

Victoria ChenMegabucks Bankingherher paythe 37-year-oldshep(coref|”Victoria Chen”,”she”)p(coref|”Megabucks Banking”,”she”)494 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

• a negative instance (mi, mk) for each mk between m j and mi
Thus for the anaphor she, we would choose (she, her) as the positive example
and no negative examples. Similarly, for the anaphor the company we would choose
(the company, Megabucks) as the positive example and (the company, she) (the com-
pany, the 38-year-old) (the company, her pay) and (the company, her) as negative
examples.

Once the classiﬁer is trained, it is applied to each test sentence in a clustering
step. For each mention i in a document, the classiﬁer considers each of the prior i
1
mentions. In closest-ﬁrst clustering (Soon et al., 2001), the classiﬁer is run right to
left (from mention i
1 down to mention 1) and the ﬁrst antecedent with probability
> .5 is linked to i. If no antecedent has probably > 0.5, no antecedent is selected for
i. In best-ﬁrst clustering, the classiﬁer is run on all i
1 antecedents and the most
probable preceding mention is chosen as the antecedent for i. The transitive closure
of the pairwise relation is taken as the cluster.

−

−

−

While the mention-pair model has the advantage of simplicity, it has two main
problems. First, the classiﬁer doesn’t directly compare candidate antecedents to
each other, so it’s not trained to decide, between two likely antecedents, which one
is in fact better. Second, it ignores the discourse model, looking only at mentions,
not entities. Each classiﬁer decision is made completely locally to the pair, without
being able to take into account other mentions of the same entity. The next two
models each address one of these two ﬂaws.

22.4.2 The Mention-Rank Architecture

The mention ranking model directly compares candidate antecedents to each other,
choosing the highest-scoring antecedent for each anaphor.

}

In early formulations, for mention i, the classiﬁer decides which of the
−
prior mentions is the antecedent (Denis and Baldridge, 2008). But suppose i is
1
in fact not anaphoric, and none of the antecedents should be chosen? Such a model
would need to run a separate anaphoricity classiﬁer on i. Instead, it turns out to be
better to jointly learn anaphoricity detection and coreference together with a single
loss (Rahman and Ng, 2009).

1, ..., i
{

So in modern mention-ranking systems, for the ith mention (anaphor), we have
an associated random variable yi ranging over the values Y (i) =
. The
}
value (cid:15) is a special dummy mention meaning that i does not have an antecedent (i.e.,
is either discourse-new and starts a new coref chain, or is non-anaphoric).

1, ..., i
{

1, (cid:15)

−

Figure 22.3 For each candidate anaphoric mention (like she), the mention-ranking system assigns a proba-
bility distribution over all previous mentions plus the special dummy mention (cid:15).

At test time, for a given mention i the model computes one softmax over all the
antecedents (plus (cid:15)) giving a probability for each candidate antecedent (or none).

Victoria ChenMegabucks Bankingherher paythe 37-year-oldshep(”Victoria Chen”|”she”)p(ϵ|”she”)ϵOne or more of theseshould be highAll of theseshould be low}p(”her pay”|she”)p(”her”|she”)p(”the 37-year-old”|she”)p(”Megabucks Banking”|she”)}22.5

• CLASSIFIERS USING HAND-BUILT FEATURES

495

Fig. 22.3 shows an example of the computation for the single candidate anaphor
she.

Once the antecedent is classiﬁed for each anaphor, transitive closure can be run

over the pairwise decisions to get a complete clustering.

Training is trickier in the mention-ranking model than the mention-pair model,
because for each anaphor we don’t know which of all the possible gold antecedents
Instead, the best antecedent for each mention is latent; that
to use for training.
is, for each mention we have a whole cluster of legal gold antecedents to choose
from. Early work used heuristics to choose an antecedent, for example choosing the
closest antecedent as the gold antecedent and all non-antecedents in a window of
two sentences as the negative examples (Denis and Baldridge, 2008). Various kinds
of ways to model latent antecedents exist (Fernandes et al. 2012, Chang et al. 2013,
Durrett and Klein 2013). The simplest way is to give credit to any legal antecedent
by summing over all of them, with a loss function that optimizes the likelihood of
all correct antecedents from the gold clustering (Lee et al., 2017b). We’ll see the
details in Section 22.6.

Mention-ranking models can be implemented with hand-build features or with
neural representation learning (which might also incorporate some hand-built fea-
tures). we’ll explore both directions in Section 22.5 and Section 22.6.

22.4.3 Entity-based Models

Both the mention-pair and mention-ranking models make their decisions about men-
tions. By contrast, entity-based models link each mention not to a previous mention
but to a previous discourse entity (cluster of mentions).

A mention-ranking model can be turned into an entity-ranking model simply
by having the classiﬁer make its decisions over clusters of mentions rather than
individual mentions (Rahman and Ng, 2009).

For traditional feature-based models, this can be done by extracting features over
clusters. The size of a cluster is a useful feature, as is its ‘shape’, which is the
list of types of the mentions in the cluster i.e., sequences of the tokens (P)roper,
Victoria, her, the
(D)eﬁnite, (I)ndeﬁnite, (Pr)onoun, so that a cluster composed of
{
38-year-old
would have the shape P-Pr-D (Bj¨orkelund and Kuhn, 2014). An entity-
}
based model that includes a mention-pair classiﬁer can use as features aggregates of
mention-pair probabilities, for example computing the average probability of coref-
erence over all mention-pairs in the two clusters (Clark and Manning 2015).

Neural models can learn representations of clusters automatically, for example
by using an RNN over the sequence of cluster mentions to encode a state correspond-
ing to a cluster representation (Wiseman et al., 2016), or by learning distributed rep-
resentations for pairs of clusters by pooling over learned representations of mention
pairs (Clark and Manning, 2016b).

However, although entity-based models are more expressive, the use of cluster-
level information in practice has not led to large gains in performance, so mention-
ranking models are still more commonly used.

22.5 Classiﬁers using hand-built features

Feature-based classiﬁers, use hand-designed features in logistic regression, SVM,
or random forest classiﬁers for coreference resolution. These classiﬁers don’t per-

496 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

form as well as neural ones. Nonetheless, they are still sometimes useful to build
lightweight systems when compute or data are sparse, and the features themselves
are useful for error analysis even in neural systems.

Given an anaphor mention and a potential antecedent mention, feature based
classiﬁers make use of three types of features: (i) features of the anaphor, (ii) features
of the candidate antecedent, and (iii) features of the relationship between the pair.
Entity-based models can make additional use of two additional classes: (iv) feature
of all mentions from the antecedent’s entity cluster, and (v) features of the relation
between the anaphor and the mentions in the antecedent entity cluster.

First (last) word
Head word
Attributes

Length
Mention type

Features of the Anaphor or Antecedent Mention
Victoria/she
Victoria/she
Sg-F-A-3-PER/
Sg-F-A-3-PER
2/1
P/Pr

First or last word (or embedding) of antecedent/anaphor
Head word (or head embedding) of antecedent/anaphor
The number, gender, animacy, person, named entity type
attributes of (antecedent/anaphor)
length in words of (antecedent/anaphor)
Type: (P)roper, (D)eﬁnite, (I)ndeﬁnite, (Pr)onoun) of an-
tecedent/anaphor
Features of the Antecedent Entity

Entity shape

P-Pr-D

The ‘shape’ or list of types of the mentions in the
antecedent entity (cluster),
i.e., sequences of (P)roper,
(D)eﬁnite, (I)ndeﬁnite, (Pr)onoun.

Entity attributes

Sg-F-A-3-PER The number, gender, animacy, person, named entity type

Ant. cluster size

Sentence distance
Mention distance
i-within-i
Cosine

3

1
4
F

attributes of the antecedent entity
Number of mentions in the antecedent cluster

Features of the Pair of Mentions

The number of sentences between antecedent and anaphor
The number of mentions between antecedent and anaphor
Anaphor has i-within-i relation with antecedent
Cosine between antecedent and anaphor embeddings

Features of the Pair of Entities

Head Word Match

Exact String Match F

True if the strings of any two mentions from the antecedent
and anaphor clusters are identical.
True if any mentions from antecedent cluster has same
headword as any mention in anaphor cluster
All words in anaphor cluster included in antecedent cluster
Word Inclusion
Figure 22.4 Feature-based coreference: sample feature values for anaphor “she” and potential antecedent
“Victoria Chen”.

F

F

Figure 22.4 shows a selection of commonly used features, and shows the value
that would be computed for the potential anaphor “she” and potential antecedent
“Victoria Chen” in our example sentence, repeated below:

(22.47) Victoria Chen, CFO of Megabucks Banking, saw her pay jump to $2.3

million, as the 38-year-old also became the company’s president. It is
widely known that she came to Megabucks from rival Lotsabucks.

Features that prior work has found to be particularly useful are exact string
match, entity headword agreement, mention distance, as well as (for pronouns) exact
attribute match and i-within-i, and (for nominals and proper names) word inclusion
and cosine. For lexical features (like head words) it is common to only use words
that appear enough times (>20 times).

22.6

• A NEURAL MENTION-RANKING ALGORITHM 497

It is crucial in feature-based systems to use conjunctions of features; one exper-
iment suggested that moving from individual features in a classiﬁer to conjunctions
of multiple features increased F1 by 4 points (Lee et al., 2017a). Speciﬁc conjunc-
tions can be designed by hand (Durrett and Klein, 2013), all pairs of features can be
conjoined (Bengtson and Roth, 2008), or feature conjunctions can be learned using
decision tree or random forest classiﬁers (Ng and Cardie 2002a, Lee et al. 2017a).

Features can also be used in neural models as well. Neural systems use contex-
tual word embeddings so don’t beneﬁt from shallow features like string match or or
mention types. However features like mention length, distance between mentions,
or genre can complement neural contextual embedding models.

22.6 A neural mention-ranking algorithm

In this section we describe the neural e2e-coref algorithms of Lee et al. (2017b)
(simpliﬁed and extended a bit, drawing on Joshi et al. (2019) and others). This is
a mention-ranking algorithm that considers all possible spans of text in the docu-
ment, assigns a mention-score to each span, prunes the mentions based on this score,
then assigns coreference links to the remaining mentions.

2

More formally, given a document D with T words, the model considers all of
the T (T +1)
text spans in D (unigrams, bigrams, trigrams, 4-grams, etc; in practice
we only consider spans up a maximum length around 10). The task is to assign
to each span i an antecedent yi, a random variable ranging over the values Y (i) =
; each previous span and a special dummy token (cid:15). Choosing the
1, ..., i
{
dummy token means that i does not have an antecedent, either because i is discourse-
new and starts a new coreference chain, or because i is non-anaphoric.

1, (cid:15)

−

}

For each pair of spans i and j, the system assigns a score s(i, j) for the coref-
erence link between span i and span j. The system then learns a distribution P(yi)
over the antecedents for span i:

P(yi) =

exp(s(i, yi))
Y (i) exp(s(i, y(cid:48)))

(22.48)

y(cid:48)∈
This score s(i, j) includes three factors that we’ll deﬁne below: m(i); whether span
i is a mention; m( j); whether span j is a mention; and c(i, j); whether j is the
antecedent of i:

(cid:80)

s(i, j) = m(i) + m( j) + c(i, j)

(22.49)

For the dummy antecedent (cid:15), the score s(i, (cid:15)) is ﬁxed to 0. This way if any non-
dummy scores are positive, the model predicts the highest-scoring antecedent, but if
all the scores are negative it abstains.

22.6.1 Computing span representations

To compute the two functions m(i) and c(i, j) which score a span i or a pair of spans
(i, j), we’ll need a way to represent a span. The e2e-coref family of algorithms
represents each span by trying to capture 3 words/tokens: the ﬁrst word, the last
word, and the most important word. We ﬁrst run each paragraph or subdocument
through an encoder (like BERT) to generate embeddings hi for each token i. The
span i is then represented by a vector gi that is a concatenation of the encoder output

498 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

embedding for the ﬁrst (start) token of the span, the encoder output for the last (end)
token of the span, and a third vector which is an attention-based representation:

gi = [hSTART(i), hEND(i), hATT(i)]

(22.50)

The goal of the attention vector is to represent which word/token is the likely
syntactic head-word of the span; we saw in the prior section that head-words are
a useful feature; a matching head-word is a good indicator of coreference. The
attention representation is computed as usual; the system learns a weight vector wα ,
and computes its dot product with the hidden state ht transformed by a FFN:

The attention score is normalized into a distribution via a softmax:

αt = wα

·

FFNα (ht )

ai,t =

exp(αt )
END(i)
k=START(i) exp(αk)

(22.51)

(22.52)

And then the attention distribution is used to create a vector hATT(i) which is an
attention-weighted sum of the embeddings et of each of the words in span i:

(cid:80)

END(i)

hATT(i) =

et

(22.53)

ai,t ·

(cid:88)t=START(i)
Fig. 22.5 shows the computation of the span representation and the mention

score.

Figure 22.5 Computation of the span representation g (and the mention score m) in a BERT version of the
e2e-coref model (Lee et al. 2017b, Joshi et al. 2019). The model considers all spans up to a maximum width of
say 10; the ﬁgure shows a small subset of the bigram and trigram spans.

22.6.2 Computing the mention and antecedent scores m and c
Now that we know how to compute the vector gi for representing span i, we can
see the details of the two scoring functions m(i) and c(i, j). Both are computed by
feedforward networks:

m(i) = wm ·
c(i, j) = wc ·

FFNm(gi)
FFNc([gi, g j, gi ◦

g j, ])

(22.54)

(22.55)

At inference time, this mention score m is used as a ﬁlter to keep only the best few
mentions.

Encodings (h)…Encoder GeneralElectricsaidthePostalServicecontactedthecompanySpan head (hATT) Span representation (g) Mention score (m)+++++General ElectricElectric said thethe Postal ServiceService contacted thethe company22.6

• A NEURAL MENTION-RANKING ALGORITHM 499

We then compute the antecedent score for high-scoring mentions. The antecedent
score c(i, j) takes as input a representation of the spans i and j, but also the element-
wise similarity of the two spans to each other gi ◦
is element-wise mul-
tiplication). Fig. 22.6 shows the computation of the score s for the three possible
antecedents of the company in the example sentence from Fig. 22.5.

g j (here

◦

Figure 22.6 The computation of the score s for the three possible antecedents of the com-
pany in the example sentence from Fig. 22.5. Figure after Lee et al. (2017b).

Given the set of mentions, the joint distribution of antecedents for each docu-
ment is computed in a forward pass, and we can then do transitive closure on the
antecedents to create a ﬁnal clustering for the document.

Fig. 22.7 shows example predictions from the model, showing the attention
weights, which Lee et al. (2017b) ﬁnd correlate with traditional semantic heads.
Note that the model gets the second example wrong, presumably because attendants
and pilot likely have nearby word embeddings.

Figure 22.7 Sample predictions from the Lee et al. (2017b) model, with one cluster per
example, showing one correct example and one mistake. Bold, parenthesized spans are men-
tions in the predicted cluster. The amount of red color on a word indicates the head-ﬁnding
attention weight ai,t in (22.52). Figure adapted from Lee et al. (2017b).

22.6.3 Learning

For training, we don’t have a single gold antecedent for each mention; instead the
coreference labeling only gives us each entire cluster of coreferent mentions; so a
mention only has a latent antecedent. We therefore use a loss function that maxi-
mizes the sum of the coreference probability of any of the legal antecedents. For a
given mention i with possible antecedents Y (i), let GOLD(i) be the set of mentions
in the gold cluster containing i. Since the set of mentions occurring before i is Y (i),
GOLD(i). We
the set of mentions in that gold cluster that also occur before i is Y (i)

∩

500 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

therefore want to maximize:

If a mention i is not in a gold cluster GOLD(i) = (cid:15).

Y (i)
(cid:88)ˆy
∩
∈

GOLD(i)

P( ˆy)

(22.56)

To turn this probability into a loss function, we’ll use the cross-entropy loss
log of the probability.

function we deﬁned in Eq. 5.23 in Chapter 5, by taking the
If we then sum over all mentions, we get the ﬁnal loss function for training:

−

L =

N

(cid:88)i=2

log

−

Y (i)
(cid:88)ˆy
∩
∈

GOLD(i)

P( ˆy)

(22.57)

22.7 Entity Linking

entity linking

wikiﬁcation

anchor texts

Entity linking is the task of associating a mention in text with the representation of
some real-world entity in an ontology or knowledge base (Ji and Grishman, 2011). It
is the natural follow-on to coreference resolution; coreference resolution is the task
of associating textual mentions that corefer to the same entity. Entity linking takes
the further step of identifying who that entity is. It is especially important for any
NLP task that links to a knowledge base.

While there are all sorts of potential knowledge-bases, we’ll focus in this section
on Wikipedia, since it’s widely used as an ontology for NLP tasks. In this usage,
each unique Wikipedia page acts as the unique id for a particular entity. This task of
deciding which Wikipedia page corresponding to an individual is being referred to
by a text mention has its own name: wikiﬁcation (Mihalcea and Csomai, 2007).

Since the earliest systems (Mihalcea and Csomai 2007, Cucerzan 2007, Milne
and Witten 2008), entity linking is done in (roughly) two stages: mention detec-
tion and mention disambiguation. We’ll give two algorithms, one simple classic
baseline that uses anchor dictionaries and information from the Wikipedia graph
structure (Ferragina and Scaiella, 2011) and one modern neural algorithm (Li et al.,
2020). We’ll focus here mainly on the application of entity linking to questions,
since a lot of the literature has been in that context.

22.7.1 Linking based on Anchor Dictionaries and Web Graph

As a simple baseline we introduce the TAGME linker (Ferragina and Scaiella, 2011)
for Wikipedia, which itself draws on earlier algorithms (Mihalcea and Csomai 2007,
Cucerzan 2007, Milne and Witten 2008). Wikiﬁcation algorithms deﬁne the set of
entities as the set of Wikipedia pages, so we’ll refer to each Wikipedia page as a
unique entity e. TAGME ﬁrst creates a catalog of all entities (i.e. all Wikipedia
pages, removing some disambiguation and other meta-pages) and indexes them in a
standard IR engine like Lucene. For each page e, the algorithm computes an in-link
count in(e): the total number of in-links from other Wikipedia pages that point to e.
These counts can be derived from Wikipedia dumps.

Finally, the algorithm requires an anchor dictionary. An anchor dictionary
lists for each Wikipedia page, its anchor texts: the hyperlinked spans of text on
other pages that point to it. For example, the web page for Stanford University,
http://www.stanford.edu, might be pointed to from another page using anchor
texts like Stanford or Stanford University:

22.7

• ENTITY LINKING

501

<a href="http://www.stanford.edu">Stanford University</a>

We compute a Wikipedia anchor dictionary by including, for each Wikipedia
page e, e’s title as well as all the anchor texts from all Wikipedia pages that point to e.
For each anchor string a we’ll also compute its total frequency freq(a) in Wikipedia
(including non-anchor uses), the number of times a occurs as a link (which we’ll call
link(a)), and its link probability linkprob(a) = link(a)/freq(a). Some cleanup of the
ﬁnal anchor dictionary is required, for example removing anchor strings composed
only of numbers or single characters, that are very rare, or that are very unlikely to
be useful entities because they have a very low linkprob.

Mention Detection Given a question (or other text we are trying to link), TAGME
detects mentions by querying the anchor dictionary for each token sequence up to
6 words. This large set of sequences is pruned with some simple heuristics (for
example pruning substrings if they have small linkprobs). The question:

When was Ada Lovelace born?

might give rise to the anchor Ada Lovelace and possibly Ada, but substrings spans
like Lovelace might be pruned as having too low a linkprob, and but spans like born
have such a low linkprob that they would not be in the anchor dictionary at all.

Mention Disambiguation If a mention span is unambiguous (points to only one
entity/Wikipedia page), we are done with entity linking! However, many spans are
ambiguous, matching anchors for multiple Wikipedia entities/pages. The TAGME
algorithm uses two factors for disambiguating ambiguous spans, which have been
referred to as prior probability and relatedness/coherence. The ﬁrst factor is p(e
a),
|
the probability with which the span refers to a particular entity. For each page e
∈
E(a), the probability p(e
a) that anchor a points to e, is the ratio of the number of
|
links into e with anchor text a to the total number of occurrences of a as an anchor:

prior(a

a) =
e) = p(e
|

→

count(a

→
link(a)

e)

(22.58)

Let’s see how that factor works in linking entities in the following question:

What Chinese Dynasty came before the Yuan?

The most common association for the span Yuan in the anchor dictionary is the name
of the Chinese currency, i.e., the probability p(Yuan currency
yuan) is very high.
Rarer Wikipedia associations for Yuan include the common Chinese last name, a
language spoken in Thailand, and the correct entity in this case, the name of the
Chinese dynasty. So if we chose based only on p(e
a) , we would make the wrong
|
disambiguation and miss the correct link, Yuan dynasty.

|

To help in just this sort of case, TAGME uses a second factor, the relatedness of
this entity to other entities in the input question. In our example, the fact that the
question also contains the span Chinese Dynasty, which has a high probability link to
the page Dynasties in Chinese history, ought to help match Yuan dynasty.
Let’s see how this works. Given a question q, for each candidate anchors span
E(a) of a.
a detected in q, we assign a relatedness score to each possible entity e
The relatedness score of the link a
e is the weighted average relatedness between
e and all other entities in q. Two entities are considered related to the extent their
Wikipedia pages share many in-links. More formally, the relatedness between two
entities A and B is computed as

→

∈

rel(A, B) =

in(A)
log(max(
,
|
|
)
log(
W
−
|
|

in(B)
in(A)
))
in(B)
log(
)
∩
|
−
|
|
|
))
in(B)
,
in(A)
log(min(
|
|
|
|

(22.59)

502 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

where in(x) is the set of Wikipedia pages pointing to x and W is the set of all Wiki-
pedia pages in the collection.

The vote given by anchor b to the candidate annotation a

X is the average,
over all the possible entities of b, of their relatedness to X, weighted by their prior
probability:

→

vote(b, X) =

1
E(b)
|

E(b)
| (cid:88)Y
∈

rel(X,Y )p(Y

b)
|

(22.60)

The total relatedness score for a
detected in q:

→

X is the sum of the votes of all the other anchors

relatedness(a

X) =

→

Xq\
a
(cid:88)b
∈

vote(b, X)

(22.61)

To score a

→
that has the highest relatedness(a
this value, and from this set, choosing the entity with the highest prior P(X
result of this step is a single entity assigned to each span in q.

X, we combine relatedness and prior by choosing the entity X
X), ﬁnding other entities within a small (cid:15) of
a). The
|

→

The TAGME algorithm has one further step of pruning spurious anchor/entity

pairs, assigning a score averaging link probability with the coherence.

coherence(a

X) =

→

S
|
coherence(a

score(a

X) =

→

1

1

| −

→

rel(B, X)

S
X
(cid:88)B
\
∈
X) + linkprob(a)
2

(22.62)

Finally, pairs are pruned if score(a
held-out set.

→

X) < λ , where the threshold λ is set on a

22.7.2 Neural Graph-based linking

More recent entity linking models are based on bi-encoders, encoding a candidate
mention span, encoding an entity, and computing the dot product between the en-
codings. This allows embeddings for all the entities in the knowledge base to be
precomputed and cached (Wu et al., 2020). Let’s sketch the ELQ linking algorithm
of Li et al. (2020), which is given a question q and a set of candidate entities from
Wikipedia with associated Wikipedia text, and outputs tuples (e, ms, me) of entity id,
mention start, and mention end. As Fig. 22.8 shows, it does this by encoding each
Wikipedia entity using text from Wikipedia, encoding each mention span using text
from the question, and computing their similarity, as we describe below.

Entity Mention Detection To get an h-dimensional embedding for each question
token, the algorithm runs the question through BERT in the normal way:

[q1 · · ·

qn] = BERT([CLS]q1 · · ·

qn[SEP])

(22.63)

It then computes the likelihood of each span [i, j] in q being an entity mention, in
a way similar to the span-based algorithm we saw for the reader above. First we
compute the score for i/ j being the start/end of a mention:

sstart(i) = wstart ·

qi,

send( j) = wend ·

q j,

(22.64)

22.7

• ENTITY LINKING

503

Figure 22.8 A sketch of the inference process in the ELQ algorithm for entity linking in
questions (Li et al., 2020). Each candidate question mention span and candidate entity are
separately encoded, and then scored by the entity/span dot product.

where wstart and wend are vectors learned during training. Next, another trainable
embedding, wmention is used to compute a score for each token being part of a men-
tion:

smention(t) = wmention ·
Mention probabilities are then computed by combining these three scores:

qt

(22.65)

p([i, j]) = σ

sstart(i) + send( j) +

(cid:32)

j

(cid:88)t=i

smention(t)

(cid:33)

(22.66)

Entity Linking To link mentions to entities, we next compute embeddings for
each entity in the set E = e1,
, ew of all Wikipedia entities. For each en-
tity ei we’ll get text from the entity’s Wikipedia page, the title t(ei) and the ﬁrst
128 tokens of the Wikipedia page which we’ll call the description d(ei). This is
again run through BERT, taking the output of the CLS token BERT[CLS] as the entity
representation:

, ei,

· · ·

· · ·

xei = BERT[CLS]([CLS]t(ei)[ENT]d(ei)[SEP])

(22.67)

Mention spans can be linked to entities by computing, for each entity e and span
[i, j], the dot product similarity between the span encoding (the average of the token
embeddings) and the entity encoding.

yi, j =

1
i + 1)

( j

−

j

qt

(cid:88)t=i

s(e, [i, j]) = x·eyi, j

Finally, we take a softmax to get a distribution over entities for each span:

[i, j]) =
p(e
|

exp(s(e, [i, j]))
E exp(s(e(cid:48), [i, j]))

e(cid:48)∈

(22.68)

(22.69)

Training The ELQ mention detection and entity linking algorithm is fully super-
vised. This means, unlike the anchor dictionary algorithms from Section 22.7.1,

(cid:80)

504 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

it requires datasets with entity boundaries marked and linked. Two such labeled
datasets are WebQuestionsSP (Yih et al., 2016), an extension of the WebQuestions
(Berant et al., 2013) dataset derived from Google search questions, and GraphQues-
tions (Su et al., 2016). Both have had entity spans in the questions marked and
linked (Sorokin and Gurevych 2018, Li et al. 2020) resulting in entity-labeled ver-
sions WebQSPEL and GraphQEL (Li et al., 2020).

Given a training set, the ELQ mention detection and entity linking phases are
trained jointly, optimizing the sum of their losses. The mention detection loss is
a binary cross-entropy loss, with L the length of the passage and N the number of
candidates:
1
N

y[i, j] log p([i, j]) + (1

y[i, j]) log(1

p([i, j]))

(22.70)

−

−

−

j
i
(cid:88)1
≤
≤

min(i+L

≤

−

1,n)

(cid:0)

(cid:1)

LMD =

with y[i, j] = 1 if [i, j] is a gold mention span, else 0. The entity linking loss is:

LED =

logp(eg|
−

[i, j])

(22.71)

where eg is the gold entity for mention [i, j].

22.8 Evaluation of Coreference Resolution

MUC
F-measure

3

B

We evaluate coreference algorithms model-theoretically, comparing a set of hypoth-
esis chains or clusters H produced by the system against a set of gold or reference
chains or clusters R from a human labeling, and reporting precision and recall.

However, there are a wide variety of methods for doing this comparison. In fact,
there are 5 common metrics used to evaluate coreference algorithms: the link based
MUC (Vilain et al., 1995) and BLANC (Recasens and Hovy 2011, Luo et al. 2014)
metrics, the mention based B3 metric (Bagga and Baldwin, 1998), the entity based
CEAF metric (Luo, 2005), and the link based entity aware LEA metric (Moosavi and
Strube, 2016).

Let’s just explore two of the metrics. The MUC F-measure (Vilain et al., 1995)
is based on the number of coreference links (pairs of mentions) common to H and
R. Precision is the number of common links divided by the number of links in H.
Recall is the number of common links divided by the number of links in R; This
makes MUC biased toward systems that produce large chains (and fewer entities),
and it ignores singletons, since they don’t involve links.

B3 is mention-based rather than link-based. For each mention in the reference
chain, we compute a precision and recall, and then we take a weighted sum over all
N mentions in the document to compute a precision and recall for the entire task. For
a given mention i, let R be the reference chain that includes i, and H the hypothesis
chain that has i. The set of correct mentions in H is H
R. Precision for mention i
, and recall for mention i thus |
is thus |
. The total precision is the weighted
sum of the precision for mention i, weighted by a weight wi. The total recall is the
weighted sum of the recall for mention i, weighted by a weight wi. Equivalently:

∩
H
|
|

∩
R
|
|

R
|

∩

H

H

R

|

Precision =

Recall =

N

(cid:88)i=1
N

(cid:88)i=1

wi

# of correct mentions in hypothesis chain containing entityi
# of mentions in hypothesis chain containing entityi

wi

# of correct mentions in hypothesis chain containing entityi
# of mentions in reference chain containing entityi

22.9

• WINOGRAD SCHEMA PROBLEMS

505

The weight wi for each entity can be set to different values to produce different
versions of the algorithm.

Following a proposal from Denis and Baldridge (2009), the CoNLL coreference
competitions were scored based on the average of MUC, CEAF-e, and B3 (Pradhan
et al. 2011, Pradhan et al. 2012b), and so it is common in many evaluation campaigns
to report an average of these 3 metrics. See Luo and Pradhan (2016) for a detailed
description of the entire set of metrics; reference implementations of these should
be used rather than attempting to reimplement from scratch (Pradhan et al., 2014).

Alternative metrics have been proposed that deal with particular coreference do-
mains or tasks. For example, consider the task of resolving mentions to named
entities (persons, organizations, geopolitical entities), which might be useful for in-
formation extraction or knowledge base completion. A hypothesis chain that cor-
rectly contains all the pronouns referring to an entity, but has no version of the name
itself, or is linked with a wrong name, is not useful for this task. We might instead
want a metric that weights each mention by how informative it is (with names being
most informative) (Chen and Ng, 2013) or a metric that considers a hypothesis to
match a gold chain only if it contains at least one variant of a name (the NEC F1
metric of Agarwal et al. (2019)).

22.9 Winograd Schema problems

From early on in the ﬁeld, researchers have noted that some cases of coreference
are quite difﬁcult, seeming to require world knowledge or sophisticated reasoning
to solve. The problem was most famously pointed out by Winograd (1972) with the
following example:

(22.72) The city council denied the demonstrators a permit because

a. they feared violence.
b. they advocated violence.

Winograd noticed that the antecedent that most readers preferred for the pro-
noun they in continuation (a) was the city council, but in (b) was the demonstrators.
He suggested that this requires understanding that the second clause is intended
as an explanation of the ﬁrst clause, and also that our cultural frames suggest that
city councils are perhaps more likely than demonstrators to fear violence and that
demonstrators might be more likely to advocate violence.

In an attempt to get the ﬁeld of NLP to focus more on methods involving world
knowledge and common-sense reasoning, Levesque (2011) proposed a challenge
task called the Winograd Schema Challenge.8 The problems in the challenge task
are coreference problems designed to be easily disambiguated by the human reader,
but hopefully not solvable by simple techniques such as selectional restrictions, or
other basic word association methods.

The problems are framed as a pair of statements that differ in a single word or

phrase, and a coreference question:

(22.73) The trophy didn’t ﬁt into the suitcase because it was too large.

Question: What was too large? Answer: The trophy

8 Levesque’s call was quickly followed up by Levesque et al. (2012) and Rahman and Ng (2012), a
competition at the IJCAI conference (Davis et al., 2017), and a natural language inference version of the
problem called WNLI (Wang et al., 2018a).

Winograd
schema

506 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

(22.74) The trophy didn’t ﬁt into the suitcase because it was too small.
Question: What was too small? Answer: The suitcase

The problems have the following characteristics:

1. The problems each have two parties
2. A pronoun preferentially refers to one of the parties, but could grammatically

also refer to the other

3. A question asks which party the pronoun refers to
4. If one word in the question is changed, the human-preferred answer changes

to the other party

The kind of world knowledge that might be needed to solve the problems can
vary. In the trophy/suitcase example, it is knowledge about the physical world; that
a bigger object cannot ﬁt into a smaller object. In the original Winograd sentence,
it is stereotypes about social actors like politicians and protesters. In examples like
the following, it is knowledge about human actions like turn-taking or thanking.
(22.75) Bill passed the gameboy to John because his turn was [over/next]. Whose

turn was [over/next]? Answers: Bill/John

(22.76) Joan made sure to thank Susan for all the help she had [given/received].

Who had [given/received] help? Answers: Susan/Joan.

Although the Winograd Schema was designed to require common-sense rea-
soning, a large percentage of the original set of problem can be solved by pre-
trained language models, ﬁne-tuned on Winograd Schema sentences (Kocijan et al.,
2019). Large pretrained language models encode an enormous amount of world or
common-sense knowledge! The current trend is therefore to propose new datasets
with increasingly difﬁcult Winograd-like coreference resolution problems like KNOWREF
(Emami et al., 2019), with examples like:
(22.77) Marcus is undoubtedly faster than Jarrett right now but in [his] prime the

gap wasn’t all that big.

In the end, it seems likely that some combination of language modeling and knowl-
edge will prove fruitful; indeed, it seems that knowledge-based models overﬁt less
to lexical idiosyncracies in Winograd Schema training sets (Trichelair et al., 2018),

22.10 Gender Bias in Coreference

As with other aspects of language processing, coreference models exhibit gender and
other biases (Zhao et al. 2018a, Rudinger et al. 2018, Webster et al. 2018). For exam-
ple the WinoBias dataset (Zhao et al., 2018a) uses a variant of the Winograd Schema
paradigm to test the extent to which coreference algorithms are biased toward link-
ing gendered pronouns with antecedents consistent with cultural stereotypes. As we
summarized in Chapter 6, embeddings replicate societal biases in their training test,
such as associating men with historically sterotypical male occupations like doctors,
and women with stereotypical female occupations like secretaries (Caliskan et al.
2017, Garg et al. 2018).

A WinoBias sentence contain two mentions corresponding to stereotypically-
male and stereotypically-female occupations and a gendered pronoun that must be
linked to one of them. The sentence cannot be disambiguated by the gender of the
pronoun, but a biased model might be distracted by this cue. Here is an example
sentence:

22.11

• SUMMARY

507

(22.78) The secretary called the physiciani and told himi about a new patient

[pro-stereotypical]

(22.79) The secretary called the physiciani and told heri about a new patient

[anti-stereotypical]

Zhao et al. (2018a) consider a coreference system to be biased if it is more accu-
rate at linking pronouns consistent with gender stereotypical occupations (e.g., him
with physician in (22.78)) than linking pronouns inconsistent with gender-stereotypical
occupations (e.g., her with physician in (22.79)). They show that coreference sys-
tems of all architectures (rule-based, feature-based machine learned, and end-to-
end-neural) all show signiﬁcant bias, performing on average 21 F1 points worse in
the anti-stereotypical cases.

One possible source of this bias is that female entities are signiﬁcantly un-
derrepresented in the OntoNotes dataset, used to train most coreference systems.
Zhao et al. (2018a) propose a way to overcome this bias: they generate a second
gender-swapped dataset in which all male entities in OntoNotes are replaced with
female ones and vice versa, and retrain coreference systems on the combined orig-
inal and swapped OntoNotes data, also using debiased GloVE embeddings (Boluk-
basi et al., 2016). The resulting coreference systems no longer exhibit bias on the
WinoBias dataset, without signiﬁcantly impacting OntoNotes coreference accuracy.
In a follow-up paper, Zhao et al. (2019) show that the same biases exist in ELMo
contextualized word vector representations and coref systems that use them. They
showed that retraining ELMo with data augmentation again reduces or removes bias
in coreference systems on WinoBias.

Webster et al. (2018) introduces another dataset, GAP, and the task of Gendered
Pronoun Resolution as a tool for developing improved coreference algorithms for
gendered pronouns. GAP is a gender-balanced labeled corpus of 4,454 sentences
with gendered ambiguous pronouns (by contrast, only 20% of the gendered pro-
nouns in the English OntoNotes training data are feminine). The examples were
created by drawing on naturally occurring sentences from Wikipedia pages to create
hard to resolve cases with two named entities of the same gender and an ambiguous
pronoun that may refer to either person (or neither), like the following:

(22.80) In May, Fujisawa joined Mari Motohashi’s rink as the team’s skip, moving
back from Karuizawa to Kitami where she had spent her junior days.

Webster et al. (2018) show that modern coreference algorithms perform signif-
icantly worse on resolving feminine pronouns than masculine pronouns in GAP.
Kurita et al. (2019) shows that a system based on BERT contextualized word repre-
sentations shows similar bias.

22.11 Summary

This chapter introduced the task of coreference resolution.

• This is the task of linking together mentions in text which corefer, i.e. refer
to the same discourse entity in the discourse model, resulting in a set of
coreference chains (also called clusters or entities).

• Mentions can be deﬁnite NPs or indeﬁnite NPs, pronouns (including zero

pronouns) or names.

508 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

• The surface form of an entity mention is linked to its information status

(new, old, or inferrable), and how accessible or salient the entity is.

• Some NPs are not referring expressions, such as pleonastic it in It is raining.
• Many corpora have human-labeled coreference annotations that can be used
for supervised learning, including OntoNotes for English, Chinese, and Ara-
bic, ARRAU for English, and AnCora for Spanish and Catalan.

• Mention detection can start with all nouns and named entities and then use
anaphoricity classiﬁers or referentiality classiﬁers to ﬁlter out non-mentions.
• Three common architectures for coreference are mention-pair, mention-rank,
and entity-based, each of which can make use of feature-based or neural clas-
siﬁers.

• Modern coreference systems tend to be end-to-end, performing mention de-

tection and coreference in a single end-to-end architecture.

• Algorithms learn representations for text spans and heads, and learn to com-

pare anaphor spans with candidate antecedent spans.

• Entity linking is the task of associating a mention in text with the representa-

tion of some real-world entity in an ontology .

• Coreference systems are evaluated by comparing with gold entity labels using

precision/recall metrics like MUC, B3, CEAF, BLANC, or LEA.

• The Winograd Schema Challenge problems are difﬁcult coreference prob-
lems that seem to require world knowledge or sophisticated reasoning to solve.
• Coreference systems exhibit gender bias which can be evaluated using datasets

like Winobias and GAP.

Bibliographical and Historical Notes

Hobbs
algorithm

Coreference has been part of natural language processing since the 1970s (Woods
et al. 1972, Winograd 1972). The discourse model and the entity-centric foundation
of coreference was formulated by Karttunen (1969) (at the 3rd COLING confer-
ence), playing a role also in linguistic semantics (Heim 1982, Kamp 1981). But
it was Bonnie Webber’s 1978 dissertation and following work (Webber 1983) that
explored the model’s computational aspects, providing fundamental insights into
how entities are represented in the discourse model and the ways in which they can
license subsequent reference. Many of the examples she provided continue to chal-
lenge theories of reference to this day.

The Hobbs algorithm9 is a tree-search algorithm that was the ﬁrst in a long
series of syntax-based methods for identifying reference robustly in naturally occur-
ring text. The input to the Hobbs algorithm is a pronoun to be resolved, together
with a syntactic (constituency) parse of the sentences up to and including the cur-
rent sentence. The details of the algorithm depend on the grammar used, but can be
understood from a simpliﬁed version due to Kehler et al. (2004) that just searches
through the list of NPs in the current and prior sentences. This simpliﬁed Hobbs
algorithm searches NPs in the following order: “(i) in the current sentence from
right-to-left, starting with the ﬁrst NP to the left of the pronoun, (ii) in the previous
sentence from left-to-right, (iii) in two sentences prior from left-to-right, and (iv) in

9 The simpler of two algorithms presented originally in Hobbs (1978).

BIBLIOGRAPHICAL AND HISTORICAL NOTES

509

the current sentence from left-to-right, starting with the ﬁrst noun group to the right
of the pronoun (for cataphora). The ﬁrst noun group that agrees with the pronoun
with respect to number, gender, and person is chosen as the antecedent” (Kehler
et al., 2004).

Lappin and Leass (1994) was an inﬂuential entity-based system that used weights
to combine syntactic and other features, extended soon after by Kennedy and Bogu-
raev (1996) whose system avoids the need for full syntactic parses.

Approximately contemporaneously centering (Grosz et al., 1995) was applied
to pronominal anaphora resolution by Brennan et al. (1987), and a wide variety of
work followed focused on centering’s use in coreference (Kameyama 1986, Di Eu-
genio 1990, Walker et al. 1994, Di Eugenio 1996, Strube and Hahn 1996, Kehler
1997a, Tetreault 2001, Iida et al. 2003). Kehler and Rohde (2013) show how center-
ing can be integrated with coherence-driven theories of pronoun interpretation. See
Chapter 27 for the use of centering in measuring discourse coherence.

Coreference competitions as part of the US DARPA-sponsored MUC confer-
ences provided early labeled coreference datasets (the 1995 MUC-6 and 1998 MUC-
7 corpora), and set the tone for much later work, choosing to focus exclusively
on the simplest cases of identity coreference (ignoring difﬁcult cases like bridging,
metonymy, and part-whole) and drawing the community toward supervised machine
learning and metrics like the MUC metric (Vilain et al., 1995). The later ACE eval-
uations produced labeled coreference corpora in English, Chinese, and Arabic that
were widely used for model training and evaluation.

This DARPA work inﬂuenced the community toward supervised learning begin-
ning in the mid-90s (Connolly et al. 1994, Aone and Bennett 1995, McCarthy and
Lehnert 1995). Soon et al. (2001) laid out a set of basic features, extended by Ng and
Cardie (2002b), and a series of machine learning models followed over the next 15
years. These often focused separately on pronominal anaphora resolution (Kehler
et al. 2004, Bergsma and Lin 2006), full NP coreference (Cardie and Wagstaff 1999,
Ng and Cardie 2002b, Ng 2005a) and deﬁnite NP reference (Poesio and Vieira 1998,
Vieira and Poesio 2000), as well as separate anaphoricity detection (Bean and Riloff
1999, Bean and Riloff 2004, Ng and Cardie 2002a, Ng 2004), or singleton detection
(de Marneffe et al., 2015).

The move from mention-pair to mention-ranking approaches was pioneered by
Yang et al. (2003) and Iida et al. (2003) who proposed pairwise ranking methods,
then extended by Denis and Baldridge (2008) who proposed to do ranking via a soft-
max over all prior mentions. The idea of doing mention detection, anaphoricity, and
coreference jointly in a single end-to-end model grew out of the early proposal of Ng
(2005b) to use a dummy antecedent for mention-ranking, allowing ‘non-referential’
to be a choice for coreference classiﬁers, Denis and Baldridge’s 2007 joint system
combining anaphoricity classiﬁer probabilities with coreference probabilities, the
Denis and Baldridge (2008) ranking model, and the Rahman and Ng (2009) pro-
posal to train the two models jointly with a single objective.

Simple rule-based systems for coreference returned to prominence in the 2010s,
partly because of their ability to encode entity-based features in a high-precision way
(Zhou et al. 2004b, Haghighi and Klein 2009, Raghunathan et al. 2010, Lee et al.
2011, Lee et al. 2013, Hajishirzi et al. 2013) but in the end they suffered from an
inability to deal with the semantics necessary to correctly handle cases of common
noun coreference.

A return to supervised learning led to a number of advances in mention-ranking
models which were also extended into neural architectures, for example using re-

510 CHAPTER 22

• COREFERENCE RESOLUTION AND ENTITY LINKING

inforcement learning to directly optimize coreference evaluation models Clark and
Manning (2016a), doing end-to-end coreference all the way from span extraction
(Lee et al. 2017b, Zhang et al. 2018). Neural models also were designed to take
advantage of global entity-level information (Clark and Manning 2016b, Wiseman
et al. 2016, Lee et al. 2018).

Coreference is also related to the task of entity linking discussed in Chapter 14.
Coreference can help entity linking by giving more possible surface forms to help
link to the right Wikipedia page, and conversely entity linking can help improve
coreference resolution. Consider this example from Hajishirzi et al. (2013):

(22.81)

[Michael Eisner]1 and [Donald Tsang]2 announced the grand opening of
[[Hong Kong]3 Disneyland]4 yesterday. [Eisner]1 thanked [the President]2
and welcomed [fans]5 to [the park]4.

Integrating entity linking into coreference can help draw encyclopedic knowl-
edge (like the fact that Donald Tsang is a president) to help disambiguate the men-
tion the President. Ponzetto and Strube (2006) 2007 and Ratinov and Roth (2012)
showed that such attributes extracted from Wikipedia pages could be used to build
richer models of entity mentions in coreference. More recent research shows how to
do linking and coreference jointly (Hajishirzi et al. 2013, Zheng et al. 2013) or even
jointly with named entity tagging as well (Durrett and Klein 2014).

The coreference task as we introduced it involves a simplifying assumption that
the relationship between an anaphor and its antecedent is one of identity: the two
coreferring mentions refer to the identical discourse referent. In real texts, the rela-
tionship can be more complex, where different aspects of a discourse referent can
be neutralized or refocused. For example (22.82) (Recasens et al., 2011) shows an
example of metonymy, in which the capital city Washington is used metonymically
to refer to the US. (22.83-22.84) show other examples (Recasens et al., 2011):

(22.82) a strict interpretation of a policy requires The U.S. to notify foreign

dictators of certain coup plots ... Washington rejected the bid ...
(22.83) I once crossed that border into Ashgh-Abad on Nowruz, the Persian New

Year. In the South, everyone was celebrating New Year; to the North, it
was a regular day.

(22.84) In France, the president is elected for a term of seven years, while in the

United States he is elected for a term of four years.

For further linguistic discussions of these complications of coreference see Puste-
jovsky (1991), van Deemter and Kibble (2000), Poesio et al. (2006), Fauconnier and
Turner (2008), Versley (2008), and Barker (2010).

Ng (2017) offers a useful compact history of machine learning models in coref-
erence resolution. There are three excellent book-length surveys of anaphora/coref-
erence resolution, covering different time periods: Hirst (1981) (early work until
about 1981), Mitkov (2002) (1986-2001), and Poesio et al. (2016) (2001-2015).

Andy Kehler wrote the Discourse chapter for the 2000 ﬁrst edition of this text-
book, which we used as the starting point for the second-edition chapter, and there
are some remnants of Andy’s lovely prose still in this third-edition coreference chap-
ter.

metonymy

Exercises

CHAPTER

23 Discourse Coherence

And even in our wildest and most wandering reveries, nay in our very dreams,
we shall ﬁnd, if we reﬂect, that the imagination ran not altogether at adven-
tures, but that there was still a connection upheld among the different ideas,
which succeeded each other. Were the loosest and freest conversation to be
transcribed, there would immediately be transcribed, there would immediately
be observed something which connected it in all its transitions.

David Hume, An enquiry concerning human understanding, 1748

Orson Welles’ movie Citizen Kane was groundbreaking in many ways, perhaps most
notably in its structure. The story of the life of ﬁctional media magnate Charles
Foster Kane, the movie does not proceed in chronological order through Kane’s
life. Instead, the ﬁlm begins with Kane’s death (famously murmuring “Rosebud”)
and is structured around ﬂashbacks to his life inserted among scenes of a reporter
investigating his death. The novel idea that the structure of a movie does not have
to linearly follow the structure of the real timeline made apparent for 20th century
cinematography the inﬁnite possibilities and impact of different kinds of coherent
narrative structures.

But coherent structure is not just a fact about movies or works of art. Like
movies, language does not normally consist of isolated, unrelated sentences, but
instead of collocated, structured, coherent groups of sentences. We refer to such
a coherent structured group of sentences as a discourse, and we use the word co-
herence to refer to the relationship between sentences that makes real discourses
different than just random assemblages of sentences. The chapter you are now read-
ing is an example of a discourse, as is a news article, a conversation, a thread on
social media, a Wikipedia page, and your favorite novel.

What makes a discourse coherent? If you created a text by taking random sen-
tences each from many different sources and pasted them together, would that be a
coherent discourse? Almost certainly not. Real discourses exhibit both local coher-
ence and global coherence. Let’s consider three ways in which real discourses are
locally coherent;

First, sentences or clauses in real discourses are related to nearby sentences in

systematic ways. Consider this example from Hobbs (1979):

(23.1)

John took a train from Paris to Istanbul. He likes spinach.

This sequence is incoherent because it is unclear to a reader why the second
sentence follows the ﬁrst; what does liking spinach have to do with train trips? In
fact, a reader might go to some effort to try to ﬁgure out how the discourse could be
coherent; perhaps there is a French spinach shortage? The very fact that hearers try
to identify such connections suggests that human discourse comprehension involves
the need to establish this kind of coherence.

By contrast, in the following coherent example:

(23.2)

Jane took a train from Paris to Istanbul. She had to attend a conference.

discourse

coherence

local

global

512 CHAPTER 23

• DISCOURSE COHERENCE

coherence
relations

the second sentence gives a REASON for Jane’s action in the ﬁrst sentence. Struc-
tured relationships like REASON that hold between text units are called coherence
relations, and coherent discourses are structured by many such coherence relations.
Coherence relations are introduced in Section 23.1.

A second way a discourse can be locally coherent is by virtue of being “about”
someone or something. In a coherent discourse some entities are salient, and the
discourse focuses on them and doesn’t go back and forth between multiple entities.
This is called entity-based coherence. Consider the following incoherent passage,
in which the salient entity seems to wildly swing from John to Jenny to the piano
store to the living room, back to Jenny, then the piano again:

Centering
Theory

entity grid

topically
coherent

lexical cohesion

(23.3)

John wanted to buy a piano for his living room.
Jenny also wanted to buy a piano.
He went to the piano store.
It was nearby.
The living room was on the second ﬂoor.
She didn’t ﬁnd anything she liked.
The piano he bought was hard to get up to that ﬂoor.

Entity-based coherence models measure this kind of coherence by tracking salient
entities across a discourse. For example Centering Theory (Grosz et al., 1995), the
most inﬂuential theory of entity-based coherence, keeps track of which entities in
the discourse model are salient at any point (salient entities are more likely to be
pronominalized or to appear in prominent syntactic positions like subject or object).
In Centering Theory, transitions between sentences that maintain the same salient
entity are considered more coherent than ones that repeatedly shift between entities.
The entity grid model of coherence (Barzilay and Lapata, 2008) is a commonly
used model that realizes some of the intuitions of the Centering Theory framework.
Entity-based coherence is introduced in Section 23.3.

Finally, discourses can be locally coherent by being topically coherent: nearby
sentences are generally about the same topic and use the same or similar vocab-
ulary to discuss these topics. Because topically coherent discourses draw from a
single semantic ﬁeld or topic, they tend to exhibit the surface property known as
lexical cohesion (Halliday and Hasan, 1976): the sharing of identical or semanti-
cally related words in nearby sentences. For example, the fact that the words house,
chimney, garret, closet, and window— all of which belong to the same semantic
ﬁeld— appear in the two sentences in (23.4), or that they share the identical word
shingled, is a cue that the two are tied together as a discourse:

(23.4) Before winter I built a chimney, and shingled the sides of my house...
I have thus a tight shingled and plastered house... with a garret and a

closet, a large window on each side....

In addition to the local coherence between adjacent or nearby sentences, dis-
courses also exhibit global coherence. Many genres of text are associated with
particular conventional discourse structures. Academic articles might have sections
describing the Methodology or Results. Stories might follow conventional plotlines
or motifs. Persuasive essays have a particular claim they are trying to argue for,
and an essay might express this claim together with a structured set of premises that
support the argument and demolish potential counterarguments. We’ll introduce
versions of each of these kinds of global coherence.

Why do we care about the local or global coherence of a discourse? Since co-
herence is a property of a well-written text, coherence detection plays a part in any

23.1

• COHERENCE RELATIONS

513

task that requires measuring the quality of a text. For example coherence can help
in pedagogical tasks like essay grading or essay quality measurement that are trying
to grade how well-written a human essay is (Somasundaran et al. 2014, Feng et al.
2014, Lai and Tetreault 2018). Coherence can also help for summarization; knowing
the coherence relationship between sentences can help know how to select informa-
tion from them. Finally, detecting incoherent text may even play a role in mental
health tasks like measuring symptoms of schizophrenia or other kinds of disordered
language (Ditman and Kuperberg 2010, Elvev˚ag et al. 2007, Bedi et al. 2015, Iter
et al. 2018).

23.1 Coherence Relations

coherence
relation

RST

nucleus

satellite

Recall from the introduction the difference between passages (23.5) and (23.6).

(23.5) Jane took a train from Paris to Istanbul. She likes spinach.
(23.6) Jane took a train from Paris to Istanbul. She had to attend a conference.

The reason (23.6) is more coherent is that the reader can form a connection be-
tween the two sentences, in which the second sentence provides a potential REASON
for the ﬁrst sentences. This link is harder to form for (23.5). These connections
between text spans in a discourse can be speciﬁed as a set of coherence relations.
The next two sections describe two commonly used models of coherence relations
and associated corpora: Rhetorical Structure Theory (RST), and the Penn Discourse
TreeBank (PDTB).

23.1.1 Rhetorical Structure Theory

The most commonly used model of discourse organization is Rhetorical Structure
Theory (RST) (Mann and Thompson, 1987). In RST relations are deﬁned between
two spans of text, generally a nucleus and a satellite. The nucleus is the unit that
is more central to the writer’s purpose and that is interpretable independently; the
satellite is less central and generally is only interpretable with respect to the nucleus.
Some symmetric relations, however, hold between two nuclei.

Below are a few examples of RST coherence relations, with deﬁnitions adapted

from the RST Treebank Manual (Carlson and Marcu, 2001).

Reason: The nucleus is an action carried out by an animate agent and the satellite
is the reason for the nucleus.

(23.7) [NUC Jane took a train from Paris to Istanbul.] [SAT She had to attend a

conference.]

Elaboration: The satellite gives additional information or detail about the situation
presented in the nucleus.

(23.8) [NUC Dorothy was from Kansas.] [SAT She lived in the midst of the great

Kansas prairies.]

Evidence: The satellite gives additional information or detail about the situation
presented in the nucleus. The information is presented with the goal of convince the
reader to accept the information presented in the nucleus.

(23.9) [NUC Kevin must be here.] [SAT His car is parked outside.]

514 CHAPTER 23

• DISCOURSE COHERENCE

Attribution: The satellite gives the source of attribution for an instance of reported
speech in the nucleus.

(23.10) [SAT Analysts estimated] [NUC that sales at U.S. stores declined in the

quarter, too]

List: In this multinuclear relation, a series of nuclei is given, without contrast or
explicit comparison:

(23.11) [NUC Billy Bones was the mate; ] [NUC Long John, he was quartermaster]

RST relations are traditionally represented graphically; the asymmetric Nucleus-

Satellite relation is represented with an arrow from the satellite to the nucleus:

We can also talk about the coherence of a larger text by considering the hierar-
chical structure between coherence relations. Figure 23.1 shows the rhetorical struc-
ture of a paragraph from Marcu (2000a) for the text in (23.12) from the Scientiﬁc
American magazine.

(23.12) With its distant orbit–50 percent farther from the sun than Earth–and slim

atmospheric blanket, Mars experiences frigid weather conditions. Surface
temperatures typically average about -60 degrees Celsius (-76 degrees
Fahrenheit) at the equator and can dip to -123 degrees C near the poles. Only
the midday sun at tropical latitudes is warm enough to thaw ice on occasion,
but any liquid water formed in this way would evaporate almost instantly
because of the low atmospheric pressure.

Figure 23.1 A discourse tree for the Scientiﬁc American text in (23.12), from Marcu (2000a). Note that
asymmetric relations are represented with a curved arrow from the satellite to the nucleus.

EDU

The leaves in the Fig. 23.1 tree correspond to text spans of a sentence, clause or
phrase that are called elementary discourse units or EDUs in RST; these units can
also be referred to as discourse segments. Because these units may correspond to
arbitrary spans of text, determining the boundaries of an EDU is an important task
for extracting coherence relations. Roughly speaking, one can think of discourse

Kevin must be here.His car is parked outsideevidenceTitle(1)Mars2-9evidence2-3background  (2)WIth its distant orbit  <p> -- 50 percent farther from the sun than Earth -- </p> and slim atmospheric blanket,(3)Marsexperiencesfrigid weatherconditions.4-9elaboration-additional(4)Surface temperatures typically average about -60 degrees Celsius <p> (-76 degreesFahrenheit)</p> at the equator4-5List(5)and can dipto -123degrees Cnear thepoles.6-9Contrast6-7(6)Only themidday sun attropical latitudesis warm enough(7)to thaw iceon occasion,purpose8-9explanation-argumentative(8)but any liquid waterformed in this way would evaporate almost instantly(9)because ofthe lowatmosphericpressure.PDTB

discourse
connectives

23.1

• COHERENCE RELATIONS

515

segments as being analogous to constituents in sentence syntax, and indeed as we’ll
see in Section 23.2 we generally draw on parsing algorithms to infer discourse struc-
ture.

There are corpora for many discourse coherence models; the RST Discourse
TreeBank (Carlson et al., 2001) is the largest available discourse corpus. It con-
sists of 385 English language documents selected from the Penn Treebank, with full
RST parses for each one, using a large set of 78 distinct relations, grouped into 16
classes. RST treebanks exist also for Spanish, German, Basque, Dutch and Brazilian
Portuguese (Braud et al., 2017).

Now that we’ve seen examples of coherence, we can see more clearly how a
coherence relation can play a role in summarization or information extraction. For
example, the nuclei of a text presumably express more important information than
the satellites, which might be dropped in a summary.

23.1.2 Penn Discourse TreeBank (PDTB)

The Penn Discourse TreeBank (PDTB) is a second commonly used dataset that
embodies another model of coherence relations (Miltsakaki et al. 2004, Prasad et al.
2008, Prasad et al. 2014). PDTB labeling is lexically grounded. Instead of asking
annotators to directly tag the coherence relation between text spans, they were given
a list of discourse connectives, words that signal discourse relations, like because,
although, when, since, or as a result. In a part of a text where these words marked a
coherence relation between two text spans, the connective and the spans were then
annotated, as in Fig. 23.13, where the phrase as a result signals a causal relationship
between what PDTB calls Arg1 (the ﬁrst two sentences, here in italics) and Arg2
(the third sentence, here in bold).

(23.13) Jewelry displays in department stores were often cluttered and uninspired.
And the merchandise was, well, fake. As a result, marketers of faux gems
steadily lost space in department stores to more fashionable
rivals—cosmetics makers.

(23.14) In July, the Environmental Protection Agency imposed a gradual ban on
virtually all uses of asbestos. (implicit=as a result) By 1997, almost all
remaining uses of cancer-causing asbestos will be outlawed.

Not all coherence relations are marked by an explicit discourse connective, and
so the PDTB also annotates pairs of neighboring sentences with no explicit signal,
like (23.14). The annotator ﬁrst chooses the word or phrase that could have been its
signal (in this case as a result), and then labels its sense. For example for the am-
biguous discourse connective since annotators marked whether it is using a CAUSAL
or a TEMPORAL sense.

The ﬁnal dataset contains roughly 18,000 explicit relations and 16,000 implicit
relations. Fig. 23.2 shows examples from each of the 4 major semantic classes, while
Fig. 23.3 shows the full tagset.

Unlike the RST Discourse Treebank, which integrates these pairwise coherence
relations into a global tree structure spanning an entire discourse, the PDTB does not
annotate anything above the span-pair level, making no commitment with respect to
higher-level discourse structure.

There are also treebanks using similar methods for other languages; (23.15)
shows an example from the Chinese Discourse TreeBank (Zhou and Xue, 2015).
Because Chinese has a smaller percentage of explicit discourse connectives than
English (only 22% of all discourse relations are marked with explicit connectives,

516 CHAPTER 23

• DISCOURSE COHERENCE

CONTINGENCY REASON

Class
TEMPORAL

COMPARISON

EXPANSION

Example

Type
SYNCHRONOUS The parishioners of St. Michael and All Angels stop to chat at
the church door, as members here always have. (Implicit while)
In the tower, ﬁve men and women pull rhythmically on ropes
attached to the same ﬁve bells that ﬁrst sounded here in 1614.
Also unlike Mr. Ruder, Mr. Breeden appears to be in a position
to get somewhere with his agenda. (implicit=because) As a for-
mer White House aide who worked closely with Congress,
he is savvy in the ways of Washington.
The U.S. wants the removal of what it perceives as barriers to
investment; Japan denies there are real barriers.
CONJUNCTION Not only do the actors stand outside their characters and make
it clear they are at odds with them, but they often literally stand
on their heads.

CONTRAST

Figure 23.2 The four high-level semantic distinctions in the PDTB sense hierarchy

Temporal

Comparison

Asynchronous
Synchronous (Precedence, Succession)

•
•

Contrast (Juxtaposition, Opposition)
•
Pragmatic Contrast (Juxtaposition, Opposition)
•
Concession (Expectation, Contra-expectation)
•
Pragmatic Concession
•

Contingency

Expansion

Cause (Reason, Result)
Pragmatic Cause (Justiﬁcation)

Condition (Hypothetical, General, Unreal

Present/Past, Factual Present/Past)

•
•
•

Exception
Instantiation
Restatement (Speciﬁcation, Equivalence, Generalization)

•
•
•

Pragmatic Condition (Relevance, Implicit As-

•
sertion)

Alternative (Conjunction, Disjunction, Chosen Alterna-

•
tive)

Figure 23.3 The PDTB sense hierarchy. There are four top-level c
lasses, 16 types, and 23 subtypes (not all
¯
types have subtypes). 11 of the 16 types are commonly used for implicit argument classiﬁcation; the 5 types in
italics are too rare in implicit labeling to be used.

List

•

compared to 47% in English), annotators labeled this corpus by directly mapping
pairs of sentences to 11 sense tags, without starting with a lexical discourse connec-
tor.
(23.15) [Conn 为] [Arg2 推动图们江地区开发] ，[Arg1 韩国捐款一百万美元

设立了图们江发展基金]
“[In order to] [Arg2 promote the development of the Tumen River region],
[Arg1 South Korea donated one million dollars to establish the Tumen
River Development Fund].”

These discourse treebanks have been used for shared tasks on multilingual dis-

course parsing (Xue et al., 2016).

23.2 Discourse Structure Parsing

discourse
parsing

Given a sequence of sentences, how can we automatically determine the coherence
relations between them? This task is often called discourse parsing (even though
for PDTB we are only assigning labels to leaf spans and not building a full parse

23.2

• DISCOURSE STRUCTURE PARSING

517

tree as we do for RST).

23.2.1 EDU segmentation for RST parsing

RST parsing is generally done in two stages. The ﬁrst stage, EDU segmentation,
extracts the start and end of each EDU. The output of this stage would be a labeling
like the following:

(23.16) [Mr. Rambo says]e1 [that a 3.2-acre property]e2 [overlooking the San

Fernando Valley]e3 [is priced at $4 million]e4 [because the late actor Erroll
Flynn once lived there.]e5

Since EDUs roughly correspond to clauses, early models of EDU segmentation
ﬁrst ran a syntactic parser, and then post-processed the output. Modern systems
generally use neural sequence models supervised by the gold EDU segmentation in
datasets like the RST Discourse Treebank. Fig. 23.4 shows an example architecture
simpliﬁed from the algorithm of Lukasik et al. (2020) that predicts for each token
whether or not it is a break. Here the input sentence is passed through an encoder
and then passed through a linear layer and a softmax to produce a sequence of 0s
and 1, where 1 indicates the start of an EDU.

Figure 23.4 Predicting EDU segment beginnings from encoded text.

23.2.2 RST parsing

Tools for building RST coherence structure for a discourse have long been based on
syntactic parsing algorithms like shift-reduce parsing (Marcu, 1999). Many modern
RST parsers since Ji and Eisenstein (2014) draw on the neural syntactic parsers we
saw in Chapter 18, using representation learning to build representations for each
span, and training a parser to choose the correct shift and reduce actions based on
the gold parses in the training set.

We’ll describe the shift-reduce parser of Yu et al. (2018). The parser state con-
sists of a stack and a queue, and produces this structure by taking a series of actions
on the states. Actions include:

• shift: pushes the ﬁrst EDU in the queue onto the stack creating a single-node

subtree.

• reduce(l,d): merges the top two subtrees on the stack, where l is the coherence

relation label, and d is the nuclearity direction, d

NN, NS, SN

∈ {

.
}

As well as the pop root operation, to remove the ﬁnal tree from the stack.

Fig. 23.6 shows the actions the parser takes to build the structure in Fig. 23.5.

Mr.RambosaysthatENCODER…0001linear layersoftmaxEDU break518 CHAPTER 23

• DISCOURSE COHERENCE

Figure 23.5 Example RST discourse tree, showing four EDUs. Figure from Yu et al. (2018).

Figure 23.6 Parsing the example of Fig. 23.5 using a shift-reduce parser. Figure from Yu
et al. (2018).

The Yu et al. (2018) uses an encoder-decoder architecture, where the encoder
represents the input span of words and EDUs using a hierarchical biLSTM. The
ﬁrst biLSTM layer represents the words inside an EDU, and the second represents
the EDU sequence. Given an input sentence w1, w2, ..., wm, the words can be repre-
sented as usual (by static embeddings, combinations with character embeddings or
tags, or contextual embeddings) resulting in an input word representation sequence
m. The result of the word-level biLSTM is then a sequence of hw values:
1 , xw
xw

2 , ..., xw

hw
1 , hw

2 , ..., hw

m = biLSTM(xw

1 , xw

2 , ..., xw
m)

(23.17)

An EDU of span ws, ws+1, ..., wt then has biLSTM output representation hw
and is represented by average pooling:

s , hw

s+1, ..., hw
t ,

xe =

1
s + 1

t

−

t

hw
k

(cid:88)k=s

(23.18)

The second layer uses this input to compute a ﬁnal representation of the sequence of
EDU representations he:

1, he
he

2, ..., he

n = biLSTM(xe
The decoder is then a feedforward network W that outputs an action o based on a
concatenation of the top three subtrees on the stack (so, s1, s2) plus the ﬁrst EDU in
the queue (q0):

2, ..., xe
n)

(23.19)

1, xe

o = W(ht

s0, ht

s1, ht

s2, he

q0)
where the representation of the EDU on the queue he
q0 comes directly from the
encoder, and the three hidden vectors representing partial trees are computed by
average pooling over the encoder output for the EDUs in those trees:

(23.20)

ht
s =

1
i + 1

j

−

j

he
k

(cid:88)k=i

(23.21)

560e1e2e3e4attrelabelabe1:AmericanTelephone&TelegraphCo.saidite2:willlayoff75to85technicianshere,effectiveNov.1.e3:Theworkersinstall,maintainandrepairitsprivatebranchexchanges,e4:whicharelargeintracompanytelephonenetworks.Figure1:AnexampleofRSTdiscoursetree,where{e1,e2,e3,e4}areEDUs,attrandelabarediscourserelationlabels,andarrowsindicatethenuclearitiesofdiscourserelations.RSTdiscourseparsing.Otherstudiesstilladoptdiscretesyntaxfeaturesproposedbystatisticalmodels,feedingthemintoneuralnetworkmodels(Braudetal.,2016;Braudetal.,2017).Theaboveapproachesmodelsyntaxtreesinanexplicitway,requiringdiscretesyntaxparsingoutputsasinputsforRSTparsing.Theseapproachesmaysufferfromtheerrorpropagationproblem.Syntaxtreesproducedbyasupervisedsyntaxparsingmodelcouldhaveerrors,whichmaypropagateintodiscourseparsingmodels.Theproblemcouldbeextremelyseriouswheninputsofdiscourseparsinghavedifferentdistributionswiththetrainingdataofthesupervisedsyntaxparser.Recently,Zhangetal.(2017)suggestanalternativemethod,whichextractssyntaxfeaturesfromaBi-Afﬁnedependencyparser(DozatandManning,2016),andthemethodgivescompetitiveperformancesonrelationextraction.Itactuallyrepresentssyntaxtreesimplicitly,thusitcanreducetheerrorpropagationproblem.Inthiswork,weinvestigatetheimplicitsyntaxfeatureextractionapproachforRSTparsing.Inad-dition,weproposeatransition-basedneuralmodelforthistask,whichisabletoincorporatevariousfeaturesﬂexibly.Weexploithierarchicalbi-directionalLSTMs(Bi-LSTMs)toencodetexts,andfurtherenhancethetransition-basedmodelwithdynamicoracle.Basedontheproposedmodel,westudytheeffectivenessofourproposedimplicitsyntaxfeatures.WeconductexperimentsonastandardRSTdis-courseTreeBank(Carlsonetal.,2003).First,weevaluatetheperformanceofourproposedtransition-basedbaseline,ﬁndingthatthemodelisabletoachievestrongperformancesafterapplyingdynamicoracle.ThenweevaluatetheeffectivenessofimplicitsyntaxfeaturesextractedfromaBi-Afﬁnedepen-dencyparser.Resultsshowthattheimplicitsyntaxfeaturesareeffective,givingbetterperformancesthanexplicitTree-LSTM(Lietal.,2015b).OurcodeswillbereleasedforpublicundertheApacheLicense2.0athttps://github.com/yunan4nlp/NNDisParser.Insummary,wemainlymakethefollowingtwocontributionsinthiswork:(1)weproposeatransition-basedneuralRSTdiscourseparsingmodelwithdynamicoracle,(2)wecomparethreedifferentsyntacticintegrationapproachesproposedbyus.Therestofthepaperisorganizedasfollows.Section2describesourproposedmodelsincludingthetransition-basedneuralmodel,thedynamicoraclestrategyandtheimplicitsyntaxfeatureextractionapproach.Section3presentstheexperimentstoevaluateourmodels.Section4showstherelatedwork.Finally,section5drawsconclusions.2Transition-basedDiscourseParsingWefollowJiandEisenstein(2014),exploitingatransition-basedframeworkforRSTdiscourseparsing.Theframeworkisconceptuallysimpleandﬂexibletosupportarbitraryfeatures,whichhasbeenwidelyusedinanumberofNLPtasks(Zhuetal.,2013;Dyeretal.,2015;Zhangetal.,2016).Inaddition,atransition-basedmodelformalizesacertaintaskintopredictingasequenceofactions,whichisessentialsimilartosequence-to-sequencemodelsproposedrecently(Bahdanauetal.,2014).Inthefollowing,weﬁrstdescribethetransitionsystemforRSTdiscourseparsing,andthenintroduceourneuralnetworkmodelbyitsencoderanddecoderparts,respectively.Thirdly,wepresentourproposeddynamicoraclestrategyaimingtoenhancethetransition-basedmodel.Thenweintroducetheintegrationmethodofimplicitsyntaxfeatures.Finallywedescribethetrainingmethodofourneuralnetworkmodels.2.1TheTransition-basedSystemThetransition-basedframeworkconvertsastructurallearningproblemintoasequenceofactionpredic-tions,whosekeypointisatransitionsystem.Atransitionsystemconsistsoftwoparts:statesandactions.Thestatesareusedtostorepartially-parsedresultsandtheactionsareusedtocontrolstatetransitions.561StepStackQueueActionRelation1?e1,e2,e3,e4SH?2e1e2,e3,e4SH?3e1,e2e3,e4RD(attr,SN)?4e1:2e3,e4SHde1e25e1:2,e3e4SHde1e26e1:2,e3,e4?RD(elab,NS)de1e27e1:2,e3:4?RD(elab,SN)de1e2,de3e48e1:4?PRde1e2,de3e4,\e1:2e3:4Table1:Anexampleofthetransition-basedsystemforRSTdiscourseparsing.Theinitialstateisanemptystate,andtheﬁnalstaterepresentsafullresult.Therearethreekindsofactionsinourtransitionsystem:•Shift(SH),whichremovestheﬁrstEDUinthequeueontothestack,formingasingle-nodesubtree.•Reduce(RD)(l,d),whichmergesthetoptwosubtreesonthestack,wherelisadiscourserelationlabel,andd2{NN,NS,SN}indicatestherelationnuclearity(nuclear(N)orsatellite(S)).•PopRoot(PR),whichpopsoutthetoptreeonthestack,markingthedecodingbeingcompleted,whenthestackholdsonlyonesubtreeandthequeueisempty.GiventheRSTtreeasshowninFigure1,itcanbegeneratedbythefollowingactionsequence:{SH,SH,RD(attr,SN),SH,SH,RD(elab,NS),RD(elab,SN),PR}.Table1showsthedecodingprocessindetail.Bythisway,wenaturallyconvertRSTdiscourseparsingintopredictingasequenceoftransitionactions,whereeachlineincludesastateandnextstepactionreferringtothetree.2.2Encoder-DecoderPrevioustransition-basedRSTdiscourseparsingstudiesexploitstatisticalmodels,usingmanually-designeddiscretefeatures(Sagae,2009;HeilmanandSagae,2015;Wangetal.,2017).Inthiswork,weproposeatransition-basedneuralmodelforRSTdiscourseparsing,whichfollowsanencoder-decoderframework.GivenaninputsequenceofEDUs{e1,e2,...,en},theencodercomputestheinputrepresen-tations{he1,he2,...,hen},andthedecoderpredictsnextstepactionsconditionedontheencoderoutputs.2.2.1EncoderWefollowLietal.(2016),usinghierarchicalBi-LSTMstoencodethesourceEDUinputs,wheretheﬁrst-layerisusedtorepresentsequencialwordsinsideofEDUs,andthesecondlayerisusedtorepresentsequencialEDUs.Givenaninputsentence{w1,w2,...,wm},ﬁrstwerepresenteachwordbyitsform(e.g.,wi)andPOStag(e.g.ti),concatenatingtheirneuralembeddings.Bythisway,theinputvectorsoftheﬁrst-layerBi-LSTMare{xw1,xw2,...,xwm},wherexwi=emb(wi) emb(ti),andthenweapplyBi-LSTMdirectly,obtaining:{hw1,hw2,...,hwm}=Bi-LSTM({xw1,xw2,...,xwm})(1)Thesecond-layerBi-LSTMisbuiltoversequentialEDUs.Weshouldﬁrstobtainasuitablerepresenta-tionforeachEDU,whichiscomposedbyaspanofwordsinsideacertainsentence.AssuminganEDUwithitswordsby{ws,ws+1,...,wt},afterapplyingtheﬁrst-layerBi-LSTM,weobtaintheirrepresenta-tionsby{hws,hws+1...,hwt},thenwecalculatetheEDUrepresentationbyaveragepooling:xe=1t s+1tXshwk(2)WhentheEDUrepresentationsareready,weapplythesecond-layerBi-LSTMdirectly,resulting:{he1,he2,...,hen}=Bi-LSTM({xe1,xe2,...,xen})(3)23.2

• DISCOURSE STRUCTURE PARSING

519

Training ﬁrst maps each RST gold parse tree into a sequence of oracle actions, and
then uses the standard cross-entropy loss (with l2 regularization) to train the system
to take such actions. Give a state S and oracle action a, we ﬁrst compute the decoder
output using Eq. 23.20, apply a softmax to get probabilities:

a(cid:48)∈
and then computing the cross-entropy loss:

(cid:80)

pa =

exp(oa)
A exp(oa(cid:48)

)

LCE () =

log(pa) +

−

λ
2 ||

Θ

2
||

(23.22)

(23.23)

RST discourse parsers are evaluated on the test section of the RST Discourse Tree-
bank, either with gold EDUs or end-to-end, using the RST-Pareval metrics (Marcu,
2000b). It is standard to ﬁrst transform the gold RST trees into right-branching bi-
nary trees, and to report four metrics:
trees with no labels (S for Span), labeled
with nuclei (N), with relations (R), or both (F for Full), for each metric computing
micro-averaged F1 over all spans from all documents (Marcu 2000b, Morey et al.
2017).

23.2.3 PDTB discourse parsing

shallow
discourse
parsing

PDTB discourse parsing, the task of detecting PDTB coherence relations between
spans, is sometimes called shallow discourse parsing because the task just involves
ﬂat relationships between text spans, rather than the full trees of RST parsing.

The set of four subtasks for PDTB discourse parsing was laid out by Lin et al.
(2014) in the ﬁrst complete system, with separate tasks for explicit (tasks 1-3) and
implicit (task 4) connectives:

1. Find the discourse connectives (disambiguating them from non-discourse uses)
2. Find the two spans for each connective
3. Label the relationship between these spans
4. Assign a relation between every adjacent pair of sentences

Many systems have been proposed for Task 4: taking a pair of adjacent sentences
as input and assign a coherence relation sense label as output. The setup often fol-
lows Lin et al. (2009) in assuming gold sentence span boundaries and assigning each
adjacent span one of the 11 second-level PDTB tags or none (removing the 5 very
rare tags of the 16 shown in italics in Fig. 23.3).

A simple but very strong algorithm for Task 4 is to represent each of the two
spans by BERT embeddings and take the last layer hidden state corresponding to
the position of the [CLS] token, pass this through a single layer tanh feedforward
network and then a softmax for sense classiﬁcation (Nie et al., 2019).

Each of the other tasks also have been addressed. Task 1 is to disambiguat-
ing discourse connectives from their non-discourse use. For example as Pitler and
Nenkova (2009) point out, the word and is a discourse connective linking the two
clauses by an elaboration/expansion relation in (23.24) while it’s a non-discourse
NP conjunction in (23.25):

(23.24) Selling picked up as previous buyers bailed out of their positions and

aggressive short sellers—anticipating further declines—moved in.

(23.25) My favorite colors are blue and green.

520 CHAPTER 23

• DISCOURSE COHERENCE

Similarly, once is a discourse connective indicating a temporal relation in (23.26),
but simply a non-discourse adverb meaning ‘formerly’ and modifying used in (23.27):

(23.26) The asbestos ﬁber, crocidolite, is unusually resilient once it enters the
lungs, with even brief exposures to it causing symptoms that show up
decades later, researchers said.

(23.27) A form of asbestos once used to make Kent cigarette ﬁlters has caused a
high percentage of cancer deaths among a group of workers exposed to it
more than 30 years ago, researchers reported.

Determining whether a word is a discourse connective is thus a special case
of word sense disambiguation. Early work on disambiguation showed that the 4
PDTB high-level sense classes could be disambiguated with high (94%) accuracy
used syntactic features from gold parse trees (Pitler and Nenkova, 2009). Recent
work performs the task end-to-end from word inputs using a biLSTM-CRF with
BIO outputs (B-CONN, I-CONN, O) (Yu et al., 2019).

For task 2, PDTB spans can be identiﬁed with the same sequence models used to
ﬁnd RST EDUs: a biLSTM sequence model with pretrained contextual embedding
(BERT) inputs (Muller et al., 2019). Simple heuristics also do pretty well as a base-
line at ﬁnding spans, since 93% of relations are either completely within a single
sentence or span two adjacent sentences, with one argument in each sentence (Biran
and McKeown, 2015).

23.3 Centering and Entity-Based Coherence

entity-based

Centering
Theory

A second way a discourse can be coherent is by virtue of being “about” some entity.
This idea that at each point in the discourse some entity is salient, and a discourse
is coherent by continuing to discuss the same entity, appears early in functional lin-
guistics and the psychology of discourse (Chafe 1976, Kintsch and Van Dijk 1978),
and soon made its way to computational models. In this section we introduce two
models of this kind of entity-based coherence: Centering Theory (Grosz et al.,
1995), and the entity grid model of Barzilay and Lapata (2008).

23.3.1 Centering

Centering Theory (Grosz et al., 1995) is a theory of both discourse salience and
discourse coherence. As a model of discourse salience, Centering proposes that at
any given point in the discourse one of the entities in the discourse model is salient:
it is being “centered” on. As a model of discourse coherence, Centering proposes
that discourses in which adjacent sentences CONTINUE to maintain the same salient
entity are more coherent than those which SHIFT back and forth between multiple
entities (we will see that CONTINUE and SHIFT are technical terms in the theory).

The following two texts from Grosz et al. (1995) which have exactly the same
propositional content but different saliences, can help in understanding the main
Centering intuition.

(23.28)

a. John went to his favorite music store to buy a piano.
b. He had frequented the store for many years.
c. He was excited that he could ﬁnally buy a piano.
d. He arrived just as the store was closing for the day.

backward-
looking
center

forward-looking
center

23.3

• CENTERING AND ENTITY-BASED COHERENCE

521

(23.29)

a. John went to his favorite music store to buy a piano.
b. It was a store John had frequented for many years.
c. He was excited that he could ﬁnally buy a piano.
d. It was closing just as John arrived.

While these two texts differ only in how the two entities (John and the store) are
realized in the sentences, the discourse in (23.28) is intuitively more coherent than
the one in (23.29). As Grosz et al. (1995) point out, this is because the discourse
in (23.28) is clearly about one individual, John, describing his actions and feelings.
The discourse in (23.29), by contrast, focuses ﬁrst on John, then the store, then back
to John, then to the store again. It lacks the “aboutness” of the ﬁrst discourse.

Centering Theory realizes this intuition by maintaining two representations for
each utterance Un. The backward-looking center of Un, denoted as Cb(Un), rep-
resents the current salient entity, the one being focused on in the discourse after Un
is interpreted. The forward-looking centers of Un, denoted as C f (Un), are a set
of potential future salient entities, the discourse entities evoked by Un any of which
could serve as Cb (the salient entity) of the following utterance, i.e. Cb(Un+1).

The set of forward-looking centers C f (Un) are ranked according to factors like
discourse salience and grammatical role (for example subjects are higher ranked
than objects, which are higher ranked than all other grammatical roles). We call the
highest-ranked forward-looking center Cp (for “preferred center”). Cp is a kind of
prediction about what entity will be talked about next. Sometimes the next utterance
indeed talks about this entity, but sometimes another entity becomes salient instead.
We’ll use here the algorithm for centering presented in Brennan et al. (1987),
which deﬁnes four intersentential relationships between a pair of utterances Un and
Un+1 that depend on the relationship between Cb(Un+1), Cb(Un), and Cp(Un+1);
these are shown in Fig. 23.7.

Cb(Un+1) = Cp(Un+1)
= Cp(Un+1)
Cb(Un+1)

Cb(Un+1) = Cb(Un)
or undeﬁned Cb(Un)
Continue
Retain

Cb(Un+1)

= Cb(Un)

Smooth-Shift
Rough-Shift

Figure 23.7 Centering Transitions for Rule 2 from Brennan et al. (1987).

The following rules are used by the algorithm:

Rule 1: If any element of C f (Un) is realized by a pronoun in utterance
Un+1, then Cb(Un+1) must be realized as a pronoun also.
Rule 2: Transition states are ordered. Continue is preferred to Retain is
preferred to Smooth-Shift is preferred to Rough-Shift.

Rule 1 captures the intuition that pronominalization (including zero-anaphora)
is a common way to mark discourse salience. If there are multiple pronouns in an
utterance realizing entities from the previous utterance, one of these pronouns must
realize the backward center Cb; if there is only one pronoun, it must be Cb.

Rule 2 captures the intuition that discourses that continue to center the same en-
tity are more coherent than ones that repeatedly shift to other centers. The transition
table is based on two factors: whether the backward-looking center Cb is the same
from Un to Un+1 and whether this discourse entity is the one that is preferred (Cp)
in the new utterance Un+1. If both of these hold, a CONTINUE relation, the speaker
has been talking about the same entity and is going to continue talking about that

(cid:54)
(cid:54)
522 CHAPTER 23

• DISCOURSE COHERENCE

entity. In a RETAIN relation, the speaker intends to SHIFT to a new entity in a future
utterance and meanwhile places the current entity in a lower rank C f . In a SHIFT
relation, the speaker is shifting to a new salient entity.

Let’s walk though the start of (23.28) again, repeated as (23.30), showing the

representations after each utterance is processed.

(23.30)

John went to his favorite music store to buy a piano. (U1)
He was excited that he could ﬁnally buy a piano. (U2)
He arrived just as the store was closing for the day. (U3)
It was closing just as John arrived (U4)

Using the grammatical role hierarchy to order the C f , for sentence U1 we get:

John, music store, piano
}

{

C f (U1):
Cp(U1): John
Cb(U1): undeﬁned
and then for sentence U2:

John, piano
}

{

C f (U2):
Cp(U2): John
Cb(U2): John
Result: Continue

(Cp(U2)=Cb(U2); Cb(U1) undeﬁned)

entity grid

The transition from U1 to U2 is thus a CONTINUE. Completing this example is left
as exercise (1) for the reader

23.3.2 Entity Grid model

Centering embodies a particular theory of how entity mentioning leads to coher-
ence: that salient entities appear in subject position or are pronominalized, and that
discourses are salient by means of continuing to mention the same entity in such
ways.

The entity grid model of Barzilay and Lapata (2008) is an alternative way to
capture entity-based coherence: instead of having a top-down theory, the entity-grid
model using machine learning to induce the patterns of entity mentioning that make
a discourse more coherent.

The model is based around an entity grid, a two-dimensional array that repre-
sents the distribution of entity mentions across sentences. The rows represent sen-
tences, and the columns represent discourse entities (most versions of the entity grid
model focus just on nominal mentions). Each cell represents the possible appearance
of an entity in a sentence, and the values represent whether the entity appears and its
grammatical role. Grammatical roles are subject (S), object (O), neither (X), or ab-
sent (–); in the implementation of Barzilay and Lapata (2008), subjects of passives
are represented with O, leading to a representation with some of the characteristics
of thematic roles.

Fig. 23.8 from Barzilay and Lapata (2008) shows a grid for the text shown in
Fig. 23.9. There is one row for each of the six sentences. The second column, for
the entity ‘trial’, is O – – – X, showing that the trial appears in the ﬁrst sentence as
direct object, in the last sentence as an oblique, and does not appear in the middle
sentences. The third column, for the entity Microsoft, shows that it appears as sub-
ject in sentence 1 (it also appears as the object of the preposition against, but entities
that appear multiple times are recorded with their highest-ranked grammatical func-
tion). Computing the entity grids requires extracting entities and doing coreference

23.3

• CENTERING AND ENTITY-BASED COHERENCE

523

Figure 23.8 Part of the entity grid for the text in Fig. 23.9. Entities are listed by their head
noun; each cell represents whether an entity appears as subject (S), object (O), neither (X), or
is absent (–). Figure from Barzilay and Lapata (2008).

Figure 23.9 A discourse with the entities marked and annotated with grammatical func-
tions. Figure from Barzilay and Lapata (2008).

resolution to cluster them into discourse entities (Chapter 26) as well as parsing the
sentences to get grammatical roles.

In the resulting grid, columns that are dense (like the column for Microsoft) in-
dicate entities that are mentioned often in the texts; sparse columns (like the column
for earnings) indicate entities that are mentioned rarely.

S,O X, –

In the entity grid model, coherence is measured by patterns of local entity tran-
sition. For example, Department is a subject in sentence 1, and then not men-
tioned in sentence 2; this is the transition [S –]. The transitions are thus sequences
n which can be extracted as continuous cells from each column. Each
{
}
transition has a probability; the probability of [S –] in the grid from Fig. 23.8 is 0.08
(it occurs 6 times out of the 75 total transitions of length two). Fig. 23.10 shows the
distribution over transitions of length 2 for the text of Fig. 23.9 (shown as the ﬁrst
row d1), and 2 other documents.

Figure 23.10 A feature vector for representing documents using all transitions of length 2.
Document d1 is the text in Fig. 23.9. Figure from Barzilay and Lapata (2008).

The transitions and their probabilities can then be used as features for a machine
learning model. This model can be a text classiﬁer trained to produce human-labeled
coherence scores (for example from humans labeling each text as coherent or inco-
herent). But such data is expensive to gather. Barzilay and Lapata (2005) introduced
a simplifying innovation: coherence models can be trained by self-supervision:
trained to distinguish the natural original order of sentences in a discourse from

ComputationalLinguisticsVolume34,Number1thesepatternscanbeencodedasfeaturevectorsappropriateforperformingcoherence-relatedrankingandclassiﬁcationtasks.3.1TheEntity-GridDiscourseRepresentationEachtextisrepresentedbyanentitygrid,atwo-dimensionalarraythatcapturesthedistributionofdiscourseentitiesacrosstextsentences.WefollowMiltsakakiandKukich(2000)inassumingthatourunitofanalysisisthetraditionalsentence(i.e.,amainclausewithaccompanyingsubordinateandadjunctclauses).Therowsofthegridcorrespondtosentences,andthecolumnscorrespondtodiscourseentities.Bydiscourseentitywemeanaclassofcoreferentnounphrases(weexplaininSection3.3howcoreferententitiesareidentiﬁed).Foreachoccurrenceofadiscourseentityinthetext,thecorrespondinggridcellcontainsinformationaboutitspresenceorabsenceinasequenceofsentences.Inaddition,forentitiespresentinagivensentence,gridcellscontaininformationabouttheirsyntacticrole.Suchinformationcanbeexpressedinmanyways(e.g.,usingconstituentlabelsorthematicroleinformation).Becausegrammaticalrelationsﬁgureprominentlyinentity-basedtheoriesoflocalcoherence(seeSection2),theyserveasalogicalpointofdeparture.Eachgridcellthuscorrespondstoastringfromasetofcategoriesreﬂectingwhethertheentityinquestionisasubject(S),object(O),orneither(X).Entitiesabsentfromasentencearesignaledbygaps(–).Grammaticalroleinformationcanbeextractedfromtheoutputofabroad-coveragedependencyparser(Lin2001;BriscoeandCarroll2002)oranystate-of-theartstatisticalparser(Collins1997;Charniak2000).WediscusshowthisinformationwascomputedforourexperimentsinSection3.3.Table1illustratesafragmentofanentitygridconstructedforthetextinTable2.Becausethetextcontainssixsentences,thegridcolumnsareoflengthsix.Considerforinstancethegridcolumnfortheentitytrial,[O––––X].Itrecordsthattrialispresentinsentences1and6(asOandX,respectively)butisabsentfromtherestofthesentences.AlsonotethatthegridinTable1takescoreferenceresolutionintoaccount.Eventhoughthesameentityappearsindifferentlinguisticforms,forexample,MicrosoftCorp.,Microsoft,andthecompany,itismappedtoasingleentryinthegrid(seethecolumnintroducedbyMicrosoftinTable1).Table1Afragmentoftheentitygrid.Nounphrasesarerepresentedbytheirheadnouns.Gridcellscorrespondtogrammaticalroles:subjects(S),objects(O),orneither(X).DepartmentTrialMicrosoftEvidenceCompetitorsMarketsProductsBrandsCaseNetscapeSoftwareTacticsGovernmentSuitEarnings1SOSXO––––––––––12––O––XSO–––––––23––SO––––SOO––––34––S––––––––S–––45––––––––––––SO–56–XS–––––––––––O66BarzilayandLapataModelingLocalCoherenceTable2Summaryaugmentedwithsyntacticannotationsforgridcomputation.1[TheJusticeDepartment]Sisconductingan[anti-trusttrial]Oagainst[MicrosoftCorp.]Xwith[evidence]Xthat[thecompany]Sisincreasinglyattemptingtocrush[competitors]O.2[Microsoft]Oisaccusedoftryingtoforcefullybuyinto[markets]Xwhere[itsownproducts]Sarenotcompetitiveenoughtounseat[establishedbrands]O.3[Thecase]Srevolvesaround[evidence]Oof[Microsoft]Saggressivelypressuring[Netscape]Ointomerging[browsersoftware]O.4[Microsoft]Sclaims[itstactics]Sarecommonplaceandgoodeconomically.5[Thegovernment]Smayﬁle[acivilsuit]Orulingthat[conspiracy]Stocurb[competition]Othrough[collusion]Xis[aviolationoftheShermanAct]O.6[Microsoft]Scontinuestoshow[increasedearnings]Odespite[thetrial]X.Whenanounisattestedmorethanoncewithadifferentgrammaticalroleinthesamesentence,wedefaulttotherolewiththehighestgrammaticalranking:subjectsarerankedhigherthanobjects,whichinturnarerankedhigherthantherest.Forexample,theentityMicrosoftismentionedtwiceinSentence1withthegrammaticalrolesx(forMicrosoftCorp.)ands(forthecompany),butisrepresentedonlybysinthegrid(seeTables1and2).3.2EntityGridsasFeatureVectorsAfundamentalassumptionunderlyingourapproachisthatthedistributionofentitiesincoherenttextsexhibitscertainregularitiesreﬂectedingridtopology.SomeoftheseregularitiesareformalizedinCenteringTheoryasconstraintsontransitionsofthelocalfocusinadjacentsentences.Gridsofcoherenttextsarelikelytohavesomedensecolumns(i.e.,columnswithjustafewgaps,suchasMicrosoftinTable1)andmanysparsecolumnswhichwillconsistmostlyofgaps(seemarketsandearningsinTable1).Onewouldfurtherexpectthatentitiescorrespondingtodensecolumnsaremoreoftensubjectsorobjects.Thesecharacteristicswillbelesspronouncedinlow-coherencetexts.InspiredbyCenteringTheory,ouranalysisrevolvesaroundpatternsoflocalentitytransitions.Alocalentitytransitionisasequence{S,O,X,–}nthatrepresentsentityoccurrencesandtheirsyntacticrolesinnadjacentsentences.Localtransitionscanbeeasilyobtainedfromagridascontinuoussubsequencesofeachcolumn.Eachtransitionwillhaveacertainprobabilityinagivengrid.Forinstance,theprobabilityofthetransition[S–]inthegridfromTable1is0.08(computedasaratioofitsfrequency[i.e.,six]dividedbythetotalnumberoftransitionsoflengthtwo[i.e.,75]).Eachtextcanthusbeviewedasadistributiondeﬁnedovertransitiontypes.Wecannowgoonestepfurtherandrepresenteachtextbyaﬁxedsetoftransitionsequencesusingastandardfeaturevectornotation.EachgridrenderingjofadocumentdicorrespondstoafeaturevectorΦ(xij)=(p1(xij),p2(xij),...,pm(xij)),wheremisthenumberofallpredeﬁnedentitytransitions,andpt(xij)theprobabilityoftransitiontingridxij.Thisfeaturevectorrepresentationisusefullyamenabletomachinelearningalgorithms(seeourexperimentsinSections4–6).Furthermore,itallowstheconsid-erationoflargenumbersoftransitionswhichcouldpotentiallyuncovernovelentitydistributionpatternsrelevantforcoherenceassessmentorothercoherence-relatedtasks.Notethatconsiderablelatitudeisavailablewhenspecifyingthetransitiontypestobeincludedinafeaturevector.Thesecanbealltransitionsofagivenlength(e.g.,twoorthree)orthemostfrequenttransitionswithinadocumentcollection.Anexampleof7ComputationalLinguisticsVolume34,Number1afeaturespacewithtransitionsoflengthtwoisillustratedinTable3.Thesecondrow(introducedbyd1)isthefeaturevectorrepresentationofthegridinTable1.3.3GridConstruction:LinguisticDimensionsOneofthecentralresearchissuesindevelopingentity-basedmodelsofcoherenceisdeterminingwhatsourcesoflinguisticknowledgeareessentialforaccurateprediction,andhowtoencodethemsuccinctlyinadiscourserepresentation.Previousapproachestendtoagreeonthefeaturesofentitydistributionrelatedtolocalcoherence—thedisagreementliesinthewaythesefeaturesaremodeled.Ourstudyofalternativeencodingsisnotamereduplicationofpreviousef-forts(Poesioetal.2004)thatfocusonlinguisticaspectsofparameterization.Becauseweareinterestedinanautomaticallyconstructedmodel,wehavetotakeintoaccountcom-putationalandlearningissueswhenconsideringalternativerepresentations.Therefore,ourexplorationoftheparameterspaceisguidedbythreeconsiderations:thelinguisticimportanceofaparameter,theaccuracyofitsautomaticcomputation,andthesizeoftheresultingfeaturespace.Fromthelinguisticside,wefocusonpropertiesofentitydistri-butionthataretightlylinkedtolocalcoherence,andatthesametimeallowformultipleinterpretationsduringtheencodingprocess.Computationalconsiderationspreventusfromconsideringdiscourserepresentationsthatcannotbecomputedreliablybyexist-ingtools.Forinstance,wecouldnotexperimentwiththegranularityofanutterance—sentenceversusclause—becauseavailableclauseseparatorsintroducesubstantialnoiseintoagridconstruction.Finally,weexcluderepresentationsthatwillexplodethesizeofthefeaturespace,therebyincreasingtheamountofdatarequiredfortrainingthemodel.EntityExtraction.Theaccuratecomputationofentityclassesiskeytocomputingmean-ingfulentitygrids.Inpreviousimplementationsofentity-basedmodels,classesofcoref-erentnounshavebeenextractedmanually(MiltsakakiandKukich2000;Karamanisetal.2004;Poesioetal.2004),butthisisnotanoptionforourmodel.Anobvioussolutionforidentifyingentityclassesistoemployanautomaticcoreferenceresolutiontoolthatdetermineswhichnounphrasesrefertothesameentityinadocument.Currentapproachesrecastcoreferenceresolutionasaclassiﬁcationtask.ApairofNPsisclassiﬁedascoreferringornotbasedonconstraintsthatarelearnedfromanannotatedcorpus.AseparateclusteringmechanismthencoordinatesthepossiblycontradictorypairwiseclassiﬁcationsandconstructsapartitiononthesetofNPs.Inourexperiments,weemployNgandCardie’s(2002)coreferenceresolutionsystem.ThesystemdecideswhethertwoNPsarecoreferentbyexploitingawealthoflexical,grammatical,semantic,andpositionalfeatures.ItistrainedontheMUC(6–7)datasetsandyieldsstate-of-the-artperformance(70.4F-measureonMUC-6and63.4onMUC-7).Table3Exampleofafeature-vectordocumentrepresentationusingalltransitionsoflengthtwogivensyntacticcategoriesS,O,X,and–.SSSOSXS–OSOOOXO–XSXOXXX––S–O–X––d1.01.010.08.0100.09000.03.05.07.03.59d2.02.01.01.020.070.02.14.14.06.04.03.070.1.36d3.0200.03.090.09.06000.05.03.07.17.398524 CHAPTER 23

• DISCOURSE COHERENCE

a modiﬁed order (such as a randomized order). We turn to these evaluations in the
next section.

23.3.3 Evaluating Neural and Entity-based coherence

Entity-based coherence models, as well as the neural models we introduce in the
next section, are generally evaluated in one of two ways.

First, we can have humans rate the coherence of a document and train a classiﬁer
to predict these human ratings, which can be categorial (high/low, or high/mid/low)
or continuous. This is the best evaluation to use if we have some end task in mind,
like essay grading, where human raters are the correct deﬁnition of the ﬁnal label.

Alternatively, since it’s very expensive to get human labels, and we might not
yet have an end-task in mind, we can use natural texts to do self-supervision. In
self-supervision we pair up a natural discourse with a pseudo-document created by
changing the ordering. Since naturally-ordered discourses are more coherent than
random permutation (Lin et al., 2011), a successful coherence algorithm should pre-
fer the original ordering.

Self-supervision has been implemented in 3 ways. In the sentence order dis-
crimination task (Barzilay and Lapata, 2005), we compare a document to a random
permutation of its sentence. A model is considered correct for an (original, per-
muted) test pair if it ranks the original document higher. Given k documents, we can
compute n permutations, resulting in kn pairs each with one original document and
one permutation, to use in training and testing.

In the sentence insertion task (Chen et al., 2007) we take a document, remove
one of the n sentences s, and create n
1 copies of the document with s inserted into
each position. The task is to decide which of the n documents is the one with the
original ordering, distinguishing the original position for s from all other positions.
Insertion is harder than discrimination since we are comparing documents that differ
by only one sentence.

−

Finally, in the sentence order reconstruction task (Lapata, 2003), we take a
document, randomize the sentences, and train the model to put them back in the
correct order. Again given k documents, we can compute n permutations, resulting
in kn pairs each with one original document and one permutation, to use in training
and testing. Reordering is of course a much harder task than simple classiﬁcation.

23.4 Representation learning models for local coherence

The third kind of local coherence is topical or semantic ﬁeld coherence. Discourses
cohere by talking about the same topics and subtopics, and drawing on the same
semantic ﬁelds in doing so.

The ﬁeld was pioneered by a series of unsupervised models in the 1990s of this
kind of coherence that made use of lexical cohesion (Halliday and Hasan, 1976):
the sharing of identical or semantically related words in nearby sentences. Morris
and Hirst (1991) computed lexical chains of words (like pine, bush trees, trunk) that
occurred through a discourse and that were related in Roget’s Thesaurus (by being in
the same category, or linked categories). They showed that the number and density
of chain correlated with the topic structure. The TextTiling algorithm of Hearst
(1997) computed the cosine between neighboring text spans (the normalized dot
product of vectors of raw word counts), again showing that sentences or paragraph in

lexical cohesion

TextTiling

23.4

• REPRESENTATION LEARNING MODELS FOR LOCAL COHERENCE

525

a subtopic have high cosine with each other, but not with sentences in a neighboring
subtopic.

A third early model, the LSA Coherence method of Foltz et al. (1998) was the
ﬁrst to use embeddings, modeling the coherence between two sentences as the co-
sine between their LSA sentence embedding vectors1, computing embeddings for a
sentence s by summing the embeddings of its words w:

sim(s,t) = cos(s, t)

= cos(

w,

w)

(23.31)

and deﬁning the overall coherence of a text as the average similarity over all pairs of
adjacent sentences si and si+1:

s
w
(cid:88)
∈

t
w
(cid:88)
∈

n
1
−

1

n

1

coherence(T ) =

cos(si, si+1)

(23.32)

(cid:88)i=1

−
Modern neural representation-learning coherence models, beginning with Li et al.
(2014), draw on the intuitions of these early unsupervised models for learning sen-
tence representations and measuring how they change between neighboring sen-
tences. But the new models also draw on the idea pioneered by Barzilay and Lapata
(2005) of self-supervision. That is, unlike say coherence relation models, which
train on hand-labeled representations for RST or PDTB, these models are trained to
distinguish natural discourses from unnatural discourses formed by scrambling the
order of sentences, thus using representation learning to discover the features that
matter for at least the ordering aspect of coherence.

Here we present one such model, the local coherence discriminator (LCD) (Xu
et al., 2019). Like early models, LCD computes the coherence of a text as the av-
erage of coherence scores between consecutive pairs of sentences. But unlike the
early unsupervised models, LCD is a self-supervised model trained to discriminate
consecutive sentence pairs (si, si+1) in the training documents (assumed to be coher-
ent) from (constructed) incoherent pairs (si, s(cid:48)). All consecutive pairs are positive
examples, and the negative (incoherent) partner for a sentence si is another sentence
uniformly sampled from the same document as si.

Fig. 23.11 describes the architecture of the model fθ , which takes a sentence
pair and returns a score, higher scores for more coherent pairs. Given an input
sentence pair s and t, the model computes sentence embeddings s and t (using any
sentence embeddings algorithm), and then concatenates four features of the pair: (1)
t; (3) the absolute value
the concatenation of the two vectors (2) their difference s
t. These are passed
of their difference
through a one-layer feedforward network to output the coherence score.

−
; (4) their element-wise product s
|

s
|

(cid:12)

−

t

The model is trained to make this coherence score higher for real pairs than for
negative pairs. More formally, the training objective for a corpus C of documents d,
each of which consists of a list of sentences si, is:

Lθ =

d
C (cid:88)si∈
(cid:88)d
∈

[L( fθ (si, si+1), fθ (si, s(cid:48)))]

E
p(s(cid:48)|

si)

(23.33)

si) is the expectation with respect to the negative sampling distribution con-
Ep(s(cid:48)|
ditioned on si: given a sentence si the algorithms samples a negative sentence s(cid:48)

1 See Chapter 6 for more on LSA embeddings; they are computed by applying SVD to the term-
document matrix (each cell weighted by log frequency and normalized by entropy), and then the ﬁrst
300 dimensions are used as the embedding.

526 CHAPTER 23

• DISCOURSE COHERENCE

Figure 23.11 The architecture of the LCD model of document coherence, showing the
computation of the score for a pair of sentences s and t. Figure from Xu et al. (2019).

uniformly over the other sentences in the same document. L is a loss function that
takes two scores, one for a positive pair and one for a negative pair, with the goal of
encouraging f + = fθ (si, si+1) to be high and f − = fθ (si, s(cid:48))) to be low. Fig. 23.11
use the margin loss l( f +, f −) = max(0, η
f + + f −) where η is the margin hyper-
parameter.

−

Xu et al. (2019) also give a useful baseline algorithm that itself has quite high
performance in measuring perplexity: train an RNN language model on the data,
and compute the log likelihood of sentence si in two ways, once given the preceding
context (conditional log likelihood) and once with no context (marginal log likeli-
hood). The difference between these values tells us how much the preceding context
improved the predictability of si, a predictability measure of coherence.

Training models to predict longer contexts than just consecutive pairs of sen-
tences can result in even stronger discourse representations. For example a Trans-
former language model trained with a contrastive sentence objective to predict text
up to a distance of
2 sentences improves performance on various discourse coher-
ence tasks (Iter et al., 2020).

±

Language-model style models are generally evaluated by the methods of Sec-
tion 23.3.3, although they can also be evaluated on the RST and PDTB coherence
relation tasks.

23.5 Global Coherence

A discourse must also cohere globally rather than just at the level of pairs of sen-
tences. Consider stories, for example. The narrative structure of stories is one of
the oldest kinds of global coherence to be studied. In his inﬂuential Morphology of
the Folktale, Propp (1968) models the discourse structure of Russian folktales via
a kind of plot grammar. His model includes a set of character categories he called
dramatis personae, like Hero, Villain, Donor, or Helper, and a set of events he
called functions (like “Villain commits kidnapping”, “Donor tests Hero”, or “Hero
is pursued”) that have to occur in particular order, along with other components.
Propp shows that the plots of each of the fairy tales he studies can be represented as

681Lossfunction:Theroleofthelossfunctionistoencouragef+=f✓(si,si+1)tobehighwhilef =f✓(si,s0)tobelow.Commonlossessuchasmarginorloglosscanallbeused.Throughexper-imentalvalidation,wefoundthatmarginlosstobesuperiorforthisproblem.Speciﬁcally,Ltakesontheform:L(f+,f )=max(0,⌘ f++f )where⌘isthemarginhyperparameter.Negativesamples:Technically,wearefreetochooseanysentences0toformanegativepairwithsi.However,becauseofpotentialdiffer-encesingenre,topicandwritingstyle,suchneg-ativesmightcausethediscriminativemodeltolearncuesunrelatedtocoherence.Therefore,weonlyselectsentencesfromthesamedocumenttoconstructnegativepairs.Speciﬁcally,supposesicomesfromdocumentdkwithlengthnk,thenp(s0|si)isauniformdistributionoverthenk 1sentences{sj}j6=ifromdk.Foradocumentwithnsentences,therearen 1positivepairs,and(n 1)⇤(n 2)/2negativepairs.Itturnsoutthatthequadraticnumberofnegativesprovidesarichenoughlearningsignal,whileatthesametime,isnottooprohibitivelylargetobeeffectivelycov-eredbyasamplingprocedure.Inpractice,wesampleanewsetofnegativeseachtimeweseeadocument,henceaftermanyepochs,wecanef-fectivelycoverthespaceforevenverylongdoc-uments.Section5.7discussesfurtherdetailsonsampling.4.1ModelArchitectureThespeciﬁcneuralarchitecturethatweuseforf✓isillustratedinFigure1.Weassumetheuseofsomepre-trainedsentenceencoder,whichisdis-cussedinthenextsection.Givenaninputsentencepair,thesentenceen-codermapsthesentencestoreal-valuedvectorsSandT.Wethencomputetheconcatenationofthefollowingfeatures:(1)concatenationofthetwovectors(S,T);(2)element-wisedifferenceS T;(3)element-wiseproductS⇤T;(4)absolutevalueofelement-wisedifference|S T|.Theconcate-natedfeaturerepresentationisthenfedtoaone-layerMLPtooutputthecoherencescore.Inpractice,wemakeouroverallcoherencemodelbidirectional,bytrainingaforwardmodelwithinput(S,T)andabackwardmodelwithin-put(T,S)withthesamearchitecturebutseparateparameters.Thecoherencescoreisthentheaver-agefromthetwomodels.Figure1:Genericarchitectureforourproposedmodel.4.2Pre-trainedGenerativeModelastheSentenceEncoderOurmodelcanworkwithanypre-trainedsen-tenceencoder,rangingfromthemostsimplisticaverageGloVe(Penningtonetal.,2014)embed-dingstomoresophisticatedsupervisedorunsu-pervisedpre-trainedsentenceencoders(Conneauetal.,2017).Asmentionedintheintroduction,sincegenerativemodelscanoftenbeturnedintosentenceencoder,generativecoherencemodelcanbeleveragedbyourmodeltobeneﬁtfromtheadvantagesofbothgenerativeanddiscriminativetraining,similarto(Kirosetal.,2015;Petersetal.,2018).Afterinitialization,wefreezethegenera-tivemodelparameterstoavoidoverﬁtting.InSection5,wewillexperimentallyshowthatwhilewedobeneﬁtfromstrongpre-traineden-coders,thefactthatourlocaldiscriminativemodelimprovesoverpreviousmethodsisindependentofthechoiceofsentenceencoder.5Experiments5.1EvaluationTasksFollowingNguyenandJoty(2017)andotherpre-viouswork,weevaluateourmodelsonthedis-criminationandinsertiontasks.Additionally,weevaluateontheparagraphreconstructiontaskinopen-domainsettings,inasimilarmannertoLiandJurafsky(2017).Inthediscriminationtask,adocumentiscom-paredtoarandompermutationofitssentences,andthemodelisconsideredcorrectifitscorestheoriginaldocumenthigherthanthepermutedone.Twentypermutationsareusedinthetestsetinac-cordancewithpreviouswork.23.5

• GLOBAL COHERENCE

527

a sequence of these functions, different tales choosing different subsets of functions,
Indeed Lakoff (1972) showed that Propp’s model
but always in the same order.
amounted to a discourse grammar of stories, and in recent computational work Fin-
layson (2016) demonstrates that some of these Proppian functions could be induced
from corpora of folktale texts by detecting events that have similar actions across
stories. Bamman et al. (2013) showed that generalizations over dramatis personae
could be induced from movie plot summaries on Wikipedia. Their model induced
latent personae from features like the actions the character takes (e.g., Villains stran-
gle), the actions done to them (e.g., Villains are foiled and arrested) or the descriptive
words used of them (Villains are evil).

In this section we introduce two kinds of such global discourse structure that
have been widely studied computationally. The ﬁrst is the structure of arguments:
the way people attempt to convince each other in persuasive essays by offering
claims and supporting premises. The second is somewhat related: the structure of
scientiﬁc papers, and the way authors present their goals, results, and relationship to
prior work in their papers.

23.5.1 Argumentation Structure

The ﬁrst type of global discourse structure is the structure of arguments. Analyzing
people’s argumentation computationally is often called argumentation mining.

The study of arguments dates back to Aristotle, who in his Rhetorics described
three components of a good argument: pathos (appealing to the emotions of the
listener), ethos (appealing to the speaker’s personal character), and logos (the logical
structure of the argument).

Most of the discourse structure studies of argumentation have focused on logos,
particularly via building and training on annotated datasets of persuasive essays or
other arguments (Reed et al. 2008, Stab and Gurevych 2014a, Peldszus and Stede
2016, Habernal and Gurevych 2017, Musi et al. 2018). Such corpora, for exam-
ple, often include annotations of argumentative components like claims (the central
component of the argument that is controversial and needs support) and premises
(the reasons given by the author to persuade the reader by supporting or attacking
the claim or other premises), as well as the argumentative relations between them
like SUPPORT and ATTACK.

Consider the following example of a persuasive essay from Stab and Gurevych
(2014b). The ﬁrst sentence (1) presents a claim (in bold). (2) and (3) present two
premises supporting the claim. (4) gives a premise supporting premise (3).

“(1) Museums and art galleries provide a better understanding
about arts than Internet. (2) In most museums and art galleries, de-
tailed descriptions in terms of the background, history and author are
provided. (3) Seeing an artwork online is not the same as watching it
with our own eyes, as (4) the picture online does not show the texture
or three-dimensional structure of the art, which is important to study.”

Thus this example has three argumentative relations: SUPPORT(2,1), SUPPORT(3,1)

and SUPPORT(4,3). Fig. 23.12 shows the structure of a much more complex argu-
ment.

While argumentation mining is clearly related to rhetorical structure and other
kinds of coherence relations, arguments tend to be much less local; often a persua-
sive essay will have only a single main claim, with premises spread throughout the
text, without the local coherence we see in coherence relations.

argumentation
mining

pathos

ethos

logos

claims
premises

argumentative
relations

528 CHAPTER 23

• DISCOURSE COHERENCE

Figure 23.12 Argumentation structure of a persuasive essay. Arrows indicate argumentation relations, ei-
ther of SUPPORT (with arrowheads) or ATTACK (with circleheads); P denotes premises. Figure from Stab and
Gurevych (2017).

argumentation
schemes

persuasion

Algorithms for detecting argumentation structure often include classiﬁers for
distinguishing claims, premises, or non-argumentation, together with relation clas-
siﬁers for deciding if two spans have the SUPPORT, ATTACK, or neither relation
(Peldszus and Stede, 2013). While these are the main focus of much computational
work, there is also preliminary efforts on annotating and detecting richer semantic
relationships (Park and Cardie 2014, Hidey et al. 2017) such as detecting argumen-
tation schemes, larger-scale structures for argument like argument from example,
or argument from cause to effect, or argument from consequences (Feng and
Hirst, 2011).

Another important line of research is studying how these argument structure (or
other features) are associated with the success or persuasiveness of an argument
(Habernal and Gurevych 2016, Tan et al. 2016, Hidey et al. 2017. Indeed, while it
is Aristotle’s logos that is most related to discourse structure, Aristotle’s ethos and
pathos techniques are particularly relevant in the detection of mechanisms of this
sort of persuasion. For example scholars have investigated the linguistic realization
of features studied by social scientists like reciprocity (people return favors), social
proof (people follow others’ choices), authority (people are inﬂuenced by those
with power), and scarcity (people value things that are scarce), all of which can
be brought up in a persuasive argument (Cialdini, 1984). Rosenthal and McKeown
(2017) showed that these features could be combined with argumentation structure
to predict who inﬂuences whom on social media, Althoff et al. (2014) found that
linguistic models of reciprocity and authority predicted success in online requests,
while the semisupervised model of Yang et al. (2019) detected mentions of scarcity,
commitment, and social identity to predict the success of peer-to-peer lending plat-
forms.

See Stede and Schneider (2018) for a comprehensive survey of argument mining.

23.5.2 The structure of scientiﬁc discourse

Scientiﬁc papers have a very speciﬁc global structure: somewhere in the course of
the paper the authors must indicate a scientiﬁc goal, develop a method for a solu-
tion, provide evidence for the solution, and compare to prior work. One popular

StabandGurevychParsingArgumentationStructurescloning.Thisexampleillustratesthatknowingargumentativerelationsisimportantforseparatingseveralargumentsinaparagraph.Theexamplealsoshowsthatargumentcomponentsfrequentlyexhibitprecedingtextunitsthatarenotrelevanttotheargumentbuthelpfulforrecognizingtheargumentcomponenttype.Forexample,precedingdis-courseconnectorslike“therefore”,“consequently”,or“thus”cansignalasubsequentclaim.Discoursemarkerslike“because”,“since”,or“furthermore”couldindicateapremise.Formally,theseprecedingtokensofanargumentcomponentstartingattokentiaredeﬁnedasthetokensti m,...,ti 1thatarenotcoveredbyanotherargumentcomponentinthesentences=t1,t2,...,tnwhere1inandi m 1.Thethirdbodyparagraphillustratesacontraargumentandargumentativeattackrelations:Admittedly,[cloningcouldbemisusedformilitarypurposes]Claim5.Forexample,[:it:::::could:::be:::::used::to::::::::::manipulate:::::::human::::::genes::in::::::order::to::::::create::::::::obedient:::::::soldiers::::with::::::::::::extraordinary:::::::abilities]Premise9.However,because[::::moral::::and:::::::ethical::::::values:::are::::::::::::internationally::::::shared]Premise10,[:it:::is::::very::::::::unlikely::::that:::::::cloning::::will::be::::::::misused:::for::::::militant:::::::::objectives]Premise11.TheparagraphbeginswithClaim5,whichattacksthestanceoftheauthor.ItissupportedbyPremise9inthesecondsentence.Thethirdsentenceincludestwopremises,bothofwhichdefendthestanceoftheauthor.Premise11isanattackofClaim5,andPremise10supportsPremise11.Thelastparagraph(conclusion)restatesthemajorclaimandsum-marizesthemainaspectsoftheessay:Tosumup,although[permittingcloningmightbearsomeriskslikemisuseformilitarypurposes]Claim6,Istronglybelievethat[thistechnologyisbeneﬁcialtohumanity]MajorClaim2.Itislikelythat[thistechnologybearssomeimportantcureswhichwillsignificantlyimprovelifeconditions]Claim7.Theconclusionoftheessaystartswithanattackingclaimfollowedbytherestatementofthemajorclaim.Thelastsentenceincludesanotherclaimthatsummarizesthemostim-portantpointsoftheauthor’sargumentation.Figure2showstheentireargumentationstructureoftheexampleessay.Figure2Argumentationstructureoftheexampleessay.Arrowsindicateargumentativerelations.Arrowheadsdenoteargumentativesupportrelationsandcircleheadsattackrelations.Dashedlinesindicaterelationsthatareencodedinthestanceattributesofclaims.“P”denotespremises.62923.6

• SUMMARY

529

argumentative
zoning

annotation scheme for modeling these rhetorical goals is the argumentative zon-
ing model of Teufel et al. (1999) and Teufel et al. (2009), which is informed by the
idea that each scientiﬁc paper tries to make a knowledge claim about a new piece
of knowledge being added to the repository of the ﬁeld (Myers, 1992). Sentences
in a scientiﬁc paper can be assigned one of 15 tags; Fig. 23.13 shows 7 (shortened)
examples of labeled sentences.

Category
AIM

Description
Statement of speciﬁc research goal, or
hypothesis of current paper

OWN METHOD New Knowledge claim, own work:

methods

OWN RESULTS Measurable/objective outcome of own

USE

GAP WEAK

work
Other work is used in own work

Lack of solution in ﬁeld, problem with
other solutions

SUPPORT

Other work supports current work or is
supported by current work

ANTISUPPORT Clash with other’s results or theory; su-
periority of own work

Example
“The aim of this process is to examine the role that
training plays in the tagging process”
“In order for it to be useful for our purposes, the
following extensions must be made:”
“All the curves have a generally upward trend but
always lie far below backoff (51% error rate)”
“We use the framework for the allocation and
transfer of control of Whittaker....”
“Here, we will produce experimental evidence
suggesting that this simple model leads to serious
overestimates”
“Work similar to that described here has been car-
ried out by Merialdo (1994), with broadly similar
conclusions.”
“This result challenges the claims of...”

Figure 23.13 Examples for 7 of the 15 labels from the Argumentative Zoning labelset (Teufel et al., 2009).

Teufel et al. (1999) and Teufel et al. (2009) develop labeled corpora of scientiﬁc
articles from computational linguistics and chemistry, which can be used as supervi-
sion for training standard sentence-classiﬁcation architecture to assign the 15 labels.

23.6 Summary

In this chapter we introduced local and global models for discourse coherence.

• Discourses are not arbitrary collections of sentences; they must be coherent.
Among the factors that make a discourse coherent are coherence relations
between the sentences, entity-based coherence, and topical coherence.

• Various sets of coherence relations and rhetorical relations have been pro-
posed. The relations in Rhetorical Structure Theory (RST) hold between
spans of text and are structured into a tree. Because of this, shift-reduce
and other parsing algorithms are generally used to assign these structures.
The Penn Discourse Treebank (PDTB) labels only relations between pairs of
spans, and the labels are generally assigned by sequence models.

• Entity-based coherence captures the intuition that discourses are about an
entity, and continue mentioning the entity from sentence to sentence. Cen-
tering Theory is a family of models describing how salience is modeled for
discourse entities, and hence how coherence is achieved by virtue of keeping
the same discourse entities salient over the discourse. The entity grid model
gives a more bottom-up way to compute which entity realization transitions
lead to coherence.

530 CHAPTER 23

• DISCOURSE COHERENCE

• Many different genres have different types of global coherence. Persuasive
essays have claims and premises that are extracted in the ﬁeld of argument
mining, scientiﬁc articles have structure related to aims, methods, results, and
comparisons.

Bibliographical and Historical Notes

SDRT

Coherence relations arose from the independent development of a number of schol-
ars, including Hobbs (1979) idea that coherence relations play an inferential role for
the hearer, and the investigations by Mann and Thompson (1987) of the discourse
structure of large texts. Other approaches to coherence relations and their extrac-
tion include Segmented Discourse Representation Theory (SDRT) (Asher and Las-
carides 2003, Baldridge et al. 2007) and the Linguistic Discourse Model (Polanyi
1988, Scha and Polanyi 1988, Polanyi et al. 2004). Wolf and Gibson (2005) argue
that coherence structure includes crossed bracketings, which make it impossible to
represent as a tree, and propose a graph representation instead. A compendium of
over 350 relations that have been proposed in the literature can be found in Hovy
(1990).

RST parsing was ﬁrst proposed by Marcu (1997), and early work was rule-based,
focused on discourse markers (Marcu, 2000a). The creation of the RST Discourse
TreeBank (Carlson et al. 2001, Carlson and Marcu 2001) enabled a wide variety
of machine learning algorithms, beginning with the shift-reduce parser of Marcu
(1999) that used decision trees to choose actions, and continuing with a wide variety
of machine learned parsing methods (Soricut and Marcu 2003, Sagae 2009, Hernault
et al. 2010, Feng and Hirst 2014, Surdeanu et al. 2015, Joty et al. 2015) and chunkers
(Sporleder and Lapata, 2005). Subba and Di Eugenio (2009) integrated sophisticated
semantic information into RST parsing. Ji and Eisenstein (2014) ﬁrst applied neural
models to RST parsing neural models, leading to the modern set of neural RST
models (Li et al. 2014, Li et al. 2016b, Braud et al. 2017, Yu et al. 2018, inter alia)
as well as neural segmenters (Wang et al. 2018b). and neural PDTB parsing models
(Ji and Eisenstein 2015, Qin et al. 2016, Qin et al. 2017).

Barzilay and Lapata (2005) pioneered the idea of self-supervision for coher-
ence: training a coherence model to distinguish true orderings of sentences from
random permutations. Li et al. (2014) ﬁrst applied this paradigm to neural sentence-
representation, and many neural self-supervised models followed (Li and Jurafsky
2017, Logeswaran et al. 2018, Lai and Tetreault 2018, Xu et al. 2019, Iter et al.
2020)

Another aspect of global coherence is the global topic structure of a text, the way
the topics shift over the course of the document. Barzilay and Lee (2004) introduced
an HMM model for capturing topics for coherence, and later work expanded this
intuition (Soricut and Marcu 2006, Elsner et al. 2007, Louis and Nenkova 2012, Li
and Jurafsky 2017).

The relationship between explicit and implicit discourse connectives has been
a fruitful one for research. Marcu and Echihabi (2002) ﬁrst proposed to use sen-
tences with explicit relations to help provide training data for implicit relations, by
removing the explicit relations and trying to re-predict them as a way of improv-
ing performance on implicit connectives; this idea was reﬁned by Sporleder and
Lascarides (2005), (Pitler et al., 2009), and Rutherford and Xue (2015). This rela-

BIBLIOGRAPHICAL AND HISTORICAL NOTES

531

tionship can also be used as a way to create discourse-aware representations. The
DisSent algorithm (Nie et al., 2019) creates the task of predicting explicit discourse
markers between two sentences. They show that representations learned to be good
at this task also function as powerful sentence representations for other discourse
tasks.

The idea of entity-based coherence seems to have arisen in multiple ﬁelds in the
mid-1970s, in functional linguistics (Chafe, 1976), in the psychology of discourse
processing (Kintsch and Van Dijk, 1978), and in the roughly contemporaneous work
of Grosz, Sidner, Joshi, and their colleagues. Grosz (1977a) addressed the focus
of attention that conversational participants maintain as the discourse unfolds. She
deﬁned two levels of focus; entities relevant to the entire discourse were said to
be in global focus, whereas entities that are locally in focus (i.e., most central to
a particular utterance) were said to be in immediate focus. Sidner 1979; 1983 de-
scribed a method for tracking (immediate) discourse foci and their use in resolving
pronouns and demonstrative noun phrases. She made a distinction between the cur-
rent discourse focus and potential foci, which are the predecessors to the backward-
and forward-looking centers of Centering theory, respectively. The name and further
roots of the centering approach lie in papers by Joshi and Kuhn (1979) and Joshi and
Weinstein (1981), who addressed the relationship between immediate focus and the
inferences required to integrate the current utterance into the discourse model. Grosz
et al. (1983) integrated this work with the prior work of Sidner and Grosz. This led
to a manuscript on centering which, while widely circulated since 1986, remained
unpublished until Grosz et al. (1995). A collection of centering papers appears in
Walker et al. (1998b). See Karamanis et al. (2004) and Poesio et al. (2004) for a
deeper exploration of centering and its parameterizations, and the History section of
Chapter 26 for more on the use of centering on coreference.

The grid model of entity-based coherence was ﬁrst proposed by Barzilay and
Lapata (2005) drawing on earlier work by Lapata (2003) and Barzilay, and then
extended by them Barzilay and Lapata (2008) and others with additional features
(Elsner and Charniak 2008, 2011, Feng et al. 2014, Lin et al. 2011) a model that
projects entities into a global graph for the discourse (Guinaudeau and Strube 2013,
Mesgar and Strube 2016), and a convolutional model to capture longer-range entity
dependencies (Nguyen and Joty, 2017).

Theories of discourse coherence have also been used in algorithms for interpret-
ing discourse-level linguistic phenomena, including verb phrase ellipsis and gap-
ping (Asher 1993, Kehler 1993), and tense interpretation (Lascarides and Asher
1993, Kehler 1994, Kehler 2000). An extensive investigation into the relationship
between coherence relations and discourse connectives can be found in Knott and
Dale (1994).

Useful surveys of discourse processing and structure include Stede (2011) and

Webber et al. (2012).

Andy Kehler wrote the Discourse chapter for the 2000 ﬁrst edition of this text-
book, which we used as the starting point for the second-edition chapter, and there
are some remnants of Andy’s lovely prose still in this third-edition coherence chap-
ter.

