Supervised learning


Let’s start by talking about a few examples of supervised learning prob-
lems. Suppose we have a dataset giving the living areas and prices of 47
houses from Portland, Oregon:

Living area (feet2) Price (1000$s)

6

2104
1600
2400
1416
3000
...

400
330
369
232
540
...

We can plot this data:

Given data like this, how can we learn to predict the prices of other houses

in Portland, as a function of the size of their living areas?

To establish notation for future use, we’ll use x(i) to denote the “input”
variables (living area in this example), also called input features, and y(i)
to denote the “output” or target variable that we are trying to predict
(price). A pair (x(i), y(i)) is called a training example, and the dataset
that we’ll be using to learn—a list of n training examples {(x(i), y(i)); i =
1, . . . , n}—is called a training set. Note that the superscript “(i)” in the
notation is simply an index into the training set, and has nothing to do with
exponentiation. We will also use X denote the space of input values, and Y
the space of output values. In this example, X = Y = R.

To describe the supervised learning problem slightly more formally, our
goal is, given a training set, to learn a function h : X (cid:55)→ Y so that h(x) is a
“good” predictor for the corresponding value of y. For historical reasons, this

50010001500200025003000350040004500500001002003004005006007008009001000housing pricessquare feetprice (in $1000)function h is called a hypothesis. Seen pictorially, the process is therefore
like this:

7

When the target variable that we’re trying to predict is continuous, such
as in our housing example, we call the learning problem a regression prob-
lem. When y can take on only a small number of discrete values (such as
if, given the living area, we wanted to predict if a dwelling is a house or an
apartment, say), we call it a classiﬁcation problem.

Training     set house.)(living area ofLearning algorithmhpredicted yx(predicted price)of house)Chapter 1

Linear regression

To make our housing example more interesting, let’s consider a slightly richer
dataset in which we also know the number of bedrooms in each house:

Living area (feet2) #bedrooms Price (1000$s)

2104
1600
2400
1416
3000
...

3
3
3
2
4
...

400
330
369
232
540
...

Here, the x’s are two-dimensional vectors in R2. For instance, x(i)
is the
1
living area of the i-th house in the training set, and x(i)
is its number of
2
bedrooms. (In general, when designing a learning problem, it will be up to
you to decide what features to choose, so if you are out in Portland gathering
housing data, you might also decide to include other features such as whether
each house has a ﬁreplace, the number of bathrooms, and so on. We’ll say
more about feature selection later, but for now let’s take the features as
given.)

To perform supervised learning, we must decide how we’re going to rep-
resent functions/hypotheses h in a computer. As an initial choice, let’s say
we decide to approximate y as a linear function of x:

hθ(x) = θ0 + θ1x1 + θ2x2

Here, the θi’s are the parameters (also called weights) parameterizing the
space of linear functions mapping from X to Y. When there is no risk of

8

confusion, we will drop the θ subscript in hθ(x), and write it more simply as
h(x). To simplify our notation, we also introduce the convention of letting
x0 = 1 (this is the intercept term), so that

9

h(x) =

d
(cid:88)

i=0

θixi = θT x,

where on the right-hand side above we are viewing θ and x both as vectors,
and here d is the number of input variables (not counting x0).

Now, given a training set, how do we pick, or learn, the parameters θ?
One reasonable method seems to be to make h(x) close to y, at least for
the training examples we have. To formalize this, we will deﬁne a function
that measures, for each value of the θ’s, how close the h(x(i))’s are to the
corresponding y(i)’s. We deﬁne the cost function:

J(θ) =

1
2

n
(cid:88)

i=1

(hθ(x(i)) − y(i))2.

If you’ve seen linear regression before, you may recognize this as the familiar
least-squares cost function that gives rise to the ordinary least squares
regression model. Whether or not you have seen it previously, let’s keep
going, and we’ll eventually show this to be a special case of a much broader
family of algorithms.

1.1 LMS algorithm

We want to choose θ so as to minimize J(θ). To do so, let’s use a search
algorithm that starts with some “initial guess” for θ, and that repeatedly
changes θ to make J(θ) smaller, until hopefully we converge to a value of
θ that minimizes J(θ). Speciﬁcally, let’s consider the gradient descent
algorithm, which starts with some initial θ, and repeatedly performs the
update:

θj := θj − α

J(θ).

∂
∂θj

(This update is simultaneously performed for all values of j = 0, . . . , d.)
Here, α is called the learning rate. This is a very natural algorithm that
repeatedly takes a step in the direction of steepest decrease of J.

In order to implement this algorithm, we have to work out what is the
partial derivative term on the right hand side. Let’s ﬁrst work it out for the

case of if we have only one training example (x, y), so that we can neglect
the sum in the deﬁnition of J. We have:

10

∂
∂θj

J(θ) =

(hθ(x) − y)2

1
∂
∂θj
2
1
2

= 2 ·

(hθ(x) − y) ·

(hθ(x) − y)

∂
∂θj
(cid:32) d

(cid:88)

i=0

(cid:33)

θixi − y

= (hθ(x) − y) ·

∂
∂θj

= (hθ(x) − y) xj

For a single training example, this gives the update rule:1

θj := θj + α (cid:0)y(i) − hθ(x(i))(cid:1) x(i)
j .

The rule is called the LMS update rule (LMS stands for “least mean squares”),
and is also known as the Widrow-Hoﬀ learning rule. This rule has several
properties that seem natural and intuitive. For instance, the magnitude of
the update is proportional to the error term (y(i) − hθ(x(i))); thus, for in-
stance, if we are encountering a training example on which our prediction
nearly matches the actual value of y(i), then we ﬁnd that there is little need
to change the parameters; in contrast, a larger change to the parameters will
be made if our prediction hθ(x(i)) has a large error (i.e., if it is very far from
y(i)).

We’d derived the LMS rule for when there was only a single training
example. There are two ways to modify this method for a training set of
more than one example. The ﬁrst is replace it with the following algorithm:

Repeat until convergence {

θj := θj + α

n
(cid:88)

i=1

(cid:0)y(i) − hθ(x(i))(cid:1) x(i)

j , (for every j)

(1.1)

}

1We use the notation “a := b” to denote an operation (in a computer program) in
which we set the value of a variable a to be equal to the value of b. In other words, this
operation overwrites a with the value of b. In contrast, we will write “a = b” when we are
asserting a statement of fact, that the value of a is equal to the value of b.

11

By grouping the updates of the coordinates into an update of the vector

θ, we can rewrite update (1.1) in a slightly more succinct way:

θ := θ + α

n
(cid:88)

i=1

(cid:0)y(i) − hθ(x(i))(cid:1) x(i)

The reader can easily verify that the quantity in the summation in the
update rule above is just ∂J(θ)/∂θj (for the original deﬁnition of J). So, this
is simply gradient descent on the original cost function J. This method looks
at every example in the entire training set on every step, and is called batch
gradient descent. Note that, while gradient descent can be susceptible
to local minima in general, the optimization problem we have posed here
for linear regression has only one global, and no other local, optima; thus
gradient descent always converges (assuming the learning rate α is not too
Indeed, J is a convex quadratic function.
large) to the global minimum.
Here is an example of gradient descent as it is run to minimize a quadratic
function.

The ellipses shown above are the contours of a quadratic function. Also
shown is the trajectory taken by gradient descent, which was initialized at
(48,30). The x’s in the ﬁgure (joined by straight lines) mark the successive
values of θ that gradient descent went through.

When we run batch gradient descent to ﬁt θ on our previous dataset,
to learn to predict housing price as a function of living area, we obtain
θ0 = 71.27, θ1 = 0.1345. If we plot hθ(x) as a function of x (area), along
with the training data, we obtain the following ﬁgure:

5101520253035404550510152025303540455012

If the number of bedrooms were included as one of the input features as well,
we get θ0 = 89.60, θ1 = 0.1392, θ2 = −8.738.

The above results were obtained with batch gradient descent. There is
an alternative to batch gradient descent that also works very well. Consider
the following algorithm:

Loop {

for i = 1 to n, {

θj := θj + α (cid:0)y(i) − hθ(x(i))(cid:1) x(i)
j ,

(for every j)

(1.2)

}

}

By grouping the updates of the coordinates into an update of the vector

θ, we can rewrite update (1.2) in a slightly more succinct way:

θ := θ + α (cid:0)y(i) − hθ(x(i))(cid:1) x(i)

In this algorithm, we repeatedly run through the training set, and each
time we encounter a training example, we update the parameters according
to the gradient of the error with respect to that single training example only.
This algorithm is called stochastic gradient descent (also incremental
gradient descent). Whereas batch gradient descent has to scan through
the entire training set before taking a single step—a costly operation if n is
large—stochastic gradient descent can start making progress right away, and

50010001500200025003000350040004500500001002003004005006007008009001000housing pricessquare feetprice (in $1000)13

continues to make progress with each example it looks at. Often, stochastic
gradient descent gets θ “close” to the minimum much faster than batch gra-
dient descent. (Note however that it may never “converge” to the minimum,
and the parameters θ will keep oscillating around the minimum of J(θ); but
in practice most of the values near the minimum will be reasonably good
approximations to the true minimum.2) For these reasons, particularly when
the training set is large, stochastic gradient descent is often preferred over
batch gradient descent.

1.2 The normal equations

Gradient descent gives one way of minimizing J. Let’s discuss a second way
of doing so, this time performing the minimization explicitly and without
resorting to an iterative algorithm. In this method, we will minimize J by
explicitly taking its derivatives with respect to the θj’s, and setting them to
zero. To enable us to do this without having to write reams of algebra and
pages full of matrices of derivatives, let’s introduce some notation for doing
calculus with matrices.

1.2.1 Matrix derivatives

For a function f : Rn×d (cid:55)→ R mapping from n-by-d matrices to the real
numbers, we deﬁne the derivative of f with respect to A to be:

∇Af (A) =






∂f
∂A11

...

∂f
∂An1

· · ·
. . .
· · ·






∂f
∂A1d

...

∂f
∂And

Thus, the gradient ∇Af (A) is itself an n-by-d matrix, whose (i, j)-element is

(cid:20) A11 A12
A21 A22

(cid:21)

is a 2-by-2 matrix, and

∂f /∂Aij. For example, suppose A =
the function f : R2×2 (cid:55)→ R is given by

f (A) =

3
2

A11 + 5A2

12 + A21A22.

2By slowly letting the learning rate α decrease to zero as the algorithm runs, it is also
possible to ensure that the parameters will converge to the global minimum rather than
merely oscillate around the minimum.

14

Here, Aij denotes the (i, j) entry of the matrix A. We then have

∇Af (A) =

(cid:20)

3
2
A22

(cid:21)

.

10A12
A21

1.2.2 Least squares revisited

Armed with the tools of matrix derivatives, let us now proceed to ﬁnd in
closed-form the value of θ that minimizes J(θ). We begin by re-writing J in
matrix-vectorial notation.

Given a training set, deﬁne the design matrix X to be the n-by-d matrix
(actually n-by-d + 1, if we include the intercept term) that contains the
training examples’ input values in its rows:

X =








— (x(1))T —
— (x(2))T —
...
— (x(n))T —








.

Also, let (cid:126)y be the n-dimensional vector containing all the target values from
the training set:



(cid:126)y =








.






y(1)
y(2)
...
y(n)

Now, since hθ(x(i)) = (x(i))T θ, we can easily verify that

Xθ − (cid:126)y =

=



















 −

(x(1))T θ
...
(x(n))T θ
hθ(x(1)) − y(1)
...
hθ(x(n)) − y(n)






y(1)
...
y(n)



 .

Thus, using the fact that for a vector z, we have that zT z = (cid:80)

i z2
i :

1
2

(Xθ − (cid:126)y)T (Xθ − (cid:126)y) =

n
(cid:88)

(hθ(x(i)) − y(i))2

1
2

i=1
= J(θ)

Finally, to minimize J, let’s ﬁnd its derivatives with respect to θ. Hence,

15

∇θJ(θ) = ∇θ

1
2

(Xθ − (cid:126)y)T (Xθ − (cid:126)y)

=

=

=

=

1
2
1
2
1
2
1
2

∇θ

∇θ

∇θ

(cid:0)(Xθ)T Xθ − (Xθ)T (cid:126)y − (cid:126)yT (Xθ) + (cid:126)yT (cid:126)y(cid:1)

(cid:0)θT (X T X)θ − (cid:126)yT (Xθ) − (cid:126)yT (Xθ)(cid:1)

(cid:0)θT (X T X)θ − 2(X T (cid:126)y)T θ(cid:1)

(cid:0)2X T Xθ − 2X T (cid:126)y(cid:1)

= X T Xθ − X T (cid:126)y

In the third step, we used the fact that aT b = bT a, and in the ﬁfth step
used the facts ∇xbT x = b and ∇xxT Ax = 2Ax for symmetric matrix A (for
more details, see Section 4.3 of “Linear Algebra Review and Reference”). To
minimize J, we set its derivatives to zero, and obtain the normal equations:

X T Xθ = X T (cid:126)y

Thus, the value of θ that minimizes J(θ) is given in closed form by the
equation

θ = (X T X)−1X T (cid:126)y.3

1.3 Probabilistic interpretation

When faced with a regression problem, why might linear regression, and
speciﬁcally why might the least-squares cost function J, be a reasonable
choice? In this section, we will give a set of probabilistic assumptions, under
which least-squares regression is derived as a very natural algorithm.

Let us assume that the target variables and the inputs are related via the

equation

y(i) = θT x(i) + (cid:15)(i),

3Note that in the above step, we are implicitly assuming that X T X is an invertible
matrix. This can be checked before calculating the inverse.
If either the number of
linearly independent examples is fewer than the number of features, or if the features
are not linearly independent, then X T X will not be invertible. Even in such cases, it is
possible to “ﬁx” the situation with additional techniques, which we skip here for the sake
of simplicty.

16

where (cid:15)(i) is an error term that captures either unmodeled eﬀects (such as
if there are some features very pertinent to predicting housing price, but
that we’d left out of the regression), or random noise. Let us further assume
that the (cid:15)(i) are distributed IID (independently and identically distributed)
according to a Gaussian distribution (also called a Normal distribution) with
mean zero and some variance σ2. We can write this assumption as “(cid:15)(i) ∼
N (0, σ2).” I.e., the density of (cid:15)(i) is given by

p((cid:15)(i)) =

√

1
2πσ

(cid:18)

exp

−

(cid:19)

.

((cid:15)(i))2
2σ2

This implies that

p(y(i)|x(i); θ) =

√

1
2πσ

(cid:18)

exp

−

(y(i) − θT x(i))2
2σ2

(cid:19)

.

The notation “p(y(i)|x(i); θ)” indicates that this is the distribution of y(i)
given x(i) and parameterized by θ. Note that we should not condition on θ
(“p(y(i)|x(i), θ)”), since θ is not a random variable. We can also write the
distribution of y(i) as y(i) | x(i); θ ∼ N (θT x(i), σ2).

Given X (the design matrix, which contains all the x(i)’s) and θ, what
is the distribution of the y(i)’s? The probability of the data is given by
p((cid:126)y|X; θ). This quantity is typically viewed a function of (cid:126)y (and perhaps X),
for a ﬁxed value of θ. When we wish to explicitly view this as a function of
θ, we will instead call it the likelihood function:

L(θ) = L(θ; X, (cid:126)y) = p((cid:126)y|X; θ).

Note that by the independence assumption on the (cid:15)(i)’s (and hence also the
y(i)’s given the x(i)’s), this can also be written

L(θ) =

=

n
(cid:89)

i=1
n
(cid:89)

i=1

p(y(i) | x(i); θ)

√

1
2πσ

(cid:18)

exp

−

(y(i) − θT x(i))2
2σ2

(cid:19)

.

Now, given this probabilistic model relating the y(i)’s and the x(i)’s, what
is a reasonable way of choosing our best guess of the parameters θ? The
principal of maximum likelihood says that we should choose θ so as to
make the data as high probability as possible. I.e., we should choose θ to
maximize L(θ).

Instead of maximizing L(θ), we can also maximize any strictly increasing
function of L(θ). In particular, the derivations will be a bit simpler if we
instead maximize the log likelihood (cid:96)(θ):

17

(cid:96)(θ) = log L(θ)

= log

n
(cid:89)

i=1

√

1
2πσ

(cid:18)

exp

−

(y(i) − θT x(i))2
2σ2

(cid:19)

=

n
(cid:88)

i=1

log

√

1
2πσ

(cid:18)

exp

−

(y(i) − θT x(i))2
2σ2

(cid:19)

= n log

√

1
2πσ

−

1
σ2 ·

1
2

n
(cid:88)

i=1

(y(i) − θT x(i))2.

Hence, maximizing (cid:96)(θ) gives the same answer as minimizing

1
2

n
(cid:88)

i=1

(y(i) − θT x(i))2,

which we recognize to be J(θ), our original least-squares cost function.

To summarize: Under the previous probabilistic assumptions on the data,
least-squares regression corresponds to ﬁnding the maximum likelihood esti-
mate of θ. This is thus one set of assumptions under which least-squares re-
gression can be justiﬁed as a very natural method that’s just doing maximum
likelihood estimation. (Note however that the probabilistic assumptions are
by no means necessary for least-squares to be a perfectly good and rational
procedure, and there may—and indeed there are—other natural assumptions
that can also be used to justify it.)

Note also that, in our previous discussion, our ﬁnal choice of θ did not
depend on what was σ2, and indeed we’d have arrived at the same result
even if σ2 were unknown. We will use this fact again later, when we talk
about the exponential family and generalized linear models.

1.4 Locally weighted linear regression (optional

reading)

Consider the problem of predicting y from x ∈ R. The leftmost ﬁgure below
shows the result of ﬁtting a y = θ0 + θ1x to a dataset. We see that the data
doesn’t really lie on straight line, and so the ﬁt is not very good.

18

Instead, if we had added an extra feature x2, and ﬁt y = θ0 + θ1x + θ2x2,
then we obtain a slightly better ﬁt to the data. (See middle ﬁgure) Naively, it
might seem that the more features we add, the better. However, there is also
a danger in adding too many features: The rightmost ﬁgure is the result of
ﬁtting a 5-th order polynomial y = (cid:80)5
j=0 θjxj. We see that even though the
ﬁtted curve passes through the data perfectly, we would not expect this to
be a very good predictor of, say, housing prices (y) for diﬀerent living areas
(x). Without formally deﬁning what these terms mean, we’ll say the ﬁgure
on the left shows an instance of underﬁtting—in which the data clearly
shows structure not captured by the model—and the ﬁgure on the right is
an example of overﬁtting. (Later in this class, when we talk about learning
theory we’ll formalize some of these notions, and also deﬁne more carefully
just what it means for a hypothesis to be good or bad.)

As discussed previously, and as shown in the example above, the choice of
features is important to ensuring good performance of a learning algorithm.
(When we talk about model selection, we’ll also see algorithms for automat-
ically choosing a good set of features.) In this section, let us brieﬂy talk
about the locally weighted linear regression (LWR) algorithm which, assum-
ing there is suﬃcient training data, makes the choice of features less critical.
This treatment will be brief, since you’ll get a chance to explore some of the
properties of the LWR algorithm yourself in the homework.

In the original linear regression algorithm, to make a prediction at a query

point x (i.e., to evaluate h(x)), we would:

1. Fit θ to minimize (cid:80)

i(y(i) − θT x(i))2.

2. Output θT x.

In contrast, the locally weighted linear regression algorithm does the fol-

lowing:

1. Fit θ to minimize (cid:80)

i w(i)(y(i) − θT x(i))2.

2. Output θT x.

0123456700.511.522.533.544.5xy0123456700.511.522.533.544.5xy0123456700.511.522.533.544.5xy19

Here, the w(i)’s are non-negative valued weights. Intuitively, if w(i) is large
for a particular value of i, then in picking θ, we’ll try hard to make (y(i) −
θT x(i))2 small. If w(i) is small, then the (y(i) − θT x(i))2 error term will be
pretty much ignored in the ﬁt.

A fairly standard choice for the weights is4

w(i) = exp

(cid:18)

−

(x(i) − x)2
2τ 2

(cid:19)

Note that the weights depend on the particular point x at which we’re trying
to evaluate x. Moreover, if |x(i) − x| is small, then w(i) is close to 1; and
if |x(i) − x| is large, then w(i) is small. Hence, θ is chosen giving a much
higher “weight” to the (errors on) training examples close to the query point
x. (Note also that while the formula for the weights takes a form that is
cosmetically similar to the density of a Gaussian distribution, the w(i)’s do
not directly have anything to do with Gaussians, and in particular the w(i)
are not random variables, normally distributed or otherwise.) The parameter
τ controls how quickly the weight of a training example falls oﬀ with distance
of its x(i) from the query point x; τ is called the bandwidth parameter, and
is also something that you’ll get to experiment with in your homework.

Locally weighted linear regression is the ﬁrst example we’re seeing of a
non-parametric algorithm. The (unweighted) linear regression algorithm
that we saw earlier is known as a parametric learning algorithm, because
it has a ﬁxed, ﬁnite number of parameters (the θi’s), which are ﬁt to the
data. Once we’ve ﬁt the θi’s and stored them away, we no longer need to
keep the training data around to make future predictions. In contrast, to
make predictions using locally weighted linear regression, we need to keep
the entire training set around. The term “non-parametric” (roughly) refers
to the fact that the amount of stuﬀ we need to keep in order to represent the
hypothesis h grows linearly with the size of the training set.

4If x is vector-valued, this is generalized to be w(i) = exp(−(x(i) − x)T (x(i) − x)/(2τ 2)),

or w(i) = exp(−(x(i) − x)T Σ−1(x(i) − x)/(2τ 2)), for an appropriate choice of τ or Σ.

Chapter 2

Classiﬁcation and logistic
regression

Let’s now talk about the classiﬁcation problem. This is just like the regression
problem, except that the values y we now want to predict take on only
a small number of discrete values. For now, we will focus on the binary
classiﬁcation problem in which y can take on only two values, 0 and 1.
(Most of what we say here will also generalize to the multiple-class case.)
For instance, if we are trying to build a spam classiﬁer for email, then x(i)
may be some features of a piece of email, and y may be 1 if it is a piece
of spam mail, and 0 otherwise. 0 is also called the negative class, and 1
the positive class, and they are sometimes also denoted by the symbols “-”
and “+.” Given x(i), the corresponding y(i) is also called the label for the
training example.

2.1 Logistic regression

We could approach the classiﬁcation problem ignoring the fact that y is
discrete-valued, and use our old linear regression algorithm to try to predict
y given x. However, it is easy to construct examples where this method
performs very poorly. Intuitively, it also doesn’t make sense for hθ(x) to take
values larger than 1 or smaller than 0 when we know that y ∈ {0, 1}.

To ﬁx this, let’s change the form for our hypotheses hθ(x). We will choose

where

hθ(x) = g(θT x) =

1
1 + e−θT x

,

g(z) =

1
1 + e−z

20

is called the logistic function or the sigmoid function. Here is a plot
showing g(z):

21

Notice that g(z) tends towards 1 as z → ∞, and g(z) tends towards 0 as
z → −∞. Moreover, g(z), and hence also h(x), is always bounded between
0 and 1. As before, we are keeping the convention of letting x0 = 1, so that
θT x = θ0 + (cid:80)d

j=1 θjxj.

For now, let’s take the choice of g as given. Other functions that smoothly
increase from 0 to 1 can also be used, but for a couple of reasons that we’ll see
later (when we talk about GLMs, and when we talk about generative learning
algorithms), the choice of the logistic function is a fairly natural one. Before
moving on, here’s a useful property of the derivative of the sigmoid function,
which we write as g(cid:48):

g(cid:48)(z) =

=

d
dz

1
1 + e−z
1
(1 + e−z)2
1
(1 + e−z)
= g(z)(1 − g(z)).

=

(cid:18)

·

(cid:0)e−z(cid:1)

1 −

(cid:19)

1
(1 + e−z)

So, given the logistic regression model, how do we ﬁt θ for it? Following
how we saw least squares regression could be derived as the maximum like-
lihood estimator under a set of assumptions, let’s endow our classiﬁcation
model with a set of probabilistic assumptions, and then ﬁt the parameters
via maximum likelihood.

−5−4−3−2−101234500.10.20.30.40.50.60.70.80.91zg(z)22

Let us assume that

P (y = 1 | x; θ) = hθ(x)
P (y = 0 | x; θ) = 1 − hθ(x)

Note that this can be written more compactly as

p(y | x; θ) = (hθ(x))y (1 − hθ(x))1−y

Assuming that the n training examples were generated independently, we
can then write down the likelihood of the parameters as

L(θ) = p((cid:126)y | X; θ)

=

=

n
(cid:89)

i=1
n
(cid:89)

i=1

p(y(i) | x(i); θ)

(cid:0)hθ(x(i))(cid:1)y(i) (cid:0)1 − hθ(x(i))(cid:1)1−y(i)

As before, it will be easier to maximize the log likelihood:

(cid:96)(θ) = log L(θ) =

n
(cid:88)

i=1

y(i) log h(x(i)) + (1 − y(i)) log(1 − h(x(i)))

(2.1)

How do we maximize the likelihood? Similar to our derivation in the case
of linear regression, we can use gradient ascent. Written in vectorial notation,
our updates will therefore be given by θ := θ + α∇θ(cid:96)(θ). (Note the positive
rather than negative sign in the update formula, since we’re maximizing,
rather than minimizing, a function now.) Let’s start by working with just
one training example (x, y), and take derivatives to derive the stochastic
gradient ascent rule:

∂
∂θj

(cid:96)(θ) =

(cid:18)
y

(cid:18)

=

y

1
g(θT x)
1
g(θT x)

− (1 − y)

− (1 − y)

1
1 − g(θT x)
1
1 − g(θT x)

(cid:19) ∂
∂θj

(cid:19)

g(θT x)

g(θT x)(1 − g(θT x))

= (cid:0)y(1 − g(θT x)) − (1 − y)g(θT x)(cid:1) xj
= (y − hθ(x)) xj

∂
∂θj

θT x

(2.2)

23

Above, we used the fact that g(cid:48)(z) = g(z)(1 − g(z)). This therefore gives us
the stochastic gradient ascent rule

θj := θj + α (cid:0)y(i) − hθ(x(i))(cid:1) x(i)

j

If we compare this to the LMS update rule, we see that it looks identical; but
this is not the same algorithm, because hθ(x(i)) is now deﬁned as a non-linear
function of θT x(i). Nonetheless, it’s a little surprising that we end up with
the same update rule for a rather diﬀerent algorithm and learning problem.
Is this coincidence, or is there a deeper reason behind this? We’ll answer this
when we get to GLM models.

Remark 2.1.1: An alternative notational viewpoint of the same loss func-
tion is also useful, especially for Section 7.1 where we study nonlinear models.
Let (cid:96)logistic : R × {0, 1} → R≥0 be the logistic loss deﬁned as

(cid:96)logistic(t, y) (cid:44) y log(1 + exp(−t)) + (1 − y) log(1 + exp(t)) .

(2.3)

One can verify by plugging in hθ(x) = 1/(1 + e−θ(cid:62)x) that the negative log-
likelihood (the negation of (cid:96)(θ) in equation (2.1)) can be re-written as

−(cid:96)(θ) = (cid:96)logistic(θ(cid:62)x, y).

Oftentimes θ(cid:62)x or t is called the logit. Basic calculus gives us that

∂(cid:96)logistic(t, y)
∂t

= y

− exp(−t)
1 + exp(−t)

+ (1 − y)

1
1 + exp(−t)

= 1/(1 + exp(−t)) − y.

Then, using the chain rule, we have that

∂
∂θj

(cid:96)(θ) = −

∂(cid:96)logistic(t, y)
∂t

·

∂t
∂θj

= (y − 1/(1 + exp(−t))) · xj = (y − hθ(x))xj ,

(2.4)

(2.5)

(2.6)

(2.7)

(2.8)

which is consistent with the derivation in equation (2.2). We will see this
viewpoint can be extended nonlinear models in Section 7.1.

2.2 Digression: the perceptron learning algo-

rithm

We now digress to talk brieﬂy about an algorithm that’s of some historical
interest, and that we will also return to later when we talk about learning

24

theory. Consider modifying the logistic regression method to “force” it to
output values that are either 0 or 1 or exactly. To do so, it seems natural to
change the deﬁnition of g to be the threshold function:

g(z) =

(cid:26) 1 if z ≥ 0
0 if z < 0

If we then let hθ(x) = g(θT x) as before but using this modiﬁed deﬁnition of
g, and if we use the update rule

θj := θj + α (cid:0)y(i) − hθ(x(i))(cid:1) x(i)
j .

then we have the perceptron learning algorithn.

In the 1960s, this “perceptron” was argued to be a rough model for how
individual neurons in the brain work. Given how simple the algorithm is, it
will also provide a starting point for our analysis when we talk about learning
theory later in this class. Note however that even though the perceptron may
be cosmetically similar to the other algorithms we talked about, it is actually
a very diﬀerent type of algorithm than logistic regression and least squares
linear regression; in particular, it is diﬃcult to endow the perceptron’s predic-
tions with meaningful probabilistic interpretations, or derive the perceptron
as a maximum likelihood estimation algorithm.

2.3 Multi-class classiﬁcation

Consider a classiﬁcation problem in which the response variable y can take on
any one of k values, so y ∈ {1, 2, . . . , k}. For example, rather than classifying
emails into the two classes spam or not-spam—which would have been a
binary classiﬁcation problem—we might want to classify them into three
classes, such as spam, personal mails, and work-related mails. The label /
response variable is still discrete, but can now take on more than two values.
We will thus model it as distributed according to a multinomial distribution.
In this case, p(y | x; θ) is a distribution over k possible discrete outcomes
and is thus a multinomial distribution. Recall that a multinomial distribu-
tion involves k numbers φ1, . . . , φk specifying the probability of each of the
outcomes. Note that these numbers must satisfy (cid:80)k
i=1 φi = 1. We will de-
sign a parameterized model that outputs φ1, . . . , φk satisfying this constraint
given the input x.

We introduce k groups of parameters θ1, . . . , θk, each of them being a
k x to represent

Intuitively, we would like to use θ(cid:62)

1 x, . . . , θ(cid:62)

vector in Rd.

25

φ1, . . . , φk, the probabilities P (y = 1 | x; θ), . . . , P (y = k | x; θ). However,
there are two issues with such a direct approach. First, θ(cid:62)
j x is not neces-
sarily within [0, 1]. Second, the summation of θ(cid:62)
j x’s is not necessarily 1.
1 x, · · · , θ(cid:62)
Thus, instead, we will use the softmax function to turn (θ(cid:62)
k x) into
a probability vector with nonnegative entries that sum up to 1.

Deﬁne the softmax function softmax : Rk → Rk as




softmax(t1, . . . , tk) =





.





(2.9)

(cid:80)k

exp(t1)
j=1 exp(tj )
...

exp(tk)
j=1 exp(tj )

(cid:80)k

The inputs to the softmax function, the vector t here, are often called log-
its. Note that by deﬁnition, the output of the softmax function is always a
probability vector whose entries are nonnegative and sum up to 1.

Let (t1, . . . , tk) = (θ(cid:62)

k x). We apply the softmax function to
(t1, . . . , tk), and use the output as the probabilities P (y = 1 | x; θ), . . . , P (y =
k | x; θ). We obtain the following probabilistic model:

1 x, · · · , θ(cid:62)








P (y = 1 | x; θ)
...
P (y = k | x; θ)


 = softmax(t1, · · · , tk) =








j x)

exp(θ(cid:62)
1 x)
j=1 exp(θ(cid:62)
...

exp(θ(cid:62)
k x)
j=1 exp(θ(cid:62)

j x)

(cid:80)k

(cid:80)k








.

(2.10)

For notational convenience, we will let φi = exp(ti)
equation above can be written as:

(cid:80)k

j=1 exp(tj )

. More succinctly, the

P (y = i | x; θ) = φi =

exp(ti)
j=1 exp(tj)

(cid:80)k

=

exp(θ(cid:62)
i x)
j=1 exp(θ(cid:62)

j x)

(cid:80)k

.

(2.11)

Next, we compute the negative log-likelihood of a single example (x, y).

− log p(y | x, θ) = − log

(cid:32)

exp(ty)
j=1 exp(tj)

(cid:80)k

(cid:33)

(cid:32)

= − log

exp(θ(cid:62)
y x)
j=1 exp(θ(cid:62)

j x)

(cid:80)k

(cid:33)

(2.12)

Thus, the loss function, the negative log-likelihood of the training data, is
given as

(cid:96)(θ) =

n
(cid:88)

i=1

− log

(cid:32) exp(θ(cid:62)

y(i)x(i))

(cid:80)k

j=1 exp(θ(cid:62)

j x(i))

(cid:33)

.

(2.13)

It’s convenient to deﬁne the cross-entropy loss (cid:96)ce : Rk × {1, . . . , k} → R≥0,
which modularizes in the complex equation above:1

26

(cid:96)ce((t1, . . . , tk), y) = − log

(cid:32)

exp(ty)
j=1 exp(tj)

(cid:80)k

(cid:33)

.

With this notation, we can simply rewrite equation (2.13) as

(cid:96)(θ) =

n
(cid:88)

i=1

(cid:96)ce((θ(cid:62)

1 x(i), . . . , θ(cid:62)

k x(i)), y(i)) .

(2.14)

(2.15)

Moreover, conveniently, the cross-entropy loss also has a simple gradient. Let
t = (t1, . . . , tk), and recall φi = exp(ti)
. By basic calculus, we can derive

(cid:80)k

j=1 exp(tj )

∂(cid:96)ce(t, y)
∂ti

= φi − 1{y = i} ,

(2.16)

where 1{·} is the indicator function, that is, 1{y = i} = 1 if y = i, and
1{y = i} = 0 if y (cid:54)= i. Alternatively, in vectorized notations, we have the
following form which will be useful for Chapter 7:

∂(cid:96)ce(t, y)
∂t

= φ − ey ,

(2.17)

where es ∈ Rk is the s-th natural basis vector (where the s-th entry is 1 and
all other entries are zeros.) Using Chain rule, we have that

∂(cid:96)ce((θ(cid:62)

1 x, . . . , θ(cid:62)
∂θi

k x), y)

=

∂(cid:96)(t, y)
∂ti

·

∂ti
∂θi

= (φi − 1{y = i}) · x .

(2.18)

Therefore, the gradient of the loss with respect to the part of parameter θi is

∂(cid:96)(θ)
∂θi

=

n
(cid:88)

(φ(j)

i − 1{y(j) = i}) · x(j) ,

j=1

(2.19)

i x(j))

i = exp(θ(cid:62)

where φ(j)
is the probability that the model predicts item i
for example x(j). With the gradients above, one can implement (stochastic)
gradient descent to minimize the loss function (cid:96)(θ).

s=1 exp(θ(cid:62)

s x(j))

(cid:80)k

1There are some ambiguity in the naming here. Some people call the cross-entropy loss
the function that maps the probability vector (the φ in our language) and label y to the
ﬁnal real number, and call our version of cross-entropy loss softmax-cross-entropy loss.
We choose our current naming convention because it’s consistent with the naming of most
modern deep learning library such as PyTorch and Jax.

27

2.4 Another algorithm for maximizing (cid:96)(θ)

Returning to logistic regression with g(z) being the sigmoid function, let’s
now talk about a diﬀerent algorithm for maximizing (cid:96)(θ).

To get us started, let’s consider Newton’s method for ﬁnding a zero of a
function. Speciﬁcally, suppose we have some function f : R (cid:55)→ R, and we
wish to ﬁnd a value of θ so that f (θ) = 0. Here, θ ∈ R is a real number.
Newton’s method performs the following update:

θ := θ −

f (θ)
f (cid:48)(θ)

.

This method has a natural interpretation in which we can think of it as
approximating the function f via a linear function that is tangent to f at
the current guess θ, solving for where that linear function equals to zero, and
letting the next guess for θ be where that linear function is zero.

Here’s a picture of the Newton’s method in action:
In the leftmost ﬁgure, we see the function f plotted along with the line
y = 0. We’re trying to ﬁnd θ so that f (θ) = 0; the value of θ that achieves this
is about 1.3. Suppose we initialized the algorithm with θ = 4.5. Newton’s
method then ﬁts a straight line tangent to f at θ = 4.5, and solves for the
where that line evaluates to 0. (Middle ﬁgure.) This give us the next guess
for θ, which is about 2.8. The rightmost ﬁgure shows the result of running
one more iteration, which the updates θ to about 1.8. After a few more
iterations, we rapidly approach θ = 1.3.

Newton’s method gives a way of getting to f (θ) = 0. What if we want to
use it to maximize some function (cid:96)? The maxima of (cid:96) correspond to points
where its ﬁrst derivative (cid:96)(cid:48)(θ) is zero. So, by letting f (θ) = (cid:96)(cid:48)(θ), we can use
the same algorithm to maximize (cid:96), and we obtain update rule:

θ := θ −

(cid:96)(cid:48)(θ)
(cid:96)(cid:48)(cid:48)(θ)

.

(Something to think about: How would this change if we wanted to use
Newton’s method to minimize rather than maximize a function?)

11.522.533.544.55−100102030405060xf(x)11.522.533.544.55−100102030405060xf(x)11.522.533.544.55−100102030405060xf(x)28

Lastly, in our logistic regression setting, θ is vector-valued, so we need to
generalize Newton’s method to this setting. The generalization of Newton’s
method to this multidimensional setting (also called the Newton-Raphson
method) is given by

θ := θ − H −1∇θ(cid:96)(θ).

Here, ∇θ(cid:96)(θ) is, as usual, the vector of partial derivatives of (cid:96)(θ) with respect
to the θi’s; and H is an d-by-d matrix (actually, d+1−by−d+1, assuming that
we include the intercept term) called the Hessian, whose entries are given
by

Hij =

∂2(cid:96)(θ)
∂θi∂θj

.

Newton’s method typically enjoys faster convergence than (batch) gra-
dient descent, and requires many fewer iterations to get very close to the
minimum. One iteration of Newton’s can, however, be more expensive than
one iteration of gradient descent, since it requires ﬁnding and inverting an
d-by-d Hessian; but so long as d is not too large, it is usually much faster
overall. When Newton’s method is applied to maximize the logistic regres-
sion log likelihood function (cid:96)(θ), the resulting method is also called Fisher
scoring.

Chapter 3

Generalized linear models

So far, we’ve seen a regression example, and a classiﬁcation example. In the
regression example, we had y|x; θ ∼ N (µ, σ2), and in the classiﬁcation one,
y|x; θ ∼ Bernoulli(φ), for some appropriate deﬁnitions of µ and φ as functions
of x and θ.
In this section, we will show that both of these methods are
special cases of a broader family of models, called Generalized Linear Models
(GLMs).1 We will also show how other models in the GLM family can be
derived and applied to other classiﬁcation and regression problems.

3.1 The exponential family

To work our way up to GLMs, we will begin by deﬁning exponential family
distributions. We say that a class of distributions is in the exponential family
if it can be written in the form

p(y; η) = b(y) exp(ηT T (y) − a(η))

(3.1)

Here, η is called the natural parameter (also called the canonical param-
eter) of the distribution; T (y) is the suﬃcient statistic (for the distribu-
tions we consider, it will often be the case that T (y) = y); and a(η) is the log
partition function. The quantity e−a(η) essentially plays the role of a nor-
malization constant, that makes sure the distribution p(y; η) sums/integrates
over y to 1.

A ﬁxed choice of T , a and b deﬁnes a family (or set) of distributions that
is parameterized by η; as we vary η, we then get diﬀerent distributions within
this family.

1The presentation of the material in this section takes inspiration from Michael I.
Jordan, Learning in graphical models (unpublished book draft), and also McCullagh and
Nelder, Generalized Linear Models (2nd ed.).

29

30

We now show that the Bernoulli and the Gaussian distributions are ex-
amples of exponential family distributions. The Bernoulli distribution with
mean φ, written Bernoulli(φ), speciﬁes a distribution over y ∈ {0, 1}, so that
p(y = 1; φ) = φ; p(y = 0; φ) = 1 − φ. As we vary φ, we obtain Bernoulli
distributions with diﬀerent means. We now show that this class of Bernoulli
distributions, ones obtained by varying φ, is in the exponential family; i.e.,
that there is a choice of T , a and b so that Equation (3.1) becomes exactly
the class of Bernoulli distributions.

We write the Bernoulli distribution as:

p(y; φ) = φy(1 − φ)1−y

= exp(y log φ + (1 − y) log(1 − φ))
(cid:18) φ

(cid:19)(cid:19)

(cid:18)(cid:18)

= exp

log

y + log(1 − φ)

.

(cid:19)

1 − φ

Thus, the natural parameter is given by η = log(φ/(1 − φ)). Interestingly, if
we invert this deﬁnition for η by solving for φ in terms of η, we obtain φ =
1/(1 + e−η). This is the familiar sigmoid function! This will come up again
when we derive logistic regression as a GLM. To complete the formulation
of the Bernoulli distribution as an exponential family distribution, we also
have

T (y) = y
a(η) = − log(1 − φ)

= log(1 + eη)

b(y) = 1

This shows that the Bernoulli distribution can be written in the form of
Equation (3.1), using an appropriate choice of T , a and b.

Let’s now move on to consider the Gaussian distribution. Recall that,
when deriving linear regression, the value of σ2 had no eﬀect on our ﬁnal
choice of θ and hθ(x). Thus, we can choose an arbitrary value for σ2 without
changing anything. To simplify the derivation below, let’s set σ2 = 1.2 We

2If we leave σ2 as a variable, the Gaussian distribution can also be shown to be in the
exponential family, where η ∈ R2 is now a 2-dimension vector that depends on both µ and
σ. For the purposes of GLMs, however, the σ2 parameter can also be treated by considering
a more general deﬁnition of the exponential family: p(y; η, τ ) = b(a, τ ) exp((ηT T (y) −
a(η))/c(τ )). Here, τ is called the dispersion parameter, and for the Gaussian, c(τ ) = σ2;
but given our simpliﬁcation above, we won’t need the more general deﬁnition for the
examples we will consider here.

then have:

p(y; µ) =

=

1
√
2π
1
√
2π

(cid:18)

exp

−

(cid:18)

exp

−

1
2
1
2

(cid:19)

(cid:18)

(y − µ)2

(cid:19)

y2

· exp

µy −

31

(cid:19)

1
2

µ2

Thus, we see that the Gaussian is in the exponential family, with

η = µ
T (y) = y
a(η) = µ2/2
= η2/2
√
b(y) = (1/

2π) exp(−y2/2).

There’re many other distributions that are members of the exponen-
tial family: The multinomial (which we’ll see later), the Poisson (for mod-
elling count-data; also see the problem set); the gamma and the exponen-
tial (for modelling continuous, non-negative random variables, such as time-
intervals); the beta and the Dirichlet (for distributions over probabilities);
and many more.
In the next section, we will describe a general “recipe”
for constructing models in which y (given x and θ) comes from any of these
distributions.

3.2 Constructing GLMs

Suppose you would like to build a model to estimate the number y of cus-
tomers arriving in your store (or number of page-views on your website) in
any given hour, based on certain features x such as store promotions, recent
advertising, weather, day-of-week, etc. We know that the Poisson distribu-
tion usually gives a good model for numbers of visitors. Knowing this, how
can we come up with a model for our problem? Fortunately, the Poisson is an
exponential family distribution, so we can apply a Generalized Linear Model
(GLM). In this section, we will we will describe a method for constructing
GLM models for problems such as these.

More generally, consider a classiﬁcation or regression problem where we
would like to predict the value of some random variable y as a function of
x. To derive a GLM for this problem, we will make the following three
assumptions about the conditional distribution of y given x and about our
model:

32

1. y | x; θ ∼ ExponentialFamily(η). I.e., given x and θ, the distribution of

y follows some exponential family distribution, with parameter η.

2. Given x, our goal is to predict the expected value of T (y) given x.
In most of our examples, we will have T (y) = y, so this means we
would like the prediction h(x) output by our learned hypothesis h to
satisfy h(x) = E[y|x].
(Note that this assumption is satisﬁed in the
choices for hθ(x) for both logistic regression and linear regression. For
instance, in logistic regression, we had hθ(x) = p(y = 1|x; θ) = 0 · p(y =
0|x; θ) + 1 · p(y = 1|x; θ) = E[y|x; θ].)

3. The natural parameter η and the inputs x are related linearly: η = θT x.

(Or, if η is vector-valued, then ηi = θT

i x.)

The third of these assumptions might seem the least well justiﬁed of
the above, and it might be better thought of as a “design choice” in our
recipe for designing GLMs, rather than as an assumption per se. These
three assumptions/design choices will allow us to derive a very elegant class
of learning algorithms, namely GLMs, that have many desirable properties
such as ease of learning. Furthermore, the resulting models are often very
eﬀective for modelling diﬀerent types of distributions over y; for example, we
will shortly show that both logistic regression and ordinary least squares can
both be derived as GLMs.

3.2.1 Ordinary least squares

To show that ordinary least squares is a special case of the GLM family
of models, consider the setting where the target variable y (also called the
response variable in GLM terminology) is continuous, and we model the
conditional distribution of y given x as a Gaussian N (µ, σ2). (Here, µ may
depend x.) So, we let the ExponentialF amily(η) distribution above be
the Gaussian distribution. As we saw previously, in the formulation of the
Gaussian as an exponential family distribution, we had µ = η. So, we have

hθ(x) = E[y|x; θ]
= µ
= η
= θT x.

The ﬁrst equality follows from Assumption 2, above; the second equality
follows from the fact that y|x; θ ∼ N (µ, σ2), and so its expected value is given

33

by µ; the third equality follows from Assumption 1 (and our earlier derivation
showing that µ = η in the formulation of the Gaussian as an exponential
family distribution); and the last equality follows from Assumption 3.

3.2.2 Logistic regression

We now consider logistic regression. Here we are interested in binary classiﬁ-
cation, so y ∈ {0, 1}. Given that y is binary-valued, it therefore seems natural
to choose the Bernoulli family of distributions to model the conditional dis-
tribution of y given x. In our formulation of the Bernoulli distribution as
an exponential family distribution, we had φ = 1/(1 + e−η). Furthermore,
note that if y|x; θ ∼ Bernoulli(φ), then E[y|x; θ] = φ. So, following a similar
derivation as the one for ordinary least squares, we get:

hθ(x) = E[y|x; θ]
= φ
= 1/(1 + e−η)
= 1/(1 + e−θT x)

So, this gives us hypothesis functions of the form hθ(x) = 1/(1 + e−θT x). If
you are previously wondering how we came up with the form of the logistic
function 1/(1 + e−z), this gives one answer: Once we assume that y condi-
tioned on x is Bernoulli, it arises as a consequence of the deﬁnition of GLMs
and exponential family distributions.

To introduce a little more terminology, the function g giving the distri-
bution’s mean as a function of the natural parameter (g(η) = E[T (y); η])
is called the canonical response function. Its inverse, g−1, is called the
canonical link function. Thus, the canonical response function for the
Gaussian family is just the identify function; and the canonical response
function for the Bernoulli is the logistic function.3

3Many texts use g to denote the link function, and g−1 to denote the response function;
but the notation we’re using here, inherited from the early machine learning literature,
will be more consistent with the notation used in the rest of the class.

Chapter 4

Generative learning algorithms

So far, we’ve mainly been talking about learning algorithms that model
p(y|x; θ), the conditional distribution of y given x. For instance, logistic
regression modeled p(y|x; θ) as hθ(x) = g(θT x) where g is the sigmoid func-
tion. In these notes, we’ll talk about a diﬀerent type of learning algorithm.
Consider a classiﬁcation problem in which we want to learn to distinguish
between elephants (y = 1) and dogs (y = 0), based on some features of
an animal. Given a training set, an algorithm like logistic regression or
the perceptron algorithm (basically) tries to ﬁnd a straight line—that is, a
decision boundary—that separates the elephants and dogs. Then, to classify
a new animal as either an elephant or a dog, it checks on which side of the
decision boundary it falls, and makes its prediction accordingly.

Here’s a diﬀerent approach. First, looking at elephants, we can build a
model of what elephants look like. Then, looking at dogs, we can build a
separate model of what dogs look like. Finally, to classify a new animal, we
can match the new animal against the elephant model, and match it against
the dog model, to see whether the new animal looks more like the elephants
or more like the dogs we had seen in the training set.

Algorithms that try to learn p(y|x) directly (such as logistic regression),
or algorithms that try to learn mappings directly from the space of inputs X
to the labels {0, 1}, (such as the perceptron algorithm) are called discrim-
inative learning algorithms. Here, we’ll talk about algorithms that instead
try to model p(x|y) (and p(y)). These algorithms are called generative
learning algorithms. For instance, if y indicates whether an example is a
dog (0) or an elephant (1), then p(x|y = 0) models the distribution of dogs’
features, and p(x|y = 1) models the distribution of elephants’ features.

After modeling p(y) (called the class priors) and p(x|y), our algorithm

34

35

can then use Bayes rule to derive the posterior distribution on y given x:

p(y|x) =

p(x|y)p(y)
p(x)

.

Here, the denominator is given by p(x) = p(x|y = 1)p(y = 1) + p(x|y =
0)p(y = 0) (you should be able to verify that this is true from the standard
properties of probabilities), and thus can also be expressed in terms of the
quantities p(x|y) and p(y) that we’ve learned. Actually, if were calculating
p(y|x) in order to make a prediction, then we don’t actually need to calculate
the denominator, since

arg max

y

p(y|x) = arg max

y

= arg max

y

p(x|y)p(y)
p(x)
p(x|y)p(y).

4.1 Gaussian discriminant analysis

The ﬁrst generative learning algorithm that we’ll look at is Gaussian discrim-
inant analysis (GDA). In this model, we’ll assume that p(x|y) is distributed
according to a multivariate normal distribution. Let’s talk brieﬂy about the
properties of multivariate normal distributions before moving on to the GDA
model itself.

4.1.1 The multivariate normal distribution

The multivariate normal distribution in d-dimensions, also called the multi-
variate Gaussian distribution, is parameterized by a mean vector µ ∈ Rd
and a covariance matrix Σ ∈ Rd×d, where Σ ≥ 0 is symmetric and positive
semi-deﬁnite. Also written “N (µ, Σ)”, its density is given by:

p(x; µ, Σ) =

1

(2π)d/2|Σ|1/2 exp

(cid:18)

−

1
2

(x − µ)T Σ−1(x − µ)

(cid:19)

.

In the equation above, “|Σ|” denotes the determinant of the matrix Σ.

For a random variable X distributed N (µ, Σ), the mean is (unsurpris-

ingly) given by µ:

E[X] =

(cid:90)

x

x p(x; µ, Σ)dx = µ

The covariance of a vector-valued random variable Z is deﬁned as Cov(Z) =

E[(Z − E[Z])(Z − E[Z])T ]. This generalizes the notion of the variance of a

36

real-valued random variable. The covariance can also be deﬁned as Cov(Z) =
E[ZZ T ] − (E[Z])(E[Z])T . (You should be able to prove to yourself that these
two deﬁnitions are equivalent.) If X ∼ N (µ, Σ), then

Cov(X) = Σ.

Here are some examples of what the density of a Gaussian distribution

looks like:

The left-most ﬁgure shows a Gaussian with mean zero (that is, the 2x1
zero-vector) and covariance matrix Σ = I (the 2x2 identity matrix). A Gaus-
sian with zero mean and identity covariance is also called the standard nor-
mal distribution. The middle ﬁgure shows the density of a Gaussian with
zero mean and Σ = 0.6I; and in the rightmost ﬁgure shows one with , Σ = 2I.
We see that as Σ becomes larger, the Gaussian becomes more “spread-out,”
and as it becomes smaller, the distribution becomes more “compressed.”

Let’s look at some more examples.

The ﬁgures above show Gaussians with mean 0, and with covariance

matrices respectively

Σ =

(cid:20) 1
0

(cid:21)

0
1

; Σ =

(cid:20) 1
0.5

(cid:21)

0.5
1

; Σ =

(cid:20) 1
0.8

(cid:21)

.

0.8
1

The leftmost ﬁgure shows the familiar standard normal distribution, and we
see that as we increase the oﬀ-diagonal entry in Σ, the density becomes more

−3−2−10123−3−2−101230.050.10.150.20.25−3−2−10123−3−2−101230.050.10.150.20.25−3−2−10123−3−2−101230.050.10.150.20.25−3−2−10123−3−2−101230.050.10.150.20.25−3−2−10123−3−2−101230.050.10.150.20.25−3−2−10123−3−2−101230.050.10.150.20.25“compressed” towards the 45◦ line (given by x1 = x2). We can see this more
clearly when we look at the contours of the same three densities:

37

Here’s one last set of examples generated by varying Σ:

The plots above used, respectively,
(cid:20) 1
-0.8

(cid:20) 1
-0.5

-0.5
1

; Σ =

Σ =

(cid:21)

(cid:21)

-0.8
1

; Σ =

(cid:20) 3
0.8

(cid:21)

.

0.8
1

From the leftmost and middle ﬁgures, we see that by decreasing the oﬀ-
diagonal elements of the covariance matrix, the density now becomes “com-
pressed” again, but in the opposite direction. Lastly, as we vary the pa-
rameters, more generally the contours will form ellipses (the rightmost ﬁgure
showing an example).

As our last set of examples, ﬁxing Σ = I, by varying µ, we can also move

the mean of the density around.

−3−2−10123−3−2−10123−3−2−10123−3−2−10123−3−2−10123−3−2−10123−3−2−10123−3−2−10123−3−2−10123−3−2−10123−3−2−10123−3−2−10123−3−2−10123−3−2−101230.050.10.150.20.25−3−2−10123−3−2−101230.050.10.150.20.25−3−2−10123−3−2−101230.050.10.150.20.2538

The ﬁgures above were generated using Σ = I, and respectively

µ =

(cid:21)

(cid:20) 1
0

; µ =

(cid:21)

(cid:20) -0.5
0

; µ =

(cid:20) -1
-1.5

(cid:21)

.

4.1.2 The Gaussian discriminant analysis model

When we have a classiﬁcation problem in which the input features x are
continuous-valued random variables, we can then use the Gaussian Discrim-
inant Analysis (GDA) model, which models p(x|y) using a multivariate nor-
mal distribution. The model is:

y ∼ Bernoulli(φ)

x|y = 0 ∼ N (µ0, Σ)
x|y = 1 ∼ N (µ1, Σ)

Writing out the distributions, this is:

p(y) = φy(1 − φ)1−y

p(x|y = 0) =

p(x|y = 1) =

1

(2π)d/2|Σ|1/2 exp

1

(2π)d/2|Σ|1/2 exp

(cid:18)

(cid:18)

−

−

1
2
1
2

(x − µ0)T Σ−1(x − µ0)

(x − µ1)T Σ−1(x − µ1)

(cid:19)

(cid:19)

Here, the parameters of our model are φ, Σ, µ0 and µ1. (Note that while
there’re two diﬀerent mean vectors µ0 and µ1, this model is usually applied
using only one covariance matrix Σ.) The log-likelihood of the data is given
by

(cid:96)(φ, µ0, µ1, Σ) = log

= log

n
(cid:89)

i=1
n
(cid:89)

i=1

p(x(i), y(i); φ, µ0, µ1, Σ)

p(x(i)|y(i); µ0, µ1, Σ)p(y(i); φ).

By maximizing (cid:96) with respect to the parameters, we ﬁnd the maximum like-
lihood estimate of the parameters (see problem set 1) to be:

39

φ =

µ0 =

µ1 =

Σ =

n
(cid:88)

1
n
(cid:80)n

1{y(i) = 1}

(cid:80)n

i=1
i=1 1{y(i) = 0}x(i)
(cid:80)n
i=1 1{y(i) = 0}
i=1 1{y(i) = 1}x(i)
(cid:80)n
i=1 1{y(i) = 1}
n
(cid:88)

1
n

i=1

(x(i) − µy(i))(x(i) − µy(i))T .

Pictorially, what the algorithm is doing can be seen in as follows:

Shown in the ﬁgure are the training set, as well as the contours of the
two Gaussian distributions that have been ﬁt to the data in each of the
two classes. Note that the two Gaussians have contours that are the same
shape and orientation, since they share a covariance matrix Σ, but they have
diﬀerent means µ0 and µ1. Also shown in the ﬁgure is the straight line
giving the decision boundary at which p(y = 1|x) = 0.5. On one side of
the boundary, we’ll predict y = 1 to be the most likely outcome, and on the
other side, we’ll predict y = 0.

−2−101234567−7−6−5−4−3−2−10140

4.1.3 Discussion: GDA and logistic regression

The GDA model has an interesting relationship to logistic regression. If we
view the quantity p(y = 1|x; φ, µ0, µ1, Σ) as a function of x, we’ll ﬁnd that it
can be expressed in the form

p(y = 1|x; φ, Σ, µ0, µ1) =

1
1 + exp(−θT x)

,

where θ is some appropriate function of φ, Σ, µ0, µ1.1 This is exactly the form
that logistic regression—a discriminative algorithm—used to model p(y =
1|x).

When would we prefer one model over another? GDA and logistic regres-
sion will, in general, give diﬀerent decision boundaries when trained on the
same dataset. Which is better?

We just argued that if p(x|y) is multivariate gaussian (with shared Σ),
then p(y|x) necessarily follows a logistic function. The converse, however,
is not true; i.e., p(y|x) being a logistic function does not imply p(x|y) is
multivariate gaussian. This shows that GDA makes stronger modeling as-
sumptions about the data than does logistic regression.
It turns out that
when these modeling assumptions are correct, then GDA will ﬁnd better ﬁts
to the data, and is a better model. Speciﬁcally, when p(x|y) is indeed gaus-
sian (with shared Σ), then GDA is asymptotically eﬃcient. Informally,
this means that in the limit of very large training sets (large n), there is no
algorithm that is strictly better than GDA (in terms of, say, how accurately
they estimate p(y|x)). In particular, it can be shown that in this setting,
GDA will be a better algorithm than logistic regression; and more generally,
even for small training set sizes, we would generally expect GDA to better.
In contrast, by making signiﬁcantly weaker assumptions, logistic regres-
sion is also more robust and less sensitive to incorrect modeling assumptions.
There are many diﬀerent sets of assumptions that would lead to p(y|x) taking
the form of a logistic function. For example, if x|y = 0 ∼ Poisson(λ0), and
x|y = 1 ∼ Poisson(λ1), then p(y|x) will be logistic. Logistic regression will
also work well on Poisson data like this. But if we were to use GDA on such
data—and ﬁt Gaussian distributions to such non-Gaussian data—then the
results will be less predictable, and GDA may (or may not) do well.

To summarize: GDA makes stronger modeling assumptions, and is more
data eﬃcient (i.e., requires less training data to learn “well”) when the mod-
eling assumptions are correct or at least approximately correct. Logistic

1This uses the convention of redeﬁning the x(i)’s on the right-hand-side to be (d + 1)-

dimensional vectors by adding the extra coordinate x(i)

0 = 1; see problem set 1.

41

regression makes weaker assumptions, and is signiﬁcantly more robust to
deviations from modeling assumptions. Speciﬁcally, when the data is in-
deed non-Gaussian, then in the limit of large datasets, logistic regression will
almost always do better than GDA. For this reason, in practice logistic re-
gression is used more often than GDA. (Some related considerations about
discriminative vs. generative models also apply for the Naive Bayes algo-
rithm that we discuss next, but the Naive Bayes algorithm is still considered
a very good, and is certainly also a very popular, classiﬁcation algorithm.)

4.2 Naive bayes (Option Reading)

In GDA, the feature vectors x were continuous, real-valued vectors. Let’s
now talk about a diﬀerent learning algorithm in which the xj’s are discrete-
valued.

For our motivating example, consider building an email spam ﬁlter using
machine learning. Here, we wish to classify messages according to whether
they are unsolicited commercial (spam) email, or non-spam email. After
learning to do this, we can then have our mail reader automatically ﬁlter
out the spam messages and perhaps place them in a separate mail folder.
Classifying emails is one example of a broader set of problems called text
classiﬁcation.

Let’s say we have a training set (a set of emails labeled as spam or non-
spam). We’ll begin our construction of our spam ﬁlter by specifying the
features xj used to represent an email.

We will represent an email via a feature vector whose length is equal to
the number of words in the dictionary. Speciﬁcally, if an email contains the
j-th word of the dictionary, then we will set xj = 1; otherwise, we let xj = 0.
For instance, the vector

x =



























1
0
0
...
1
...
0

a
aardvark
aardwolf
...
buy
...
zygmurgy

is used to represent an email that contains the words “a” and “buy,” but not

42

“aardvark,” “aardwolf” or “zygmurgy.”2 The set of words encoded into the
feature vector is called the vocabulary, so the dimension of x is equal to
the size of the vocabulary.

Having chosen our feature vector, we now want to build a generative
model. So, we have to model p(x|y). But if we have, say, a vocabulary of
50000 words, then x ∈ {0, 1}50000 (x is a 50000-dimensional vector of 0’s and
1’s), and if we were to model x explicitly with a multinomial distribution over
the 250000 possible outcomes, then we’d end up with a (250000 −1)-dimensional
parameter vector. This is clearly too many parameters.

To model p(x|y), we will therefore make a very strong assumption. We will
assume that the xi’s are conditionally independent given y. This assumption
is called the Naive Bayes (NB) assumption, and the resulting algorithm is
called the Naive Bayes classiﬁer. For instance, if y = 1 means spam email;
“buy” is word 2087 and “price” is word 39831; then we are assuming that if
I tell you y = 1 (that a particular piece of email is spam), then knowledge
of x2087 (knowledge of whether “buy” appears in the message) will have no
eﬀect on your beliefs about the value of x39831 (whether “price” appears).
More formally, this can be written p(x2087|y) = p(x2087|y, x39831). (Note that
this is not the same as saying that x2087 and x39831 are independent, which
would have been written “p(x2087) = p(x2087|x39831)”; rather, we are only
assuming that x2087 and x39831 are conditionally independent given y.)

We now have:

p(x1, . . . , x50000|y)

= p(x1|y)p(x2|y, x1)p(x3|y, x1, x2) · · · p(x50000|y, x1, . . . , x49999)
= p(x1|y)p(x2|y)p(x3|y) · · · p(x50000|y)

=

d
(cid:89)

j=1

p(xj|y)

The ﬁrst equality simply follows from the usual properties of probabilities,
and the second equality used the NB assumption. We note that even though

2Actually, rather than looking through an English dictionary for the list of all English
words, in practice it is more common to look through our training set and encode in our
feature vector only the words that occur at least once there. Apart from reducing the
number of words modeled and hence reducing our computational and space requirements,
this also has the advantage of allowing us to model/include as a feature many words
that may appear in your email (such as “cs229”) but that you won’t ﬁnd in a dictionary.
Sometimes (as in the homework), we also exclude the very high frequency words (which
will be words like “the,” “of,” “and”; these high frequency, “content free” words are called
stop words) since they occur in so many documents and do little to indicate whether an
email is spam or non-spam.

43

the Naive Bayes assumption is an extremely strong assumptions, the resulting
algorithm works well on many problems.

Our model is parameterized by φj|y=1 = p(xj = 1|y = 1), φj|y=0 = p(xj =
1|y = 0), and φy = p(y = 1). As usual, given a training set {(x(i), y(i)); i =
1, . . . , n}, we can write down the joint likelihood of the data:

L(φy, φj|y=0, φj|y=1) =

n
(cid:89)

i=1

p(x(i), y(i)).

Maximizing this with respect to φy, φj|y=0 and φj|y=1 gives the maximum
likelihood estimates:

φj|y=1 =

φj|y=0 =

φy =

(cid:80)n

i=1 1{x(i)
(cid:80)n

(cid:80)n

i=1 1{x(i)
(cid:80)n

j = 1 ∧ y(i) = 1}

i=1 1{y(i) = 1}

j = 1 ∧ y(i) = 0}

i=1 1{y(i) = 0}

(cid:80)n

i=1 1{y(i) = 1}
n

In the equations above, the “∧” symbol means “and.” The parameters have
a very natural interpretation. For instance, φj|y=1 is just the fraction of the
spam (y = 1) emails in which word j does appear.

Having ﬁt all these parameters, to make a prediction on a new example

with features x, we then simply calculate

p(y = 1|x) =

p(x|y = 1)p(y = 1)
p(x)

(cid:16)(cid:81)d

(cid:17)
j=1 p(xj|y = 1)
(cid:17)
j=1 p(xj|y = 1)

p(y = 1) +

(cid:16)(cid:81)d

=

(cid:16)(cid:81)d

p(y = 1)

(cid:17)
j=1 p(xj|y = 0)

,

p(y = 0)

and pick whichever class has the higher posterior probability.

Lastly, we note that while we have developed the Naive Bayes algorithm
mainly for the case of problems where the features xj are binary-valued, the
generalization to where xj can take values in {1, 2, . . . , kj} is straightforward.
Here, we would simply model p(xj|y) as multinomial rather than as Bernoulli.
Indeed, even if some original input attribute (say, the living area of a house,
as in our earlier example) were continuous valued, it is quite common to
discretize it—that is, turn it into a small set of discrete values—and apply
Naive Bayes. For instance, if we use some feature xj to represent living area,
we might discretize the continuous values as follows:

44

1

xi

1200-1600 >1600

800-1200
3

Living area (sq. feet) < 400

400-800
2
Thus, for a house with living area 890 square feet, we would set the value
of the corresponding feature xj to 3. We can then apply the Naive Bayes
algorithm, and model p(xj|y) with a multinomial distribution, as described
previously. When the original, continuous-valued attributes are not well-
modeled by a multivariate normal distribution, discretizing the features and
using Naive Bayes (instead of GDA) will often result in a better classiﬁer.

5

4

4.2.1 Laplace smoothing

The Naive Bayes algorithm as we have described it will work fairly well
for many problems, but there is a simple change that makes it work much
better, especially for text classiﬁcation. Let’s brieﬂy discuss a problem with
the algorithm in its current form, and then talk about how we can ﬁx it.

Consider spam/email classiﬁcation, and let’s suppose that, we are in the
year of 20xx, after completing CS229 and having done excellent work on the
project, you decide around May 20xx to submit work you did to the NeurIPS
conference for publication.3 Because you end up discussing the conference
in your emails, you also start getting messages with the word “neurips”
in it. But this is your ﬁrst NeurIPS paper, and until this time, you had
not previously seen any emails containing the word “neurips”; in particular
“neurips” did not ever appear in your training set of spam/non-spam emails.
Assuming that “neurips” was the 35000th word in the dictionary, your Naive
Bayes spam ﬁlter therefore had picked its maximum likelihood estimates of
the parameters φ35000|y to be

φ35000|y=1 =

φ35000|y=0 =

(cid:80)n

i=1 1{x(i)
(cid:80)n

(cid:80)n

i=1 1{x(i)
(cid:80)n

35000 = 1 ∧ y(i) = 1}
i=1 1{y(i) = 1}
35000 = 1 ∧ y(i) = 0}
i=1 1{y(i) = 0}

= 0

= 0

I.e., because it has never seen “neurips” before in either spam or non-spam
training examples, it thinks the probability of seeing it in either type of email
is zero. Hence, when trying to decide if one of these messages containing

3NeurIPS is one of the top machine learning conferences. The deadline for submitting

a paper is typically in May-June.

“neurips” is spam, it calculates the class posterior probabilities, and obtains

45

p(y = 1|x) =

(cid:81)d
j=1 p(xj|y = 1)p(y = 1) + (cid:81)d

j=1 p(xj|y = 1)p(y = 1)

(cid:81)d

j=1 p(xj|y = 0)p(y = 0)

=

0
0

.

This is because each of the terms “(cid:81)d
j=1 p(xj|y)” includes a term p(x35000|y) =
0 that is multiplied into it. Hence, our algorithm obtains 0/0, and doesn’t
know how to make a prediction.

Stating the problem more broadly, it is statistically a bad idea to esti-
mate the probability of some event to be zero just because you haven’t seen
it before in your ﬁnite training set. Take the problem of estimating the mean
of a multinomial random variable z taking values in {1, . . . , k}. We can pa-
rameterize our multinomial with φj = p(z = j). Given a set of n independent
observations {z(1), . . . , z(n)}, the maximum likelihood estimates are given by

φj =

(cid:80)n

i=1 1{z(i) = j}
n

.

As we saw previously, if we were to use these maximum likelihood estimates,
then some of the φj’s might end up as zero, which was a problem. To avoid
this, we can use Laplace smoothing, which replaces the above estimate
with

φj =

1 + (cid:80)n

i=1 1{z(i) = j}
k + n

.

Here, we’ve added 1 to the numerator, and k to the denominator. Note that
(cid:80)k
j=1 φj = 1 still holds (check this yourself!), which is a desirable property
since the φj’s are estimates for probabilities that we know must sum to 1.
Also, φj (cid:54)= 0 for all values of j, solving our problem of probabilities being
estimated as zero. Under certain (arguably quite strong) conditions, it can
be shown that the Laplace smoothing actually gives the optimal estimator
of the φj’s.

Returning to our Naive Bayes classiﬁer, with Laplace smoothing, we

therefore obtain the following estimates of the parameters:

φj|y=1 =

φj|y=0 =

1 + (cid:80)n

1 + (cid:80)n

i=1 1{x(i)
2 + (cid:80)n
i=1 1{x(i)
2 + (cid:80)n

j = 1 ∧ y(i) = 1}

i=1 1{y(i) = 1}

j = 1 ∧ y(i) = 0}

i=1 1{y(i) = 0}

46

(In practice, it usually doesn’t matter much whether we apply Laplace smooth-
ing to φy or not, since we will typically have a fair fraction each of spam and
non-spam messages, so φy will be a reasonable estimate of p(y = 1) and will
be quite far from 0 anyway.)

4.2.2 Event models for text classiﬁcation

To close oﬀ our discussion of generative learning algorithms, let’s talk about
one more model that is speciﬁcally for text classiﬁcation. While Naive Bayes
as we’ve presented it will work well for many classiﬁcation problems, for text
classiﬁcation, there is a related model that does even better.

In the speciﬁc context of text classiﬁcation, Naive Bayes as presented uses
the what’s called the Bernoulli event model (or sometimes multi-variate
Bernoulli event model). In this model, we assumed that the way an email
is generated is that ﬁrst it is randomly determined (according to the class
priors p(y)) whether a spammer or non-spammer will send you your next
message. Then, the person sending the email runs through the dictionary,
deciding whether to include each word j in that email independently and
according to the probabilities p(xj = 1|y) = φj|y. Thus, the probability of a
message was given by p(y) (cid:81)d

j=1 p(xj|y).

Here’s a diﬀerent model, called the Multinomial event model. To
describe this model, we will use a diﬀerent notation and set of features for
representing emails. We let xj denote the identity of the j-th word in the
email. Thus, xj is now an integer taking values in {1, . . . , |V |}, where |V |
is the size of our vocabulary (dictionary). An email of d words is now rep-
resented by a vector (x1, x2, . . . , xd) of length d; note that d can vary for
diﬀerent documents. For instance, if an email starts with “A NeurIPS . . . ,”
then x1 = 1 (“a” is the ﬁrst word in the dictionary), and x2 = 35000 (if
“neurips” is the 35000th word in the dictionary).

In the multinomial event model, we assume that the way an email is
generated is via a random process in which spam/non-spam is ﬁrst deter-
mined (according to p(y)) as before. Then, the sender of the email writes the
email by ﬁrst generating x1 from some multinomial distribution over words
(p(x1|y)). Next, the second word x2 is chosen independently of x1 but from
the same multinomial distribution, and similarly for x3, x4, and so on, until
all d words of the email have been generated. Thus, the overall probability of
a message is given by p(y) (cid:81)d
j=1 p(xj|y). Note that this formula looks like the
one we had earlier for the probability of a message under the Bernoulli event
model, but that the terms in the formula now mean very diﬀerent things. In
particular xj|y is now a multinomial, rather than a Bernoulli distribution.

47

The parameters for our new model are φy = p(y) as before, φk|y=1 =
p(xj = k|y = 1) (for any j) and φk|y=0 = p(xj = k|y = 0). Note that we have
assumed that p(xj|y) is the same for all values of j (i.e., that the distribution
according to which a word is generated does not depend on its position j
within the email).

If we are given a training set {(x(i), y(i)); i = 1, . . . , n} where x(i) =
1 , x(i)
) (here, di is the number of words in the i-training example),

2 , . . . , x(i)
di

(x(i)
the likelihood of the data is given by

L(φy, φk|y=0, φk|y=1) =

=

n
(cid:89)

i=1

n
(cid:89)

p(x(i), y(i))

(cid:32) di(cid:89)

p(x(i)

j |y; φk|y=0, φk|y=1)

p(y(i); φy).

(cid:33)

i=1

j=1

Maximizing this yields the maximum likelihood estimates of the parameters:

φk|y=1 =

φk|y=0 =

φy =

j = k ∧ y(i) = 1}

j = k ∧ y(i) = 0}

(cid:80)n

i=1

(cid:80)n

i=1

(cid:80)di
j=1 1{x(i)
(cid:80)n
i=1 1{y(i) = 1}di
(cid:80)di
j=1 1{x(i)
(cid:80)n
i=1 1{y(i) = 0}di

(cid:80)n

i=1 1{y(i) = 1}
n

.

If we were to apply Laplace smoothing (which is needed in practice for good
performance) when estimating φk|y=0 and φk|y=1, we add 1 to the numerators
and |V | to the denominators, and obtain:

φk|y=1 =

φk|y=0 =

1 + (cid:80)n

j=1 1{x(i)

j = k ∧ y(i) = 1}

i=1 1{y(i) = 1}di

1 + (cid:80)n

j=1 1{x(i)

j = k ∧ y(i) = 0}

.

i=1 1{y(i) = 0}di

i=1

(cid:80)di
|V | + (cid:80)n
(cid:80)di
|V | + (cid:80)n

i=1

While not necessarily the very best classiﬁcation algorithm, the Naive Bayes
classiﬁer often works surprisingly well. It is often also a very good “ﬁrst thing
to try,” given its simplicity and ease of implementation.

Chapter 5

Kernel methods

5.1 Feature maps

Recall that in our discussion about linear regression, we considered the prob-
lem of predicting the price of a house (denoted by y) from the living area of
the house (denoted by x), and we ﬁt a linear function of x to the training
data. What if the price y can be more accurately represented as a non-linear
function of x? In this case, we need a more expressive family of models than
linear models.

We start by considering ﬁtting cubic functions y = θ3x3 + θ2x2 + θ1x + θ0.
It turns out that we can view the cubic function as a linear function over
the a diﬀerent set of feature variables (deﬁned below). Concretely, let the
function φ : R → R4 be deﬁned as

φ(x) =













1
x
x2
x3

∈ R4.

(5.1)

Let θ ∈ R4 be the vector containing θ0, θ1, θ2, θ3 as entries. Then we can

rewrite the cubic function in x as:

θ3x3 + θ2x2 + θ1x + θ0 = θT φ(x)

Thus, a cubic function of the variable x can be viewed as a linear function
over the variables φ(x). To distinguish between these two sets of variables,
in the context of kernel methods, we will call the “original” input value the
input attributes of a problem (in this case, x, the living area). When the

48

49

original input is mapped to some new set of quantities φ(x), we will call those
new quantities the features variables. (Unfortunately, diﬀerent authors use
diﬀerent terms to describe these two things in diﬀerent contexts.) We will
call φ a feature map, which maps the attributes to the features.

5.2 LMS (least mean squares) with features

We will derive the gradient descent algorithm for ﬁtting the model θT φ(x).
First recall that for ordinary least square problem where we were to ﬁt θT x,
the batch gradient descent update is (see the ﬁrst lecture note for its deriva-
tion):

θ := θ + α

:= θ + α

n
(cid:88)

i=1
n
(cid:88)

i=1

(cid:0)y(i) − hθ(x(i))(cid:1) x(i)

(cid:0)y(i) − θT x(i)(cid:1) x(i).

(5.2)

Let φ : Rd → Rp be a feature map that maps attribute x (in Rd) to the
features φ(x) in Rp. (In the motivating example in the previous subsection,
we have d = 1 and p = 4.) Now our goal is to ﬁt the function θT φ(x), with
θ being a vector in Rp instead of Rd. We can replace all the occurrences of
x(i) in the algorithm above by φ(x(i)) to obtain the new update:

θ := θ + α

n
(cid:88)

i=1

(cid:0)y(i) − θT φ(x(i))(cid:1) φ(x(i))

Similarly, the corresponding stochastic gradient descent update rule is

θ := θ + α (cid:0)y(i) − θT φ(x(i))(cid:1) φ(x(i))

(5.3)

(5.4)

5.3 LMS with the kernel trick

The gradient descent update, or stochastic gradient update above becomes
computationally expensive when the features φ(x) is high-dimensional. For
example, consider the direct extension of the feature map in equation (5.1)
to high-dimensional input x: suppose x ∈ Rd, and let φ(x) be the vector that

50

(5.5)

contains all the monomials of x with degree ≤ 3

φ(x) =




























1
x1
x2
...
x2
1
x1x2
x1x3
...
x2x1
...
x3
1
x2
1x2
...




























.

The dimension of the features φ(x) is on the order of d3.1 This is a pro-
hibitively long vector for computational purpose — when d = 1000, each
update requires at least computing and storing a 10003 = 109 dimensional
vector, which is 106 times slower than the update rule for for ordinary least
squares updates (5.2).

It may appear at ﬁrst that such d3 runtime per update and memory usage
are inevitable, because the vector θ itself is of dimension p ≈ d3, and we may
need to update every entry of θ and store it. However, we will introduce the
kernel trick with which we will not need to store θ explicitly, and the runtime
can be signiﬁcantly improved.

For simplicity, we assume the initialize the value θ = 0, and we focus
on the iterative update (5.3). The main observation is that at any time, θ
can be represented as a linear combination of the vectors φ(x(1)), . . . , φ(x(n)).
Indeed, we can show this inductively as follows. At initialization, θ = 0 =
(cid:80)n

i=1 0 · φ(x(i)). Assume at some point, θ can be represented as

θ =

n
(cid:88)

i=1

βiφ(x(i))

(5.6)

1Here, for simplicity, we include all the monomials with repetitions (so that, e.g., x1x2x3
and x2x3x1 both appear in φ(x)). Therefore, there are totally 1 + d + d2 + d3 entries in
φ(x).

51

for some β1, . . . , βn ∈ R. Then we claim that in the next round, θ is still a
linear combination of φ(x(1)), . . . , φ(x(n)) because

θ := θ + α

n
(cid:88)

i=1

(cid:0)y(i) − θT φ(x(i))(cid:1) φ(x(i))

=

=

n
(cid:88)

i=1
n
(cid:88)

i=1

βiφ(x(i)) + α

n
(cid:88)

i=1

(cid:0)y(i) − θT φ(x(i))(cid:1) φ(x(i))

(βi + α (cid:0)y(i) − θT φ(x(i))(cid:1))
(cid:123)(cid:122)
(cid:125)
(cid:124)
new βi

φ(x(i))

(5.7)

You may realize that our general strategy is to implicitly represent the p-
dimensional vector θ by a set of coeﬃcients β1, . . . , βn. Towards doing this,
we derive the update rule of the coeﬃcients β1, . . . , βn. Using the equation
above, we see that the new βi depends on the old one via

βi := βi + α (cid:0)y(i) − θT φ(x(i))(cid:1)

(5.8)

Here we still have the old θ on the RHS of the equation. Replacing θ by
θ = (cid:80)n

j=1 βjφ(x(j)) gives

∀i ∈ {1, . . . , n}, βi := βi + α

y(i) −

(cid:32)

βjφ(x(j))

T

φ(x(i))

(cid:33)

n
(cid:88)

j=1

We often rewrite φ(x(j))T φ(x(i)) as (cid:104)φ(x(j)), φ(x(i))(cid:105) to emphasize that it’s the
inner product of the two feature vectors. Viewing βi’s as the new representa-
tion of θ, we have successfully translated the batch gradient descent algorithm
into an algorithm that updates the value of β iteratively. It may appear that
at every iteration, we still need to compute the values of (cid:104)φ(x(j)), φ(x(i))(cid:105) for
all pairs of i, j, each of which may take roughly O(p) operation. However,
two important properties come to rescue:

1. We can pre-compute the pairwise inner products (cid:104)φ(x(j)), φ(x(i))(cid:105) for all

pairs of i, j before the loop starts.

2. For the feature map φ deﬁned in (5.5) (or many other interesting fea-
ture maps), computing (cid:104)φ(x(j)), φ(x(i))(cid:105) can be eﬃcient and does not

necessarily require computing φ(x(i)) explicitly. This is because:

52

(cid:104)φ(x), φ(z)(cid:105) = 1 +

= 1 +

d
(cid:88)

i=1

d
(cid:88)

i=1

xizi +

(cid:88)

xixjzizj +

(cid:88)

xixjxkzizjzk

i,j∈{1,...,d}
(cid:32) d

(cid:88)

(cid:33)2

i,j,k∈{1,...,d}
(cid:33)3

(cid:32) d

(cid:88)

xizi +

xizi

+

xizi

i=1

i=1

= 1 + (cid:104)x, z(cid:105) + (cid:104)x, z(cid:105)2 + (cid:104)x, z(cid:105)3

(5.9)

Therefore, to compute (cid:104)φ(x), φ(z)(cid:105), we can ﬁrst compute (cid:104)x, z(cid:105) with
O(d) time and then take another constant number of operations to com-
pute 1 + (cid:104)x, z(cid:105) + (cid:104)x, z(cid:105)2 + (cid:104)x, z(cid:105)3.

As you will see, the inner products between the features (cid:104)φ(x), φ(z)(cid:105) are
essential here. We deﬁne the Kernel corresponding to the feature map φ as
a function that maps X × X → R satisfying: 2

K(x, z) (cid:44) (cid:104)φ(x), φ(z)(cid:105)

(5.10)

To wrap up the discussion, we write the down the ﬁnal algorithm as

follows:

1. Compute all the values K(x(i), x(j)) (cid:44) (cid:104)φ(x(i)), φ(x(j))(cid:105) using equa-

tion (5.9) for all i, j ∈ {1, . . . , n}. Set β := 0.

2. Loop:

∀i ∈ {1, . . . , n}, βi := βi + α

y(i) −

(cid:32)

(cid:33)

βjK(x(i), x(j))

(5.11)

n
(cid:88)

j=1

Or in vector notation, letting K be the n × n matrix with Kij =

K(x(i), x(j)), we have

β := β + α((cid:126)y − Kβ)

With the algorithm above, we can update the representation β of the
vector θ eﬃciently with O(n) time per update. Finally, we need to show that

2Recall that X is the space of the input x. In our running example, X = Rd

53

the knowledge of the representation β suﬃces to compute the prediction
θT φ(x). Indeed, we have

θT φ(x) =

n
(cid:88)

i=1

T
βiφ(x(i))

φ(x) =

n
(cid:88)

i=1

βiK(x(i), x)

(5.12)

You may realize that fundamentally all we need to know about the feature
map φ(·) is encapsulated in the corresponding kernel function K(·, ·). We
will expand on this in the next section.

5.4 Properties of kernels

In the last subsection, we started with an explicitly deﬁned feature map φ,
which induces the kernel function K(x, z) (cid:44) (cid:104)φ(x), φ(z)(cid:105). Then we saw that
the kernel function is so intrinsic so that as long as the kernel function is
deﬁned, the whole training algorithm can be written entirely in the language
of the kernel without referring to the feature map φ, so can the prediction of
a test example x (equation (5.12).)

Therefore, it would be tempted to deﬁne other kernel function K(·, ·) and
run the algorithm (5.11). Note that the algorithm (5.11) does not need to
explicitly access the feature map φ, and therefore we only need to ensure the
existence of the feature map φ, but do not necessarily need to be able to
explicitly write φ down.

What kinds of functions K(·, ·) can correspond to some feature map φ? In
other words, can we tell if there is some feature mapping φ so that K(x, z) =
φ(x)T φ(z) for all x, z?

If we can answer this question by giving a precise characterization of valid
kernel functions, then we can completely change the interface of selecting
feature maps φ to the interface of selecting kernel function K. Concretely,
we can pick a function K, verify that it satisﬁes the characterization (so
that there exists a feature map φ that K corresponds to), and then we can
run update rule (5.11). The beneﬁt here is that we don’t have to be able
to compute φ or write it down analytically, and we only need to know its
existence. We will answer this question at the end of this subsection after
we go through several concrete examples of kernels.

Suppose x, z ∈ Rd, and let’s ﬁrst consider the function K(·, ·) deﬁned as:

K(x, z) = (xT z)2.

54

We can also write this as

K(x, z) =

(cid:32) d

(cid:88)

(cid:33) (cid:32) d

(cid:88)

(cid:33)

xjzj

xizi

i=1

j=1

=

=

d
(cid:88)

d
(cid:88)

i=1

j=1

xixjzizj

d
(cid:88)

(xixj)(zizj)

i,j=1

Thus, we see that K(x, z) = (cid:104)φ(x), φ(z)(cid:105) is the kernel function that corre-
sponds to the the feature mapping φ given (shown here for the case of d = 3)
by



φ(x) =

















.















x1x1
x1x2
x1x3
x2x1
x2x2
x2x3
x3x1
x3x2
x3x3

Revisiting the computational eﬃciency perspective of kernel, note that whereas
calculating the high-dimensional φ(x) requires O(d2) time, ﬁnding K(x, z)
takes only O(d) time—linear in the dimension of the input attributes.

For another related example, also consider K(·, ·) deﬁned by

K(x, z) = (xT z + c)2

d
(cid:88)

=

(xixj)(zizj) +

i,j=1

d
(cid:88)

√
(

i=1

√

2cxi)(

2czi) + c2.

(Check this yourself.) This function K is a kernel function that corresponds

to the feature mapping (again shown for d = 3)

55

φ(x) =

























x1x1
x1x2
x1x3
x2x1
x2x2
x2x3
x3x1
x3x2
x3x3√
2cx1√
2cx2√
2cx3
c

























,

and the parameter c controls the relative weighting between the xi (ﬁrst
order) and the xixj (second order) terms.

k

More broadly, the kernel K(x, z) = (xT z + c)k corresponds to a feature
mapping to an (cid:0)d+k
(cid:1) feature space, corresponding of all monomials of the
form xi1xi2 . . . xik that are up to order k. However, despite working in this
O(dk)-dimensional space, computing K(x, z) still takes only O(d) time, and
hence we never need to explicitly represent feature vectors in this very high
dimensional feature space.

Kernels as similarity metrics. Now, let’s talk about a slightly diﬀerent
view of kernels. Intuitively, (and there are things wrong with this intuition,
but nevermind), if φ(x) and φ(z) are close together, then we might expect
K(x, z) = φ(x)T φ(z) to be large. Conversely, if φ(x) and φ(z) are far apart—
say nearly orthogonal to each other—then K(x, z) = φ(x)T φ(z) will be small.
So, we can think of K(x, z) as some measurement of how similar are φ(x)
and φ(z), or of how similar are x and z.

Given this intuition, suppose that for some learning problem that you’re
working on, you’ve come up with some function K(x, z) that you think might
be a reasonable measure of how similar x and z are. For instance, perhaps
you chose

K(x, z) = exp

−

(cid:18)

||x − z||2
2σ2

(cid:19)

.

This is a reasonable measure of x and z’s similarity, and is close to 1 when
x and z are close, and near 0 when x and z are far apart. Does there exist

56

a feature map φ such that the kernel K deﬁned above satisﬁes K(x, z) =
φ(x)T φ(z)? In this particular example, the answer is yes. This kernel is called
the Gaussian kernel, and corresponds to an inﬁnite dimensional feature
mapping φ. We will give a precise characterization about what properties
a function K needs to satisfy so that it can be a valid kernel function that
corresponds to some feature map φ.

Necessary conditions for valid kernels. Suppose for now that K is
indeed a valid kernel corresponding to some feature mapping φ, and we will
ﬁrst see what properties it satisﬁes. Now, consider some ﬁnite set of n points
(not necessarily the training set) {x(1), . . . , x(n)}, and let a square, n-by-n
matrix K be deﬁned so that its (i, j)-entry is given by Kij = K(x(i), x(j)).
This matrix is called the kernel matrix. Note that we’ve overloaded the
notation and used K to denote both the kernel function K(x, z) and the
kernel matrix K, due to their obvious close relationship.

Now, if K is a valid kernel, then Kij = K(x(i), x(j)) = φ(x(i))T φ(x(j)) =
φ(x(j))T φ(x(i)) = K(x(j), x(i)) = Kji, and hence K must be symmetric. More-
over, letting φk(x) denote the k-th coordinate of the vector φ(x), we ﬁnd that
for any vector z, we have

zT Kz =

=

=

=

=

(cid:88)

(cid:88)

i
(cid:88)

j
(cid:88)

i
(cid:88)

j
(cid:88)

ziKijzj

ziφ(x(i))T φ(x(j))zj

(cid:88)

zi

φk(x(i))φk(x(j))zj

i
(cid:88)

j
(cid:88)

k
(cid:88)
ziφk(x(i))φk(x(j))zj

j

i
(cid:32)

k

(cid:88)

(cid:88)

(cid:33)2

ziφk(x(i))

k
≥ 0.

i

The second-to-last step uses the fact that (cid:80)
i ai)2 for ai =
ziφk(x(i)). Since z was arbitrary, this shows that K is positive semi-deﬁnite
(K ≥ 0).

i,j aiaj = ((cid:80)

Hence, we’ve shown that if K is a valid kernel (i.e., if it corresponds to
some feature mapping φ), then the corresponding kernel matrix K ∈ Rn×n
is symmetric positive semideﬁnite.

57

Suﬃcient conditions for valid kernels. More generally, the condition
above turns out to be not only a necessary, but also a suﬃcient, condition
for K to be a valid kernel (also called a Mercer kernel). The following result
is due to Mercer.3

Theorem (Mercer). Let K : Rd × Rd (cid:55)→ R be given. Then for K
to be a valid (Mercer) kernel, it is necessary and suﬃcient that for any
{x(1), . . . , x(n)}, (n < ∞), the corresponding kernel matrix is symmetric pos-
itive semi-deﬁnite.

Given a function K, apart from trying to ﬁnd a feature mapping φ that
corresponds to it, this theorem therefore gives another way of testing if it is
a valid kernel. You’ll also have a chance to play with these ideas more in
problem set 2.

In class, we also brieﬂy talked about a couple of other examples of ker-
nels. For instance, consider the digit recognition problem, in which given
an image (16x16 pixels) of a handwritten digit (0-9), we have to ﬁgure out
which digit it was. Using either a simple polynomial kernel K(x, z) = (xT z)k
or the Gaussian kernel, SVMs were able to obtain extremely good perfor-
mance on this problem. This was particularly surprising since the input
attributes x were just 256-dimensional vectors of the image pixel intensity
values, and the system had no prior knowledge about vision, or even about
which pixels are adjacent to which other ones. Another example that we
brieﬂy talked about in lecture was that if the objects x that we are trying
to classify are strings (say, x is a list of amino acids, which strung together
form a protein), then it seems hard to construct a reasonable, “small” set of
features for most learning algorithms, especially if diﬀerent strings have dif-
ferent lengths. However, consider letting φ(x) be a feature vector that counts
the number of occurrences of each length-k substring in x. If we’re consid-
ering strings of English letters, then there are 26k such strings. Hence, φ(x)
is a 26k dimensional vector; even for moderate values of k, this is probably
too big for us to eﬃciently work with. (e.g., 264 ≈ 460000.) However, using
(dynamic programming-ish) string matching algorithms, it is possible to ef-
ﬁciently compute K(x, z) = φ(x)T φ(z), so that we can now implicitly work
in this 26k-dimensional feature space, but without ever explicitly computing
feature vectors in this space.

3Many texts present Mercer’s theorem in a slightly more complicated form involving
L2 functions, but when the input attributes take values in Rd, the version given here is
equivalent.

58

Application of kernel methods: We’ve seen the application of kernels
to linear regression. In the next part, we will introduce the support vector
machines to which kernels can be directly applied. dwell too much longer on
it here. In fact, the idea of kernels has signiﬁcantly broader applicability than
linear regression and SVMs. Speciﬁcally, if you have any learning algorithm
that you can write in terms of only inner products (cid:104)x, z(cid:105) between input
attribute vectors, then by replacing this with K(x, z) where K is a kernel,
you can “magically” allow your algorithm to work eﬃciently in the high
dimensional feature space corresponding to K. For instance, this kernel trick
can be applied with the perceptron to derive a kernel perceptron algorithm.
Many of the algorithms that we’ll see later in this class will also be amenable
to this method, which has come to be known as the “kernel trick.”

Chapter 6

Support vector machines

This set of notes presents the Support Vector Machine (SVM) learning al-
gorithm. SVMs are among the best (and many believe are indeed the best)
“oﬀ-the-shelf” supervised learning algorithms. To tell the SVM story, we’ll
need to ﬁrst talk about margins and the idea of separating data with a large
“gap.” Next, we’ll talk about the optimal margin classiﬁer, which will lead
us into a digression on Lagrange duality. We’ll also see kernels, which give
a way to apply SVMs eﬃciently in very high dimensional (such as inﬁnite-
dimensional) feature spaces, and ﬁnally, we’ll close oﬀ the story with the
SMO algorithm, which gives an eﬃcient implementation of SVMs.

6.1 Margins: intuition

We’ll start our story on SVMs by talking about margins. This section will
give the intuitions about margins and about the “conﬁdence” of our predic-
tions; these ideas will be made formal in Section 6.3.

Consider logistic regression, where the probability p(y = 1|x; θ) is mod-
eled by hθ(x) = g(θT x). We then predict “1” on an input x if and only if
hθ(x) ≥ 0.5, or equivalently, if and only if θT x ≥ 0. Consider a positive
training example (y = 1). The larger θT x is, the larger also is hθ(x) = p(y =
1|x; θ), and thus also the higher our degree of “conﬁdence” that the label is 1.
Thus, informally we can think of our prediction as being very conﬁdent that
y = 1 if θT x (cid:29) 0. Similarly, we think of logistic regression as conﬁdently
predicting y = 0, if θT x (cid:28) 0. Given a training set, again informally it seems
that we’d have found a good ﬁt to the training data if we can ﬁnd θ so that
θT x(i) (cid:29) 0 whenever y(i) = 1, and θT x(i) (cid:28) 0 whenever y(i) = 0, since this
would reﬂect a very conﬁdent (and correct) set of classiﬁcations for all the

59

60

training examples. This seems to be a nice goal to aim for, and we’ll soon
formalize this idea using the notion of functional margins.

For a diﬀerent type of intuition, consider the following ﬁgure, in which x’s
represent positive training examples, o’s denote negative training examples,
a decision boundary (this is the line given by the equation θT x = 0, and
is also called the separating hyperplane) is also shown, and three points
have also been labeled A, B and C.

Notice that the point A is very far from the decision boundary. If we are
asked to make a prediction for the value of y at A, it seems we should be
quite conﬁdent that y = 1 there. Conversely, the point C is very close to
the decision boundary, and while it’s on the side of the decision boundary
on which we would predict y = 1, it seems likely that just a small change to
the decision boundary could easily have caused out prediction to be y = 0.
Hence, we’re much more conﬁdent about our prediction at A than at C. The
point B lies in-between these two cases, and more broadly, we see that if
a point is far from the separating hyperplane, then we may be signiﬁcantly
more conﬁdent in our predictions. Again, informally we think it would be
nice if, given a training set, we manage to ﬁnd a decision boundary that
allows us to make all correct and conﬁdent (meaning far from the decision
boundary) predictions on the training examples. We’ll formalize this later
using the notion of geometric margins.

(cid:0)(cid:1)(cid:0)(cid:1)(cid:0)(cid:1)BAC61

6.2 Notation (option reading)

To make our discussion of SVMs easier, we’ll ﬁrst need to introduce a new
notation for talking about classiﬁcation. We will be considering a linear
classiﬁer for a binary classiﬁcation problem with labels y and features x.
From now, we’ll use y ∈ {−1, 1} (instead of {0, 1}) to denote the class labels.
Also, rather than parameterizing our linear classiﬁer with the vector θ, we
will use parameters w, b, and write our classiﬁer as

hw,b(x) = g(wT x + b).

Here, g(z) = 1 if z ≥ 0, and g(z) = −1 otherwise. This “w, b” notation
allows us to explicitly treat the intercept term b separately from the other
parameters. (We also drop the convention we had previously of letting x0 = 1
be an extra coordinate in the input feature vector.) Thus, b takes the role of
what was previously θ0, and w takes the role of [θ1 . . . θd]T .

Note also that, from our deﬁnition of g above, our classiﬁer will directly
predict either 1 or −1 (cf. the perceptron algorithm), without ﬁrst going
through the intermediate step of estimating p(y = 1) (which is what logistic
regression does).

6.3 Functional and geometric margins (op-

tion reading)

Let’s formalize the notions of the functional and geometric margins. Given a
training example (x(i), y(i)), we deﬁne the functional margin of (w, b) with
respect to the training example as

ˆγ(i) = y(i)(wT x(i) + b).

Note that if y(i) = 1, then for the functional margin to be large (i.e., for
our prediction to be conﬁdent and correct), we need wT x(i) + b to be a large
positive number. Conversely, if y(i) = −1, then for the functional margin
to be large, we need wT x(i) + b to be a large negative number. Moreover, if
y(i)(wT x(i) + b) > 0, then our prediction on this example is correct. (Check
this yourself.) Hence, a large functional margin represents a conﬁdent and a
correct prediction.

For a linear classiﬁer with the choice of g given above (taking values in
{−1, 1}), there’s one property of the functional margin that makes it not a
very good measure of conﬁdence, however. Given our choice of g, we note that

62

if we replace w with 2w and b with 2b, then since g(wT x + b) = g(2wT x + 2b),
this would not change hw,b(x) at all. I.e., g, and hence also hw,b(x), depends
only on the sign, but not on the magnitude, of wT x + b. However, replacing
(w, b) with (2w, 2b) also results in multiplying our functional margin by a
factor of 2. Thus, it seems that by exploiting our freedom to scale w and b,
we can make the functional margin arbitrarily large without really changing
anything meaningful. Intuitively, it might therefore make sense to impose
some sort of normalization condition such as that ||w||2 = 1; i.e., we might
replace (w, b) with (w/||w||2, b/||w||2), and instead consider the functional
margin of (w/||w||2, b/||w||2). We’ll come back to this later.

Given a training set S = {(x(i), y(i)); i = 1, . . . , n}, we also deﬁne the
function margin of (w, b) with respect to S as the smallest of the functional
margins of the individual training examples. Denoted by ˆγ, this can therefore
be written:

ˆγ = min
i=1,...,n

ˆγ(i).

Next, let’s talk about geometric margins. Consider the picture below:

The decision boundary corresponding to (w, b) is shown, along with the
vector w. Note that w is orthogonal (at 90◦) to the separating hyperplane.
(You should convince yourself that this must be the case.) Consider the
point at A, which represents the input x(i) of some training example with
label y(i) = 1. Its distance to the decision boundary, γ(i), is given by the line
segment AB.

How can we ﬁnd the value of γ(i)? Well, w/||w|| is a unit-length vector
pointing in the same direction as w. Since A represents x(i), we therefore

wAγB(i)63

ﬁnd that the point B is given by x(i) − γ(i) · w/||w||. But this point lies on
the decision boundary, and all points x on the decision boundary satisfy the
equation wT x + b = 0. Hence,

wT

(cid:18)
x(i) − γ(i) w
||w||

(cid:19)

+ b = 0.

Solving for γ(i) yields

γ(i) =

wT x(i) + b
||w||

=

(cid:18) w
||w||

(cid:19)T

x(i) +

b
||w||

.

This was worked out for the case of a positive training example at A in the
ﬁgure, where being on the “positive” side of the decision boundary is good.
More generally, we deﬁne the geometric margin of (w, b) with respect to a
training example (x(i), y(i)) to be

γ(i) = y(i)

(cid:19)T

(cid:32)(cid:18) w
||w||

x(i) +

(cid:33)

.

b
||w||

Note that if ||w|| = 1, then the functional margin equals the geometric
margin—this thus gives us a way of relating these two diﬀerent notions of
margin. Also, the geometric margin is invariant to rescaling of the parame-
ters; i.e., if we replace w with 2w and b with 2b, then the geometric margin
does not change. This will in fact come in handy later. Speciﬁcally, because
of this invariance to the scaling of the parameters, when trying to ﬁt w and b
to training data, we can impose an arbitrary scaling constraint on w without
changing anything important; for instance, we can demand that ||w|| = 1, or
|w1| = 5, or |w1 + b| + |w2| = 2, and any of these can be satisﬁed simply by
rescaling w and b.

Finally, given a training set S = {(x(i), y(i)); i = 1, . . . , n}, we also deﬁne
the geometric margin of (w, b) with respect to S to be the smallest of the
geometric margins on the individual training examples:

γ = min
i=1,...,n

γ(i).

6.4 The optimal margin classiﬁer (option read-

ing)

Given a training set, it seems from our previous discussion that a natural
desideratum is to try to ﬁnd a decision boundary that maximizes the (ge-
ometric) margin, since this would reﬂect a very conﬁdent set of predictions

64

on the training set and a good “ﬁt” to the training data. Speciﬁcally, this
will result in a classiﬁer that separates the positive and the negative training
examples with a “gap” (geometric margin).

For now, we will assume that we are given a training set that is linearly
separable; i.e., that it is possible to separate the positive and negative ex-
amples using some separating hyperplane. How will we ﬁnd the one that
achieves the maximum geometric margin? We can pose the following opti-
mization problem:

maxγ,w,b γ

s.t. y(i)(wT x(i) + b) ≥ γ,

i = 1, . . . , n

||w|| = 1.

I.e., we want to maximize γ, subject to each training example having func-
tional margin at least γ. The ||w|| = 1 constraint moreover ensures that the
functional margin equals to the geometric margin, so we are also guaranteed
that all the geometric margins are at least γ. Thus, solving this problem will
result in (w, b) with the largest possible geometric margin with respect to the
training set.

If we could solve the optimization problem above, we’d be done. But the
“||w|| = 1” constraint is a nasty (non-convex) one, and this problem certainly
isn’t in any format that we can plug into standard optimization software to
solve. So, let’s try transforming the problem into a nicer one. Consider:

maxˆγ,w,b

ˆγ
||w||

s.t. y(i)(wT x(i) + b) ≥ ˆγ,

i = 1, . . . , n

Here, we’re going to maximize ˆγ/||w||, subject to the functional margins all
being at least ˆγ. Since the geometric and functional margins are related by
γ = ˆγ/||w|, this will give us the answer we want. Moreover, we’ve gotten rid
of the constraint ||w|| = 1 that we didn’t like. The downside is that we now
ˆγ
have a nasty (again, non-convex) objective
||w|| function; and, we still don’t
have any oﬀ-the-shelf software that can solve this form of an optimization
problem.

Let’s keep going. Recall our earlier discussion that we can add an arbi-
trary scaling constraint on w and b without changing anything. This is the
key idea we’ll use now. We will introduce the scaling constraint that the
functional margin of w, b with respect to the training set must be 1:

ˆγ = 1.

65

Since multiplying w and b by some constant results in the functional margin
being multiplied by that same constant, this is indeed a scaling constraint,
and can be satisﬁed by rescaling w, b. Plugging this into our problem above,
and noting that maximizing ˆγ/||w|| = 1/||w|| is the same thing as minimizing
||w||2, we now have the following optimization problem:

minw,b

1
2

||w||2

s.t. y(i)(wT x(i) + b) ≥ 1,

i = 1, . . . , n

We’ve now transformed the problem into a form that can be eﬃciently
solved. The above is an optimization problem with a convex quadratic ob-
jective and only linear constraints. Its solution gives us the optimal mar-
gin classiﬁer. This optimization problem can be solved using commercial
quadratic programming (QP) code.1

While we could call the problem solved here, what we will instead do is
make a digression to talk about Lagrange duality. This will lead us to our
optimization problem’s dual form, which will play a key role in allowing us to
use kernels to get optimal margin classiﬁers to work eﬃciently in very high
dimensional spaces. The dual form will also allow us to derive an eﬃcient
algorithm for solving the above optimization problem that will typically do
much better than generic QP software.

6.5 Lagrange duality (optional reading)

Let’s temporarily put aside SVMs and maximum margin classiﬁers, and talk
about solving constrained optimization problems.
Consider a problem of the following form:

minw

f (w)
s.t. hi(w) = 0,

i = 1, . . . , l.

Some of you may recall how the method of Lagrange multipliers can be used
to solve it. (Don’t worry if you haven’t seen it before.) In this method, we
deﬁne the Lagrangian to be

L(w, β) = f (w) +

l
(cid:88)

i=1

βihi(w)

1You may be familiar with linear programming, which solves optimization problems
that have linear objectives and linear constraints. QP software is also widely available,
which allows convex quadratic objectives and linear constraints.

66

Here, the βi’s are called the Lagrange multipliers. We would then ﬁnd
and set L’s partial derivatives to zero:

∂L
∂wi

= 0;

∂L
∂βi

= 0,

and solve for w and β.

In this section, we will generalize this to constrained optimization prob-
lems in which we may have inequality as well as equality constraints. Due to
time constraints, we won’t really be able to do the theory of Lagrange duality
justice in this class,2 but we will give the main ideas and results, which we
will then apply to our optimal margin classiﬁer’s optimization problem.

Consider the following, which we’ll call the primal optimization problem:

minw

f (w)
s.t. gi(w) ≤ 0,
hi(w) = 0,

i = 1, . . . , k
i = 1, . . . , l.

To solve it, we start by deﬁning the generalized Lagrangian

L(w, α, β) = f (w) +

k
(cid:88)

i=1

αigi(w) +

l
(cid:88)

i=1

βihi(w).

Here, the αi’s and βi’s are the Lagrange multipliers. Consider the quantity

θP(w) = max

α,β : αi≥0

L(w, α, β).

Here, the “P” subscript stands for “primal.” Let some w be given.
If w
violates any of the primal constraints (i.e., if either gi(w) > 0 or hi(w) (cid:54)= 0
for some i), then you should be able to verify that

θP(w) = max

α,β : αi≥0

f (w) +

= ∞.

k
(cid:88)

i=1

αigi(w) +

l
(cid:88)

i=1

βihi(w)

(6.1)

(6.2)

Conversely, if the constraints are indeed satisﬁed for a particular value of w,
then θP(w) = f (w). Hence,

θP(w) =

(cid:26) f (w)

if w satisﬁes primal constraints

∞ otherwise.

2Readers interested in learning more about this topic are encouraged to read, e.g., R.

T. Rockarfeller (1970), Convex Analysis, Princeton University Press.

67

Thus, θP takes the same value as the objective in our problem for all val-
ues of w that satisﬁes the primal constraints, and is positive inﬁnity if the
constraints are violated. Hence, if we consider the minimization problem

min
w

θP(w) = min

w

max
α,β : αi≥0

L(w, α, β),

we see that it is the same problem (i.e., and has the same solutions as) our
original, primal problem. For later use, we also deﬁne the optimal value of
the objective to be p∗ = minw θP(w); we call this the value of the primal
problem.

Now, let’s look at a slightly diﬀerent problem. We deﬁne

θD(α, β) = min

L(w, α, β).

w
Here, the “D” subscript stands for “dual.” Note also that whereas in the
deﬁnition of θP we were optimizing (maximizing) with respect to α, β, here
we are minimizing with respect to w.

We can now pose the dual optimization problem:

max
α,β : αi≥0

θD(α, β) = max

α,β : αi≥0

min
w

L(w, α, β).

This is exactly the same as our primal problem shown above, except that the
order of the “max” and the “min” are now exchanged. We also deﬁne the
optimal value of the dual problem’s objective to be d∗ = maxα,β : αi≥0 θD(w).
How are the primal and the dual problems related? It can easily be shown

that

d∗ = max

α,β : αi≥0

min
w

L(w, α, β) ≤ min

w

max
α,β : αi≥0

L(w, α, β) = p∗.

(You should convince yourself of this; this follows from the “max min” of a
function always being less than or equal to the “min max.”) However, under
certain conditions, we will have

d∗ = p∗,

so that we can solve the dual problem in lieu of the primal problem. Let’s
see what these conditions are.

Suppose f and the gi’s are convex,3 and the hi’s are aﬃne.4 Suppose
further that the constraints gi are (strictly) feasible; this means that there
exists some w so that gi(w) < 0 for all i.

3When f has a Hessian, then it is convex if and only if the Hessian is positive semi-
deﬁnite. For instance, f (w) = wT w is convex; similarly, all linear (and aﬃne) functions
are also convex. (A function f can also be convex without being diﬀerentiable, but we
won’t need those more general deﬁnitions of convexity here.)

4I.e., there exists ai, bi, so that hi(w) = aT

i w + bi. “Aﬃne” means the same thing as

linear, except that we also allow the extra intercept term bi.

Under our above assumptions, there must exist w∗, α∗, β∗ so that w∗ is the
solution to the primal problem, α∗, β∗ are the solution to the dual problem,
and moreover p∗ = d∗ = L(w∗, α∗, β∗). Moreover, w∗, α∗ and β∗ satisfy the
Karush-Kuhn-Tucker (KKT) conditions, which are as follows:

68

∂
∂wi
∂
∂βi

L(w∗, α∗, β∗) = 0,

i = 1, . . . , d

L(w∗, α∗, β∗) = 0,

i = 1, . . . , l

i gi(w∗) = 0,
α∗
gi(w∗) ≤ 0,
α∗ ≥ 0,

i = 1, . . . , k
i = 1, . . . , k
i = 1, . . . , k

(6.3)

(6.4)

(6.5)
(6.6)
(6.7)

Moreover, if some w∗, α∗, β∗ satisfy the KKT conditions, then it is also a solution to the primal and dual
problems.

We draw attention to Equation (6.5), which is called the KKT dual
complementarity condition. Speciﬁcally, it implies that if α∗
i > 0, then
gi(w∗) = 0. (I.e., the “gi(w) ≤ 0” constraint is active, meaning it holds with
equality rather than with inequality.) Later on, this will be key for showing
that the SVM has only a small number of “support vectors”; the KKT dual
complementarity condition will also give us our convergence test when we
talk about the SMO algorithm.

6.6 Optimal margin classiﬁers: the dual form

(option reading)

Note: The equivalence of optimization problem (6.8) and the optimization
problem (6.12), and the relationship between the primary and dual variables
in equation (6.10) are the most important take home messages of this section.

Previously, we posed the following (primal) optimization problem for ﬁnd-

ing the optimal margin classiﬁer:

minw,b

1
2

||w||2

s.t. y(i)(wT x(i) + b) ≥ 1,

i = 1, . . . , n

We can write the constraints as

gi(w) = −y(i)(wT x(i) + b) + 1 ≤ 0.

(6.8)

69

We have one such constraint for each training example. Note that from the
KKT dual complementarity condition, we will have αi > 0 only for the train-
ing examples that have functional margin exactly equal to one (i.e., the ones
corresponding to constraints that hold with equality, gi(w) = 0). Consider
the ﬁgure below, in which a maximum margin separating hyperplane is shown
by the solid line.

The points with the smallest margins are exactly the ones closest to the
decision boundary; here, these are the three points (one negative and two pos-
itive examples) that lie on the dashed lines parallel to the decision boundary.
Thus, only three of the αi’s—namely, the ones corresponding to these three
training examples—will be non-zero at the optimal solution to our optimiza-
tion problem. These three points are called the support vectors in this
problem. The fact that the number of support vectors can be much smaller
than the size the training set will be useful later.

Let’s move on. Looking ahead, as we develop the dual form of the prob-
lem, one key idea to watch out for is that we’ll try to write our algorithm
in terms of only the inner product (cid:104)x(i), x(j)(cid:105) (think of this as (x(i))T x(j))
between points in the input feature space. The fact that we can express our
algorithm in terms of these inner products will be key when we apply the
kernel trick.

When we construct the Lagrangian for our optimization problem we have:

L(w, b, α) =

n
(cid:88)

||w||2 −

(cid:2)y(i)(wT x(i) + b) − 1(cid:3) .

αi

(6.9)

1
2

i=1
Note that there’re only “αi” but no “βi” Lagrange multipliers, since the
problem has only inequality constraints.

70

Let’s ﬁnd the dual form of the problem. To do so, we need to ﬁrst
minimize L(w, b, α) with respect to w and b (for ﬁxed α), to get θD, which
we’ll do by setting the derivatives of L with respect to w and b to zero. We
have:

∇wL(w, b, α) = w −

αiy(i)x(i) = 0

n
(cid:88)

This implies that

i=1

w =

n
(cid:88)

i=1

αiy(i)x(i).

As for the derivative with respect to b, we obtain

∂
∂b

L(w, b, α) =

n
(cid:88)

i=1

αiy(i) = 0.

(6.10)

(6.11)

If we take the deﬁnition of w in Equation (6.10) and plug that back into

the Lagrangian (Equation 6.9), and simplify, we get

L(w, b, α) =

n
(cid:88)

i=1

αi −

1
2

n
(cid:88)

i,j=1

y(i)y(j)αiαj(x(i))T x(j) − b

n
(cid:88)

i=1

αiy(i).

But from Equation (6.11), the last term must be zero, so we obtain

L(w, b, α) =

n
(cid:88)

i=1

αi −

1
2

n
(cid:88)

i,j=1

y(i)y(j)αiαj(x(i))T x(j).

Recall that we got to the equation above by minimizing L with respect to
w and b. Putting this together with the constraints αi ≥ 0 (that we always
had) and the constraint (6.11), we obtain the following dual optimization
problem:

maxα W (α) =

n
(cid:88)

αi −

n
(cid:88)

y(i)y(j)αiαj(cid:104)x(i), x(j)(cid:105).

(6.12)

1
2

i=1
i = 1, . . . , n

i,j=1

s.t. αi ≥ 0,
n
(cid:88)

αiy(i) = 0,

i=1

You should also be able to verify that the conditions required for p∗ = d∗
and the KKT conditions (Equations 6.3–6.7) to hold are indeed satisﬁed in

71

our optimization problem. Hence, we can solve the dual in lieu of solving
the primal problem. Speciﬁcally, in the dual problem above, we have a
maximization problem in which the parameters are the αi’s. We’ll talk later
about the speciﬁc algorithm that we’re going to use to solve the dual problem,
but if we are indeed able to solve it (i.e., ﬁnd the α’s that maximize W (α)
subject to the constraints), then we can use Equation (6.10) to go back and
ﬁnd the optimal w’s as a function of the α’s. Having found w∗, by considering
the primal problem, it is also straightforward to ﬁnd the optimal value for
the intercept term b as

b∗ = −

maxi:y(i)=−1 w∗T x(i) + mini:y(i)=1 w∗T x(i)
2

.

(6.13)

(Check for yourself that this is correct.)

Before moving on, let’s also take a more careful look at Equation (6.10),
which gives the optimal value of w in terms of (the optimal value of) α.
Suppose we’ve ﬁt our model’s parameters to a training set, and now wish to
make a prediction at a new point input x. We would then calculate wT x + b,
and predict y = 1 if and only if this quantity is bigger than zero. But
using (6.10), this quantity can also be written:

wT x + b =

(cid:33)T

αiy(i)x(i)

x + b

(cid:32) n

(cid:88)

i=1

=

n
(cid:88)

i=1

αiy(i)(cid:104)x(i), x(cid:105) + b.

(6.14)

(6.15)

Hence, if we’ve found the αi’s, in order to make a prediction, we have to
calculate a quantity that depends only on the inner product between x and
the points in the training set. Moreover, we saw earlier that the αi’s will all
be zero except for the support vectors. Thus, many of the terms in the sum
above will be zero, and we really need to ﬁnd only the inner products between
x and the support vectors (of which there is often only a small number) in
order calculate (6.15) and make our prediction.

By examining the dual form of the optimization problem, we gained sig-
niﬁcant insight into the structure of the problem, and were also able to write
the entire algorithm in terms of only inner products between input feature
vectors. In the next section, we will exploit this property to apply the ker-
nels to our classiﬁcation problem. The resulting algorithm, support vector
machines, will be able to eﬃciently learn in very high dimensional spaces.

72

6.7 Regularization and the non-separable case

(optional reading)

The derivation of the SVM as presented so far assumed that the data is
linearly separable. While mapping data to a high dimensional feature space
via φ does generally increase the likelihood that the data is separable, we
can’t guarantee that it always will be so. Also, in some cases it is not clear
that ﬁnding a separating hyperplane is exactly what we’d want to do, since
that might be susceptible to outliers. For instance, the left ﬁgure below
shows an optimal margin classiﬁer, and when a single outlier is added in the
upper-left region (right ﬁgure), it causes the decision boundary to make a
dramatic swing, and the resulting classiﬁer has a much smaller margin.

To make the algorithm work for non-linearly separable datasets as well
as be less sensitive to outliers, we reformulate our optimization (using (cid:96)1
regularization) as follows:

minγ,w,b

1
2

||w||2 + C

n
(cid:88)

i=1

ξi

s.t. y(i)(wT x(i) + b) ≥ 1 − ξi,

i = 1, . . . , n

ξi ≥ 0,

i = 1, . . . , n.

Thus, examples are now permitted to have (functional) margin less than 1,
and if an example has functional margin 1 − ξi (with ξ > 0), we would pay
a cost of the objective function being increased by Cξi. The parameter C
controls the relative weighting between the twin goals of making the ||w||2
small (which we saw earlier makes the margin large) and of ensuring that
most examples have functional margin at least 1.

As before, we can form the Lagrangian:

L(w, b, ξ, α, r) =

1
2

wT w + C

n
(cid:88)

n
(cid:88)

ξi −

i=1

i=1

(cid:2)y(i)(xT w + b) − 1 + ξi

(cid:3) −

αi

73

n
(cid:88)

i=1

riξi.

Here, the αi’s and ri’s are our Lagrange multipliers (constrained to be ≥ 0).
We won’t go through the derivation of the dual again in detail, but after
setting the derivatives with respect to w and b to zero as before, substituting
them back in, and simplifying, we obtain the following dual form of the
problem:

maxα W (α) =

n
(cid:88)

αi −

1
2

n
(cid:88)

i,j=1

y(i)y(j)αiαj(cid:104)x(i), x(j)(cid:105)

i=1
s.t. 0 ≤ αi ≤ C,

i = 1, . . . , n

n
(cid:88)

i=1

αiy(i) = 0,

As before, we also have that w can be expressed in terms of the αi’s as
given in Equation (6.10), so that after solving the dual problem, we can con-
tinue to use Equation (6.15) to make our predictions. Note that, somewhat
surprisingly, in adding (cid:96)1 regularization, the only change to the dual prob-
lem is that what was originally a constraint that 0 ≤ αi has now become
0 ≤ αi ≤ C. The calculation for b∗ also has to be modiﬁed (Equation 6.13 is
no longer valid); see the comments in the next section/Platt’s paper.

Also, the KKT dual-complementarity conditions (which in the next sec-
tion will be useful for testing for the convergence of the SMO algorithm)
are:

αi = 0 ⇒ y(i)(wT x(i) + b) ≥ 1
αi = C ⇒ y(i)(wT x(i) + b) ≤ 1
0 < αi < C ⇒ y(i)(wT x(i) + b) = 1.

(6.16)
(6.17)
(6.18)

Now, all that remains is to give an algorithm for actually solving the dual

problem, which we will do in the next section.

6.8 The SMO algorithm (optional reading)

The SMO (sequential minimal optimization) algorithm, due to John Platt,
gives an eﬃcient way of solving the dual problem arising from the derivation

74

of the SVM. Partly to motivate the SMO algorithm, and partly because it’s
interesting in its own right, let’s ﬁrst take another digression to talk about
the coordinate ascent algorithm.

6.8.1 Coordinate ascent

Consider trying to solve the unconstrained optimization problem

max
α

W (α1, α2, . . . , αn).

Here, we think of W as just some function of the parameters αi’s, and for now
ignore any relationship between this problem and SVMs. We’ve already seen
two optimization algorithms, gradient ascent and Newton’s method. The
new algorithm we’re going to consider here is called coordinate ascent:

Loop until convergence: {

For i = 1, . . . , n, {

αi := arg max ˆαi W (α1, . . . , αi−1, ˆαi, αi+1, . . . , αn).

}

}

Thus, in the innermost loop of this algorithm, we will hold all the variables
except for some αi ﬁxed, and reoptimize W with respect to just the parameter
αi. In the version of this method presented here, the inner-loop reoptimizes
the variables in order α1, α2, . . . , αn, α1, α2, . . .. (A more sophisticated version
might choose other orderings; for instance, we may choose the next variable
to update according to which one we expect to allow us to make the largest
increase in W (α).)

When the function W happens to be of such a form that the “arg max”
in the inner loop can be performed eﬃciently, then coordinate ascent can be
a fairly eﬃcient algorithm. Here’s a picture of coordinate ascent in action:

75

The ellipses in the ﬁgure are the contours of a quadratic function that
we want to optimize. Coordinate ascent was initialized at (2, −2), and also
plotted in the ﬁgure is the path that it took on its way to the global maximum.
Notice that on each step, coordinate ascent takes a step that’s parallel to one
of the axes, since only one variable is being optimized at a time.

6.8.2 SMO

We close oﬀ the discussion of SVMs by sketching the derivation of the SMO
algorithm.

Here’s the (dual) optimization problem that we want to solve:

maxα W (α) =

n
(cid:88)

αi −

1
2

n
(cid:88)

i,j=1

y(i)y(j)αiαj(cid:104)x(i), x(j)(cid:105).

(6.19)

i=1
s.t. 0 ≤ αi ≤ C,

i = 1, . . . , n

(6.20)

(6.21)

n
(cid:88)

i=1

αiy(i) = 0.

Let’s say we have set of αi’s that satisfy the constraints (6.20-6.21). Now,
suppose we want to hold α2, . . . , αn ﬁxed, and take a coordinate ascent step
and reoptimize the objective with respect to α1. Can we make any progress?
The answer is no, because the constraint (6.21) ensures that

α1y(1) = −

n
(cid:88)

i=2

αiy(i).

−2−1.5−1−0.500.511.522.5−2−1.5−1−0.500.511.522.576

Or, by multiplying both sides by y(1), we equivalently have

α1 = −y(1)

n
(cid:88)

i=2

αiy(i).

(This step used the fact that y(1) ∈ {−1, 1}, and hence (y(1))2 = 1.) Hence,
α1 is exactly determined by the other αi’s, and if we were to hold α2, . . . , αn
ﬁxed, then we can’t make any change to α1 without violating the con-
straint (6.21) in the optimization problem.

Thus, if we want to update some subject of the αi’s, we must update at
least two of them simultaneously in order to keep satisfying the constraints.
This motivates the SMO algorithm, which simply does the following:

Repeat till convergence {

1. Select some pair αi and αj to update next (using a heuristic that
tries to pick the two that will allow us to make the biggest progress
towards the global maximum).

2. Reoptimize W (α) with respect to αi and αj, while holding all the

other αk’s (k (cid:54)= i, j) ﬁxed.

}

To test for convergence of this algorithm, we can check whether the KKT
conditions (Equations 6.16-6.18) are satisﬁed to within some tol. Here, tol is
the convergence tolerance parameter, and is typically set to around 0.01 to
0.001. (See the paper and pseudocode for details.)

The key reason that SMO is an eﬃcient algorithm is that the update to
αi, αj can be computed very eﬃciently. Let’s now brieﬂy sketch the main
ideas for deriving the eﬃcient update.

Let’s say we currently have some setting of the αi’s that satisfy the con-
straints (6.20-6.21), and suppose we’ve decided to hold α3, . . . , αn ﬁxed, and
want to reoptimize W (α1, α2, . . . , αn) with respect to α1 and α2 (subject to
the constraints). From (6.21), we require that

α1y(1) + α2y(2) = −

n
(cid:88)

i=3

αiy(i).

Since the right hand side is ﬁxed (as we’ve ﬁxed α3, . . . αn), we can just let
it be denoted by some constant ζ:

α1y(1) + α2y(2) = ζ.

(6.22)

We can thus picture the constraints on α1 and α2 as follows:

77

From the constraints (6.20), we know that α1 and α2 must lie within the box
[0, C] × [0, C] shown. Also plotted is the line α1y(1) + α2y(2) = ζ, on which we
know α1 and α2 must lie. Note also that, from these constraints, we know
L ≤ α2 ≤ H; otherwise, (α1, α2) can’t simultaneously satisfy both the box
and the straight line constraint. In this example, L = 0. But depending on
what the line α1y(1) + α2y(2) = ζ looks like, this won’t always necessarily be
the case; but more generally, there will be some lower-bound L and some
upper-bound H on the permissible values for α2 that will ensure that α1, α2
lie within the box [0, C] × [0, C].

Using Equation (6.22), we can also write α1 as a function of α2:

α1 = (ζ − α2y(2))y(1).

(Check this derivation yourself; we again used the fact that y(1) ∈ {−1, 1} so
that (y(1))2 = 1.) Hence, the objective W (α) can be written

W (α1, α2, . . . , αn) = W ((ζ − α2y(2))y(1), α2, . . . , αn).

Treating α3, . . . , αn as constants, you should be able to verify that this is
just some quadratic function in α2. I.e., this can also be expressed in the
form aα2
2 + bα2 + c for some appropriate a, b, and c. If we ignore the “box”
constraints (6.20) (or, equivalently, that L ≤ α2 ≤ H), then we can easily
maximize this quadratic function by setting its derivative to zero and solving.
We’ll let αnew,unclipped
denote the resulting value of α2. You should also be
2
able to convince yourself that if we had instead wanted to maximize W with
respect to α2 but subject to the box constraint, then we can ﬁnd the resulting
value optimal simply by taking αnew,unclipped
and “clipping” it to lie in the

2

α2α1α1α2CC(1)+(2)yy=ζHL[L, H] interval, to get

αnew
2

=






H
αnew,unclipped
2
L

2

if αnew,unclipped
> H
if L ≤ αnew,unclipped
2
if αnew,unclipped
< L

2

78

≤ H

Finally, having found the αnew
ﬁnd the optimal value of αnew
.

2

1

, we can use Equation (6.22) to go back and

There’re a couple more details that are quite easy but that we’ll leave you
to read about yourself in Platt’s paper: One is the choice of the heuristics
used to select the next αi, αj to update; the other is how to update b as the
SMO algorithm is run.

Part II

Deep learning

79

Chapter 7

Deep learning

We now begin our study of deep learning. In this set of notes, we give an
overview of neural networks, discuss vectorization and discuss training neural
networks with backpropagation.

7.1 Supervised learning with non-linear mod-

els

In the supervised learning setting (predicting y from the input x), suppose
our model/hypothesis is hθ(x). In the past lectures, we have considered the
cases when hθ(x) = θ(cid:62)x (in linear regression) or hθ(x) = θ(cid:62)φ(x) (where φ(x)
is the feature map). A commonality of these two models is that they are
linear in the parameters θ. Next we will consider learning general family of
models that are non-linear in both the parameters θ and the inputs x. The
most common non-linear models are neural networks, which we will deﬁne
staring from the next section. For this section, it suﬃces to think hθ(x) as
an abstract non-linear model.1
Suppose {(x(i), y(i))}n

i=1 are the training examples. We will deﬁne the

nonlinear model and the loss/cost function for learning it.

Regression problems. For simplicity, we start with the case where the
output is a real number, that is, y(i) ∈ R, and thus the model hθ also outputs
a real number hθ(x) ∈ R. We deﬁne the least square cost function for the

1If a concrete example is helpful, perhaps think about the model hθ(x) = θ2

1x2

1 + θ2

2x2

2 +

· · · + θ2

dx2

d in this subsection, even though it’s not a neural network.

80

i-th example (x(i), y(i)) as

J (i)(θ) =

1
2

(hθ(x(i)) − y(i))2 ,

and deﬁne the mean-square cost function for the dataset as

J(θ) =

1
n

n
(cid:88)

i=1

J (i)(θ) ,

81

(7.1)

(7.2)

which is same as in linear regression except that we introduce a constant
1/n in front of the cost function to be consistent with the convention. Note
that multiplying the cost function with a scalar will not change the local
minima or global minima of the cost function. Also note that the underlying
parameterization for hθ(x) is diﬀerent from the case of linear regression,
even though the form of the cost function is the same mean-squared loss.
Throughout the notes, we use the words “loss” and “cost” interchangeably.

Binary classiﬁcation. Next we deﬁne the model and loss function for
binary classiﬁcation. Suppose the inputs x ∈ Rd. Let ¯hθ : Rd → R be a
parameterized model (the analog of θ(cid:62)x in logistic linear regression). We
call the output ¯hθ(x) ∈ R the logit. Analogous to Section 2.1, we use the
logistic function g(·) to turn the logit ¯hθ(x) to a probability hθ(x) ∈ [0, 1]:

hθ(x) = g(¯hθ(x)) = 1/(1 + exp(−¯hθ(x)) .

(7.3)

We model the conditional distribution of y given x and θ by

P (y = 1 | x; θ) = hθ(x)
P (y = 0 | x; θ) = 1 − hθ(x)

Following the same derivation in Section 2.1 and using the derivation in
Remark 2.1.1, the negative likelihood loss function is equal to:

J (i)(θ) = − log p(y(i) | x(i); θ) = (cid:96)logistic(¯hθ(x(i)), y(i))

(7.4)

As done in equation (7.2), the total loss function is also deﬁned as the average
of the loss function over individual training examples, J(θ) = 1
i=1 J (i)(θ).
n

(cid:80)n

82

Multi-class classiﬁcation. Following Section 2.3, we consider a classiﬁca-
tion problem where the response variable y can take on any one of k values,
i.e. y ∈ {1, 2, . . . , k}. Let ¯hθ : Rd → Rk be a parameterized model. We
call the outputs ¯hθ(x) ∈ Rk the logits. Each logit corresponds to the predic-
tion for one of the k classes. Analogous to Section 2.3, we use the softmax
function to turn the logits ¯hθ(x) into a probability vector with non-negative
entries that sum up to 1:

P (y = j | x; θ) =

exp(¯hθ(x)j)
s=1 exp(¯hθ(x)s)

(cid:80)k

,

(7.5)

where ¯hθ(x)s denotes the s-th coordinate of ¯hθ(x).

Similarly to Section 2.3, the loss function for a single training example

(x(i), y(i)) is its negative log-likelihood:

J (i)(θ) = − log p(y(i) | x(i); θ) = − log

(cid:32) exp(¯hθ(x(i))y(i))
s=1 exp(¯hθ(x(i))s)

(cid:80)k

(cid:33)

.

(7.6)

Using the notations of Section 2.3, we can simply write in an abstract way:
J (i)(θ) = (cid:96)ce(¯hθ(x(i)), y(i)).

(7.7)

The loss function is also deﬁned as the average of the loss function of indi-
(cid:80)n
vidual training examples, J(θ) = 1
n

i=1 J (i)(θ).

We also note that the approach above can also be generated to any con-
ditional probabilistic model where we have an exponential distribution for
y, Exponential-family(y; η), where η = ¯hθ(x) is a parameterized nonlinear
function of x. However, the most widely used situations are the three cases
discussed above.

Optimizers (SGD). Commonly, people use gradient descent (GD), stochas-
tic gradient (SGD), or their variants to optimize the loss function J(θ). GD’s
update rule can be written as2

θ := θ − α∇θJ(θ)

(7.8)

where α > 0 is often referred to as the learning rate or step size. Next, we
introduce a version of the SGD (Algorithm 1), which is lightly diﬀerent from
that in the ﬁrst lecture notes.

2Recall that, as deﬁned in the previous lecture notes, we use the notation “a := b” to
denote an operation (in a computer program) in which we set the value of a variable a to
be equal to the value of b. In other words, this operation overwrites a with the value of
b. In contrast, we will write “a = b” when we are asserting a statement of fact, that the
value of a is equal to the value of b.

83

Algorithm 1 Stochastic Gradient Descent
1: Hyperparameter: learning rate α, number of total iteration niter.
2: Initialize θ randomly.
3: for i = 1 to niter do
4:

Sample j uniformly from {1, . . . , n}, and update θ by

θ := θ − α∇θJ (j)(θ)

(7.9)

Oftentimes computing the gradient of B examples simultaneously for the
parameter θ can be faster than computing B gradients separately due to
hardware parallelization. Therefore, a mini-batch version of SGD is most
commonly used in deep learning, as shown in Algorithm 2. There are also
other variants of the SGD or mini-batch SGD with slightly diﬀerent sampling
schemes.

Algorithm 2 Mini-batch Stochastic Gradient Descent
1: Hyperparameters: learning rate α, batch size B, # iterations niter.
2: Initialize θ randomly
3: for i = 1 to niter do
4:

Sample B examples j1, . . . , jB (without replacement) uniformly from

{1, . . . , n}, and update θ by

θ := θ −

α
B

B
(cid:88)

k=1

∇θJ (jk)(θ)

(7.10)

With these generic algorithms, a typical deep learning model is learned
with the following steps. 1. Deﬁne a neural network parametrization hθ(x),
which we will introduce in Section 7.2, and 2. write the backpropagation
algorithm to compute the gradient of the loss function J (j)(θ) eﬃciently,
which will be covered in Section 7.4, and 3. run SGD or mini-batch SGD (or
other gradient-based optimizers) with the loss function J(θ).

84

7.2 Neural networks

Neural networks refer to a broad type of non-linear models/parametrizations
¯hθ(x) that involve combinations of matrix multiplications and other entry-
wise non-linear operations. To have a uniﬁed treatment for regression prob-
lem and classiﬁcation problem, here we consider ¯hθ(x) as the output of the
neural network. For regression problem, the ﬁnal prediction hθ(x) = ¯hθ(x),
and for classiﬁcation problem, ¯hθ(x) is the logits and the predicted probability
will be hθ(x) = 1/(1+exp(−¯hθ(x)) (see equation 7.3) for binary classiﬁcation
or hθ(x) = softmax(¯hθ(x)) for multi-class classiﬁcation (see equation 7.5).
We will start small and slowly build up a neural network, step by step.

A Neural Network with a Single Neuron.
Recall the housing price
prediction problem from before: given the size of the house, we want to
predict the price. We will use it as a running example in this subsection.

Previously, we ﬁt a straight line to the graph of size vs. housing price.
Now, instead of ﬁtting a straight line, we wish to prevent negative housing
prices by setting the absolute minimum price as zero. This produces a “kink”
in the graph as shown in Figure 7.1. How do we represent such a function
with a single kink as ¯hθ(x) with unknown parameter? (After doing so, we
can invoke the machinery in Section 7.1.)

We deﬁne a parameterized function ¯hθ(x) with input x, parameterized by
θ, which outputs the price of the house y. Formally, ¯hθ : x → y. Perhaps
one of the simplest parametrization would be

¯hθ(x) = max(wx + b, 0), where θ = (w, b) ∈ R2

(7.11)

Here ¯hθ(x) returns a single value: (wx+b) or zero, whichever is greater. In
the context of neural networks, the function max{t, 0} is called a ReLU (pro-
nounced “ray-lu”), or rectiﬁed linear unit, and often denoted by ReLU(t) (cid:44)
max{t, 0}.

Generally, a one-dimensional non-linear function that maps R to R such as
ReLU is often referred to as an activation function. The model ¯hθ(x) is said
to have a single neuron partly because it has a single non-linear activation
function. (We will discuss more about why a non-linear activation is called
neuron.)

When the input x ∈ Rd has multiple dimensions, a neural network with

a single neuron can be written as

¯hθ(x) = ReLU(w(cid:62)x + b), where w ∈ Rd, b ∈ R, and θ = (w, b)

(7.12)

85

Figure 7.1: Housing prices with a “kink” in the graph.

The term b is often referred to as the “bias”, and the vector w is referred
to as the weight vector. Such a neural network has 1 layer. (We will deﬁne
what multiple layers mean in the sequel.)

Stacking Neurons. A more complex neural network may take the single
neuron described above and “stack” them together such that one neuron
passes its output as input into the next neuron, resulting in a more complex
function.

Let us now deepen the housing prediction example. In addition to the size
of the house, suppose that you know the number of bedrooms, the zip code
and the wealth of the neighborhood. Building neural networks is analogous
to Lego bricks: you take individual bricks and stack them together to build
complex structures. The same applies to neural networks: we take individual
neurons and stack them together to create complex neural networks.

Given these features (size, number of bedrooms, zip code, and wealth),
we might then decide that the price of the house depends on the maximum
family size it can accommodate. Suppose the family size is a function of the
size of the house and number of bedrooms (see Figure 7.2). The zip code
may provide additional information such as how walkable the neighborhood
is (i.e., can you walk to the grocery store or do you need to drive everywhere).
Combining the zip code with the wealth of the neighborhood may predict
the quality of the local elementary school. Given these three derived features
(family size, walkable, school quality), we may conclude that the price of the

50010001500200025003000350040004500500001002003004005006007008009001000housing pricessquare feetprice (in $1000)home ultimately depends on these three features.

86

Figure 7.2: Diagram of a small neural network for predicting housing prices.

Formally, the input to a neural network is a set of input features
x1, x2, x3, x4. We denote the intermediate variables for “family size”, “walk-
able”, and “school quality” by a1, a2, a3 (these ai’s are often referred to as
“hidden units” or “hidden neurons”). We represent each of the ai’s as a neu-
ral network with a single neuron with a subset of x1, . . . , x4 as inputs. Then
as in Figure 7.1, we will have the parameterization:

a1 = ReLU(θ1x1 + θ2x2 + θ3)
a2 = ReLU(θ4x3 + θ5)
a3 = ReLU(θ6x3 + θ7x4 + θ8)

where (θ1, · · · , θ8) are parameters. Now we represent the ﬁnal output ¯hθ(x)
as another linear function with a1, a2, a3 as inputs, and we get3

¯hθ(x) = θ9a1 + θ10a2 + θ11a3 + θ12

(7.13)

where θ contains all the parameters (θ1, · · · , θ12).

Now we represent the output as a quite complex function of x with pa-
rameters θ. Then you can use this parametrization ¯hθ with the machinery of
Section 7.1 to learn the parameters θ.

Inspiration from Biological Neural Networks. As the name suggests,
artiﬁcial neural networks were inspired by biological neural networks. The
hidden units a1, . . . , am correspond to the neurons in a biological neural net-
work, and the parameters θi’s correspond to the synapses. However, it’s
unclear how similar the modern deep artiﬁcial neural networks are to the bi-
ological ones. For example, perhaps not many neuroscientists think biological

3Typically, for multi-layer neural network, at the end, near the output, we don’t apply

ReLU, especially when the output is not necessarily a positive number.

Family SizeSchool QualityWalkableSize# BedroomsZip CodeWealthPricey87

neural networks could have 1000 layers, while some modern artiﬁcial neural
networks do (we will elaborate more on the notion of layers.) Moreover, it’s
an open question whether human brains update their neural networks in a
way similar to the way that computer scientists learn artiﬁcial neural net-
works (using backpropagation, which we will introduce in the next section.).

Two-layer Fully-Connected Neural Networks. We constructed the
neural network in equation (7.13) using a signiﬁcant amount of prior knowl-
edge/belief about how the “family size”, “walkable”, and “school quality” are
determined by the inputs. We implicitly assumed that we know the family
size is an important quantity to look at and that it can be determined by
only the “size” and “# bedrooms”. Such a prior knowledge might not be
available for other applications. It would be more ﬂexible and general to have
a generic parameterization. A simple way would be to write the intermediate
variable a1 as a function of all x1, . . . , x4:

a1 = ReLU(w(cid:62)
a2 = ReLU(w(cid:62)
a3 = ReLU(w(cid:62)

1 x + b1), where w1 ∈ R4 and b1 ∈ R
2 x + b2), where w2 ∈ R4 and b2 ∈ R
3 x + b3), where w3 ∈ R4 and b3 ∈ R

(7.14)

We still deﬁne ¯hθ(x) using equation (7.13) with a1, a2, a3 being deﬁned as
above. Thus we have a so-called fully-connected neural network because
all the intermediate variables ai’s depend on all the inputs xi’s.

For full generality, a two-layer fully-connected neural network with m

hidden units and d dimensional input x ∈ Rd is deﬁned as

∀j ∈ [1, ..., m],

j where w[1]

j ∈ Rd, b[1]

j ∈ R

(cid:62)

x + b[1]

zj = w[1]
j
aj = ReLU(zj),
a = [a1, . . . , am](cid:62) ∈ Rm

(7.15)

¯hθ(x) = w[2](cid:62)

a + b[2] where w[2] ∈ Rm, b[2] ∈ R,

(7.16)

Note that by default the vectors in Rd are viewed as column vectors, and
in particular a is a column vector with components a1, a2, ..., am. The indices
[1] and [2] are used to distinguish two sets of parameters: the w[1]
j ’s (each of
which is a vector in Rd) and w[2] (which is a vector in Rm). We will have
more of these later.

Vectorization. Before we introduce neural networks with more layers and
more complex structures, we will simplify the expressions for neural networks

88

with more matrix and vector notations. Another important motivation of
vectorization is the speed perspective in the implementation.
In order to
implement a neural network eﬃciently, one must be careful when using for
loops. The most natural way to implement equation (7.15) in code is perhaps
to use a for loop. In practice, the dimensionalities of the inputs and hidden
units are high. As a result, code will run very slowly if you use for loops.
Leveraging the parallelism in GPUs is/was crucial for the progress of deep
learning.

This gave rise to vectorization. Instead of using for loops, vectorization
takes advantage of matrix algebra and highly optimized numerical linear
algebra packages (e.g., BLAS) to make neural network computations run
quickly. Before the deep learning era, a for loop may have been suﬃcient
on smaller datasets, but modern deep networks and state-of-the-art datasets
will be infeasible to run with for loops.

We vectorize the two-layer fully-connected neural network as below. We
deﬁne a weight matrix W [1] in Rm×d as the concatenation of all the vectors
w[1]

j ’s in the following way:

W [1] =









(cid:62)

(cid:62)

(cid:62)

— w[1]
1
— w[1]
2
...
— w[1]
m

—

—

—









∈ Rm×d

(7.17)

Now by the deﬁnition of matrix vector multiplication, we can write z =

[z1, . . . , zm](cid:62) ∈ Rm as















z1
...
...
zm
(cid:124) (cid:123)(cid:122) (cid:125)
z ∈ Rm×1

=









(cid:124)

(cid:62)

(cid:62)

—

—

— w[1]
1
— w[1]
2
...
— w[1]
m
(cid:123)(cid:122)
W [1] ∈ Rm×d

—

(cid:62)









(cid:125)















x1
x2
...
xd
(cid:124) (cid:123)(cid:122) (cid:125)
x ∈ Rd×1

+















b[1]
1
b[1]
2
...
b[1]
m
(cid:124) (cid:123)(cid:122) (cid:125)
b[1] ∈ Rm×1

(7.18)

Or succinctly,

z = W [1]x + b[1]

(7.19)

We remark again that a vector in Rd in this notes, following the conventions
previously established, is automatically viewed as a column vector, and can

89

also be viewed as a d × 1 dimensional matrix. (Note that this is diﬀerent
from numpy where a vector is viewed as a row vector in broadcasting.)

Computing the activations a ∈ Rm from z ∈ Rm involves an element-
wise non-linear application of the ReLU function, which can be computed in
parallel eﬃciently. Overloading ReLU for element-wise application of ReLU
(meaning, for a vector t ∈ Rd, ReLU(t) is a vector such that ReLU(t)i =
ReLU(ti)), we have

a = ReLU(z)

(7.20)

Deﬁne W [2] = [w[2](cid:62)] ∈ R1×m similarly. Then, the model in equa-

tion (7.16) can be summarized as

a = ReLU(W [1]x + b[1])

¯hθ(x) = W [2]a + b[2]

(7.21)

Here θ consists of W [1], W [2] (often referred to as the weight matrices) and
b[1], b[2] (referred to as the biases). The collection of W [1], b[1] is referred to as
the ﬁrst layer, and W [2], b[2] the second layer. The activation a is referred to as
the hidden layer. A two-layer neural network is also called one-hidden-layer
neural network.

Multi-layer fully-connected neural networks. With this succinct no-
tations, we can stack more layers to get a deeper fully-connected neu-
Let
ral network.
W [1], . . . , W [r], b[1], . . . , b[r] be the weight matrices and biases of all the layers.
Then a multi-layer neural network can be written as

Let r be the number of

layers (weight matrices).

a[1] = ReLU(W [1]x + b[1])
a[2] = ReLU(W [2]a[1] + b[2])
· · ·

a[r−1] = ReLU(W [r−1]a[r−2] + b[r−1])
¯hθ(x) = W [r]a[r−1] + b[r]

(7.22)

We note that the weight matrices and biases need to have compatible
dimensions for the equations above to make sense. If a[k] has dimension mk,
then the weight matrix W [k] should be of dimension mk × mk−1, and the bias
b[k] ∈ Rmk. Moreover, W [1] ∈ Rm1×d and W [r] ∈ R1×mr−1.

90

The total number of neurons in the network is m1 + · · · + mr, and the
total number of parameters in this network is (d + 1)m1 + (m1 + 1)m2 + · · · +
(mr−1 + 1)mr.

Sometimes for notational consistency we also write a[0] = x, and a[r] =

hθ(x). Then we have simple recursion that

a[k] = ReLU(W [k]a[k−1] + b[k]), ∀k = 1, . . . , r − 1

(7.23)

Note that this would have be true for k = r if there were an additional
ReLU in equation (7.22), but often people like to make the last layer linear
(aka without a ReLU) so that negative outputs are possible and it’s easier
to interpret the last layer as a linear model. (More on the interpretability at
the “connection to kernel method” paragraph of this section.)

Other activation functions. The activation function ReLU can be re-
placed by many other non-linear function σ(·) that maps R to R such as

σ(z) =

σ(z) =

1
1 + e−z
ez − e−z
ez + e−z

(sigmoid)

(tanh)

σ(z) = max{z, γz}, γ ∈ (0, 1)

(leaky ReLU)

(cid:20)

1 + erf(

(cid:21)

z
√
2

)

(GELU)

σ(z) =

σ(z) =

z
2
1
β

log(1 + exp(βz)), β > 0

(Softplus)

(7.28)

(7.24)

(7.25)

(7.26)

(7.27)

The activation functions are plotted in Figure 7.3. Sigmoid and tanh are
less and less used these days partly because their are bounded from both sides
and the gradient of them vanishes as z goes to both positive and negative
inﬁnity (whereas all the other activation functions still have gradients as the
input goes to positive inﬁnity.) Softplus is not used very often either in
practice and can be viewed as a smoothing of the ReLU so that it has a
proper second order derivative. GELU and leaky ReLU are both variants of
ReLU but they have some non-zero gradient even when the input is negative.
GELU (or its slight variant) is used in NLP models such as BERT and GPT
(which we will discuss in Chapter 14.)

Why do we not use the identity function for σ(z)? That is, why
not use σ(z) = z? Assume for sake of argument that b[1] and b[2] are zeros.

91

Figure 7.3: Activation functions in deep learning.

Suppose σ(z) = z, then for two-layer neural network, we have that

¯hθ(x) = W [2]a[1]

= W [2]σ(z[1])
= W [2]z[1]
= W [2]W [1]x
= ˜W x

by deﬁnition

since σ(z) = z

from Equation (7.18)
where ˜W = W [2]W [1]

(7.29)

(7.30)

(7.31)

(7.32)

(7.33)

Notice how W [2]W [1] collapsed into ˜W .

This is because applying a linear function to another linear function will
result in a linear function over the original input (i.e., you can construct a ˜W
such that ˜W x = W [2]W [1]x). This loses much of the representational power
of the neural network as often times the output we are trying to predict
has a non-linear relationship with the inputs. Without non-linear activation
functions, the neural network will simply perform linear regression.

Connection to the Kernel Method.
In the previous lectures, we covered
the concept of feature maps. Recall that the main motivation for feature
maps is to represent functions that are non-linear in the input x by θ(cid:62)φ(x),
where θ are the parameters and φ(x), the feature map, is a handcrafted
function non-linear in the raw input x. The performance of the learning
algorithms can signiﬁcantly depends on the choice of the feature map φ(x).
Oftentimes people use domain knowledge to design the feature map φ(x) that

92

suits the particular applications. The process of choosing the feature maps
is often referred to as feature engineering.

We can view deep learning as a way to automatically learn the right
feature map (sometimes also referred to as “the representation”) as follows.
Suppose we denote by β the collection of the parameters in a fully-connected
neural networks (equation (7.22)) except those in the last layer. Then we
can abstract right a[r−1] as a function of the input x and the parameters in
β: a[r−1] = φβ(x). Now we can write the model as

¯hθ(x) = W [r]φβ(x) + b[r]

(7.34)

When β is ﬁxed, then φβ(·) can viewed as a feature map, and therefore ¯hθ(x)
is just a linear model over the features φβ(x). However, we will train the
neural networks, both the parameters in β and the parameters W [r], b[r] are
optimized, and therefore we are not learning a linear model in the feature
space, but also learning a good feature map φβ(·) itself so that it’s possi-
ble to predict accurately with a linear model on top of the feature map.
Therefore, deep learning tends to depend less on the domain knowledge of
the particular applications and requires often less feature engineering. The
penultimate layer a[r] is often (informally) referred to as the learned features
or representations in the context of deep learning.

In the example of house price prediction, a fully-connected neural network
does not need us to specify the intermediate quantity such “family size”, and
may automatically discover some useful features in the last penultimate layer
(the activation a[r−1]), and use them to linearly predict the housing price.
Often the feature map / representation obtained from one datasets (that is,
the function φβ(·) can be also useful for other datasets, which indicates they
contain essential information about the data. However, oftentimes, the neural
network will discover complex features which are very useful for predicting
the output but may be diﬃcult for a human to understand or interpret. This
is why some people refer to neural networks as a black box, as it can be
diﬃcult to understand the features it has discovered.

7.3 Modules in Modern Neural Networks

The multi-layer neural network introduced in equation (7.22) of Section 7.2
is often called multi-layer perceptron (MLP) these days. Modern neural net-
works used in practice are often much more complex and consist of multiple
building blocks or multiple layers of building blocks. In this section, we will

93

introduce some of the other building blocks and discuss possible ways to
combine them.

First, each matrix multiplication can be viewed as a building block. Con-
sider a matrix multiplication operation with parameters (W, b) where W is
the weight matrix and b is the bias vector, operating on an input z,

MMW,b(z) = W z + b .

(7.35)

Note that we implicitly assume all the dimensions are chosen to be compat-
ible. We will also drop the subscripts under MM when they are clear in the
context or just for convenience when they are not essential to the discussion.
Then, the MLP can be written as as a composition of multiple matrix
multiplication modules and nonlinear activation modules (which can also be
viewed as a building block):

MLP(x) = MMW [r],b[r](σ(MMW [r−1],b[r−1](σ(· · · MMW [1],b[1](x)))).

(7.36)

Alternatively, when we drop the subscripts that indicate the parameters for
convenience, we can write

MLP(x) = MM(σ(MMσ(· · · MM(x)))).

(7.37)

Note that in this lecture notes, by default, all the modules have diﬀerent
sets of parameters, and the dimensions of the parameters are chosen such
that the composition is meaningful.

Larger modules can be deﬁned via smaller modules as well, e.g., one
activation layer σ and a matrix multiplication layer MM are often combined
and called a “layer” in many papers. People often draw the architecture
with the basic modules in a ﬁgure by indicating the dependency between
these modules. E.g., see an illustration of an MLP in Figure 7.4, Left.

Residual connections. One of the very inﬂuential neural network archi-
tecture for vision application is ResNet, which uses the residual connections
that are essentially used in almost all large-scale deep learning architectures
these days. Using our notation above, a very much simpliﬁed residual block
can be deﬁned as

Res(z) = z + σ(MM(σ(MM(z)))).

(7.38)

A much simpliﬁed ResNet is a composition of many residual blocks followed
by a matrix multiplication,

ResNet-S(x) = MM(Res(Res(· · · Res(x)))).

(7.39)

94

Figure 7.4:
layers. Right: A residual network.

Illustrative Figures for Architecture. Left: An MLP with r

We also draw the dependency of these modules in Figure 7.4, Right.

We note that the ResNet-S is still not the same as the ResNet architec-
ture introduced in the seminal paper [He et al., 2016] because ResNet uses
convolution layers instead of vanilla matrix multiplication, and adds batch
normalization between convolutions and activations. We will introduce con-
volutional layers and some variants of batch normalization below. ResNet-S
and layer normalization are part of the Transformer architecture that are
widely used in modern large language models.

Layer normalization. Layer normalization, denoted by LN in this text,
is a module that maps a vector z ∈ Rm to a more normalized vector LN(z) ∈
Rm. It is oftentimes used after the nonlinear activations.

We ﬁrst deﬁne a sub-module of the layer normalization, denoted by LN-S.

LN-S(z) =








,








z1−ˆµ
ˆσ
z2−ˆµ
ˆσ

...

zm−ˆµ
ˆσ

(7.40)

(cid:80)m

i=1 zi
m

is the empirical mean of the vector z and ˆσ =

where ˆµ =
is the empirical standard deviation of the entries of z.4 Intuitively, LN-S(z)
is a vector that is normalized to having empirical mean zero and empirical
standard deviation 1.

(cid:113) (cid:80)m

i=1(zi−ˆµ2)
m

4Note that we divide by m instead of m − 1 in the empirical standard deviation here
because we are interested in making the output of LN-S(z) have sum of squares equal to
1 (as opposed to estimating the standard deviation in statistics.)

𝑥Layer 𝑟−1Layer 𝑖...Layer 1MLP(𝑥)...Layer𝑖MM!["],#["]𝜎MM![$],#[$]𝑥ResRes...ResResNet-S(𝑥)...ResMM𝜎MM𝜎95

Oftentimes zero mean and standard deviation 1 is not the most desired
normalization scheme, and thus layernorm introduces to parameters learnable
scalars β and γ as the desired mean and standard deviation, and use an aﬃne
transformation to turn the output of LN-S(z) into a vector with mean β and
standard deviation γ.

LN(z) = β + γ · LN-S(z) =

ˆσ



β + γ (cid:0) z1−ˆµ
β + γ (cid:0) z2−ˆµ


...


β + γ (cid:0) zm−ˆµ

ˆσ



(cid:1)
(cid:1)





(cid:1)

ˆσ

.

(7.41)

Here the ﬁrst occurrence of β should be technically interpreted as a vector
with all the entries being β. in We also note that ˆµ and ˆσ are also functions
of z and shouldn’t be treated as constants when computing the derivatives of
layernorm. Moreover, β and γ are learnable parameters and thus layernorm
is a parameterized module (as opposed to the activation layer which doesn’t
have any parameters.)

Scaling-invariant property. One important property of layer normalization
is that it will make the model invariant to scaling of the parameters in the
following sense. Suppose we consider composing LN with MMW,b and get
a subnetwork LN(MMW,b(z)). Then, we have that the output of this sub-
network does not change when the parameter in MMW,b is scaled:

LN(MMαW,αb(z)) = LN(MMW,b(z)), ∀α > 0.

(7.42)

To see this, we ﬁrst know that LN-S(·) is scale-invariant

LN-S(αz) =















αz1−αˆµ
αˆσ
αz2−αˆµ
αˆσ

...

αzm−αˆµ
αˆσ

=















z1−ˆµ
ˆσ
z2−ˆµ
ˆσ

...

zm−ˆµ
ˆσ

= LN-S(z).

(7.43)

Then we have

LN(MMαW,αb(z)) = β + γLN-S(MMαW,αb(z))
= β + γLN-S(αMMW,b(z))
= β + γLN-S(MMW,b(z))
= LN(MMW,b(z)).

(7.44)
(7.45)
(7.46)
(7.47)

Due to this property, most of the modern DL architectures for large-scale
computer vision and language applications have the following scale-invariant

96

property w.r.t all the weights that are not at the last layer. Suppose the
network f has last layer’ weights Wlast, and all the rest of the weights are
denote by W . Then, we have fWlast,αW (x) = fWlast,W (x) for all α > 0. Here,
the last layers weights are special because there are typically no layernorm
or batchnorm after the last layer’s weights.

Other normalization layers. There are several other normalization layers that
aim to normalize the intermediate layers of the neural networks to a more
ﬁxed and controllable scaling, such as batch-normalization [?], and group
normalization [?]. Batch normalization and group normalization are more
often used in computer vision applications whereas layer norm is used more
often in language applications.

Convolutional Layers. Convolutional Neural Networks are neural net-
works that consist of convolution layers (and many other modules), and are
particularly useful for computer vision applications. For the simplicity of
exposition, we focus on 1-D convolution in this text and only brieﬂy mention
2-D convolution informally at the end of this subsection. (2-D convolution
is more suitable for images which have two dimensions. 1-D convolution is
also used in natural language processing.)

We start by introducing a simpliﬁed version of the 1-D convolution layer,
denoted by Conv1D-S(·) which is a type of matrix multiplication layer with
a special structure. The parameters of Conv1D-S are a ﬁlter vector w ∈ Rk
where k is called the ﬁlter size (oftentimes k (cid:28) m), and a bias scalar b.
Oftentimes the ﬁlter is also called a kernel (but it does not have much to do
with the kernel in kernel method.) For simplicity, we assume k = 2(cid:96) + 1 is
an odd number. We ﬁrst pad zeros to the input vector z in the sense that we
let z1−(cid:96) = z1−(cid:96)+1 = .. = z0 = 0 and zm+1 = zm+2 = .. = zm+(cid:96) = 0, and treat
z as an (m + 2(cid:96))-dimension vector. Conv1D-S outputs a vector of dimension
Rm where each output dimension is a linear combination of subsets of zj’s
with coeﬃcients from w,

Conv1D-S(z)i = w1zi−(cid:96) + w2zi−(cid:96)+1 + · · · + w2(cid:96)+1zi+(cid:96) =

2(cid:96)+1
(cid:88)

j=1

wjzi−(cid:96)+(j−1).

(7.48)

Therefore, one can view Conv1D-S as a matrix multiplication with shared

parameters: Conv1D-S(z) = Qz, where

Q =

























w(cid:96)+1
w(cid:96)
...
w1
0
...
...
0
...
0

· · · w2(cid:96)+1
· · ·

w2(cid:96)

0
w2(cid:96)+1

0
0

· · ·
· · ·

· · ·
· · ·

· · ·
· · ·

· · ·
w1

w(cid:96)+1
· · ·

· · ·
· · ·

· · ·
· · ·

· · · w2(cid:96)+1
· · ·

w2(cid:96)

0
w2(cid:96)+1

· · ·
· · ·

· · ·
0

· · ·
· · ·

· · ·
· · ·

· · ·
· · ·

· · ·
· · ·

0
0

0
0

· · ·

· · ·

· · ·

· · ·

· · ·

0

w1

· · ·

· · · w2(cid:96)+1

· · ·

· · ·

· · ·

· · ·

· · ·

· · ·

· · ·

0

w1

· · ·

w(cid:96)+1

97

.

(7.49)

























Note that Qi,j = Qi−1,j−1 for all i, j ∈ {2, . . . , m}, and thus convoluation is a
matrix multiplication with parameter sharing. We also note that computing
the convolution only takes O(km) times but computing a generic matrix
multiplication takes O(m2) time. Convolution has k parameters but generic
matrix multiplication will have m2 parameters. Thus convolution is supposed
to be much more eﬃcient than a generic matrix multiplication (as long as
the additional structure imposed does not hurt the ﬂexibility of the model
to ﬁt the data).

We also note that in practice there are many variants of the convolutional
layers that we deﬁne here, e.g., there are other ways to pad zeros or sometimes
the dimension of the output of the convolutional layers could be diﬀerent from
the input. We omit some of this subtleties here for simplicity.

The convolutional layers used in practice have also many “channels” and
the simpliﬁed version above corresponds to the 1-channel version. Formally,
Conv1D takes in C vectors z1, . . . , zC ∈ Rm as inputs, where C is referred
to as the number of channels.
In other words, the more general version,
denoted by Conv1D, takes in a matrix as input, which is the concatenation
of z1, . . . , zC and has dimension m×C. It can output C (cid:48) vectors of dimension
m, denoted by Conv1D(z)1, . . . , Conv1D(z)C(cid:48), where C (cid:48) is referred to as the
output channel, or equivalently a matrix of dimension m × C (cid:48). Each of the
output is a sum of the simpliﬁed convolutions applied on various channels.

∀i ∈ [C (cid:48)], Conv1D(z)i =

C
(cid:88)

j=1

Conv1D-Si,j(zj).

(7.50)

Note that each Conv1D-Si,j are modules with diﬀerent parameters, and
thus the total number of parameters is k (the number of parameters in a
Conv1D-S) ×CC (cid:48) (the number of Conv1D-Si.j’s) = kCC (cid:48).
In contrast, a
generic linear mapping from Rm×C and Rm×C(cid:48) has m2CC (cid:48) parameters. The

98

parameters can also be represented as a three-dimensional tensor of dimen-
sion k × C × C (cid:48).

2-D convolution (brief ). A 2-D convolution with one channel, denoted by
Conv2D-S, is analogous to the Conv1D-S, but takes a 2-dimensional input
z ∈ Rm×m and applies a ﬁlter of size k × k, and outputs Conv2D-S(z) ∈
Rm×m. The full 2-D convolutional layer, denoted by Conv2D, takes in
a sequence of matrices z1, . . . , zC ∈ Rm×m, or equivalently a 3-D ten-
sor z = (z1, . . . , zC) ∈ Rm×m×C and outputs a sequence of matrices,
Conv2D(z)1, . . . , Conv2D(z)C(cid:48) ∈ Rm×m, which can also be viewed as a 3D
tensor in Rm×m×C(cid:48). Each channel of the output is sum of the outcomes of
applying Conv2D-S layers on all the input channels.

∀i ∈ [C (cid:48)], Conv2D(z)i =

C
(cid:88)

j=1

Conv2D-Si,j(zj).

(7.51)

Because there are CC (cid:48) number of Conv2D-S modules and each of the
Conv2D-S module has k2 parameters, the total number of parameters is
CC (cid:48)k2. The parameters can also be viewed as a 4D tensor of dimension
C × C (cid:48) × k × k.

7.4 Backpropagation

In this section, we introduce backpropgation or auto-diﬀerentiation, which
computes the gradient of the loss ∇J(θ) eﬃciently. We will start with an
informal theorem that states that as long as a real-valued function f can be
eﬃciently computed/evaluated by a diﬀerentiable network or circuit, then its
gradient can be eﬃciently computed in a similar time. We will then show
how to do this concretely for neural networks.

Because the formality of the general theorem is not the main focus here,
we will introduce the terms with informal deﬁnitions. By a diﬀerentiable
circuit or a diﬀerentiable network, we mean a composition of a sequence of
diﬀerentiable arithmetic operations (additions, subtraction, multiplication,
divisions, etc) and elementary diﬀerentiable functions (ReLU, exp, log, sin,
cos, etc.). Let the size of the circuit be the total number of such operations
and elementary functions. We assume that each of the operations and func-
tions, and their derivatives or partial derivatives ecan be computed in O(1)
time.

Theorem 7.4.1: [backpropagation or auto-diﬀerentiation, informally stated]
Suppose a diﬀerentiable circuit of size N computes a real-valued function

99

f : R(cid:96) → R. Then, the gradient ∇f can be computed in time O(N ), by a
circuit of size O(N ).5

We note that the loss function J (j)(θ) for j-th example can be indeed
computed by a sequence of operations and functions involving additions,
subtraction, multiplications, and non-linear activations. Thus the theorem
suggests that we should be able to compute the ∇J (j)(θ) in a similar time
to that for computing J (j)(θ) itself. This does not only apply to the fully-
connected neural network introduced in the Section 7.2, but also many other
types of neural networks that uses more advance modules.

We remark that auto-diﬀerentiation or backpropagation is already imple-
mented in all the deep learning packages such as tensorﬂow and pytorch, and
thus in practice, in most of cases a researcher does not need to write their
backpropagation algorithms. However, understanding it is very helpful for
gaining insights into the working of deep learning.

Organization of the rest of the section. In Section 7.4.1, we will start review-
ing the basic Chain rule with a new perspective that is particularly useful
for understanding backpropgation. Section 7.4.2 will introduce the general
strategy for backpropagation. Section 7.4.2 will discuss how to compute the
so-called backward function for basic modules used in neural networks, and
Section 7.4.4 will put everything together to get a concrete backprop algo-
rithm for MLPs.

7.4.1 Preliminaries on partial derivatives

Suppose a scalar variable J depend on some variables z (which could be a
scalar, matrix, or high-order tensor), we write ∂J
∂z as the partial derivatives
of J w.r.t to the variable z. We stress that the convention here is that ∂J
∂z
has exactly the same dimension as z itself. For example, if z ∈ Rm×n, then
∂z ∈ Rm×n, and the (i, j)-entry of ∂J
∂J

∂z is equal to ∂J
∂zij

.

Remark 7.4.2: When both J and z are not scalars, the partial derivatives of
J w.r.t z becomes either a matrix or tensor and the notation becomes some-
what tricky. Besides the mathematical or notational challenges in dealing

5We note if the output of the function f does not depend on some of the input co-
ordinates, then we set by default the gradient w.r.t that coordinate to zero. Setting to
zero does not count towards the total runtime here in our accounting scheme. This is why
when N ≤ (cid:96), we can compute the gradient in O(N ) time, which might be potentially even
less than (cid:96).

100

with these partial derivatives of multi-variate functions, they are also expen-
sive to compute and store, and thus rarely explicitly constructed empirically.
The experience of authors of this note is that it’s generally more productive
to think only about derivatives of scalar function w.r.t to vector, matrices,
or tensors. For example, in this note, we will not deal with derivatives of
multi-variate functions.

Chain rule. We review the chain rule in calculus but with a perspective
and notions that are more relevant for auto-diﬀerentiation.

Consider a scalar variable J which is obtained by the composition of f

and g on some variable z,

z ∈ Rm
u = g(z) ∈ Rn
J = f (u) ∈ R .

(7.52)

The same derivations below can be easily extend to the cases when z and u
are matrices or tensors; but we insist that the ﬁnal variable J is a scalar. (See
also Remark 7.4.2.) Let u = (u1, . . . , un) and let g(z) = (g1(z), · · · , gn(z)).
Then, the standard chain rule gives us that

∀i ∈ {1, . . . , m},

∂J
∂zi

=

n
(cid:88)

j=1

∂J
∂uj

·

∂gj
∂zi

.

(7.53)

Alternatively, when z and u are both vectors, in a vectorized notation:

∂J
∂z

=






∂g1
∂z1

...

∂g1
∂zm

· · ·
. . .
· · ·




 ·

∂gn
∂z1

...

∂gn
∂zm

∂J
∂u

.

(7.54)

In other words, the backward function is always a linear map from ∂J
∂u to
∂J
∂z , though note that the mapping itself can depend on z in complex ways.
The matrix on the RHS of (7.54) is actually the transpose of the Jacobian
matrix of the function g. However, we do not discuss in-depth about Jacobian
matrices to avoid complications. Part of the reason is that when z is a matrix
(or tensor), to write an analog of equation (7.54), one has to either ﬂatten z
into a vector or introduce additional notations on tensor-matrix product. In
this sense, equation (7.53) is more convenient and eﬀective to use in all cases.
For example, when z ∈ Rr×s is a matrix, we can easily rewrite equation (7.53)

to

∀i, k,

∂J
∂zik

=

n
(cid:88)

j=1

∂J
∂uj

·

∂gj
∂zik

.

101

(7.55)

which will indeed be used in some of the derivations in Section 7.4.3.

Key interpretation of the chain rule. We can view the formula above (equa-
tion (7.53) or (7.54)) as a way to compute ∂J
∂u . Consider the following
abstract problem. Suppose J depends on z via u as deﬁned in equation (7.52).
However, suppose the function f is not given or the function f is complex,
but we are given the value of ∂J
∂u . Then, the formula in equation (7.54) gives
∂z from ∂J
us a way to compute ∂J
∂u .

∂z from ∂J

∂J
∂u

chain rule, formula (7.54)
====================⇒
only requires info about g(·) and z

∂J
∂z

.

(7.56)

Moreover, this formula only involves knowledge about g (more precisely ∂gj
).
∂zi
We will repeatedly use this fact in situations where g is a building blocks of
a complex network f .

Empirically, it’s often useful to modularized the mapping in (7.53) or
(7.54) into a black-box, and mathematically it’s also convenient to deﬁne a
∂u to ∂J
notation for it.6 We use B[g, z] to deﬁne the function that maps ∂J
∂z ,
and write

∂J
∂z

= B[g, z]

(cid:19)

(cid:18)∂J
∂u

.

(7.57)

We call B[g, z] the backward function for the module g. Note that when z
is ﬁxed, B[g, z] is merely a linear map from Rn to Rm. Using equation (7.53),
we have

(B[g, z](v))i =

m
(cid:88)

j=1

∂gj
∂zi

· vj .

Or in vectorized notation, using (7.54), we have

B[g, z](v) =






∂g1
∂z1

...

∂g1
∂zm

· · ·
. . .
· · ·




 · v .

∂gn
∂z1

...

∂gn
∂zm

6e.g., the function is the .backward() method of the module in pytorch.

(7.58)

(7.59)

102

and therefore B[g, z] can be viewed as a matrix. However, in reality, z will be
changing and thus the backward mapping has to be recomputed for diﬀerent
z’s while g is often ﬁxed. Thus, empirically, the backward function B[g, z](v)
is often viewed as a function which takes in z (=the input to g) and v (=a
vector that is supposed to be the gradient of some variable J w.r.t to the
output of g) as the inputs, and outputs a vector that is supposed to be the
gradient of J w.r.t to z.

7.4.2 General strategy of backpropagation

We discuss the general strategy of auto-diﬀerentiation in this section to build
a high-level understanding. Then, we will instantiate the approach to con-
crete neural networks. We take the viewpoint that neural networks are com-
plex compositions of small building blocks such as MM, σ, Conv2D, LN,
etc., deﬁned in Section 7.3. Note that the losses (e.g., mean-squared loss, or
the cross-entropy loss) can also be abstractly viewed as additional modules.
Thus, we can abstractly write the loss function J (on a single example (x, y))
as a composition of many modules:7

J = Mk(Mk−1(· · · M1(x))) .

(7.60)

For example, for a binary classiﬁcation problem with a MLP ¯hθ(x) (de-
ﬁned in equation (7.36) and (7.37)), the loss function has ber written in the
form of equation (7.60) with M1 = MMW [1],b[1], M2 = σ, M3 = MMW [2],b[2],
. . . , and Mk−1 = MMW [r],b[r] and Mk = (cid:96)logistic.

We can see from this example that some modules involve parameters, and
other modules might only involve a ﬁxed set of operations. For generality,
we assume that eachj Mi involves a set of parameters θ[i], though θ[i] could
possibly be an empty set when Mi is a ﬁxed operation such as the nonlinear
activations. We will discuss more on the granularity of the modularization,
but so far we assume all the modules Mi’s are simple enough.

We introduce the intermediate variables for the computation in (7.60).

7Technically, we should write J = Mk(Mk−1(· · · M1(x)), y). However, y is treated as a
constant for the purpose of computing the derivatives w.r.t to the parameters, and thus
we can view it as part of Mk for the sake of simplicity of notations.

103

Let

u[0] = x
u[1] = M1(u[0])
u[2] = M2(u[1])

...

J = u[k] = Mk(u[k−1]) .

(F)

Backpropgation consists of two passes, the forward pass and backward
pass. In the forward pass, the algorithm simply computes u[1], . . . , u[k] from
i = 1, . . . , k, sequentially using the deﬁnition in (F), and save all the in-
termediate variables u[i]’s in the memory.

In the backward pass, we ﬁrst compute the derivatives w.r.t to the
intermediate variables, that is,
∂u[1] , sequentially in this backward
order, and then compute the derivatives of the parameters ∂J
∂u[i] and
u[i−1]. These two type of computations can be also interleaved with each
other because ∂J
∂u[k] with
k < i.

∂u[i] and u[i−1] but not any ∂J

∂θ[i] only depends on ∂J

∂θ[i] from ∂J

∂u[k] , . . . , ∂J

∂J

∂J

We ﬁrst see why

∂u[i−1] can be computed eﬃciently from ∂J

∂u[i] and u[i−1]
by invoking the discussion in Section 7.4.1 on the chain rule. We in-
stantiate the discussion by setting u = u[i] and z = u[i−1], and f (u) =
Mk(Mk−1(· · · Mi+1(u[i]))), and g(·) = Mi(·). Note that f is very complex
but we don’t need any concrete information about f . Then, the conclusive
equation (7.56) corresponds to

∂J
∂u[i]

chain rule
==========================⇒
only requires info about Mi(·) and u[i−1]

∂J
∂u[i−1] .

(7.61)

More precisely, we can write, following equation (7.57)

∂J
∂u[i−1] = B[Mi, u[i−1]]

(cid:19)

(cid:18) ∂J
∂u[i]

.

Instantiating the chain rule with z = θ[i] and u = u[i], we also have

∂J
∂θ[i] = B[Mi, θ[i]]

(cid:19)

(cid:18) ∂J
∂u[i]

.

See Figure 7.5 for an illustration of the algorithm.

(B1)

(B2)

104

Figure 7.5: Back-propagation.

Remark 7.4.3: [Computational eﬃciency and granularity of the modules]
The main underlying purpose of treating a complex network as compositions
of small modules is that small modules tend to have eﬃciently implementable
backward function. In fact, the backward functions of all the atomic modules
such as addition, multiplication and ReLU can be computed as eﬃciently as
the the evaluation of these modules (up to multiplicative constant factor).
Using this fact, we can prove Theorem 7.4.1 by viewing neural networks as
compositions of many atomic operations, and invoking the backpropagation
discussed above. However, in practice, it’s oftentimes more convenient to
modularize the networks using modules on the level of matrix multiplication,
layernorm, etc. As we will see, naive implementation of these operations’
backward functions also have the same runtime as the evaluation of these
functions.

𝑥...𝑀!𝐽...𝑀"𝑢[!]𝑢["%!]𝜕𝐽𝜕𝐽ℬ[𝑀",𝑢["%!]]𝜕𝐽𝜕𝑢!"#𝑢[&]𝑀&𝑢[&%!]ℬ[𝑀&,𝑢[&%!]]𝜕𝐽𝜕𝑢$"#𝜕𝐽𝜕𝑢$...𝜕𝐽𝜕𝑢#...Forward passBackward passℬ[𝑀!,𝜃!]𝜕𝐽𝜕𝜃#ℬ[𝑀&,𝜃&]𝜕𝐽𝜕𝜃$ℬ[𝑀",𝜃"]𝜕𝐽𝜕𝜃!105

7.4.3 Backward functions for basic modules

Using the general strategy in Section 7.4.2, it suﬃces to compute the back-
ward function for all modules Mi’s used in the networks. We compute the
backward function for the basic module MM, activations σ, and loss functions
in this section.

Backward function for MM. Suppose MMW,b(z) = W z + b is a matrix multi-
plication module where z ∈ Rm and W ∈ Rn×m. Then, using equation (7.59),
we have for v ∈ Rn

B[MM, z](v) =






∂(W z+b)1
∂z1

...

∂(W z+b)1
∂zm

· · ·
. . .
· · ·




 v .

∂(W z+b)n
∂z1

...

∂(W z+b)n
∂zm

(7.62)

Using the fact that ∀i ∈ [m], j ∈ [n], ∂(W z+b)j
have

∂zi

= ∂bj +(cid:80)m

k=1 Wjkzk
∂zi

= Wji, we

B[MM, z](v) = W (cid:62)v ∈ Rm .

(7.63)

In the derivation above, we have treated MM as a function of z. If we treat
MM as a function of W and b, then we can also compute the backward
function for the parameter variables W and b.
It’s less convenient to use
equation (7.59) because the variable W is a matrix and the matrix in (7.59)
will be a 4-th order tensor that is challenging for us to mathematically write
down. We use (7.58) instead:

(B[MM, W ](v))ij =

m
(cid:88)

k=1

∂(W z + b)k
∂Wij

· vk =

m
(cid:88)

k=1

∂ (cid:80)m

s=1 Wkszs
∂Wij

· vk = vizj .

In vectorized notation, we have

B[MM, W ](v) = vz(cid:62) ∈ Rn××m .

Using equation (7.59) for the variable b, we have,

B[MM, b](v) =






∂(W z+b)1
∂b1

...

∂(W z+b)1
∂bn

· · ·
. . .
· · ·

∂(W z+b)n
∂b1

...

∂(W z+b)n
∂bn




 v = v .

(7.64)

(7.65)

(7.66)

106

Here we used that ∂(W z+b)j

= 0 if i (cid:54)= j and ∂(W z+b)j
The computational eﬃciency for computing the backward function is
O(mn), the same as evaluating the result of matrix multiplication up to
constant factor.

= 1 if i = j.

∂bi

∂bi

Backward function for the activations. Suppose M (z) = σ(z) where σ is an
element-wise activation function and z ∈ Rm. Then, using equation (7.59),
we have

B[σ, z](v) =





...

...




∂σ(z1)
∂z1

∂σ(zm)
∂z1

· · ·
. . .
· · ·
= diag(σ(cid:48)(z1), · · · , σ(cid:48)(zm))v
= σ(cid:48)(z) (cid:12) v ∈ Rm .

∂σ(zm)
∂zm

∂σ(z1)
∂zm


 v

(7.67)

(7.68)
(7.69)

Here, we used the fact that ∂σ(zj )
= 0 when j (cid:54)= i, diag(λ1, . . . , λm) denotes
∂zi
the diagonal matrix with λ1, . . . , λm on the diagonal, and (cid:12) denotes the
element-wise product of two vectors with the same dimension, and σ(cid:48)(·) is
the element-wise application of the derivative of the activation function σ.

Regarding computation eﬃciency, we note that at the ﬁrst sight, equa-
tion (7.67) appears to indicate the backward function takes O(m2) time, but
equation (7.69) shows that it’s implementable in O(m) time (which is the
same as the time for evaluating of the function.) We are not supposed to be
surprised by that the possibility of simplifying equation (7.67) to (7.69)—if
we use smaller modules, that is, treating the vector-to-vector nonlinear ac-
tivation as m scalar-to-scalar non-linear activation, then it’s more obvious
that the backward pass should have similar time to the forward pass.

Backward function for loss functions. When a module M takes in a vector
z and outputs a scalar, by equation (7.59), the backward function takes in a
scalar v and outputs a vector with entries (B[M, z](v))i = ∂M
v. Therefore,
∂zi
in vectorized notation, B[M, z](v) = ∂M

∂z · v.
Recall that squared loss (cid:96)MSE(z, y) = 1

2(z − y)2. Thus, B[(cid:96)MSE, z](v) =

∂ 1

2 (z−y)2
∂z
For logistics loss, by equation (2.6), we have

· v = (z − y) · v.

B[(cid:96)logistic, t](v) =

∂(cid:96)logistic(t, y)
∂t

· v = (1/(1 + exp(−t)) − y) · v .

(7.70)

107

For cross-entropy loss, by equation (2.17), we have

B[(cid:96)ce, t](v) =

∂(cid:96)ce(t, y)
∂t

· v = (φ − ey) · v ,

(7.71)

where φ = softmax(t).

7.4.4 Back-propagation for MLPs

Given the backward functions for every module needed in evaluating the loss
of an MLP, we follow the strategy in Section 7.4.2 to compute the gradient
of the loss w.r.t to the hidden activations and the parameters.

We consider the an r-layer MLP with a logistic loss. The loss function

can be computed via a sequence of operations (that is, the forward pass),

z[1] = MMW [1],b[1](x),
a[1] = σ(z[1])
z[2] = MMW [2],b[2](a[1])
a[2] = σ(z[2])

...

z[r] = MMW [r],b[r](a[r−1])
J = (cid:96)logistic(z[r], y) .

(7.72)

We apply the backward function sequentially in a backward order. First, we
have that

∂J
∂z[r] = B[(cid:96)logistic, z[r]]

(cid:19)

(cid:18) ∂J
∂J

= B[(cid:96)logistic, z[r]](1) .

(7.73)

Then, we iteratively compute ∂J
rule (equation (7.58)),

∂a[i] and ∂J

∂z[i] ’s by repeatedly invoking the chain

∂J
∂a[r−1] = B[MM, a[r−1]]
∂J
∂z[r−1] = B[σ, z[r−1]]

(cid:19)

(cid:18) ∂J
∂z[r]

(cid:18) ∂J

(cid:19)

∂a[r−1]

...

∂J
∂z[1] = B[σ, z[1]]

(cid:19)

(cid:18) ∂J
∂a[1]

.

(7.74)

108

Numerically, we compute these quantities by repeatedly invoking equa-
tions (7.69) and (7.63) with diﬀerent choices of variables.

We note that the intermediate values of a[i] and z[i] are used in the back-
propagation (equation (7.74)), and therefore these values need to be stored
in the memory after the forward pass.

Next, we compute the gradient of the parameters by invoking equa-

tions (7.65) and (7.66),

(cid:19)

∂J
∂W [r] = B[MM, W [r]]
∂J
∂b[r] = B[MM, b[r]]

(cid:18) ∂J
∂z[r]
(cid:19)

(cid:18) ∂J
∂z[r]

...

(cid:19)

∂J
∂W [1] = B[MM, W [1]]
∂J
∂b[1] = B[MM, b[1]]

(cid:18) ∂J
∂z[1]
(cid:19)

(cid:18) ∂J
∂z[1]

.

(7.75)

∂J

We also note that the block of computations in equations (7.75) can be
interleaved with the block of computation in equations (7.74) because the
∂W [i] and ∂J

∂b[i] can be computed as soon as ∂J

∂z[i] is computed.

Putting all of

these together, and explicitly invoking the equa-
tions (7.72), (7.74) and (7.75), we have the following algorithm (Algorithm 3).

109

Algorithm 3 Back-propagation for multi-layer neural networks.
1: Forward pass. Compute and store the values of a[k]’s, z[k]’s, and J

using the equations (7.72).

2: Backward pass. Compute the gradient of loss J with respect to z[r]:

∂J

∂z[r] = B[(cid:96)logistic, z[r]](1) = (cid:0)1/(1 + exp(−z[r])) − y(cid:1) .

(7.76)

3: for k = r − 1 to 0 do
4:

Compute the gradient with respect to parameters W [k+1] and b[k+1].

∂J

∂W [k+1] = B[MM, W [k+1]]
∂J

.

=

∂z[k+1] a[k](cid:62)
∂J
∂b[k+1] = B[MM, b[k+1]]
∂J
∂z[k+1] .

=

(cid:18) ∂J

(cid:19)

∂z[k+1]

(cid:18) ∂J

(cid:19)

∂z[k+1]

(7.77)

(7.78)

5: When k ≥ 1, compute the gradient with respect to z[k] and a[k].

∂J
∂a[k] = B[σ, a[k]]

(cid:18) ∂J

(cid:19)

∂z[k+1]

= W [k+1](cid:62) ∂J

∂z[k+1] .

∂J
∂z[k] = B[σ, z[k]]
= σ(cid:48)(z[k]) (cid:12)

(cid:19)

(cid:18) ∂J
∂a[k]
∂J
∂a[k] .

(7.79)

(7.80)

7.5 Vectorization over training examples

As we discussed in Section 7.1, in the implementation of neural networks,
we will leverage the parallelism across the multiple examples. This means
that we will need to write the forward pass (the evaluation of the outputs)
of the neural network and the backward pass (backpropagation) for multiple

110

training examples in matrix notation.

The basic idea.
The basic idea is simple. Suppose you have a training
set with three examples x(1), x(2), x(3). The ﬁrst-layer activations for each
example are as follows:

z[1](1) = W [1]x(1) + b[1]
z[1](2) = W [1]x(2) + b[1]
z[1](3) = W [1]x(3) + b[1]

Note the diﬀerence between square brackets [·], which refer to the layer num-
ber, and parenthesis (·), which refer to the training example number.
In-
tuitively, one would implement this using a for loop. It turns out, we can
vectorize these operations as well. First, deﬁne:





X =

|

|

|
x(1) x(2) x(3)
|

|

|


 ∈ Rd×3

(7.81)

Note that we are stacking training examples in columns and not rows. We
can then combine this into a single uniﬁed formulation:





Z [1] =

|

|

|
z[1](1) z[1](2) z[1](3)
|

|

|


 = W [1]X + b[1]

(7.82)

You may notice that we are attempting to add b[1] ∈ R4×1 to W [1]X ∈
R4×3. Strictly following the rules of linear algebra, this is not allowed. In
practice however, this addition is performed using broadcasting. We create
an intermediate ˜b[1] ∈ R4×3:

˜b[1] =





|
b[1]
|

|
b[1]
|





|
b[1]
|

(7.83)

We can then perform the computation: Z [1] = W [1]X + ˜b[1]. Often times, it
is not necessary to explicitly construct ˜b[1]. By inspecting the dimensions in
(7.82), you can assume b[1] ∈ R4×1 is correctly broadcast to W [1]X ∈ R4×3.

The matricization approach as above can easily generalize to multiple

layers, with one subtlety though, as discussed below.

111

Complications/Subtlety in the Implementation. All the deep learn-
ing packages or implementations put the data points in the rows of a data
matrix. (If the data point itself is a matrix or tensor, then the data are con-
centrated along the zero-th dimension.) However, most of the deep learning
papers use a similar notation to these notes where the data points are treated
as column vectors.8 There is a simple conversion to deal with the mismatch:
in the implementation, all the columns become row vectors, row vectors be-
come column vectors, all the matrices are transposed, and the orders of the
matrix multiplications are ﬂipped. In the example above, using the row ma-
jor convention, the data matrix is X ∈ R3×d, the ﬁrst layer weight matrix
has dimensionality d × m (instead of m × d as in the two layer neural net
section), and the bias vector b[1] ∈ R1×m. The computation for the hidden
activation becomes

Z [1] = XW [1] + b[1] ∈ R3×m

(7.84)

8The instructor suspects that this is mostly because in mathematics we naturally mul-

tiply a matrix to a vector on the left hand side.

Part III

Generalization and
regularization

112

Chapter 8

Generalization

This chapter discusses tools to analyze and understand the generaliza-
i.e, their performances on unseen test
tion of machine learning models,
examples. Recall that for supervised learning problems, given a train-
ing dataset {(x(i), y(i))}n
i=1, we typically learn a model hθ by minimizing a
loss/cost function J(θ), which encourages hθ to ﬁt the data. E.g., when
the loss function is the least square loss (aka mean squared error), we have
J(θ) = 1
i=1(y(i) − hθ(x(i)))2. This loss function for training purposes is
n
oftentimes referred to as the training loss/error/cost.

(cid:80)n

However, minimizing the training loss is not our ultimate goal—it is
merely our approach towards the goal of learning a predictive model. The
most important evaluation metric of a model is the loss on unseen test exam-
ples, which is oftentimes referred to as the test error. Formally, we sample a
test example (x, y) from the so-called test distribution D, and measure the
model’s error on it, by, e.g., the mean squared error, (hθ(x) − y)2. The ex-
pected loss/error over the randomness of the test example is called the test
loss/error,1

L(θ) = E(x,y)∼D[(y − hθ(x))2]

(8.1)

Note that the measurement of the error involves computing the expectation,
and in practice, it can be approximated by the average error on many sampled
test examples, which are referred to as the test dataset. Note that the key
diﬀerence here between training and test datasets is that the test examples

1In theoretical and statistical literature, we oftentimes call the uniform distribution
over the training set {(x(i), y(i))}n
i=1, denoted by (cid:98)D, an empirical distribution, and call
D the population distribution. Partly because of this, the training loss is also referred
to as the empirical loss/risk/error, and the test loss is also referred to as the population
loss/risk/error.

113

114

are unseen, in the sense that the training procedure has not used the test
examples. In classical statistical learning settings, the training examples are
also drawn from the same distribution as the test distribution D, but still
the test examples are unseen by the learning procedure whereas the training
examples are seen.2

Because of this key diﬀerence between training and test datasets, even
if they are both drawn from the same distribution D, the test error is not
necessarily always close to the training error.3 As a result, successfully min-
imizing the training error may not always lead to a small test error. We
typically say the model overﬁts the data if the model predicts accurately on
the training dataset but doesn’t generalize well to other test examples, that
is, if the training error is small but the test error is large. We say the model
underﬁts the data if the training error is relatively large4 (and in this case,
typically the test error is also relatively large.)

This chapter studies how the test error is inﬂuenced by the learning pro-
cedure, especially the choice of model parameterizations. We will decompose
the test error into “bias” and “variance” terms and study how each of them is
aﬀected by the choice of model parameterizations and their tradeoﬀs. Using
the bias-variance tradeoﬀ, we will discuss when overﬁtting and underﬁtting
will occur and be avoided. We will also discuss the double descent phe-
nomenon in Section 8.2 and some classical theoretical results in Section 8.3.

2These days, researchers have increasingly been more interested in the setting with

“domain shift”, that is, the training distribution and test distribution are diﬀerent.

3the diﬀerence between test error and training error is often referred to as the gener-
alization gap. The term generalization error in some literature means the test error, and
in some other literature means the generalization gap.

4e.g., larger than the intrinsic noise level of the data in regression problems.

8.1 Bias-variance tradeoﬀ

115

Figure 8.1: A running example of training and test dataset for this section.

As an illustrating example, we consider the following training dataset and
test dataset, which are also shown in Figure 8.1. The training inputs x(i)’s are
randomly chosen and the outputs y(i) are generated by y(i) = h(cid:63)(x(i)) + ξ(i)
where the function h(cid:63)(·) is a quadratic function and is shown in Figure 8.1
as the solid line, and ξ(i) is the a observation noise assumed to be generated
from ∼ N (0, σ2). A test example (x, y) also has the same input-output
relationship y = h(cid:63)(x) + ξ where ξ ∼ N (0, σ2). It’s impossible to predict the
noise ξ, and therefore essentially our goal is to recover the function h(cid:63)(·).

We will consider the test error of learning various types of models. When
talking about linear regression, we discussed the problem of whether to ﬁt
a “simple” model such as the linear “y = θ0 + θ1x,” or a more “complex”
model such as the polynomial “y = θ0 + θ1x + · · · θ5x5.”

We start with ﬁtting a linear model, as shown in Figure 8.2. The best
ﬁtted linear model cannot predict y from x accurately even on the training
dataset, let alone on the test dataset. This is because the true relationship
between y and x is not linear—any linear model is far away from the true
function h(cid:63)(·). As a result, the training error is large and this is a typical
situation of underﬁtting.

0.00.20.40.60.81.0x0.00.51.01.5ytraining datasettraining dataground truth h*0.00.20.40.60.81.0x0.00.51.01.5ytest datasettest dataground truth h*116

Figure 8.2: The best ﬁt linear model has large training and test errors.

The issue cannot be mitigated with more training examples—even with
a very large amount of, or even inﬁnite training examples, the best ﬁtted
linear model is still inaccurate and fails to capture the structure of the data
(Figure 8.3). Even if the noise is not present in the training data, the issue
still occurs (Figure 8.4). Therefore, the fundamental bottleneck here is the
linear model family’s inability to capture the structure in the data—linear
models cannot represent the true quadratic function h(cid:63)—, but not the lack of
the data. Informally, we deﬁne the bias of a model to be the test error even
if we were to ﬁt it to a very (say, inﬁnitely) large training dataset. Thus, in
this case, the linear model suﬀers from large bias, and underﬁts (i.e., fails to
capture structure exhibited by) the data.

Figure 8.3: The best ﬁt linear
model on a much larger dataset
still has a large training error.

Figure 8.4: The best ﬁt linear
model on a noiseless dataset also
has a large training/test error.

Next, we ﬁt a 5th-degree polynomial to the data. Figure 8.5 shows that
it fails to learn a good model either. However, the failure pattern is diﬀerent
from the linear model case. Speciﬁcally, even though the learnt 5th-degree

0.00.20.40.60.81.0x0.00.51.01.5ytraining databest fit linear model0.00.20.40.60.81.0x0.00.51.01.5ytest databest fit linear model0.00.20.40.60.81.0x0.00.51.01.5yfitting linear models on a large datasettraining dataground truth h*best fit linear model0.00.20.40.60.81.0x0.00.51.01.5yfitting linear models on a noiseless datasettraining dataground truth h*best fit linear model117

polynomial did a very good job predicting y(i)’s from x(i)’s for training ex-
amples, it does not work well on test examples (Figure 8.5). In other words,
the model learnt from the training set does not generalize well to other test
examples—the test error is high. Contrary to the behavior of linear models,
the bias of the 5-th degree polynomials is small—if we were to ﬁt a 5-th de-
gree polynomial to an extremely large dataset, the resulting model would be
close to a quadratic function and be accurate (Figure 8.6). This is because
the family of 5-th degree polynomials contains all the quadratic functions
(setting θ5 = θ4 = θ3 = 0 results in a quadratic function), and, therefore,
5-th degree polynomials are in principle capable of capturing the structure
of the data.

Figure 8.5: Best ﬁt 5-th degree polynomial has zero training error, but still
has a large test error and does not recover the the ground truth. This is a
classic situation of overﬁtting.

Figure 8.6: The best ﬁt 5-th degree polynomial on a huge dataset nearly
recovers the ground-truth—suggesting that the culprit in Figure 8.5 is the
variance (or lack of data) but not bias.

The failure of ﬁtting 5-th degree polynomials can be captured by another

0.00.20.40.60.81.0x0.00.51.01.5ytraining databest fit 5-th degree model0.00.20.40.60.81.0x0.00.51.01.5ytest dataground truth h*best fit 5-th degree model0.00.20.40.60.81.0x0.00.51.01.5ytraining databest fit 5-th degree modelground truth h*fitting 5-th degree model on large dataset118

component of the test error, called variance of a model ﬁtting procedure.
Speciﬁcally, when ﬁtting a 5-th degree polynomial as in Figure 8.7, there is a
large risk that we’re ﬁtting patterns in the data that happened to be present
in our small, ﬁnite training set, but that do not reﬂect the wider pattern of
the relationship between x and y. These “spurious” patterns in the training
set are (mostly) due to the observation noise ξ(i), and ﬁtting these spurious
patters results in a model with large test error. In this case, we say the model
has a large variance.

Figure 8.7: The best ﬁt 5-th degree models on three diﬀerent datasets gen-
erated from the same distribution behave quite diﬀerently, suggesting the
existence of a large variance.

The variance can be intuitively (and mathematically, as shown in Sec-
tion 8.1.1) characterized by the amount of variations across models learnt
on multiple diﬀerent training datasets (drawn from the same underlying dis-
tribution). The “spurious patterns” are speciﬁc to the randomness of the
noise (and inputs) in a particular dataset, and thus are diﬀerent across mul-
tiple training datasets. Therefore, overﬁtting to the “spurious patterns” of
multiple datasets should result in very diﬀerent models. Indeed, as shown
in Figure 8.7, the models learned on the three diﬀerent training datasets are
quite diﬀerent, overﬁtting to the “spurious patterns” of each datasets.

Often, there is a tradeoﬀ between bias and variance. If our model is too
“simple” and has very few parameters, then it may have large bias (but small
variance), and it typically may suﬀer from underﬁttng. If it is too “complex”
and has very many parameters, then it may suﬀer from large variance (but
have smaller bias), and thus overﬁtting. See Figure 8.8 for a typical tradeoﬀ
between bias and variance.

0.00.20.40.60.81.0x0.00.51.01.5ytraining databest fit 5-th degree model0.00.20.40.60.81.0x0.00.51.01.5ytraining databest fit 5-th degree model0.00.20.40.60.81.0x0.00.51.01.5ytraining databest fit 5-th degree modelfitting 5-th degree model on different datasets119

Figure 8.8: An illustration of the typical bias-variance tradeoﬀ.

As we will see formally in Section 8.1.1, the test error can be decomposed
as a summation of bias and variance. This means that the test error will
have a convex curve as the model complexity increases, and in practice we
should tune the model complexity to achieve the best tradeoﬀ. For instance,
in the example above, ﬁtting a quadratic function does better than either of
the extremes of a ﬁrst or a 5-th degree polynomial, as shown in Figure 8.9.

Figure 8.9: Best ﬁt quadratic model has small training and test error because
quadratic model achieves a better tradeoﬀ.

Interestingly, the bias-variance tradeoﬀ curves or the test error curves
do not universally follow the shape in Figure 8.8, at least not universally
when the model complexity is simply measured by the number of parameters.
(We will discuss the so-called double descent phenomenon in Section 8.2.)
Nevertheless, the principle of bias-variance tradeoﬀ is perhaps still the ﬁrst
resort when analyzing and predicting the behavior of test errors.

Model ComplexityErrorBias2VarianceTest Error (= Bias2+Variance)Optimal Tradeoff0.00.20.40.60.81.0x0.00.51.01.5ytraining databest fit quadratic model0.00.20.40.60.81.0x0.00.51.01.5ytest databest fit quadratic modelground truth h*8.1.1 A mathematical decomposition (for regression)

To formally state the bias-variance tradeoﬀ for regression problems, we con-
sider the following setup (which is an extension of the beginning paragraph
of Section 8.1).

120

• Draw a training dataset S = {x(i), y(i)}n

i=1 such that y(i) = h(cid:63)(x(i)) + ξ(i)

where ξ(i) ∈ N (0, σ2).

• Train a model on the dataset S, denoted by ˆhS.

• Take a test example (x, y) such that y = h(cid:63)(x) + ξ where ξ ∼ N (0, σ2),
and measure the expected test error (averaged over the random draw of
the training set S and the randomness of ξ)56

MSE(x) = ES,ξ[(y − hS(x))2]

(8.2)

We will decompose the MSE into a bias and variance term. We start by
stating a following simple mathematical tool that will be used twice below.

Claim 8.1.1: Suppose A and B are two independent real random variables
and E[A] = 0. Then, E[(A + B)2] = E[A2] + E[B2].

As a corollary, because a random variable A is independent with a con-

stant c, when E[A] = 0, we have E[(A + c)2] = E[A2] + c2.

The proof of the claim follows from expanding the square: E[(A + B)2] =
E[A2] + E[B2] + 2E[AB] = E[A2] + E[B2]. Here we used the independence to
show that E[AB] = E[A]E[B] = 0.

Using Claim 8.1.1 with A = ξ and B = h(cid:63)(x) − ˆhS(x), we have

MSE(x) = E[(y − hS(x))2] = E[(ξ + (h(cid:63)(x) − hS(x)))2]

(8.3)
= E[ξ2] + E[(h(cid:63)(x) − hS(x))2] (by Claim 8.1.1)
= σ2 + E[(h(cid:63)(x) − hS(x))2]
(8.4)

Then, let’s deﬁne havg(x) = ES[hS(x)] as the “average model”—the model
obtained by drawing an inﬁnite number of datasets, training on them, and
averaging their predictions on x. Note that havg is a hypothetical model for
analytical purposes that can not be obtained in reality (because we don’t

5For simplicity, the test input x is considered to be ﬁxed here, but the same conceptual

message holds when we average over the choice of x’s.

6The subscript under the expectation symbol is to emphasize the variables that are

considered as random by the expectation operation.

121

It turns out that for many cases, havg
have inﬁnite number of datasets).
is (approximately) equal to the the model obtained by training on a single
dataset with inﬁnite samples. Thus, we can also intuitively interpret havg this
way, which is consistent with our intuitive deﬁnition of bias in the previous
subsection.

We can further decompose MSE(x) by letting c = h(cid:63)(x)−havg(x) (which is
a constant that does not depend on the choice of S!) and A = havg(x)−hS(x)
in the corollary part of Claim 8.1.1:

MSE(x) = σ2 + E[(h(cid:63)(x) − hS(x))2]

= σ2 + (h(cid:63)(x) − havg(x))2 + E[(havg − hS(x))2]
=

+ (h(cid:63)(x) − havg(x))2
(cid:123)(cid:122)
(cid:125)
(cid:44) bias2

(cid:124)

+ var(hS(x))
(cid:125)
(cid:123)(cid:122)
(cid:44) variance

(cid:124)

σ2
(cid:124)(cid:123)(cid:122)(cid:125)
unavoidable

(8.5)
(8.6)
(8.7)

We call the second term the bias (square) and the third term the variance. As
discussed before, the bias captures the part of the error that are introduced
due to the lack of expressivity of the model. Recall that havg can be thought
of as the best possible model learned even with inﬁnite data. Thus, the bias is
not due to the lack of data, but is rather caused by that the family of models
fundamentally cannot approximate the h(cid:63). For example, in the illustrating
example in Figure 8.2, because any linear model cannot approximate the
true quadratic function h(cid:63), neither can havg, and thus the bias term has to
be large.

The variance term captures how the random nature of the ﬁnite dataset
It measures the sensitivity of the
introduces errors in the learned model.
learned model to the randomness in the dataset. It often decreases as the
size of the dataset increases.

There is nothing we can do about the ﬁrst term σ2 as we can not predict

the noise ξ by deﬁnition.

Finally, we note that the bias-variance decomposition for classiﬁcation
is much less clear than for regression problems. There have been several
proposals, but there is as yet no agreement on what is the “right” and/or
the most useful formalism.

8.2 The double descent phenomenon

Model-wise double descent. Recent works have demonstrated that the
test error can present a “double descent” phenomenon in a range of machine

122

learning models including linear models and deep neural networks.7 The
conventional wisdom, as discussed in Section 8.1, is that as we increase the
model complexity, the test error ﬁrst decreases and then increases, as illus-
trated in Figure 8.8. However, in many cases, we empirically observe that
the test error can have a second descent—it ﬁrst decreases, then increases
to a peak around when the model size is large enough to ﬁt all the training
data very well, and then decreases again in the so-called overparameterized
regime, where the number of parameters is larger than the number of data
points. See Figure 8.10 for an illustration of the typical curves of test errors
against model complexity (measured by the number of parameters). To some
extent, the overparameterized regime with the second descent is considered as
new to the machine learning community—partly because lightly-regularized,
overparameterized models are only extensively used in the deep learning era.
A practical implication of the phenomenon is that one should not hold back
from scaling into and experimenting with over-parametrized models because
the test error may well decrease again to a level even smaller than the previ-
ous lowest point. Actually, in many cases, larger overparameterized models
always lead to a better test performance (meaning there won’t be a second
ascent after the second descent).

Figure 8.10: A typical model-wise double descent phenomenon. As the num-
ber of parameters increases, the test error ﬁrst decreases when the number of
parameters is smaller than the training data. Then in the overparameterized
regime, the test error decreases again.

7The discovery of the phenomenon perhaps dates back to Opper [1995, 2001], and has

been recently popularized by Belkin et al. [2020], Hastie et al. [2019], etc.

# parameterstesterrortypicallywhen # parametersis sufficient to fit the dataclassical regime:bias-variance tradeoffmodern regime:over-parameterization123

Sample-wise double descent. A priori, we would expect that more
training examples always lead to smaller test errors—more samples give
strictly more information for the algorithm to learn from. However, recent
work [Nakkiran, 2019] observes that the test error is not monotonically de-
creasing as we increase the sample size. Instead, as shown in Figure 8.11, the
test error decreases, and then increases and peaks around when the number
of examples (denoted by n) is similar to the number of parameters (denoted
by d), and then decreases again. We refer to this as the sample-wise dou-
ble descent phenomenon. To some extent, sample-wise double descent and
model-wise double descent are essentially describing similar phenomena—the
test error is peaked when n ≈ d.

Explanation and mitigation strategy. The sample-wise double descent,
or, in particular, the peak of test error at n ≈ d, suggests that the existing
training algorithms evaluated in these experiments are far from optimal when
n ≈ d. We will be better oﬀ by tossing away some examples and run the
algorithms with a smaller sample size to steer clear of the peak. In other
words, in principle, there are other algorithms that can achieve smaller test
error when n ≈ d, but the algorithms evaluated in these experiments fail to
do so. The sub-optimality of the learning procedure appears to be the culprit
of the peak in both sample-wise and model-wise double descent.

Indeed, with an optimally-tuned regularization (which will be discussed
more in Section 9), the test error in the n ≈ d regime can be dramatically
improved, and the model-wise and sample-wise double descent are both mit-
igated. See Figure 8.11.

The intuition above only explains the peak in the model-wise and sample-
wise double descent, but does not explain the second descent in the model-
wise double descent—why overparameterized models are able to generalize
so well. The theoretical understanding of overparameterized models is an ac-
tive research area with many recent advances. A typical explanation is that
the commonly-used optimizers such as gradient descent provide an implicit
regularization eﬀect (which will be discussed in more detail in Section 9.2).
In other words, even in the overparameterized regime and with an unregular-
ized loss function, the model is still implicitly regularized, and thus exhibits
a better test performance than an arbitrary solution that ﬁts the data. For
example, for linear models, when n (cid:28) d, the gradient descent optimizer with
zero initialization ﬁnds the minimum norm solution that ﬁts the data (in-
stead of an arbitrary solution that ﬁts the data), and the minimum norm reg-
ularizer turns out to be a suﬃciently good for the overparameterized regime
(but it’s not a good regularizer when n ≈ d, resulting in the peak of test

error).

124

Figure 8.11: Left: The sample-wise double descent phenomenon for linear
models. Right: The sample-wise double descent with diﬀerent regularization
strength for linear models. Using the optimal regularization parameter λ
(optimally tuned for each n, shown in green solid curve) mitigates double
descent. Setup: The data distribution of (x, y) is x ∼ N (0, Id) and y ∼
x(cid:62)β + N (0, σ2) where d = 500, σ = 0.5 and (cid:107)β(cid:107)2 = 1.8

Finally, we also remark that the double descent phenomenon has been
mostly observed when the model complexity is measured by the number of
parameters. It is unclear if and when the number of parameters is the best
complexity measure of a model. For example, in many situations, the norm
of the models is used as a complexity measure. As shown in Figure 8.12
right, for a particular linear case, if we plot the test error against the norm
of the learnt model, the double descent phenomenon no longer occurs. This
is partly because the norm of the learned model is also peaked around n ≈ d
(See Figure 8.12 (middle) or Belkin et al. [2019], Mei and Montanari [2022],
and discussions in Section 10.8 of James et al. [2021]). For deep neural
networks, the correct complexity measure is even more elusive. The study of
double descent phenomenon is an active research topic.

8The ﬁgure is reproduced from Figure 1 of Nakkiran et al. [2020]. Similar phenomenon

are also observed in Hastie et al. [2022], Mei and Montanari [2022]

02004006008001000Num Samples0.000.250.500.751.001.251.501.752.00Test ErrorTest Error vs. # SamplesTest Error125

Figure 8.12: Left: The double descent phenomenon, where the number of pa-
rameters is used as the model complexity. Middle: The norm of the learned
model is peaked around n ≈ d. Right: The test error against the norm of
the learnt model. The color bar indicate the number of parameters and the
arrows indicates the direction of increasing model size. Their relationship
are closer to the convention wisdom than to a double descent. Setup: We
consider a linear regression with a ﬁxed dataset of size n = 500. The input
x is a random ReLU feature on Fashion-MNIST, and output y ∈ R10 is the
one-hot label. This is the same setting as in Section 5.2 of Nakkiran et al.
[2020].

02505007501000# parameters0.00.20.40.60.81.0test errortest error vs. # params02004006008001000# parameters010203040normnorm vs. # params010203040norm0.00.20.40.60.81.0test errord=n# parameterstest error vs. norm020040060080010008.3 Sample

complexity bounds

(optional

126

readings)

8.3.1 Preliminaries

In this set of notes, we begin our foray into learning theory. Apart from
being interesting and enlightening in its own right, this discussion will also
help us hone our intuitions and derive rules of thumb about how to best
apply learning algorithms in diﬀerent settings. We will also seek to answer
a few questions: First, can we make formal the bias/variance tradeoﬀ that
was just discussed? This will also eventually lead us to talk about model
selection methods, which can, for instance, automatically decide what order
polynomial to ﬁt to a training set. Second, in machine learning it’s really
generalization error that we care about, but most learning algorithms ﬁt their
models to the training set. Why should doing well on the training set tell us
anything about generalization error? Speciﬁcally, can we relate error on the
training set to generalization error? Third and ﬁnally, are there conditions
under which we can actually prove that learning algorithms will work well?

We start with two simple but very useful lemmas.

Lemma. (The union bound). Let A1, A2, . . . , Ak be k diﬀerent events (that
may not be independent). Then

P (A1 ∪ · · · ∪ Ak) ≤ P (A1) + . . . + P (Ak).

In probability theory, the union bound is usually stated as an axiom
(and thus we won’t try to prove it), but it also makes intuitive sense: The
probability of any one of k events happening is at most the sum of the
probabilities of the k diﬀerent events.

Lemma. (Hoeﬀding inequality) Let Z1, . . . , Zn be n independent and iden-
tically distributed (iid) random variables drawn from a Bernoulli(φ) distri-
bution. I.e., P (Zi = 1) = φ, and P (Zi = 0) = 1 − φ. Let ˆφ = (1/n) (cid:80)n
i=1 Zi
be the mean of these random variables, and let any γ > 0 be ﬁxed. Then

P (|φ − ˆφ| > γ) ≤ 2 exp(−2γ2n)

This lemma (which in learning theory is also called the Chernoﬀ bound)
says that if we take ˆφ—the average of n Bernoulli(φ) random variables—to
be our estimate of φ, then the probability of our being far from the true value
is small, so long as n is large. Another way of saying this is that if you have
a biased coin whose chance of landing on heads is φ, then if you toss it n

127

times and calculate the fraction of times that it came up heads, that will be
a good estimate of φ with high probability (if n is large).

Using just these two lemmas, we will be able to prove some of the deepest

and most important results in learning theory.

To simplify our exposition, let’s restrict our attention to binary classiﬁca-
tion in which the labels are y ∈ {0, 1}. Everything we’ll say here generalizes
to other problems, including regression and multi-class classiﬁcation.

We assume we are given a training set S = {(x(i), y(i)); i = 1, . . . , n} of size
n, where the training examples (x(i), y(i)) are drawn iid from some probability
distribution D. For a hypothesis h, we deﬁne the training error (also called
the empirical risk or empirical error in learning theory) to be

ˆε(h) =

1
n

n
(cid:88)

i=1

1{h(x(i)) (cid:54)= y(i)}.

This is just the fraction of training examples that h misclassiﬁes. When we
want to make explicit the dependence of ˆε(h) on the training set S, we may
also write this a ˆεS(h). We also deﬁne the generalization error to be

ε(h) = P(x,y)∼D(h(x) (cid:54)= y).

I.e. this is the probability that, if we now draw a new example (x, y) from
the distribution D, h will misclassify it.

Note that we have assumed that the training data was drawn from the
same distribution D with which we’re going to evaluate our hypotheses (in
the deﬁnition of generalization error). This is sometimes also referred to as
one of the PAC assumptions.9

Consider the setting of linear classiﬁcation, and let hθ(x) = 1{θT x ≥ 0}.
What’s a reasonable way of ﬁtting the parameters θ? One approach is to try
to minimize the training error, and pick

ˆθ = arg min

θ

ˆε(hθ).

We call this process empirical risk minimization (ERM), and the resulting
hypothesis output by the learning algorithm is ˆh = hˆθ. We think of ERM
as the most “basic” learning algorithm, and it will be this algorithm that we

9PAC stands for “probably approximately correct,” which is a framework and set of
assumptions under which numerous results on learning theory were proved. Of these, the
assumption of training and testing on the same distribution, and the assumption of the
independently drawn training examples, were the most important.

128

focus on in these notes. (Algorithms such as logistic regression can also be
viewed as approximations to empirical risk minimization.)

In our study of learning theory, it will be useful to abstract away from
the speciﬁc parameterization of hypotheses and from issues such as whether
we’re using a linear classiﬁer. We deﬁne the hypothesis class H used by a
learning algorithm to be the set of all classiﬁers considered by it. For linear
classiﬁcation, H = {hθ : hθ(x) = 1{θT x ≥ 0}, θ ∈ Rd+1} is thus the set of
all classiﬁers over X (the domain of the inputs) where the decision boundary
is linear. More broadly, if we were studying, say, neural networks, then we
could let H be the set of all classiﬁers representable by some neural network
architecture.

Empirical risk minimization can now be thought of as a minimization over
the class of functions H, in which the learning algorithm picks the hypothesis:

ˆh = arg min
h∈H

ˆε(h)

8.3.2 The case of ﬁnite H

Let’s start by considering a learning problem in which we have a ﬁnite hy-
pothesis class H = {h1, . . . , hk} consisting of k hypotheses. Thus, H is just a
set of k functions mapping from X to {0, 1}, and empirical risk minimization
selects ˆh to be whichever of these k functions has the smallest training error.
We would like to give guarantees on the generalization error of ˆh. Our
strategy for doing so will be in two parts: First, we will show that ˆε(h) is a
reliable estimate of ε(h) for all h. Second, we will show that this implies an
upper-bound on the generalization error of ˆh.

Take any one, ﬁxed, hi ∈ H. Consider a Bernoulli random variable Z
whose distribution is deﬁned as follows. We’re going to sample (x, y) ∼ D.
I.e., we’re going to draw one example,
Then, we set Z = 1{hi(x) (cid:54)= y}.
and let Z indicate whether hi misclassiﬁes it. Similarly, we also deﬁne Zj =
1{hi(x(j)) (cid:54)= y(j)}. Since our training set was drawn iid from D, Z and the
Zj’s have the same distribution.

We see that the misclassiﬁcation probability on a randomly drawn
example—that is, ε(h)—is exactly the expected value of Z (and Zj). More-
over, the training error can be written

ˆε(hi) =

1
n

n
(cid:88)

j=1

Zj.

Thus, ˆε(hi) is exactly the mean of the n random variables Zj that are drawn
iid from a Bernoulli distribution with mean ε(hi). Hence, we can apply the

129

Hoeﬀding inequality, and obtain

P (|ε(hi) − ˆε(hi)| > γ) ≤ 2 exp(−2γ2n).

This shows that, for our particular hi, training error will be close to
generalization error with high probability, assuming n is large. But we don’t
just want to guarantee that ε(hi) will be close to ˆε(hi) (with high probability)
for just only one particular hi. We want to prove that this will be true
simultaneously for all h ∈ H. To do so, let Ai denote the event that |ε(hi) −
ˆε(hi)| > γ. We’ve already shown that, for any particular Ai, it holds true
that P (Ai) ≤ 2 exp(−2γ2n). Thus, using the union bound, we have that

P (∃ h ∈ H.|ε(hi) − ˆε(hi)| > γ) = P (A1 ∪ · · · ∪ Ak)

≤

≤

k
(cid:88)

i=1
k
(cid:88)

i=1

P (Ai)

2 exp(−2γ2n)

= 2k exp(−2γ2n)

If we subtract both sides from 1, we ﬁnd that

P (¬∃ h ∈ H.|ε(hi) − ˆε(hi)| > γ) = P (∀h ∈ H.|ε(hi) − ˆε(hi)| ≤ γ)

≥ 1 − 2k exp(−2γ2n)

(The “¬” symbol means “not.”)
So, with probability at least 1 −
2k exp(−2γ2n), we have that ε(h) will be within γ of ˆε(h) for all h ∈ H.
This is called a uniform convergence result, because this is a bound that
holds simultaneously for all (as opposed to just one) h ∈ H.

In the discussion above, what we did was, for particular values of n and
γ, give a bound on the probability that for some h ∈ H, |ε(h) − ˆε(h)| > γ.
There are three quantities of interest here: n, γ, and the probability of error;
we can bound either one in terms of the other two.

For instance, we can ask the following question: Given γ and some δ > 0,
how large must n be before we can guarantee that with probability at least
1 − δ, training error will be within γ of generalization error? By setting
δ = 2k exp(−2γ2n) and solving for n, [you should convince yourself this is
the right thing to do!], we ﬁnd that if

n ≥

1
2γ2 log

2k
δ

,

130

then with probability at least 1 − δ, we have that |ε(h) − ˆε(h)| ≤ γ for all
h ∈ H. (Equivalently, this shows that the probability that |ε(h) − ˆε(h)| > γ
for some h ∈ H is at most δ.) This bound tells us how many training
examples we need in order make a guarantee. The training set size n that
a certain method or algorithm requires in order to achieve a certain level of
performance is also called the algorithm’s sample complexity.

The key property of the bound above is that the number of training
examples needed to make this guarantee is only logarithmic in k, the number
of hypotheses in H. This will be important later.

Similarly, we can also hold n and δ ﬁxed and solve for γ in the previous
equation, and show [again, convince yourself that this is right!] that with
probability 1 − δ, we have that for all h ∈ H,

|ˆε(h) − ε(h)| ≤

(cid:114)

1
2n

log

2k
δ

.

Now, let’s assume that uniform convergence holds, i.e., that |ε(h)−ˆε(h)| ≤
γ for all h ∈ H. What can we prove about the generalization of our learning
algorithm that picked ˆh = arg minh∈H ˆε(h)?

Deﬁne h∗ = arg minh∈H ε(h) to be the best possible hypothesis in H. Note
that h∗ is the best that we could possibly do given that we are using H, so
it makes sense to compare our performance to that of h∗. We have:

ε(ˆh) ≤ ˆε(ˆh) + γ
≤ ˆε(h∗) + γ
≤ ε(h∗) + 2γ

The ﬁrst line used the fact that |ε(ˆh)− ˆε(ˆh)| ≤ γ (by our uniform convergence
assumption). The second used the fact that ˆh was chosen to minimize ˆε(h),
and hence ˆε(ˆh) ≤ ˆε(h) for all h, and in particular ˆε(ˆh) ≤ ˆε(h∗). The third
line used the uniform convergence assumption again, to show that ˆε(h∗) ≤
ε(h∗) + γ. So, what we’ve shown is the following: If uniform convergence
occurs, then the generalization error of ˆh is at most 2γ worse than the best
possible hypothesis in H!

Let’s put all this together into a theorem.

Theorem. Let |H| = k, and let any n, δ be ﬁxed. Then with probability at
least 1 − δ, we have that

(cid:18)

ε(ˆh) ≤

(cid:19)

(cid:114)

min
h∈H

ε(h)

+ 2

1
2n

log

2k
δ

.

131

This is proved by letting γ equal the

· term, using our previous argu-
ment that uniform convergence occurs with probability at least 1 − δ, and
then noting that uniform convergence implies ε(h) is at most 2γ higher than
ε(h∗) = minh∈H ε(h) (as we showed previously).

√

This also quantiﬁes what we were saying previously saying about the
bias/variance tradeoﬀ in model selection. Speciﬁcally, suppose we have some
hypothesis class H, and are considering switching to some much larger hy-
pothesis class H(cid:48) ⊇ H.
If we switch to H(cid:48), then the ﬁrst term minh ε(h)
can only decrease (since we’d then be taking a min over a larger set of func-
tions). Hence, by learning using a larger hypothesis class, our “bias” can
· term would also
only decrease. However, if k increases, then the second 2
increase. This increase corresponds to our “variance” increasing when we use
a larger hypothesis class.

√

By holding γ and δ ﬁxed and solving for n like we did before, we can also

obtain the following sample complexity bound:
Corollary. Let |H| = k, and let any δ, γ be ﬁxed. Then for ε(ˆh) ≤
minh∈H ε(h) + 2γ to hold with probability at least 1 − δ, it suﬃces that

n ≥

2k
δ

1
2γ2 log
(cid:18) 1
γ2 log

(cid:19)

,

k
δ

= O

8.3.3 The case of inﬁnite H

We have proved some useful theorems for the case of ﬁnite hypothesis classes.
But many hypothesis classes, including any parameterized by real numbers
(as in linear classiﬁcation) actually contain an inﬁnite number of functions.
Can we prove similar results for this setting?

Let’s start by going through something that is not the “right” argument.
Better and more general arguments exist, but this will be useful for honing
our intuitions about the domain.

Suppose we have an H that is parameterized by d real numbers. Since we
are using a computer to represent real numbers, and IEEE double-precision
ﬂoating point (double’s in C) uses 64 bits to represent a ﬂoating point num-
ber, this means that our learning algorithm, assuming we’re using double-
precision ﬂoating point, is parameterized by 64d bits. Thus, our hypothesis
class really consists of at most k = 264d diﬀerent hypotheses. From the Corol-
lary at the end of the previous section, we therefore ﬁnd that, to guarantee

132

(cid:17)

(cid:16) 1
γ2 log 264d

ε(ˆh) ≤ ε(h∗) + 2γ, with to hold with probability at least 1 − δ, it suﬃces that
= Oγ,δ(d). (The γ, δ subscripts indicate
n ≥ O
that the last big-O is hiding constants that may depend on γ and δ.) Thus,
the number of training examples needed is at most linear in the parameters
of the model.

(cid:16) d
γ2 log 1

= O

(cid:17)

δ

δ

The fact that we relied on 64-bit ﬂoating point makes this argument not
entirely satisfying, but the conclusion is nonetheless roughly correct: If what
we try to do is minimize training error, then in order to learn “well” using a
hypothesis class that has d parameters, generally we’re going to need on the
order of a linear number of training examples in d.

(At this point, it’s worth noting that these results were proved for an al-
gorithm that uses empirical risk minimization. Thus, while the linear depen-
dence of sample complexity on d does generally hold for most discriminative
learning algorithms that try to minimize training error or some approxima-
tion to training error, these conclusions do not always apply as readily to
discriminative learning algorithms. Giving good theoretical guarantees on
many non-ERM learning algorithms is still an area of active research.)

The other part of our previous argument that’s slightly unsatisfying is
that it relies on the parameterization of H. Intuitively, this doesn’t seem like
it should matter: We had written the class of linear classiﬁers as hθ(x) =
1{θ0 + θ1x1 + · · · θdxd ≥ 0}, with n + 1 parameters θ0, . . . , θd. But it could
also be written hu,v(x) = 1{(u2
d)xd ≥ 0}
with 2d + 2 parameters ui, vi. Yet, both of these are just deﬁning the same
H: The set of linear classiﬁers in d dimensions.

1)x1 + · · · (u2

0) + (u2

d − v2

0 − v2

1 − v2

To derive a more satisfying argument, let’s deﬁne a few more things.
Given a set S = {x(i), . . . , x(D)} (no relation to the training set) of points
x(i) ∈ X , we say that H shatters S if H can realize any labeling on S.
I.e., if for any set of labels {y(1), . . . , y(D)}, there exists some h ∈ H so that
h(x(i)) = y(i) for all i = 1, . . . D.

Given a hypothesis class H, we then deﬁne its Vapnik-Chervonenkis
dimension, written VC(H), to be the size of the largest set that is shattered
by H. (If H can shatter arbitrarily large sets, then VC(H) = ∞.)

For instance, consider the following set of three points:

133

Can the set H of linear classiﬁers in two dimensions (h(x) = 1{θ0 +θ1x1 +
θ2x2 ≥ 0}) can shatter the set above? The answer is yes. Speciﬁcally, we
see that, for any of the eight possible labelings of these points, we can ﬁnd a
linear classiﬁer that obtains “zero training error” on them:

Moreover, it is possible to show that there is no set of 4 points that this
hypothesis class can shatter. Thus, the largest set that H can shatter is of
size 3, and hence VC(H) = 3.

Note that the VC dimension of H here is 3 even though there may be
sets of size 3 that it cannot shatter. For instance, if we had a set of three
points lying in a straight line (left ﬁgure), then there is no way to ﬁnd a linear
separator for the labeling of the three points shown below (right ﬁgure):

(cid:0)(cid:1)(cid:0)(cid:1)(cid:0)(cid:1)xx12xx12xx12xx12xx12xx12xx12xx12xx12134

In order words, under the deﬁnition of the VC dimension, in order to
prove that VC(H) is at least D, we need to show only that there’s at least
one set of size D that H can shatter.

The following theorem, due to Vapnik, can then be shown. (This is, many

would argue, the most important theorem in all of learning theory.)
Theorem. Let H be given, and let D = VC(H). Then with probability at
least 1 − δ, we have that for all h ∈ H,
(cid:32)(cid:114)

(cid:33)

|ε(h) − ˆε(h)| ≤ O

log

+

log

.

D
n

n
D

1
n

1
δ

Thus, with probability at least 1 − δ, we also have that:

ε(ˆh) ≤ ε(h∗) + O

(cid:32)(cid:114)

D
n

log

n
D

+

1
n

log

(cid:33)

.

1
δ

In other words, if a hypothesis class has ﬁnite VC dimension, then uniform
convergence occurs as n becomes large. As before, this allows us to give a
bound on ε(h) in terms of ε(h∗). We also have the following corollary:
Corollary. For |ε(h) − ˆε(h)| ≤ γ to hold for all h ∈ H (and hence ε(ˆh) ≤
ε(h∗) + 2γ) with probability at least 1 − δ, it suﬃces that n = Oγ,δ(D).

In other words, the number of training examples needed to learn “well”
using H is linear in the VC dimension of H. It turns out that, for “most”
hypothesis classes, the VC dimension (assuming a “reasonable” parameter-
ization) is also roughly linear in the number of parameters. Putting these
together, we conclude that for a given hypothesis class H (and for an algo-
rithm that tries to minimize training error), the number of training examples
needed to achieve generalization error close to that of the optimal classiﬁer
is usually roughly linear in the number of parameters of H.

xx12(cid:0)(cid:1)(cid:0)(cid:1)(cid:0)(cid:1)xx12Chapter 9

Regularization and model
selection

9.1 Regularization

Recall that as discussed in Section 8.1, overftting is typically a result of using
too complex models, and we need to choose a proper model complexity to
achieve the optimal bias-variance tradeoﬀ. When the model complexity is
measured by the number of parameters, we can vary the size of the model
(e.g., the width of a neural net). However, the correct, informative complex-
ity measure of the models can be a function of the parameters (e.g., (cid:96)2 norm
of the parameters), which may not necessarily depend on the number of pa-
rameters. In such cases, we will use regularization, an important technique
in machine learning, control the model complexity and prevent overﬁtting.

Regularization typically involves adding an additional term, called a reg-

ularizer and denoted by R(θ) here, to the training loss/cost function:

Jλ(θ) = J(θ) + λR(θ)

(9.1)

Here Jλ is often called the regularized loss, and λ ≥ 0 is called the regular-
ization parameter. The regularizer R(θ) is a nonnegative function (in almost
all cases). In classical methods, R(θ) is purely a function of the parameter θ,
but some modern approach allows R(θ) to depend on the training dataset.1
The regularizer R(θ) is typically chosen to be some measure of the com-
plexity of the model θ. Thus, when using the regularized loss, we aim to
ﬁnd a model that both ﬁt the data (a small loss J(θ)) and have a small

1Here our notations generally omit the dependency on the training dataset for
simplicity—we write J(θ) even though it obviously needs to depend on the training dataset.

135

136

model complexity (a small R(θ)). The balance between the two objectives is
controlled by the regularization parameter λ. When λ = 0, the regularized
loss is equivalent to the original loss. When λ is a suﬃciently small positive
number, minimizing the regularized loss is eﬀectively minimizing the original
loss with the regularizer as the tie-breaker. When the regularizer is extremely
large, then the original loss is not eﬀective (and likely the model will have a
large bias.)

2(cid:107)θ(cid:107)2
2.

The most commonly used regularization is perhaps (cid:96)2 regularization,
where R(θ) = 1
It encourages the optimizer to ﬁnd a model with
small (cid:96)2 norm. In deep learning, it’s oftentimes referred to as weight de-
cay, because gradient descent with learning rate η on the regularized loss
Rλ(θ) is equivalent to shrinking/decaying θ by a scalar factor of 1 − ηλ and
then applying the standard gradient

θ ← θ − η∇Jλ(θ) = θ − ηλθ − η∇J(θ)

= (1 − λη)θ
(cid:125)

(cid:123)(cid:122)
decaying weights

(cid:124)

−η∇J(θ)

(9.2)

Besides encouraging simpler models, regularization can also impose in-
ductive biases or structures on the model parameters. For example, suppose
we had a prior belief that the number of non-zeros in the ground-truth model
parameters is small,2—which is oftentimes called sparsity of the model—, we
can impose a regularization on the number of non-zeros in θ, denoted by
(cid:107)θ(cid:107)0, to leverage such a prior belief. Imposing additional structure of the
parameters narrows our search space and makes the complexity of the model
family smaller,—e.g., the family of sparse models can be thought of as having
lower complexity than the family of all models—, and thus tends to lead to a
better generalization. On the other hand, imposing additional structure may
risk increasing the bias. For example, if we regularize the sparsity strongly
but no sparse models can predict the label accurately, we will suﬀer from
large bias (analogously to the situation when we use linear models to learn
data than can only be represented by quadratic functions in Section 8.1.)

The sparsity of the parameters is not a continuous function of the param-
eters, and thus we cannot optimize it with (stochastic) gradient descent. A
common relaxation is to use R(θ) = (cid:107)θ(cid:107)1 as a continuous surrogate.3

2For linear models, this means the model just uses a few coordinates of the inputs to

make an accurate prediction.

3There has been a rich line of theoretical work that explains why (cid:107)θ(cid:107)1 is a good sur-
rogate for encouraging sparsity, but it’s beyond the scope of this course. An intuition is:
assuming the parameter is on the unit sphere, the parameter with smallest (cid:96)1 norm also

137

The R(θ) = (cid:107)θ(cid:107)1 (also called LASSO) and R(θ) = 1

2 are perhaps
among the most commonly used regularizers for linear models. Other norm
and powers of norms are sometimes also used. The (cid:96)2 norm regularization is
much more commonly used with kernel methods because (cid:96)1 regularization is
typically not compatible with the kernel trick (the optimal solution cannot
be written as functions of inner products of features.)

2(cid:107)θ(cid:107)2

In deep learning, the most commonly used regularizer is (cid:96)2 regularization
or weight decay. Other common ones include dropout, data augmentation,
regularizing the spectral norm of the weight matrices, and regularizing the
Lipschitzness of the model, etc. Regularization in deep learning is an ac-
tive research area, and it’s known that there is another implicit source of
regularization, as discussed in the next section.

9.2 Implicit regularization eﬀect (optional

reading)

The implicit regularization eﬀect of optimizers, or implicit bias or algorithmic
regularization, is a new concept/phenomenon observed in the deep learning
era. It largely refers to that the optimizers can implicitly impose structures
on parameters beyond what has been imposed by the regularized loss.

In most classical settings, the loss or regularized loss has a unique global
minimum, and thus any reasonable optimizer should converge to that global
minimum and cannot impose any additional preferences. However, in deep
learning, oftentimes the loss or regularized loss has more than one (approx-
imate) global minima, and diﬀerence optimizers may converge to diﬀerent
global minima. Though these global minima have the same or similar train-
ing losses, they may be of diﬀerent nature and have dramatically diﬀerent
generalization performance. See Figures 9.1 and 9.2 and its caption for an
illustration and some experiment results. For example, it’s possible that one
global minimum gives a much more Lipschitz or sparse model than others
and thus has a better test error. It turns out that many commonly-used op-
timizers (or their components) prefer or bias towards ﬁnding global minima
of certain properties, leading to a better test performance.

happen to be the sparsest parameter with only 1 non-zero coordinate. Thus, sparsity and
(cid:96)1 norm gives the same extremal points to some extent.

138

Figure 9.1: An Illustration that diﬀerent global minima of the training loss
can have diﬀerent test performance.

Figure 9.2: Left: Performance of neural networks trained by two diﬀerent
learning rates schedules on the CIFAR-10 dataset. Although both exper-
iments used exactly the same regularized losses and the optimizers ﬁt the
training data perfectly, the models’ generalization performance diﬀer much.
Right: On a diﬀerent synthetic dataset, optimizers with diﬀerent initializa-
tions have the same training error but diﬀerent generalization performance.4

In summary, the takehome message here is that the choice of optimizer
does not only aﬀect minimizing the training loss, but also imposes implicit
regularization and aﬀects the generalization of the model. Even if your cur-
rent optimizer already converges to a small training error perfectly, you may
still need to tune your optimizer for a better generalization, .

4The setting is the same as in Woodworth et al. [2020], HaoChen et al. [2020]

θloss139

One may wonder which components of the optimizers bias towards what
type of global minima and what type of global minima may generalize bet-
ter. These are open questions that researchers are actively investigating.
Empirical and theoretical research have oﬀered some clues and heuristics.
In many (but deﬁnitely far from all) situations, among those setting where
optimization can succeed in minimizing the training loss, the use of larger
initial learning rate, smaller initialization, smaller batch size, and momen-
tum appears to help with biasing towards more generalizable solutions. A
conjecture (that can be proven in certain simpliﬁed case) is that stochas-
ticity in the optimization process help the optimizer to ﬁnd ﬂatter global
minima (global minima where the curvature of the loss is small), and ﬂat
global minima tend to give more Lipschitz models and better generalization.
Characterizing the implicit regularization eﬀect formally is still a challenging
open research question.

9.3 Model selection via cross validation

Suppose we are trying select among several diﬀerent models for a learning
problem. For instance, we might be using a polynomial regression model
hθ(x) = g(θ0 + θ1x + θ2x2 + · · · + θkxk), and wish to decide if k should be
0, 1, . . . , or 10. How can we automatically select a model that represents
a good tradeoﬀ between the twin evils of bias and variance5? Alternatively,
suppose we want to automatically choose the bandwidth parameter τ for
locally weighted regression, or the parameter C for our (cid:96)1-regularized SVM.
How can we do that?

For the sake of concreteness, in these notes we assume we have some
ﬁnite set of models M = {M1, . . . , Md} that we’re trying to select among.
For instance, in our ﬁrst example above, the model Mi would be an i-th
degree polynomial regression model.
(The generalization to inﬁnite M is
not hard.6) Alternatively, if we are trying to decide between using an SVM,
a neural network or logistic regression, then M may contain these models.

5Given that we said in the previous set of notes that bias and variance are two very
diﬀerent beasts, some readers may be wondering if we should be calling them “twin” evils
here. Perhaps it’d be better to think of them as non-identical twins. The phrase “the
fraternal twin evils of bias and variance” doesn’t have the same ring to it, though.

6If we are trying to choose from an inﬁnite set of models, say corresponding to the
possible values of the bandwidth τ ∈ R+, we may discretize τ and consider only a ﬁnite
number of possible values for it. More generally, most of the algorithms described here
can all be viewed as performing optimization search in the space of models, and we can
perform this search over inﬁnite model classes as well.

140

Cross validation. Lets suppose we are, as usual, given a training set S.
Given what we know about empirical risk minimization, here’s what might
initially seem like a algorithm, resulting from using empirical risk minimiza-
tion for model selection:

1. Train each model Mi on S, to get some hypothesis hi.

2. Pick the hypotheses with the smallest training error.

This algorithm does not work. Consider choosing the degree of a poly-
nomial. The higher the degree of the polynomial, the better it will ﬁt the
training set S, and thus the lower the training error. Hence, this method will
always select a high-variance, high-degree polynomial model, which we saw
previously is often poor choice.

Here’s an algorithm that works better. In hold-out cross validation

(also called simple cross validation), we do the following:

1. Randomly split S into Strain (say, 70% of the data) and Scv (the remain-

ing 30%). Here, Scv is called the hold-out cross validation set.

2. Train each model Mi on Strain only, to get some hypothesis hi.

3. Select and output the hypothesis hi that had the smallest error ˆεScv(hi)
on the hold out cross validation set. (Here ˆεScv(h) denotes the average
error of h on the set of examples in Scv.) The error on the hold out
validation set is also referred to as the validation error.

By testing/validating on a set of examples Scv that the models were not
trained on, we obtain a better estimate of each hypothesis hi’s true general-
ization/test error. Thus, this approach is essentially picking the model with
the smallest estimated generalization/test error. The size of the validation
set depends on the total number of available examples. Usually, somewhere
between 1/4−1/3 of the data is used in the hold out cross validation set, and
30% is a typical choice. However, when the total dataset is huge, validation
set can be a smaller fraction of the total examples as long as the absolute
number of validation examples is decent. For example, for the ImageNet
dataset that has about 1M training images, the validation set is sometimes
set to be 50K images, which is only about 5% of the total examples.

Optionally, step 3 in the algorithm may also be replaced with selecting
the model Mi according to arg mini ˆεScv(hi), and then retraining Mi on the
entire training set S. (This is often a good idea, with one exception being
learning algorithms that are be very sensitive to perturbations of the initial

141

conditions and/or data. For these methods, Mi doing well on Strain does not
necessarily mean it will also do well on Scv, and it might be better to forgo
this retraining step.)

The disadvantage of using hold out cross validation is that it “wastes”
about 30% of the data. Even if we were to take the optional step of retraining
the model on the entire training set, it’s still as if we’re trying to ﬁnd a good
model for a learning problem in which we had 0.7n training examples, rather
than n training examples, since we’re testing models that were trained on
only 0.7n examples each time. While this is ﬁne if data is abundant and/or
cheap, in learning problems in which data is scarce (consider a problem with
n = 20, say), we’d like to do something better.

Here is a method, called k-fold cross validation, that holds out less

data each time:

1. Randomly split S into k disjoint subsets of m/k training examples each.

Lets call these subsets S1, . . . , Sk.

2. For each model Mi, we evaluate it as follows:

For j = 1, . . . , k

Train the model Mi on S1 ∪ · · · ∪ Sj−1 ∪ Sj+1 ∪ · · · Sk (i.e., train
on all the data except Sj) to get some hypothesis hij.
Test the hypothesis hij on Sj, to get ˆεSj (hij).

The estimated generalization error of model Mi is then calculated
as the average of the ˆεSj (hij)’s (averaged over j).

3. Pick the model Mi with the lowest estimated generalization error, and
retrain that model on the entire training set S. The resulting hypothesis
is then output as our ﬁnal answer.

A typical choice for the number of folds to use here would be k = 10.
While the fraction of data held out each time is now 1/k—much smaller
than before—this procedure may also be more computationally expensive
than hold-out cross validation, since we now need train to each model k
times.

While k = 10 is a commonly used choice, in problems in which data is
really scarce, sometimes we will use the extreme choice of k = m in order
to leave out as little data as possible each time. In this setting, we would
repeatedly train on all but one of the training examples in S, and test on that
held-out example. The resulting m = k errors are then averaged together to
obtain our estimate of the generalization error of a model. This method has

142

its own name; since we’re holding out one training example at a time, this
method is called leave-one-out cross validation.

Finally, even though we have described the diﬀerent versions of cross vali-
dation as methods for selecting a model, they can also be used more simply to
evaluate a single model or algorithm. For example, if you have implemented
some learning algorithm and want to estimate how well it performs for your
application (or if you have invented a novel learning algorithm and want to
report in a technical paper how well it performs on various test sets), cross
validation would give a reasonable way of doing so.

9.4 Bayesian statistics and regularization

In this section, we will talk about one more tool in our arsenal for our battle
against overﬁtting.

At the beginning of the quarter, we talked about parameter ﬁtting using
maximum likelihood estimation (MLE), and chose our parameters according
to

θMLE = arg max

θ

p(y(i)|x(i); θ).

n
(cid:89)

i=1

Throughout our subsequent discussions, we viewed θ as an unknown param-
eter of the world. This view of the θ as being constant-valued but unknown
is taken in frequentist statistics. In the frequentist this view of the world, θ
is not random—it just happens to be unknown—and it’s our job to come up
with statistical procedures (such as maximum likelihood) to try to estimate
this parameter.

An alternative way to approach our parameter estimation problems is to
take the Bayesian view of the world, and think of θ as being a random
variable whose value is unknown.
In this approach, we would specify a
prior distribution p(θ) on θ that expresses our “prior beliefs” about the
parameters. Given a training set S = {(x(i), y(i))}n
i=1, when we are asked to
make a prediction on a new value of x, we can then compute the posterior
distribution on the parameters

p(θ|S) =

=

p(S|θ)p(θ)
p(S)
(cid:0)(cid:81)n
θ ((cid:81)n

(cid:82)

i=1 p(y(i)|x(i), θ)(cid:1) p(θ)
i=1 p(y(i)|x(i), θ)p(θ)) dθ

(9.3)

In the equation above, p(y(i)|x(i), θ) comes from whatever model you’re using

143

for your learning problem. For example, if you are using Bayesian logistic re-
gression, then you might choose p(y(i)|x(i), θ) = hθ(x(i))y(i)(1−hθ(x(i)))(1−y(i)),
where hθ(x(i)) = 1/(1 + exp(−θT x(i))).7

When we are given a new test example x and asked to make it prediction
on it, we can compute our posterior distribution on the class label using the
posterior distribution on θ:

p(y|x, S) =

(cid:90)

θ

p(y|x, θ)p(θ|S)dθ

(9.4)

In the equation above, p(θ|S) comes from Equation (9.3). Thus, for example,
if the goal is to the predict the expected value of y given x, then we would
output8

(cid:90)

E[y|x, S] =

yp(y|x, S)dy

y

The procedure that we’ve outlined here can be thought of as doing “fully
Bayesian” prediction, where our prediction is computed by taking an average
with respect to the posterior p(θ|S) over θ. Unfortunately, in general it is
computationally very diﬃcult to compute this posterior distribution. This is
because it requires taking integrals over the (usually high-dimensional) θ as
in Equation (9.3), and this typically cannot be done in closed-form.

Thus, in practice we will instead approximate the posterior distribution
for θ. One common approximation is to replace our posterior distribution for
θ (as in Equation 9.4) with a single point estimate. The MAP (maximum
a posteriori) estimate for θ is given by

θMAP = arg max

θ

n
(cid:89)

i=1

p(y(i)|x(i), θ)p(θ).

(9.5)

Note that this is the same formulas as for the MLE (maximum likelihood)
estimate for θ, except for the prior p(θ) term at the end.

In practical applications, a common choice for the prior p(θ) is to assume
that θ ∼ N (0, τ 2I). Using this choice of prior, the ﬁtted parameters θMAP will
have smaller norm than that selected by maximum likelihood. In practice,
this causes the Bayesian MAP estimate to be less susceptible to overﬁtting
than the ML estimate of the parameters. For example, Bayesian logistic
regression turns out to be an eﬀective algorithm for text classiﬁcation, even
though in text classiﬁcation we usually have d (cid:29) n.

7Since we are now viewing θ as a random variable, it is okay to condition on it value,

and write “p(y|x, θ)” instead of “p(y|x; θ).”

8The integral below would be replaced by a summation if y is discrete-valued.

Part IV

Unsupervised learning

144

Chapter 10

Clustering and the k-means
algorithm

In the clustering problem, we are given a training set {x(1), . . . , x(n)}, and
want to group the data into a few cohesive “clusters.” Here, x(i) ∈ Rd
as usual; but no labels y(i) are given. So, this is an unsupervised learning
problem.

The k-means clustering algorithm is as follows:

1. Initialize cluster centroids µ1, µ2, . . . , µk ∈ Rd randomly.

2. Repeat until convergence: {

For every i, set

For each j, set

}

c(i) := arg min

j

||x(i) − µj||2.

µj :=

(cid:80)n

i=1 1{c(i) = j}x(i)
(cid:80)n
i=1 1{c(i) = j}

.

In the algorithm above, k (a parameter of the algorithm) is the number
of clusters we want to ﬁnd; and the cluster centroids µj represent our current
guesses for the positions of the centers of the clusters. To initialize the cluster
centroids (in step 1 of the algorithm above), we could choose k training
examples randomly, and set the cluster centroids to be equal to the values of
these k examples. (Other initialization methods are also possible.)

The inner-loop of the algorithm repeatedly carries out two steps: (i)
“Assigning” each training example x(i) to the closest cluster centroid µj, and

145

146

Figure 10.1: K-means algorithm. Training examples are shown as dots, and
cluster centroids are shown as crosses. (a) Original dataset. (b) Random ini-
tial cluster centroids (in this instance, not chosen to be equal to two training
examples). (c-f) Illustration of running two iterations of k-means. In each
iteration, we assign each training example to the closest cluster centroid
(shown by “painting” the training examples the same color as the cluster
centroid to which is assigned); then we move each cluster centroid to the
mean of the points assigned to it. (Best viewed in color.) Images courtesy
Michael Jordan.

(ii) Moving each cluster centroid µj to the mean of the points assigned to it.
Figure 10.1 shows an illustration of running k-means.

Is the k-means algorithm guaranteed to converge? Yes it is, in a certain

sense. In particular, let us deﬁne the distortion function to be:

J(c, µ) =

n
(cid:88)

i=1

||x(i) − µc(i)||2

Thus, J measures the sum of squared distances between each training exam-
ple x(i) and the cluster centroid µc(i) to which it has been assigned. It can
be shown that k-means is exactly coordinate descent on J. Speciﬁcally, the
inner-loop of k-means repeatedly minimizes J with respect to c while holding
µ ﬁxed, and then minimizes J with respect to µ while holding c ﬁxed. Thus,

147

J must monotonically decrease, and the value of J must converge. (Usu-
ally, this implies that c and µ will converge too. In theory, it is possible for
k-means to oscillate between a few diﬀerent clusterings—i.e., a few diﬀerent
values for c and/or µ—that have exactly the same value of J, but this almost
never happens in practice.)

The distortion function J is a non-convex function, and so coordinate
descent on J is not guaranteed to converge to the global minimum. In other
words, k-means can be susceptible to local optima. Very often k-means will
work ﬁne and come up with very good clusterings despite this. But if you
are worried about getting stuck in bad local minima, one common thing to
do is run k-means many times (using diﬀerent random initial values for the
cluster centroids µj). Then, out of all the diﬀerent clusterings found, pick
the one that gives the lowest distortion J(c, µ).

Chapter 11

EM algorithms

In this set of notes, we discuss the EM (Expectation-Maximization) algorithm
for density estimation.

11.1 EM for mixture of Gaussians

Suppose that we are given a training set {x(1), . . . , x(n)} as usual. Since we
are in the unsupervised learning setting, these points do not come with any
labels.

We wish to model the data by specifying a joint distribution p(x(i), z(i)) =
p(x(i)|z(i))p(z(i)). Here, z(i) ∼ Multinomial(φ) (where φj ≥ 0, (cid:80)k
j=1 φj = 1,
and the parameter φj gives p(z(i) = j)), and x(i)|z(i) = j ∼ N (µj, Σj). We
let k denote the number of values that the z(i)’s can take on. Thus, our
model posits that each x(i) was generated by randomly choosing z(i) from
{1, . . . , k}, and then x(i) was drawn from one of k Gaussians depending on
z(i). This is called the mixture of Gaussians model. Also, note that the
z(i)’s are latent random variables, meaning that they’re hidden/unobserved.
This is what will make our estimation problem diﬃcult.

The parameters of our model are thus φ, µ and Σ. To estimate them, we

can write down the likelihood of our data:

(cid:96)(φ, µ, Σ) =

=

n
(cid:88)

i=1
n
(cid:88)

i=1

log p(x(i); φ, µ, Σ)

log

k
(cid:88)

z(i)=1

p(x(i)|z(i); µ, Σ)p(z(i); φ).

However, if we set to zero the derivatives of this formula with respect to

148

149

the parameters and try to solve, we’ll ﬁnd that it is not possible to ﬁnd the
maximum likelihood estimates of the parameters in closed form. (Try this
yourself at home.)

The random variables z(i) indicate which of the k Gaussians each x(i)
had come from. Note that if we knew what the z(i)’s were, the maximum
likelihood problem would have been easy. Speciﬁcally, we could then write
down the likelihood as

(cid:96)(φ, µ, Σ) =

n
(cid:88)

i=1

log p(x(i)|z(i); µ, Σ) + log p(z(i); φ).

Maximizing this with respect to φ, µ and Σ gives the parameters:

φj =

µj =

Σj =

n
(cid:88)

1
n
(cid:80)n

(cid:80)n

1{z(i) = j},

i=1
i=1 1{z(i) = j}x(i)
(cid:80)n
i=1 1{z(i) = j}

,

i=1 1{z(i) = j}(x(i) − µj)(x(i) − µj)T
i=1 1{z(i) = j}

(cid:80)n

.

Indeed, we see that if the z(i)’s were known, then maximum likelihood
estimation becomes nearly identical to what we had when estimating the
parameters of the Gaussian discriminant analysis model, except that here
the z(i)’s playing the role of the class labels.1

However, in our density estimation problem, the z(i)’s are not known.

What can we do?

The EM algorithm is an iterative algorithm that has two main steps.
Applied to our problem, in the E-step, it tries to “guess” the values of the
z(i)’s. In the M-step, it updates the parameters of our model based on our
guesses. Since in the M-step we are pretending that the guesses in the ﬁrst
part were correct, the maximization becomes easy. Here’s the algorithm:

Repeat until convergence: {

(E-step) For each i, j, set

w(i)
j

:= p(z(i) = j|x(i); φ, µ, Σ)

1There are other minor diﬀerences in the formulas here from what we’d obtained in
PS1 with Gaussian discriminant analysis, ﬁrst because we’ve generalized the z(i)’s to be
multinomial rather than Bernoulli, and second because here we are using a diﬀerent Σj
for each Gaussian.

(M-step) Update the parameters:

150

φj

:=

µj

:=

Σj

:=

1
n

n
(cid:88)

i=1

w(i)
j

,

(cid:80)n

,

i=1 w(i)
j x(i)
(cid:80)n
i=1 w(i)
i=1 w(i)

j

(cid:80)n

j (x(i) − µj)(x(i) − µj)T

(cid:80)n

i=1 w(i)

j

}

In the E-step, we calculate the posterior probability of our parameters
the z(i)’s, given the x(i) and using the current setting of our parameters. I.e.,
using Bayes rule, we obtain:

p(z(i) = j|x(i); φ, µ, Σ) =

p(x(i)|z(i) = j; µ, Σ)p(z(i) = j; φ)
l=1 p(x(i)|z(i) = l; µ, Σ)p(z(i) = l; φ)

(cid:80)k

Here, p(x(i)|z(i) = j; µ, Σ) is given by evaluating the density of a Gaussian
with mean µj and covariance Σj at x(i); p(z(i) = j; φ) is given by φj, and so
on. The values w(i)
j calculated in the E-step represent our “soft” guesses2 for
the values of z(i).

Also, you should contrast the updates in the M-step with the formulas we
had when the z(i)’s were known exactly. They are identical, except that in-
stead of the indicator functions “1{z(i) = j}” indicating from which Gaussian
each datapoint had come, we now instead have the w(i)
j

’s.

The EM-algorithm is also reminiscent of the K-means clustering algo-
rithm, except that instead of the “hard” cluster assignments c(i), we instead
have the “soft” assignments w(i)
. Similar to K-means, it is also susceptible
j
to local optima, so reinitializing at several diﬀerent initial parameters may
be a good idea.

It’s clear that the EM algorithm has a very natural interpretation of
repeatedly trying to guess the unknown z(i)’s; but how did it come about,
and can we make any guarantees about it, such as regarding its convergence?
In the next set of notes, we will describe a more general view of EM, one

2The term “soft” refers to our guesses being probabilities and taking values in [0, 1]; in
contrast, a “hard” guess is one that represents a single best guess (such as taking values
in {0, 1} or {1, . . . , k}).

151

that will allow us to easily apply it to other estimation problems in which
there are also latent variables, and which will allow us to give a convergence
guarantee.

11.2 Jensen’s inequality

We begin our discussion with a very useful result called Jensen’s inequality
Let f be a function whose domain is the set of real numbers. Recall that
f is a convex function if f (cid:48)(cid:48)(x) ≥ 0 (for all x ∈ R). In the case of f taking
vector-valued inputs, this is generalized to the condition that its hessian H
is positive semi-deﬁnite (H ≥ 0). If f (cid:48)(cid:48)(x) > 0 for all x, then we say f is
strictly convex (in the vector-valued case, the corresponding statement is
that H must be positive deﬁnite, written H > 0). Jensen’s inequality can
then be stated as follows:

Theorem. Let f be a convex function, and let X be a random variable.
Then:

E[f (X)] ≥ f (EX).

Moreover, if f is strictly convex, then E[f (X)] = f (EX) holds true if and
only if X = E[X] with probability 1 (i.e., if X is a constant).

Recall our convention of occasionally dropping the parentheses when writ-

ing expectations, so in the theorem above, f (EX) = f (E[X]).

For an interpretation of the theorem, consider the ﬁgure below.

Here, f is a convex function shown by the solid line. Also, X is a random
variable that has a 0.5 chance of taking the value a, and a 0.5 chance of

aE[X]bf(a)f(b)f(EX)E[f(X)]f152

taking the value b (indicated on the x-axis). Thus, the expected value of X
is given by the midpoint between a and b.

We also see the values f (a), f (b) and f (E[X]) indicated on the y-axis.
Moreover, the value E[f (X)] is now the midpoint on the y-axis between f (a)
and f (b). From our example, we see that because f is convex, it must be the
case that E[f (X)] ≥ f (EX).

Incidentally, quite a lot of people have trouble remembering which way
the inequality goes, and remembering a picture like this is a good way to
quickly ﬁgure out the answer.
Remark. Recall that f is [strictly] concave if and only if −f is [strictly]
convex (i.e., f (cid:48)(cid:48)(x) ≤ 0 or H ≤ 0). Jensen’s inequality also holds for concave
functions f , but with the direction of all the inequalities reversed (E[f (X)] ≤
f (EX), etc.).

11.3 General EM algorithms

Suppose we have an estimation problem in which we have a training set
{x(1), . . . , x(n)} consisting of n independent examples. We have a latent vari-
able model p(x, z; θ) with z being the latent variable (which for simplicity is
assumed to take ﬁnite number of values). The density for x can be obtained
by marginalized over the latent variable z:

p(x; θ) =

p(x, z; θ)

(cid:88)

z

(11.1)

We wish to ﬁt the parameters θ by maximizing the log-likelihood of the

data, deﬁned by

(cid:96)(θ) =

n
(cid:88)

i=1

log p(x(i); θ)

(11.2)

We can rewrite the objective in terms of the joint density p(x, z; θ) by

(cid:96)(θ) =

=

n
(cid:88)

i=1
n
(cid:88)

i=1

log p(x(i); θ)

(cid:88)

log

p(x(i), z(i); θ).

z(i)

(11.3)

(11.4)

But, explicitly ﬁnding the maximum likelihood estimates of the parameters
θ may be hard since it will result in diﬃcult non-convex optimization prob-

lems.3 Here, the z(i)’s are the latent random variables; and it is often the case
that if the z(i)’s were observed, then maximum likelihood estimation would
be easy.

153

In such a setting, the EM algorithm gives an eﬃcient method for max-
imum likelihood estimation. Maximizing (cid:96)(θ) explicitly might be diﬃcult,
and our strategy will be to instead repeatedly construct a lower-bound on (cid:96)
(E-step), and then optimize that lower-bound (M-step).4

It turns out that the summation (cid:80)n

i=1 is not essential here, and towards a
simpler exposition of the EM algorithm, we will ﬁrst consider optimizing the
the likelihood log p(x) for a single example x. After we derive the algorithm
for optimizing log p(x), we will convert it to an algorithm that works for n
examples by adding back the sum to each of the relevant equations. Thus,
now we aim to optimize log p(x; θ) which can be rewritten as

log p(x; θ) = log

p(x, z; θ)

(cid:88)

z

(11.5)

Let Q be a distribution over the possible values of z. That is, (cid:80)
Q(z) ≥ 0).

z Q(z) = 1,

Consider the following:5

log p(x; θ) = log

= log

(cid:88)

z
(cid:88)

z

p(x, z; θ)

Q(z)

p(x, z; θ)
Q(z)

≥

(cid:88)

z

Q(z) log

p(x, z; θ)
Q(z)

(11.6)

(11.7)

The last step of this derivation used Jensen’s inequality. Speciﬁcally,
f (x) = log x is a concave function, since f (cid:48)(cid:48)(x) = −1/x2 < 0 over its domain

3It’s mostly an empirical observation that the optimization problem is diﬃcult to op-

timize.

4Empirically, the E-step and M-step can often be computed more eﬃciently than op-
timizing the function (cid:96)(·) directly. However, it doesn’t necessarily mean that alternating
the two steps can always converge to the global optimum of (cid:96)(·). Even for mixture of
Gaussians, the EM algorithm can either converge to a global optimum or get stuck, de-
pending on the properties of the training data. Empirically, for real-world data, often EM
can converge to a solution with relatively high likelihood (if not the optimum), and the
theory behind it is still largely not understood.

5If z were continuous, then Q would be a density, and the summations over z in our

discussion are replaced with integrals over z.

154

x ∈ R+. Also, the term

Q(z)

(cid:88)

z

(cid:21)

(cid:20)p(x, z; θ)
Q(z)

in the summation is just an expectation of the quantity [p(x, z; θ)/Q(z)] with
respect to z drawn according to the distribution given by Q.6 By Jensen’s
inequality, we have

(cid:18)

f

Ez∼Q

(cid:21)(cid:19)

(cid:20)p(x, z; θ)
Q(z)

≥ Ez∼Q

(cid:20)
f

(cid:18) p(x, z; θ)
Q(z)

(cid:19)(cid:21)

,

where the “z ∼ Q” subscripts above indicate that the expectations are with
respect to z drawn from Q. This allowed us to go from Equation (11.6) to
Equation (11.7).

Now, for any distribution Q, the formula (11.7) gives a lower-bound on
log p(x; θ). There are many possible choices for the Q’s. Which should we
choose? Well, if we have some current guess θ of the parameters, it seems
natural to try to make the lower-bound tight at that value of θ. I.e., we will
make the inequality above hold with equality at our particular value of θ.

To make the bound tight for a particular value of θ, we need for the step
involving Jensen’s inequality in our derivation above to hold with equality.
For this to be true, we know it is suﬃcient that the expectation be taken
over a “constant”-valued random variable. I.e., we require that

p(x, z; θ)
Q(z)

= c

for some constant c that does not depend on z. This is easily accomplished
by choosing

Q(z) ∝ p(x, z; θ).

Actually, since we know (cid:80)
further tells us that

z Q(z) = 1 (because it is a distribution), this

Q(z) =

p(x, z; θ)
z p(x, z; θ)

(cid:80)

=

p(x, z; θ)
p(x; θ)
= p(z|x; θ)

(11.8)

6We note that the notion p(x,z;θ)

Q(z) only makes sense if Q(z) (cid:54)= 0 whenever p(x, z; θ) (cid:54)= 0.

Here we implicitly assume that we only consider those Q with such a property.

155

Thus, we simply set the Q’s to be the posterior distribution of the z’s given
x and the setting of the parameters θ.

Indeed, we can directly verify that when Q(z) = p(z|x; θ), then equa-

tion (11.7) is an equality because

(cid:88)

z

Q(z) log

p(x, z; θ)
Q(z)

p(z|x; θ) log

p(x, z; θ)
p(z|x; θ)

p(z|x; θ) log

p(z|x; θ)p(x; θ)
p(z|x; θ)

p(z|x; θ) log p(x; θ)

=

=

=

(cid:88)

z
(cid:88)

z
(cid:88)

z

= log p(x; θ)

(cid:88)

z

p(z|x; θ)

z p(z|x; θ) = 1)
For convenience, we call the expression in Equation (11.7) the evidence

= log p(x; θ)

(because (cid:80)

lower bound (ELBO) and we denote it by

ELBO(x; Q, θ) =

(cid:88)

z

Q(z) log

p(x, z; θ)
Q(z)

(11.9)

With this equation, we can re-write equation (11.7) as

∀Q, θ, x,

log p(x; θ) ≥ ELBO(x; Q, θ)

(11.10)

Intuitively, the EM algorithm alternatively updates Q and θ by a) set-
ting Q(z) = p(z|x; θ) following Equation (11.8) so that ELBO(x; Q, θ) =
log p(x; θ) for x and the current θ, and b) maximizing ELBO(x; Q, θ) w.r.t θ
while ﬁxing the choice of Q.

Recall that all the discussion above was under the assumption that we
aim to optimize the log-likelihood log p(x; θ) for a single example x. It turns
out that with multiple training examples, the basic idea is the same and we
only needs to take a sum over examples at relevant places. Next, we will
build the evidence lower bound for multiple training examples and make the
EM algorithm formal.

Recall we have a training set {x(1), . . . , x(n)}. Note that the optimal choice
of Q is p(z|x; θ), and it depends on the particular example x. Therefore here
we will introduce n distributions Q1, . . . , Qn, one for each example x(i). For
each example x(i), we can build the evidence lower bound

log p(x(i); θ) ≥ ELBO(x(i); Qi, θ) =

Qi(z(i)) log

p(x(i), z(i); θ)
Qi(z(i))

(cid:88)

z(i)

Taking sum over all the examples, we obtain a lower bound for the log-
likelihood

156

ELBO(x(i); Qi, θ)

(11.11)

(cid:88)

i
(cid:88)

(cid:96)(θ) ≥

=

(cid:88)

Qi(z(i)) log

p(x(i), z(i); θ)
Qi(z(i))

i

z(i)

For any set of distributions Q1, . . . , Qn, the formula (11.11) gives a lower-
bound on (cid:96)(θ), and analogous to the argument around equation (11.8), the
Qi that attains equality satisﬁes

Qi(z(i)) = p(z(i)|x(i); θ)

Thus, we simply set the Qi’s to be the posterior distribution of the z(i)’s
given x(i) with the current setting of the parameters θ.

Now, for this choice of the Qi’s, Equation (11.11) gives a lower-bound on
the loglikelihood (cid:96) that we’re trying to maximize. This is the E-step. In the
M-step of the algorithm, we then maximize our formula in Equation (11.11)
with respect to the parameters to obtain a new setting of the θ’s. Repeatedly
carrying out these two steps gives us the EM algorithm, which is as follows:

Repeat until convergence {

(E-step) For each i, set

Qi(z(i)) := p(z(i)|x(i); θ).

n
(cid:88)

ELBO(x(i); Qi, θ)

i=1
(cid:88)

(cid:88)

i

z(i)

Qi(z(i)) log

p(x(i), z(i); θ)
Qi(z(i))

.

(11.12)

(M-step) Set

θ := arg max

θ

= arg max

θ

}

How do we know if this algorithm will converge? Well, suppose θ(t) and
θ(t+1) are the parameters from two successive iterations of EM. We will now
prove that (cid:96)(θ(t)) ≤ (cid:96)(θ(t+1)), which shows EM always monotonically im-
proves the log-likelihood. The key to showing this result lies in our choice of

157

the Qi’s. Speciﬁcally, on the iteration of EM in which the parameters had
started out as θ(t), we would have chosen Q(t)
i (z(i)) := p(z(i)|x(i); θ(t)). We
saw earlier that this choice ensures that Jensen’s inequality, as applied to get
Equation (11.11), holds with equality, and hence

(cid:96)(θ(t)) =

n
(cid:88)

i=1

ELBO(x(i); Q(t)
i

, θ(t))

(11.13)

The parameters θ(t+1) are then obtained by maximizing the right hand side
of the equation above. Thus,

(cid:96)(θ(t+1)) ≥

≥

n
(cid:88)

i=1

n
(cid:88)

ELBO(x(i); Q(t)
i

, θ(t+1))

(because ineqaulity (11.11) holds for all Q and θ)

ELBO(x(i); Q(t)
i

, θ(t))

(see reason below)

i=1
= (cid:96)(θ(t))

(by equation (11.13))

where the last inequality follows from that θ(t+1) is chosen explicitly to be

arg max

θ

n
(cid:88)

i=1

ELBO(x(i); Q(t)
i

, θ)

Hence, EM causes the likelihood to converge monotonically. In our de-
scription of the EM algorithm, we said we’d run it until convergence. Given
the result that we just showed, one reasonable convergence test would be
to check if the increase in (cid:96)(θ) between successive iterations is smaller than
some tolerance parameter, and to declare convergence if EM is improving
(cid:96)(θ) too slowly.

Remark. If we deﬁne (by overloading ELBO(·))

ELBO(Q, θ) =

n
(cid:88)

i=1

ELBO(x(i); Qi, θ) =

(cid:88)

(cid:88)

i

z(i)

Qi(z(i)) log

p(x(i), z(i); θ)
Qi(z(i))

(11.14)

then we know (cid:96)(θ) ≥ ELBO(Q, θ) from our previous derivation. The EM
can also be viewed an alternating maximization algorithm on ELBO(Q, θ),
in which the E-step maximizes it with respect to Q (check this yourself), and
the M-step maximizes it with respect to θ.

158

11.3.1 Other interpretation of ELBO
Let ELBO(x; Q, θ) = (cid:80)
There are several other forms of ELBO. First, we can rewrite

z Q(z) log p(x,z;θ)

Q(z) be deﬁned as in equation (11.9).

ELBO(x; Q, θ) = Ez∼Q[log p(x, z; θ)] − Ez∼Q[log Q(z)]

= Ez∼Q[log p(x|z; θ)] − DKL(Q(cid:107)pz)

(11.15)

where we use pz to denote the marginal distribution of z (under the distri-
bution p(x, z; θ)), and DKL() denotes the KL divergence

DKL(Q(cid:107)pz) =

(cid:88)

z

Q(z) log

Q(z)
p(z)

(11.16)

In many cases, the marginal distribution of z does not depend on the param-
eter θ. In this case, we can see that maximizing ELBO over θ is equivalent
to maximizing the ﬁrst term in (11.15). This corresponds to maximizing the
conditional likelihood of x conditioned on z, which is often a simpler question
than the original question.

Another form of ELBO(·) is (please verify yourself)

ELBO(x; Q, θ) = log p(x) − DKL(Q(cid:107)pz|x)

(11.17)

where pz|x is the conditional distribution of z given x under the parameter
θ. This forms shows that the maximizer of ELBO(Q, θ) over Q is obtained
when Q = pz|x, which was shown in equation (11.8) before.

11.4 Mixture of Gaussians revisited

Armed with our general deﬁnition of the EM algorithm, let’s go back to our
old example of ﬁtting the parameters φ, µ and Σ in a mixture of Gaussians.
For the sake of brevity, we carry out the derivations for the M-step updates
only for φ and µj, and leave the updates for Σj as an exercise for the reader.
The E-step is easy. Following our algorithm derivation above, we simply

calculate

w(i)

j = Qi(z(i) = j) = P (z(i) = j|x(i); φ, µ, Σ).
Here, “Qi(z(i) = j)” denotes the probability of z(i) taking the value j under
the distribution Qi.

159

Next, in the M-step, we need to maximize, with respect to our parameters

φ, µ, Σ, the quantity

n
(cid:88)

(cid:88)

i=1

z(i)

Qi(z(i)) log

p(x(i), z(i); φ, µ, Σ)
Qi(z(i))

=

=

n
(cid:88)

k
(cid:88)

i=1

j=1

n
(cid:88)

k
(cid:88)

i=1

j=1

Qi(z(i) = j) log

p(x(i)|z(i) = j; µ, Σ)p(z(i) = j; φ)
Qi(z(i) = j)
2(x(i) − µj)T Σ−1

(2π)d/2|Σj |1/2 exp (cid:0)− 1

1

j (x(i) − µj)(cid:1) · φj

w(i)
j

log

w(i)
j

Let’s maximize this with respect to µl. If we take the derivative with respect
to µl, we ﬁnd

∇µl

n
(cid:88)

k
(cid:88)

i=1

j=1

w(i)
j

log

(2π)d/2|Σj |1/2 exp (cid:0)− 1

1

2(x(i) − µj)T Σ−1

j (x(i) − µj)(cid:1) · φj

w(i)
j

= −∇µl

n
(cid:88)

k
(cid:88)

i=1

j=1

w(i)
j

1
2

(x(i) − µj)T Σ−1

j (x(i) − µj)

=

=

1
2

n
(cid:88)

i=1

w(i)

l ∇µl2µT

l Σ−1

l x(i) − µT

l Σ−1

l µl

n
(cid:88)

i=1

w(i)
l

(cid:0)Σ−1

l x(i) − Σ−1

l µl

(cid:1)

Setting this to zero and solving for µl therefore yields the update rule

µl :=

(cid:80)n

i=1 w(i)
l x(i)
(cid:80)n
i=1 w(i)

l

,

which was what we had in the previous set of notes.

Let’s do one more example, and derive the M-step update for the param-
eters φj. Grouping together only the terms that depend on φj, we ﬁnd that
we need to maximize

n
(cid:88)

k
(cid:88)

w(i)
j

log φj.

However, there is an additional constraint that the φj’s sum to 1, since they
represent the probabilities φj = p(z(i) = j; φ). To deal with the constraint

i=1

j=1

160

that (cid:80)k

j=1 φj = 1, we construct the Lagrangian

L(φ) =

n
(cid:88)

k
(cid:88)

i=1

j=1

w(i)
j

k
(cid:88)

log φj + β(

φj − 1),

j=1

where β is the Lagrange multiplier.7 Taking derivatives, we ﬁnd

∂
∂φj

L(φ) =

n
(cid:88)

i=1

w(i)
j
φj

+ β

Setting this to zero and solving, we get

φj =

(cid:80)n

i=1 w(i)
−β

j

i=1 w(i)
j
(cid:80)k

I.e., φj ∝ (cid:80)n
that −β = (cid:80)n
Qi(z(i) = j), and since probabilities sum to 1, (cid:80)
have our M-step updates for the parameters φj:

. Using the constraint that (cid:80)
j=1 w(i)

i=1 1 = n. (This used the fact that w(i)
j w(i)

j φj = 1, we easily ﬁnd
j =
j = 1.) We therefore

j = (cid:80)n

i=1

φj :=

1
n

n
(cid:88)

i=1

w(i)
j

.

The derivation for the M-step updates to Σj are also entirely straightfor-

ward.

11.5 Variational

inference and variational

auto-encoder (optional reading)

Loosely speaking, variational auto-encoder Kingma and Welling [2013] gen-
erally refers to a family of algorithms that extend the EM algorithms to more
complex models parameterized by neural networks. It extends the technique
of variational inference with the additional “re-parametrization trick” which
will be introduced below. Variational auto-encoder may not give the best
performance for many datasets, but it contains several central ideas about
how to extend EM algorithms to high-dimensional continuous latent variables

7We don’t need to worry about the constraint that φj ≥ 0, because as we’ll shortly see,

the solution we’ll ﬁnd from this derivation will automatically satisfy that anyway.

161

with non-linear models. Understanding it will likely give you the language
and backgrounds to understand various recent papers related to it.

As a running example, we will consider the following parameterization of
p(x, z; θ) by a neural network. Let θ be the collection of the weights of a
neural network g(z; θ) that maps z ∈ Rk to Rd. Let

z ∼ N (0, Ik×k)

x|z ∼ N (g(z; θ), σ2Id×d)

(11.18)
(11.19)

Here Ik×k denotes identity matrix of dimension k by k, and σ is a scalar that
we assume to be known for simplicity.

For the Gaussian mixture models in Section 11.4, the optimal choice of
Q(z) = p(z|x; θ) for each ﬁxed θ, that is the posterior distribution of z,
can be analytically computed. In many more complex models such as the
model (11.19), it’s intractable to compute the exact the posterior distribution
p(z|x; θ).

Recall that from equation (11.10), ELBO is always a lower bound for any
choice of Q, and therefore, we can also aim for ﬁnding an approximation of
the true posterior distribution. Often, one has to use some particular form
to approximate the true posterior distribution. Let Q be a family of Q’s that
we are considering, and we will aim to ﬁnd a Q within the family of Q that is
closest to the true posterior distribution. To formalize, recall the deﬁnition of
the ELBO lower bound as a function of Q and θ deﬁned in equation (11.14)

ELBO(Q, θ) =

n
(cid:88)

i=1

ELBO(x(i); Qi, θ) =

(cid:88)

(cid:88)

i

z(i)

Qi(z(i)) log

p(x(i), z(i); θ)
Qi(z(i))

Recall

that EM can be viewed as alternating maximization of

ELBO(Q, θ). Here instead, we optimize the EBLO over Q ∈ Q

max
Q∈Q

max
θ

ELBO(Q, θ)

(11.20)

Now the next question is what form of Q (or what structural assumptions
to make about Q) allows us to eﬃciently maximize the objective above. When
the latent variable z are high-dimensional discrete variables, one popular as-
sumption is the mean ﬁeld assumption, which assumes that Qi(z) gives a
distribution with independent coordinates, or in other words, Qi can be de-
composed into Qi(z) = Q1
i (zk). There are tremendous applications
of mean ﬁeld assumptions to learning generative models with discrete latent
variables, and we refer to Blei et al. [2017] for a survey of these models and

i (z1) · · · Qk

162

their impact to a wide range of applications including computational biology,
computational neuroscience, social sciences. We will not get into the details
about the discrete latent variable cases, and our main focus is to deal with
continuous latent variables, which requires not only mean ﬁeld assumptions,
but additional techniques.

When z ∈ Rk is a continuous latent variable, there are several decisions to
make towards successfully optimizing (11.20). First we need to give a succinct
representation of the distribution Qi because it is over an inﬁnite number of
points. A natural choice is to assume Qi is a Gaussian distribution with some
mean and variance. We would also like to have more succinct representation
of the means of Qi of all the examples. Note that Qi(z(i)) is supposed to
approximate p(z(i)|x(i); θ). It would make sense let all the means of the Qi’s
be some function of x(i). Concretely, let q(·; φ), v(·; φ) be two functions that
map from dimension d to k, which are parameterized by φ and ψ, we assume
that

Qi = N (q(x(i); φ), diag(v(x(i); ψ))2)

(11.21)

Here diag(w) means the k × k matrix with the entries of w ∈ Rk on the
diagonal. In other words, the distribution Qi is assumed to be a Gaussian
distribution with independent coordinates, and the mean and standard de-
viations are governed by q and v. Often in variational auto-encoder, q and v
are chosen to be neural networks.8 In recent deep learning literature, often
q, v are called encoder (in the sense of encoding the data into latent code),
whereas g(z; θ) if often referred to as the decoder.

We remark that Qi of such form in many cases are very far from a good ap-
proximation of the true posterior distribution. However, some approximation
is necessary for feasible optimization. In fact, the form of Qi needs to satisfy
other requirements (which happened to be satisﬁed by the form (11.21))

Before optimizing the ELBO, let’s ﬁrst verify whether we can eﬃciently
evaluate the value of the ELBO for ﬁxed Q of the form (11.21) and θ. We
rewrite the ELBO as a function of φ, ψ, θ by

ELBO(φ, ψ, θ) =

n
(cid:88)

i=1

(cid:20)

Ez(i)∼Qi

log

p(x(i), z(i); θ)
Qi(z(i))

(cid:21)

,

(11.22)

where Qi = N (q(x(i); φ), diag(v(x(i); ψ))2)

Note that to evaluate Qi(z(i)) inside the expectation, we should be able to
compute the density of Qi. To estimate the expectation Ez(i)∼Qi, we

8q and v can also share parameters. We sweep this level of details under the rug in this

note.

163

should be able to sample from distribution Qi so that we can build an
empirical estimator with samples. It happens that for Gaussian distribution
Qi = N (q(x(i); φ), diag(v(x(i); ψ))2), we are able to be both eﬃciently.

Now let’s optimize the ELBO. It turns out that we can run gradient ascent
over φ, ψ, θ instead of alternating maximization. There is no strong need to
compute the maximum over each variable at a much greater cost. (For Gaus-
sian mixture model in Section 11.4, computing the maximum is analytically
feasible and relatively cheap, and therefore we did alternating maximization.)
Mathematically, let η be the learning rate, the gradient ascent step is

θ := θ + η∇θELBO(φ, ψ, θ)
φ := φ + η∇φELBO(φ, ψ, θ)
ψ := ψ + η∇ψELBO(φ, ψ, θ)

Computing the gradient over θ is simple because

∇θELBO(φ, ψ, θ) = ∇θ

= ∇θ

(cid:20)

Ez(i)∼Qi

log

(cid:21)

p(x(i), z(i); θ)
Qi(z(i))

Ez(i)∼Qi

(cid:2)log p(x(i), z(i); θ)(cid:3)

n
(cid:88)

i=1
n
(cid:88)

i=1

=

n
(cid:88)

i=1

Ez(i)∼Qi

(cid:2)∇θ log p(x(i), z(i); θ)(cid:3) ,

(11.23)

But computing the gradient over φ and ψ is tricky because the sam-
pling distribution Qi depends on φ and ψ.
(Abstractly speaking, the is-
sue we face can be simpliﬁed as the problem of computing the gradi-
ent Ez∼Qφ[f (φ)] with respect to variable φ. We know that in general,
∇Ez∼Qφ[f (φ)] (cid:54)= Ez∼Qφ[∇f (φ)] because the dependency of Qφ on φ has to be
taken into account as well. )

The idea that comes to rescue is the so-called re-parameterization
trick: we rewrite z(i) ∼ Qi = N (q(x(i); φ), diag(v(x(i); ψ))2) in an equivalent
way:

z(i) = q(x(i); φ) + v(x(i); ψ) (cid:12) ξ(i) where ξ(i) ∼ N (0, Ik×k)

(11.24)

Here x (cid:12) y denotes the entry-wise product of two vectors of the same
dimension. Here we used the fact that x ∼ N (µ, σ2) is equivalent to that
x = µ+ξσ with ξ ∼ N (0, 1). We mostly just used this fact in every dimension
simultaneously for the random variable z(i) ∼ Qi.

164

(11.25)

With this re-parameterization, we have that

(cid:20)

Ez(i)∼Qi

log

(cid:21)

p(x(i), z(i); θ)
Qi(z(i))

(cid:20)

= Eξ(i)∼N (0,1)

log

p(x(i), q(x(i); φ) + v(x(i); ψ) (cid:12) ξ(i); θ)
Qi(q(x(i); φ) + v(x(i); ψ) (cid:12) ξ(i))

(cid:21)

It follows that

(cid:20)

∇φEz(i)∼Qi

log

(cid:21)

p(x(i), z(i); θ)
Qi(z(i))

= ∇φEξ(i)∼N (0,1)

log

(cid:20)

(cid:20)

= Eξ(i)∼N (0,1)

∇φ log

p(x(i), q(x(i); φ) + v(x(i); ψ) (cid:12) ξ(i); θ)
Qi(q(x(i); φ) + v(x(i); ψ) (cid:12) ξ(i))
p(x(i), q(x(i); φ) + v(x(i); ψ) (cid:12) ξ(i); θ)
Qi(q(x(i); φ) + v(x(i); ψ) (cid:12) ξ(i))

(cid:21)

(cid:21)

We can now sample multiple copies of ξ(i)’s to estimate the the expecta-
tion in the RHS of the equation above.9 We can estimate the gradient with
respect to ψ similarly, and with these, we can implement the gradient ascent
algorithm to optimize the ELBO over φ, ψ, θ.

There are not many high-dimensional distributions with analytically com-
putable density function are known to be re-parameterizable. We refer to
Kingma and Welling [2013] for a few other choices that can replace Gaussian
distribution.

9Empirically people sometimes just use one sample to estimate it for maximum com-

putational eﬃciency.

Chapter 12

Principal components analysis

In this set of notes, we will develop a method, Principal Components Analysis
(PCA), that tries to identify the subspace in which the data approximately
lies. PCA is computationally eﬃcient:
it will require only an eigenvector
calculation (easily done with the eig function in Matlab).

Suppose we are given a dataset {x(i); i = 1, . . . , n} of attributes of n dif-
ferent types of automobiles, such as their maximum speed, turn radius, and
so on. Let x(i) ∈ Rd for each i (d (cid:28) n). But unknown to us, two diﬀerent
attributes—some xi and xj—respectively give a car’s maximum speed mea-
sured in miles per hour, and the maximum speed measured in kilometers per
hour. These two attributes are therefore almost linearly dependent, up to
only small diﬀerences introduced by rounding oﬀ to the nearest mph or kph.
Thus, the data really lies approximately on an n − 1 dimensional subspace.
How can we automatically detect, and perhaps remove, this redundancy?

For a less contrived example, consider a dataset resulting from a survey of
pilots for radio-controlled helicopters, where x(i)
is a measure of the piloting
1
skill of pilot i, and x(i)
captures how much he/she enjoys ﬂying. Because
2
RC helicopters are very diﬃcult to ﬂy, only the most committed students,
ones that truly enjoy ﬂying, become good pilots. So, the two attributes
Indeed, we might posit that that the
x1 and x2 are strongly correlated.
data actually likes along some diagonal axis (the u1 direction) capturing the
intrinsic piloting “karma” of a person, with only a small amount of noise
lying oﬀ this axis. (See ﬁgure.) How can we automatically compute this u1
direction?

165

166

We will shortly develop the PCA algorithm. But prior to running PCA
per se, typically we ﬁrst preprocess the data by normalizing each feature
to have mean 0 and variance 1. We do this by subtracting the mean and
dividing by the empirical standard deviation:

x(i)
j ←

x(i)
j − µj
σj

i=1 x(i)
where µj = 1
n
feature j, respectively.

(cid:80)n

j and σ2

j = 1
n

(cid:80)n

i=1(x(i)

j − µj)2 are the mean variance of

Subtracting µj zeros out the mean and may be omitted for data known
to have zero mean (for instance, time series corresponding to speech or other
acoustic signals). Dividing by the standard deviation σj rescales each coor-
dinate to have unit variance, which ensures that diﬀerent attributes are all
treated on the same “scale.” For instance, if x1 was cars’ maximum speed in
mph (taking values in the high tens or low hundreds) and x2 were the num-
ber of seats (taking values around 2-4), then this renormalization rescales
the diﬀerent attributes to make them more comparable. This rescaling may
be omitted if we had a priori knowledge that the diﬀerent attributes are all
on the same scale. One example of this is if each data point represented a
grayscale image, and each x(i)
took a value in {0, 1, . . . , 255} corresponding
j
to the intensity value of pixel j in image i.

Now, having normalized our data, how do we compute the “major axis
of variation” u—that is, the direction on which the data approximately lies?
One way is to pose this problem as ﬁnding the unit vector u so that when

x1x2(enjoyment)(skill)1uu2167

the data is projected onto the direction corresponding to u, the variance of
the projected data is maximized. Intuitively, the data starts oﬀ with some
amount of variance/information in it. We would like to choose a direction u
so that if we were to approximate the data as lying in the direction/subspace
corresponding to u, as much as possible of this variance is still retained.

Consider the following dataset, on which we have already carried out the

normalization steps:

Now, suppose we pick u to correspond the the direction shown in the
ﬁgure below. The circles denote the projections of the original data onto this
line.

168

We see that the projected data still has a fairly large variance, and the
points tend to be far from zero. In contrast, suppose had instead picked the
following direction:

Here, the projections have a signiﬁcantly smaller variance, and are much

closer to the origin.

We would like to automatically select the direction u corresponding to
the ﬁrst of the two ﬁgures shown above. To formalize this, note that given a

(cid:0)(cid:0)(cid:1)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:0)(cid:1)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:0)(cid:1)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:0)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)169

unit vector u and a point x, the length of the projection of x onto u is given
by xT u. I.e., if x(i) is a point in our dataset (one of the crosses in the plot),
then its projection onto u (the corresponding circle in the ﬁgure) is distance
xT u from the origin. Hence, to maximize the variance of the projections, we
would like to choose a unit-length u so as to maximize:

1
n

n
(cid:88)

i=1

(x(i)T

u)2 =

1
n

n
(cid:88)

uT x(i)x(i)T

u

= uT

i=1
(cid:32)

1
n

n
(cid:88)

i=1

x(i)x(i)T

(cid:33)

u.

We easily recognize that the maximizing this subject to (cid:107)u(cid:107)2 = 1 gives the
i=1 x(i)x(i)T , which is just the empirical
principal eigenvector of Σ = 1
n
covariance matrix of the data (assuming it has zero mean).1

(cid:80)n

To summarize, we have found that if we wish to ﬁnd a 1-dimensional
subspace with with to approximate the data, we should choose u to be the
principal eigenvector of Σ. More generally, if we wish to project our data
into a k-dimensional subspace (k < d), we should choose u1, . . . , uk to be the
top k eigenvectors of Σ. The ui’s now form a new, orthogonal basis for the
data.2

Then, to represent x(i) in this basis, we need only compute the corre-

sponding vector










y(i) =

uT
1 x(i)
2 x(i)
uT
...
k x(i)
uT
Thus, whereas x(i) ∈ Rd, the vector y(i) now gives a lower, k-dimensional,
approximation/representation for x(i). PCA is therefore also referred to as
a dimensionality reduction algorithm. The vectors u1, . . . , uk are called
the ﬁrst k principal components of the data.

∈ Rk.






Remark. Although we have shown it formally only for the case of k = 1,
using well-known properties of eigenvectors it is straightforward to show that

1If you haven’t seen this before, try using the method of Lagrange multipliers to max-
imize uT Σu subject to that uT u = 1. You should be able to show that Σu = λu, for some
λ, which implies u is an eigenvector of Σ, with eigenvalue λ.

2Because Σ is symmetric, the ui’s will (or always can be chosen to be) orthogonal to

each other.

170

of all possible orthogonal bases u1, . . . , uk, the one that we have chosen max-
imizes (cid:80)
2. Thus, our choice of a basis preserves as much variability
as possible in the original data.

i (cid:107)y(i)(cid:107)2

PCA can also be derived by picking the basis that minimizes the ap-
proximation error arising from projecting the data onto the k-dimensional
subspace spanned by them. (See more in homework.)

PCA has many applications; we will close our discussion with a few exam-
ples. First, compression—representing x(i)’s with lower dimension y(i)’s—is
an obvious application. If we reduce high dimensional data to k = 2 or 3 di-
mensions, then we can also plot the y(i)’s to visualize the data. For instance,
if we were to reduce our automobiles data to 2 dimensions, then we can plot
it (one point in our plot would correspond to one car type, say) to see what
cars are similar to each other and what groups of cars may cluster together.
Another standard application is to preprocess a dataset to reduce its
dimension before running a supervised learning learning algorithm with the
x(i)’s as inputs. Apart from computational beneﬁts, reducing the data’s
dimension can also reduce the complexity of the hypothesis class considered
and help avoid overﬁtting (e.g., linear classiﬁers over lower dimensional input
spaces will have smaller VC dimension).

Lastly, as in our RC pilot example, we can also view PCA as a noise
In our example it, estimates the intrinsic “piloting
reduction algorithm.
karma” from the noisy measures of piloting skill and enjoyment. In class, we
also saw the application of this idea to face images, resulting in eigenfaces
method. Here, each point x(i) ∈ R100×100 was a 10000 dimensional vector,
with each coordinate corresponding to a pixel intensity value in a 100x100
image of a face. Using PCA, we represent each image x(i) with a much lower-
dimensional y(i).
In doing so, we hope that the principal components we
found retain the interesting, systematic variations between faces that capture
what a person really looks like, but not the “noise” in the images introduced
by minor lighting variations, slightly diﬀerent imaging conditions, and so on.
We then measure distances between faces i and j by working in the reduced
dimension, and computing (cid:107)y(i) − y(j)(cid:107)2. This resulted in a surprisingly good
face-matching and retrieval algorithm.

Chapter 13

Independent components
analysis

Our next topic is Independent Components Analysis (ICA). Similar to PCA,
this will ﬁnd a new basis in which to represent our data. However, the goal
is very diﬀerent.

As a motivating example, consider the “cocktail party problem.” Here, d
speakers are speaking simultaneously at a party, and any microphone placed
in the room records only an overlapping combination of the d speakers’ voices.
But lets say we have d diﬀerent microphones placed in the room, and because
each microphone is a diﬀerent distance from each of the speakers, it records a
diﬀerent combination of the speakers’ voices. Using these microphone record-
ings, can we separate out the original d speakers’ speech signals?

To formalize this problem, we imagine that there is some data s ∈ Rd

that is generated via d independent sources. What we observe is

x = As,

where A is an unknown square matrix called the mixing matrix. Repeated
observations gives us a dataset {x(i); i = 1, . . . , n}, and our goal is to recover
the sources s(i) that had generated our data (x(i) = As(i)).

In our cocktail party problem, s(i) is an d-dimensional vector, and s(i)
is
j
the sound that speaker j was uttering at time i. Also, x(i) in an d-dimensional
vector, and x(i)
is the acoustic reading recorded by microphone j at time i.
j
Let W = A−1 be the unmixing matrix. Our goal is to ﬁnd W , so
that given our microphone recordings x(i), we can recover the sources by
computing s(i) = W x(i). For notational convenience, we also let wT
i denote

171

172

the i-th row of W , so that

W =






— wT
1 —
...
— wT
d —




 .

Thus, wi ∈ Rd, and the j-th source can be recovered as s(i)

j = wT

j x(i).

13.1

ICA ambiguities

To what degree can W = A−1 be recovered? If we have no prior knowledge
about the sources and the mixing matrix, it is easy to see that there are some
inherent ambiguities in A that are impossible to recover, given only the x(i)’s.
Speciﬁcally, let P be any d-by-d permutation matrix. This means that
each row and each column of P has exactly one “1.” Here are some examples
of permutation matrices:

P =





0 1 0
1 0 0
0 0 1



 ; P =

(cid:21)

(cid:20) 0 1
1 0

; P =

(cid:20) 1 0
0 1

(cid:21)

.

If z is a vector, then P z is another vector that contains a permuted version
of z’s coordinates. Given only the x(i)’s, there will be no way to distinguish
between W and P W . Speciﬁcally, the permutation of the original sources is
ambiguous, which should be no surprise. Fortunately, this does not matter
for most applications.

Further, there is no way to recover the correct scaling of the wi’s. For in-
stance, if A were replaced with 2A, and every s(i) were replaced with (0.5)s(i),
then our observed x(i) = 2A · (0.5)s(i) would still be the same. More broadly,
if a single column of A were scaled by a factor of α, and the corresponding
source were scaled by a factor of 1/α, then there is again no way to determine
that this had happened given only the x(i)’s. Thus, we cannot recover the
“correct” scaling of the sources. However, for the applications that we are
concerned with—including the cocktail party problem—this ambiguity also
does not matter. Speciﬁcally, scaling a speaker’s speech signal s(i)
j by some
positive factor α aﬀects only the volume of that speaker’s speech. Also, sign
changes do not matter, and s(i)
sound identical when played on a
speaker. Thus, if the wi found by an algorithm is scaled by any non-zero real
number, the corresponding recovered source si = wT
i x will be scaled by the

j and −s(i)

j

173

same factor; but this usually does not matter. (These comments also apply
to ICA for the brain/MEG data that we talked about in class.)

Are these the only sources of ambiguity in ICA? It turns out that they
are, so long as the sources si are non-Gaussian. To see what the diﬃculty is
with Gaussian data, consider an example in which n = 2, and s ∼ N (0, I).
Here, I is the 2x2 identity matrix. Note that the contours of the density of
the standard normal distribution N (0, I) are circles centered on the origin,
and the density is rotationally symmetric.

Now, suppose we observe some x = As, where A is our mixing matrix.

Then, the distribution of x will be Gaussian, x ∼ N (0, AAT ), since

Es∼N (0,I)[x] = E[As] = AE[s] = 0
Cov[x] = Es∼N (0,I)[xxT ] = E[AssT AT ] = AE[ssT ]AT = A · Cov[s] · AT = AAT

Now, let R be an arbitrary orthogonal (less formally, a rotation/reﬂection)
matrix, so that RRT = RT R = I, and let A(cid:48) = AR. Then if the data had
been mixed according to A(cid:48) instead of A, we would have instead observed
x(cid:48) = A(cid:48)s. The distribution of x(cid:48) is also Gaussian, x(cid:48) ∼ N (0, AAT ), since
Es∼N (0,I)[x(cid:48)(x(cid:48))T ] = E[A(cid:48)ssT (A(cid:48))T ] = E[ARssT (AR)T ] = ARRT AT = AAT .
Hence, whether the mixing matrix is A or A(cid:48), we would observe data from
a N (0, AAT ) distribution. Thus, there is no way to tell if the sources were
mixed using A and A(cid:48). There is an arbitrary rotational component in the
mixing matrix that cannot be determined from the data, and we cannot
recover the original sources.

Our argument above was based on the fact that the multivariate standard
normal distribution is rotationally symmetric. Despite the bleak picture that
this paints for ICA on Gaussian data, it turns out that, so long as the data is
not Gaussian, it is possible, given enough data, to recover the d independent
sources.

13.2 Densities and linear transformations

Before moving on to derive the ICA algorithm proper, we ﬁrst digress brieﬂy
to talk about the eﬀect of linear transformations on densities.

Suppose a random variable s is drawn according to some density ps(s).
For simplicity, assume for now that s ∈ R is a real number. Now, let the
random variable x be deﬁned according to x = As (here, x ∈ R, A ∈ R). Let
px be the density of x. What is px?

Let W = A−1. To calculate the “probability” of a particular value of x,
it is tempting to compute s = W x, then then evaluate ps at that point, and

174

conclude that “px(x) = ps(W x).” However, this is incorrect. For example,
let s ∼ Uniform[0, 1], so ps(s) = 1{0 ≤ s ≤ 1}. Now, let A = 2, so x = 2s.
Clearly, x is distributed uniformly in the interval [0, 2]. Thus, its density is
given by px(x) = (0.5)1{0 ≤ x ≤ 2}. This does not equal ps(W x), where
W = 0.5 = A−1. Instead, the correct formula is px(x) = ps(W x)|W |.

More generally, if s is a vector-valued distribution with density ps, and

x = As for a square, invertible matrix A, then the density of x is given by

px(x) = ps(W x) · |W |,

where W = A−1.

Remark. If you’re seen the result that A maps [0, 1]d to a set of volume |A|,
then here’s another way to remember the formula for px given above, that also
generalizes our previous 1-dimensional example. Speciﬁcally, let A ∈ Rd×d be
given, and let W = A−1 as usual. Also let C1 = [0, 1]d be the d-dimensional
hypercube, and deﬁne C2 = {As : s ∈ C1} ⊆ Rd to be the image of C1
under the mapping given by A. Then it is a standard result in linear algebra
(and, indeed, one of the ways of deﬁning determinants) that the volume of
C2 is given by |A|. Now, suppose s is uniformly distributed in [0, 1]d, so its
density is ps(s) = 1{s ∈ C1}. Then clearly x will be uniformly distributed
in C2. Its density is therefore found to be px(x) = 1{x ∈ C2}/vol(C2) (since
it must integrate over C2 to 1). But using the fact that the determinant
of the inverse of a matrix is just the inverse of the determinant, we have
1/vol(C2) = 1/|A| = |A−1| = |W |. Thus, px(x) = 1{x ∈ C2}|W | = 1{W x ∈
C1}|W | = ps(W x)|W |.

13.3

ICA algorithm

We are now ready to derive an ICA algorithm. We describe an algorithm
by Bell and Sejnowski, and we give an interpretation of their algorithm as a
method for maximum likelihood estimation. (This is diﬀerent from their orig-
inal interpretation involving a complicated idea called the infomax principal
which is no longer necessary given the modern understanding of ICA.)

We suppose that the distribution of each source sj is given by a density

ps, and that the joint distribution of the sources s is given by

p(s) =

d
(cid:89)

j=1

ps(sj).

175

Note that by modeling the joint distribution as a product of marginals, we
capture the assumption that the sources are independent. Using our formulas
from the previous section, this implies the following density on x = As =
W −1s:

d
(cid:89)

p(x) =

ps(wT

j x) · |W |.

j=1

All that remains is to specify a density for the individual sources ps.

Recall that, given a real-valued random variable z, its cumulative distri-
−∞ pz(z)dz and

bution function (cdf) F is deﬁned by F (z0) = P (z ≤ z0) = (cid:82) z0
the density is the derivative of the cdf: pz(z) = F (cid:48)(z).

Thus, to specify a density for the si’s, all we need to do is to specify some
cdf for it. A cdf has to be a monotonic function that increases from zero
to one. Following our previous discussion, we cannot choose the Gaussian
cdf, as ICA doesn’t work on Gaussian data. What we’ll choose instead as
a reasonable “default” cdf that slowly increases from 0 to 1, is the sigmoid
function g(s) = 1/(1 + e−s). Hence, ps(s) = g(cid:48)(s).1

The square matrix W is the parameter in our model. Given a training

set {x(i); i = 1, . . . , n}, the log likelihood is given by

(cid:96)(W ) =

n
(cid:88)

(cid:32) d

(cid:88)

i=1

j=1

log g(cid:48)(wT

j x(i)) + log |W |

.

(cid:33)

We would like to maximize this in terms W . By taking derivatives and using
the fact (from the ﬁrst set of notes) that ∇W |W | = |W |(W −1)T , we easily
derive a stochastic gradient ascent learning rule. For a training example x(i),
the update rule is:

W := W + α















1 − 2g(wT
1 − 2g(wT

1 x(i))
2 x(i))

...

1 − 2g(wT

d x(i))








x(i)T + (W T )−1








,

1If you have prior knowledge that the sources’ densities take a certain form, then it
is a good idea to substitute that in here. But in the absence of such knowledge, the
sigmoid function can be thought of as a reasonable default that seems to work well for
many problems. Also, the presentation here assumes that either the data x(i) has been
preprocessed to have zero mean, or that it can naturally be expected to have zero mean
(such as acoustic signals). This is necessary because our assumption that ps(s) = g(cid:48)(s)
implies E[s] = 0 (the derivative of the logistic function is a symmetric function, and
hence gives a density corresponding to a random variable with zero mean), which implies
E[x] = E[As] = 0.

176

where α is the learning rate.

After the algorithm converges, we then compute s(i) = W x(i) to recover

the original sources.

Remark. When writing down the likelihood of the data, we implicitly as-
sumed that the x(i)’s were independent of each other (for diﬀerent values
of i; note this issue is diﬀerent from whether the diﬀerent coordinates of
x(i) are independent), so that the likelihood of the training set was given
by (cid:81)
i p(x(i); W ). This assumption is clearly incorrect for speech data and
other time series where the x(i)’s are dependent, but it can be shown that
having correlated training examples will not hurt the performance of the al-
gorithm if we have suﬃcient data. However, for problems where successive
training examples are correlated, when implementing stochastic gradient as-
cent, it sometimes helps accelerate convergence if we visit training examples
(I.e., run stochastic gradient ascent on a
in a randomly permuted order.
randomly shuﬄed copy of the training set.)

Chapter 14

Self-supervised learning and
foundation models

Despite its huge success, supervised learning with neural networks typically
relies on the availability of a labeled dataset of decent size, which is some-
times costly to collect. Recently, AI and machine learning are undergoing a
paradigm shift with the rise of models (e.g., BERT [Devlin et al., 2019] and
GPT-3 [Brown et al., 2020]) that are pre-trained on broad data at scale and
are adaptable to a wide range of downstream tasks. These models, called
foundation models by Bommasani et al. [2021], oftentimes leverage massive
unlabeled data so that much fewer labeled data in the downstream tasks are
needed. Moreover, though foundation models are based on standard deep
learning and transfer learning, their scale results in new emergent capabil-
ities. These models are typically (pre-)trained by self-supervised learning
methods where the supervisions/labels come from parts of the inputs.

This chapter will introduce the paradigm of foundation models and basic

related concepts.

14.1 Pretraining and adaptation

The foundation models paradigm consists of two phases: pretraining (or sim-
ply training) and adaptation. We ﬁrst pretrain a large model on a massive
unlabeled dataset (e.g., billions of unlabeled images).1 Then, we adapt the
pretrained model to a downstream task (e.g., detecting cancer from scan im-
ages). These downstream tasks are often prediction tasks with limited or

1Sometimes, pretraining can involve large-scale labeled datasets as well (e.g., the Ima-

geNet dataset).

177

178

even no labeled data. The intuition is that the pretrained models learn good
representations that capture intrinsic semantic structure/ information about
the data, and the adaptation phase customizes the model to a particular
downstream task by, e.g., retrieving the information speciﬁc to it. For ex-
ample, a model pretrained on massive unlabeled image data may learn good
general visual representations/features, and we adapt the representations to
solve biomedical imagining tasks.

We formalize the two phases below.

Pretraining.
Suppose we have an unlabeled pretraining dataset
{x(1), x(2) · · · , x(n)} that consists of n examples in Rd. Let φθ be a model that
is parameterized by θ and maps the input x to some m-dimensional represen-
tation φθ(x). (People also call φθ(x) ∈ Rm the embedding or features of the
example x.) We pretrain the model θ with a pretraining loss, which is often
an average of loss functions on all the examples: Lpre(θ) = 1
i=1 (cid:96)pre(θ, x(i)).
n
Here (cid:96)pre is a so-called self-supervised loss on a single datapoint x(i), because
as shown later, e.g., in Section 14.3, the “supervision” comes from the data
point x(i) itself.
It is also possible that the pretraining loss is not a sum
of losses on individual examples. We will discuss two pretraining losses in
Section 14.2 and Section 14.3.

(cid:80)n

We use some optimizers (mostly likely SGD or ADAM [Kingma and Ba,
2014]) to minimize Lpre(θ). We denote the obtained pretrained model by ˆθ.

task

, y(ntask)
task

task, y(1)

task), · · · , (x(ntask)

Adaptation. For a downstream task, we usually have a labeled dataset
{(x(1)
)} with ntask examples. The setting when
ntask = 0 is called zero-shot learning—the downstream task doesn’t have any
labeled examples. When ntask is relatively small (say, between 1 and 50), the
setting is called few-shot learning. It’s also pretty common to have a larger
ntask on the order of ranging from hundreds to tens of thousands.

An adaptation algorithm generally takes in a downstream dataset and the
pretrained model ˆθ, and outputs a variant of ˆθ that solves the downstream
task. We will discuss below two popular and general adaptation methods,
linear probe and ﬁnetuning. In addition, two other methods speciﬁc to lan-
guage problems are introduced in 14.3.2.

The linear probe approach uses a linear head on top of the representation
to predict the downstream labels. Mathematically, the adapted model out-
puts w(cid:62)φˆθ(x), where w ∈ Rm is a parameter to be learned, and ˆθ is exactly
the pretrained model (ﬁxed). We can use SGD (or other optimizers) to train

w on the downstream task loss to predict the task label

min
w∈Rm

1
ntask

ntask(cid:88)

i=1

(cid:96)task(y(i)

task, w(cid:62)φˆθ(x(i)

task))

179

(14.1)

if the downstream task is a regression problem, we will have

E.g.,
(cid:96)task(ytask, w(cid:62)φˆθ(xtask)) = (ytask − w(cid:62)φˆθ(xtask))2.

The ﬁnetuning algorithm uses a similar structure for the downstream
prediction model, but also further ﬁnetunes the pretrained model (instead
of keeping it ﬁxed). Concretely, the prediction model is w(cid:62)φθ(x) with pa-
rameters w and θ. We optimize both w and θ to ﬁt the downstream data,
but initialize θ with the pretrained model ˆθ. The linear head w is usually
initialized randomly.

minimize
w,θ

1
ntask

ntask(cid:88)

i=1

(cid:96)task(y(i)

task, w(cid:62)φθ(x(i)

task))

with initialization w ← random vector

θ ← ˆθ

(14.2)

(14.3)

(14.4)

Various other adaptation methods exists and are sometimes specialized
to the particular pretraining methods. We will discuss one of them in Sec-
tion 14.3.2.

14.2 Pretraining methods in computer vision

This section introduces two concrete pretraining methods for computer vi-
sion: supervised pretraining and contrastive learning.

Supervised pretraining. Here, the pretraining dataset is a large-scale
labeled dataset (e.g., ImageNet), and the pretrained models are simply a
neural network trained with vanilla supervised learning (with the last layer
being removed). Concretely, suppose we write the learned neural network as
U φˆθ(x), where U is the last (fully-connected) layer parameters, ˆθ corresponds
to the parameters of all the other layers, and φˆθ(x) are the penultimate
activations layer (which serves as the representation). We simply discard U
and use φˆθ(x) as the pretrained model.
Contrastive learning. Contrastive learning is a self-supervised pretraining
method that uses only unlabeled data. The main intuition is that a good
representation function φθ(·) should map semantically similar images to sim-
ilar representations, and that random pair of images should generally have

180

distinct representations. E.g., we may want to map images of two huskies to
similar representations, but a husky and an elephant should have diﬀerent
representations. One deﬁnition of similarity is that images from the same
class are similar. Using this deﬁnition will result in the so-called supervised
contrastive algorithms that work well when labeled pretraining datasets are
available.

Without labeled data, we can use data augmentation to generate a pair
of “similar” augmented images given an original image x. Data augmenta-
tion typically means that we apply random cropping, ﬂipping, and/or color
transformation on the original image x to generate a variant. We can take
two random augmentations, denoted by ˆx and ˜x, of the same original image
x, and call them a positive pair. We observe that positive pairs of images
are often semantically related because they are augmentations of the same
image. We will design a loss function for θ such that the representations of
a positive pair, φθ(ˆx), φθ(˜x), as close to each other as possible.

On the other hand, we can also take another random image z from the
pretraining dataset and generate an augmentation ˆz from z. Note that (ˆx, ˆz)
are from diﬀerent images; therefore, with a good chance, they are not seman-
tically related. We call (ˆx, ˆz) a negative or random pair.2 We will design a
loss to push the representation of random pairs, φθ(ˆx), φθ(ˆz), far away from
each other.

There are many recent algorithms based on the contrastive learning prin-
ciple, and here we introduce SIMCLR [Chen et al., 2020] as an concrete
example. The loss function is deﬁned on a batch of examples (x1, · · · , x(B))
with batch size B. The algorithm computes two random augmentations for
each example x(i) in the batch, denoted by ˆx(i) and ˜x(i). As a result, we
have the augmented batch of 2B examples: ˆx1, · · · , ˆx(B), ˜x1, · · · , ˜x(B). The
SIMCLR loss is deﬁned as3

Lpre(θ) = −

B
(cid:88)

i=1

log

exp (cid:0)φθ(ˆx(i))(cid:62)φθ(˜x(i))(cid:1)

exp (φθ(ˆx(i))(cid:62)φθ(˜x(i))) + (cid:80)

j(cid:54)=i exp (φθ(ˆx(i))(cid:62)φθ(˜x(j)))

.

The intuition is as follows. The loss is increasing in φθ(ˆx(i))(cid:62)φθ(˜x(j)), and
thus minimizing the loss encourages φθ(ˆx(i))(cid:62)φθ(˜x(j)) to be small, making
φθ(ˆx(i)) far away from φθ(˜x(j)). On the other hand, the loss is decreasing in

2Random pair may be a more accurate term because it’s still possible (though not
likely) that x and z are semantically related, so are ˆx and ˆz. But in the literature, the
term negative pair seems to be also common.

3This is a variant and simpliﬁcation of the original loss that does not change the essence

(but may change the eﬃciency slightly).

181

φθ(ˆx(i))(cid:62)φθ(˜x(i)), and thus minimizing the loss encourages φθ(ˆx(i))(cid:62)φθ(˜x(i))
to be large, resulting in φθ(ˆx(i)) and φθ(˜x(i)) to be close.4

14.3 Pretrained large language models

Natural language processing is another area where pretraining models are
In language problems, an example typically corre-
particularly successful.
sponds to a document or generally a sequence/trunk of words,5 denoted
by x = (x1, · · · , xT ) where T is the length of the document/sequence,
xi ∈ {1, · · · , V } are words in the document, and V is the vocabulary size.6
A language model is a probabilistic model representing the probability of
a document, denoted by p(x1, · · · , xT ). This probability distribution is very
complex because its support size is V T — exponential in the length of the
document. Instead of modeling the distribution of a document itself, we can
apply the chain rule of conditional probability to decompose it as follows:

p(x1, · · · , xT ) = p(x1)p(x2|x1) · · · p(xT |x1, · · · , xT −1).

(14.5)

Now the support size of each of the conditional probability p(xt|x1, · · · , xt−1)
is V .

We will model the conditional probability p(xt|x1, · · · , xt−1) as a function

of x1, . . . , xt−1 parameterized by some parameter θ.

A parameterized model takes in numerical inputs and therefore we ﬁrst
introduce embeddings or representations fo the words. Let ei ∈ Rd be the
embedding of the word i ∈ {1, 2, · · · , V }. We call [e1, · · · , eV ] ∈ Rd×V the
embedding matrix.

The most commonly used model is Transformer [Vaswani et al., 2017]. In
this subsection, we will introduce the input-output interface of a Transformer,
but treat the intermediate computation in the Transformer as a blackbox. We
refer the students to the transformer paper or more advanced courses for more
details. As shown in Figure 14.1, given a document (x1, · · · , xT ), we ﬁrst
translate the sequence of discrete variables into a sequence of corresponding

4To see this, you can verify that the function − log p

p+q is decreasing in p, and increasing

in q when p, q > 0.

5In the practical implementations, typically all the data are concatenated into a single
sequence in some order, and each example typically corresponds a sub-sequence of consec-
utive words which may corresponds to a subset of a document or may span across multiple
documents.

6Technically, words may be decomposed into tokens which could be words or sub-words
(combinations of letters), but this note omits this technicality. In fact most commons words
are a single token themselves.

182

word embeddings (ex1, · · · , exT ). We also introduce a ﬁxed special token
x0 = ⊥ in the vocabulary with corresponding embedding ex0 to mark the
beginning of a document. Then, the word embeddings are passed into a
Transformer model, which takes in a sequence of vectors (ex0, ex1, · · · , exT )
and outputs a sequence of vectors (u1, u2, · · · , uT +1), where ut ∈ RV will be
interpreted as the logits for the probability distribution of the next word.
Here we use the autoregressive version of the Transformers which by design
ensures ut only depends on x1, · · · , xt−1 (note that this property does not
hold in masked language models [Devlin et al., 2019] where the losses are
also diﬀerent.) We view the whole mapping from x’s to u’s a blackbox in
this subsection and call it a Transformer, denoted it by fθ, where θ include
both the parameters in the Transformer and the input embeddings. We write
ut = fθ(x0, x1, . . . , xt−1) where fθ denotes the mapping from the input to the
outputs.

Figure 14.1: The inputs and outputs of a Transformer model.

The conditional probability p(xt|x1, · · · , xt−1) is the softtmax of the logits:








p(xt = 1|x1 · · · , xt−1)
p(xt = 2|x1 · · · , xt−1)
...
p(xt = V |x1 · · · , xt−1)








= softmax(ut) ∈ RV

(14.6)

= softmax(fθ(x0, . . . , xt−1))

(14.7)

We train the Transformer parameter θ by minimizing the negative log-
likelihood of seeing the data under the probabilistic model deﬁned by θ,

𝑥!𝑥"𝑥#𝑒$!𝑒$"𝑒$#…Transformer 𝑓%(𝑥)𝑥&𝑒$$𝑢"𝑢’𝑢#(!𝑢!…183

which is the cross-entropy loss on the logitis.

loss(θ) =

=

=

1
T

1
T

1
T

T
(cid:88)

t=1
T
(cid:88)

t=1
T
(cid:88)

t=1

− log(pθ(xt|x1, . . . , xt−1))

(14.8)

(cid:96)ce(fθ(x0, x1, · · · , xt−1), xt)

− log(softmax(fθ(x0, x1, · · · , xt−1))xt) .

Autoregressive text decoding / generation. Given a autoregressive
Transformer, we can simply sample text from it sequentially. Given a pre-
ﬁx x1, . . . xt, we generate text completion xt+1, . . . xT sequentially using the
conditional distribution.

xt+1 ∼ softmax(fθ(x0, x1, · · · , xt))
xt+2 ∼ softmax(fθ(x0, x1, · · · , xt+1))

. . .

xT ∼ softmax(fθ(x0, x1, · · · , xT −1)) .

(14.9)
(14.10)
(14.11)
(14.12)

Note that each generated token is used as the input to the model when gen-
erating the following tokens. In practice, people often introduce a parameter
τ > 0 named temperature to further adjust the entropy/sharpness of the
generated distribution,

xt+1 ∼ softmax(fθ(x0, x1, · · · , xt)/τ )
xt+2 ∼ softmax(fθ(x0, x1, · · · , xt+1)/τ )

. . .

xT ∼ softmax(fθ(x0, x1, · · · , xT −1)/τ ) .

(14.13)
(14.14)
(14.15)
(14.16)

When τ = 1, the text is sampled from the original conditional probability
deﬁned by the model. With a decreasing τ , the generated text gradually
becomes more “deterministic”. τ → 0 reduces to greedy decoding, where we
generate the most probable next token from the conditional probability.

14.3.1 Zero-shot learning and in-context learning

For language models, there are many ways to adapt a pretrained model to
downstream tasks. In this notes, we discuss three of them: ﬁnetuning, zero-
shot learning, and in-context learning.

184

Finetuning is not very common for the autoregressive language models that
we introduced in Section 14.3 but much more common for other variants
such as masked language models which has similar input-output interfaces
but are pretrained diﬀerently [Devlin et al., 2019]. The ﬁnetuning method is
the same as introduced generally in Section 14.1—the only question is how
we deﬁne the prediction task with an additional linear head. One option
is to treat cT +1 = φθ(x1, · · · , xT ) as the representation and use w(cid:62)cT +1 =
w(cid:62)φθ(x1, · · · , xT ) to predict task label. As described in Section 14.1, we
initialize θ to the pretrained model ˆθ and then optimize both w and θ.

Zero-shot adaptation or zero-shot learning is the setting where there is no
input-output pairs from the downstream tasks. For language problems tasks,
typically the task is formatted as a question or a cloze test form via natural
language. For example, we can format an example as a question:

xtask = (xtask,1, · · · , xtask,T ) = “Is the speed of light a universal constant?”

Then, we compute the most likely next word predicted by the lan-
p(xT +1 |
guage model given this question, that is, computing argmaxxT +1
xtask,1, · · · , xtask,T ). In this case, if the most likely next word xT +1 is “No”,
then we solve the task. (The speed of light is only a constant in vacuum).
We note that there are many ways to decode the answer from the language
models, e.g., instead of computing the argmax, we may use the language
model to generate a few words word. It is an active research question to ﬁnd
the best way to utilize the language models.

In-context learning is mostly used for few-shot settings where we have a
few labeled examples (x(1)
task), · · · , (x(ntask)
). Given a test example
xtest, we construct a document (x1, · · · , xT ), which is more commonly called
a “prompt” in this context, by concatenating the labeled examples and the
text example in some format. For example, we may construct the prompt as
follows

task, y(1)

, y(ntask)
task

task

x1, · · · , xT = “Q: 2 ∼ 3 = ?

A: 5

Q: 6 ∼ 7 = ?

A: 13

· · ·

Q: 15 ∼ 2 = ?”

x(1)
task
y(1)
task
x(2)
task
y(2)
task

xtest

185

Then, we let the pretrained model generate the most likely xT +1, xT +2, · · · .
In this case, if the model can “learn” that the symbol ∼ means addition from
the few examples, we will obtain the following which suggests the answer is
17.

xT +1, xT +2, · · · = “A: 17”.

The area of foundation models is very new and quickly growing. The notes
here only attempt to introduce these models on a conceptual level with a
signiﬁcant amount of simpliﬁcation. We refer the readers to other materials,
e.g., Bommasani et al. [2021], for more details.

Part V

Reinforcement Learning and
Control

186

Chapter 15

Reinforcement learning

We now begin our study of reinforcement learning and adaptive control.

In supervised learning, we saw algorithms that tried to make their outputs
mimic the labels y given in the training set. In that setting, the labels gave
an unambiguous “right answer” for each of the inputs x.
In contrast, for
many sequential decision making and control problems, it is very diﬃcult to
provide this type of explicit supervision to a learning algorithm. For example,
if we have just built a four-legged robot and are trying to program it to walk,
then initially we have no idea what the “correct” actions to take are to make
it walk, and so do not know how to provide explicit supervision for a learning
algorithm to try to mimic.

In the reinforcement learning framework, we will instead provide our al-
gorithms only a reward function, which indicates to the learning agent when
it is doing well, and when it is doing poorly. In the four-legged walking ex-
ample, the reward function might give the robot positive rewards for moving
forwards, and negative rewards for either moving backwards or falling over.
It will then be the learning algorithm’s job to ﬁgure out how to choose actions
over time so as to obtain large rewards.

Reinforcement learning has been successful in applications as diverse as
autonomous helicopter ﬂight, robot legged locomotion, cell-phone network
routing, marketing strategy selection, factory control, and eﬃcient web-page
indexing. Our study of reinforcement learning will begin with a deﬁnition of
the Markov decision processes (MDP), which provides the formalism in
which RL problems are usually posed.

187

188

15.1 Markov decision processes

A Markov decision process is a tuple (S, A, {Psa}, γ, R), where:

• S is a set of states. (For example, in autonomous helicopter ﬂight, S
might be the set of all possible positions and orientations of the heli-
copter.)

• A is a set of actions. (For example, the set of all possible directions in

which you can push the helicopter’s control sticks.)

• Psa are the state transition probabilities. For each state s ∈ S and
action a ∈ A, Psa is a distribution over the state space. We’ll say more
about this later, but brieﬂy, Psa gives the distribution over what states
we will transition to if we take action a in state s.

• γ ∈ [0, 1) is called the discount factor.

• R : S × A (cid:55)→ R is the reward function. (Rewards are sometimes also
written as a function of a state S only, in which case we would have
R : S (cid:55)→ R).

The dynamics of an MDP proceeds as follows: We start in some state s0,
and get to choose some action a0 ∈ A to take in the MDP. As a result of our
choice, the state of the MDP randomly transitions to some successor state
s1, drawn according to s1 ∼ Ps0a0. Then, we get to pick another action a1.
As a result of this action, the state transitions again, now to some s2 ∼ Ps1a1.
We then pick a2, and so on. . . . Pictorially, we can represent this process as
follows:

s0

a0−→ s1

a1−→ s2

a2−→ s3

a3−→ . . .

Upon visiting the sequence of states s0, s1, . . . with actions a0, a1, . . ., our

total payoﬀ is given by

R(s0, a0) + γR(s1, a1) + γ2R(s2, a2) + · · · .

Or, when we are writing rewards as a function of the states only, this becomes

R(s0) + γR(s1) + γ2R(s2) + · · · .

For most of our development, we will use the simpler state-rewards R(s),
though the generalization to state-action rewards R(s, a) oﬀers no special
diﬃculties.

189

Our goal in reinforcement learning is to choose actions over time so as to

maximize the expected value of the total payoﬀ:

E (cid:2)R(s0) + γR(s1) + γ2R(s2) + · · · (cid:3)

Note that the reward at timestep t is discounted by a factor of γt. Thus, to
make this expectation large, we would like to accrue positive rewards as soon
as possible (and postpone negative rewards as long as possible). In economic
applications where R(·) is the amount of money made, γ also has a natural
interpretation in terms of the interest rate (where a dollar today is worth
more than a dollar tomorrow).

A policy is any function π : S (cid:55)→ A mapping from the states to the
actions. We say that we are executing some policy π if, whenever we are
in state s, we take action a = π(s). We also deﬁne the value function for
a policy π according to

V π(s) = E (cid:2)R(s0) + γR(s1) + γ2R(s2) + · · · (cid:12)

(cid:12) s0 = s, π].

V π(s) is simply the expected sum of discounted rewards upon starting in
state s, and taking actions according to π.1

Given a ﬁxed policy π, its value function V π satisﬁes the Bellman equa-

tions:

V π(s) = R(s) + γ

(cid:88)

Psπ(s)(s(cid:48))V π(s(cid:48)).

s(cid:48)∈S
This says that the expected sum of discounted rewards V π(s) for starting
in s consists of two terms: First, the immediate reward R(s) that we get
right away simply for starting in state s, and second, the expected sum of
future discounted rewards. Examining the second term in more detail, we
see that the summation term above can be rewritten Es(cid:48)∼Psπ(s)[V π(s(cid:48))]. This
is the expected sum of discounted rewards for starting in state s(cid:48), where s(cid:48)
is distributed according Psπ(s), which is the distribution over where we will
end up after taking the ﬁrst action π(s) in the MDP from state s. Thus, the
second term above gives the expected sum of discounted rewards obtained
after the ﬁrst step in the MDP.

Bellman’s equations can be used to eﬃciently solve for V π. Speciﬁcally,
in a ﬁnite-state MDP (|S| < ∞), we can write down one such equation for
V π(s) for every state s. This gives us a set of |S| linear equations in |S|
variables (the unknown V π(s)’s, one for each state), which can be eﬃciently
solved for the V π(s)’s.

1This notation in which we condition on π isn’t technically correct because π isn’t a

random variable, but this is quite standard in the literature.

We also deﬁne the optimal value function according to

V ∗(s) = max

π

V π(s).

190

(15.1)

In other words, this is the best possible expected sum of discounted rewards
that can be attained using any policy. There is also a version of Bellman’s
equations for the optimal value function:

V ∗(s) = R(s) + max
a∈A

γ

(cid:88)

s(cid:48)∈S

Psa(s(cid:48))V ∗(s(cid:48)).

(15.2)

The ﬁrst term above is the immediate reward as before. The second term
is the maximum over all actions a of the expected future sum of discounted
rewards we’ll get upon after action a. You should make sure you understand
this equation and see why it makes sense.

We also deﬁne a policy π∗ : S (cid:55)→ A as follows:

π∗(s) = arg max
a∈A

(cid:88)

s(cid:48)∈S

Psa(s(cid:48))V ∗(s(cid:48)).

(15.3)

Note that π∗(s) gives the action a that attains the maximum in the “max”
in Equation (15.2).

It is a fact that for every state s and every policy π, we have

V ∗(s) = V π∗(s) ≥ V π(s).

The ﬁrst equality says that the V π∗, the value function for π∗, is equal to the
optimal value function V ∗ for every state s. Further, the inequality above
says that π∗’s value is at least a large as the value of any other other policy.
In other words, π∗ as deﬁned in Equation (15.3) is the optimal policy.

Note that π∗ has the interesting property that it is the optimal policy
for all states s. Speciﬁcally, it is not the case that if we were starting in
some state s then there’d be some optimal policy for that state, and if we
were starting in some other state s(cid:48) then there’d be some other policy that’s
optimal policy for s(cid:48). The same policy π∗ attains the maximum in Equa-
tion (15.1) for all states s. This means that we can use the same policy π∗
no matter what the initial state of our MDP is.

15.2 Value iteration and policy iteration

We now describe two eﬃcient algorithms for solving ﬁnite-state MDPs. For
now, we will consider only MDPs with ﬁnite state and action spaces (|S| <

∞, |A| < ∞). In this section, we will also assume that we know the state
transition probabilities {Psa} and the reward function R.
The ﬁrst algorithm, value iteration, is as follows:

191

Algorithm 4 Value Iteration

1: For each state s, initialize V (s) := 0.
2: for until convergence do
3:

For every state, update

V (s) := R(s) + max
a∈A

γ

(cid:88)

s(cid:48)

Psa(s(cid:48))V (s(cid:48)).

(15.4)

This algorithm can be thought of as repeatedly trying to update the

estimated value function using Bellman Equations (15.2).

There are two possible ways of performing the updates in the inner loop of
the algorithm. In the ﬁrst, we can ﬁrst compute the new values for V (s) for
every state s, and then overwrite all the old values with the new values. This
is called a synchronous update. In this case, the algorithm can be viewed as
implementing a “Bellman backup operator” that takes a current estimate of
the value function, and maps it to a new estimate. (See homework problem
for details.) Alternatively, we can also perform asynchronous updates.
Here, we would loop over the states (in some order), updating the values one
at a time.

Under either synchronous or asynchronous updates, it can be shown that
value iteration will cause V to converge to V ∗. Having found V ∗, we can
then use Equation (15.3) to ﬁnd the optimal policy.

Apart from value iteration, there is a second standard algorithm for ﬁnd-
ing an optimal policy for an MDP. The policy iteration algorithm proceeds
as follows:

Thus, the inner-loop repeatedly computes the value function for the cur-
rent policy, and then updates the policy using the current value function.
(The policy π found in step (b) is also called the policy that is greedy with
respect to V .) Note that step (a) can be done via solving Bellman’s equa-
tions as described earlier, which in the case of a ﬁxed policy, is just a set of
|S| linear equations in |S| variables.

After at most a ﬁnite number of iterations of this algorithm, V will con-

verge to V ∗, and π will converge to π∗.2

2Note that value iteration cannot reach the exact V ∗ in a ﬁnite number of iterations,

192

Algorithm 5 Policy Iteration

1: Initialize π randomly.
2: for until convergence do
Let V := V π.
3:
For each state s, let
4:

(cid:46) typically by linear system solver

π(s) := arg max
a∈A

(cid:88)

s(cid:48)

Psa(s(cid:48))V (s(cid:48)).

Both value iteration and policy iteration are standard algorithms for solv-
ing MDPs, and there isn’t currently universal agreement over which algo-
rithm is better. For small MDPs, policy iteration is often very fats and
converges with very few iterations. However, for MDPs with large state
spaces, solving for V π explicitly would involve solving a large system of lin-
ear equations, and could be diﬃcult (and note that one has to solve the
linear system multiple times in policy iteration). In these problems, value
iteration may be preferred. For this reason, in practice value iteration seems
to be used more often than policy iteration. For some more discussions on
the comparison and connection of value iteration and policy iteration, please
see Section 15.5.

15.3 Learning a model for an MDP

So far, we have discussed MDPs and algorithms for MDPs assuming that the
state transition probabilities and rewards are known. In many realistic prob-
lems, we are not given state transition probabilities and rewards explicitly,
but must instead estimate them from data. (Usually, S, A and γ are known.)
For example, suppose that, for the inverted pendulum problem (see prob-

whereas policy iteration with an exact linear system solver, can. This is because when
the actions space and policy space are discrete and ﬁnite, and once the policy reaches the
optimal policy in policy iteration, then it will not change at all. On the other hand, even
though value iteration will converge to the V ∗, but there is always some non-zero error in
the learned value function.

lem set 4), we had a number of trials in the MDP, that proceeded as follows:

193

a(1)
0−→ s(1)
1
a(2)
0−→ s(2)
1

a(1)
1−→ s(1)
2
a(2)
1−→ s(2)
2

a(1)
2−→ s(1)
3
a(2)
2−→ s(2)
3

a(1)
3−→ . . .
a(2)
3−→ . . .

s(1)
0

s(2)
0
. . .

i

Here, s(j)

is the state we were at time i of trial j, and a(j)
is the cor-
responding action that was taken from that state. In practice, each of the
trials above might be run until the MDP terminates (such as if the pole falls
over in the inverted pendulum problem), or it might be run for some large
but ﬁnite number of timesteps.

i

Given this “experience” in the MDP consisting of a number of trials,
we can then easily derive the maximum likelihood estimates for the state
transition probabilities:

Psa(s(cid:48)) =

#times took we action a in state s and got to s(cid:48)
#times we took action a in state s

(15.5)

Or, if the ratio above is “0/0”—corresponding to the case of never having
taken action a in state s before—the we might simply estimate Psa(s(cid:48)) to be
1/|S|. (I.e., estimate Psa to be the uniform distribution over all states.)

Note that, if we gain more experience (observe more trials) in the MDP,
there is an eﬃcient way to update our estimated state transition probabilities
using the new experience. Speciﬁcally, if we keep around the counts for both
the numerator and denominator terms of (15.5), then as we observe more
trials, we can simply keep accumulating those counts. Computing the ratio
of these counts then given our estimate of Psa.

Using a similar procedure, if R is unknown, we can also pick our estimate
of the expected immediate reward R(s) in state s to be the average reward
observed in state s.

Having learned a model for the MDP, we can then use either value it-
eration or policy iteration to solve the MDP using the estimated transition
probabilities and rewards. For example, putting together model learning and
value iteration, here is one possible algorithm for learning in an MDP with
unknown state transition probabilities:

1. Initialize π randomly.

2. Repeat {

(a) Execute π in the MDP for some number of trials.

194

(b) Using the accumulated experience in the MDP, update our esti-

mates for Psa (and R, if applicable).

(c) Apply value iteration with the estimated state transition probabil-

ities and rewards to get a new estimated value function V .

(d) Update π to be the greedy policy with respect to V .

}

We note that, for this particular algorithm, there is one simple optimiza-
tion that can make it run much more quickly. Speciﬁcally, in the inner loop
of the algorithm where we apply value iteration, if instead of initializing value
iteration with V = 0, we initialize it with the solution found during the pre-
vious iteration of our algorithm, then that will provide value iteration with
a much better initial starting point and make it converge more quickly.

15.4 Continuous state MDPs

So far, we’ve focused our attention on MDPs with a ﬁnite number of states.
We now discuss algorithms for MDPs that may have an inﬁnite number of
states. For example, for a car, we might represent the state as (x, y, θ, ˙x, ˙y, ˙θ),
comprising its position (x, y); orientation θ; velocity in the x and y directions
˙x and ˙y; and angular velocity ˙θ. Hence, S = R6 is an inﬁnite set of states,
because there is an inﬁnite number of possible positions and orientations
for the car.3 Similarly, the inverted pendulum you saw in PS4 has states
(x, θ, ˙x, ˙θ), where θ is the angle of the pole. And, a helicopter ﬂying in 3d
space has states of the form (x, y, z, φ, θ, ψ, ˙x, ˙y, ˙z, ˙φ, ˙θ, ˙ψ), where here the roll
φ, pitch θ, and yaw ψ angles specify the 3d orientation of the helicopter.

In this section, we will consider settings where the state space is S = Rd,

and describe ways for solving such MDPs.

15.4.1 Discretization

Perhaps the simplest way to solve a continuous-state MDP is to discretize
the state space, and then to use an algorithm like value iteration or policy
iteration, as described previously.

For example, if we have 2d states (s1, s2), we can use a grid to discretize

the state space:

3Technically, θ is an orientation and so the range of θ is better written θ ∈ [−π, π) than

θ ∈ R; but for our purposes, this distinction is not important.

195

[t]

Here, each grid cell represents a separate discrete state ¯s. We can
then approximate the continuous-state MDP via a discrete-state one
( ¯S, A, {P¯sa}, γ, R), where ¯S is the set of discrete states, {P¯sa} are our state
transition probabilities over the discrete states, and so on. We can then use
value iteration or policy iteration to solve for the V ∗(¯s) and π∗(¯s) in the
discrete state MDP ( ¯S, A, {P¯sa}, γ, R). When our actual system is in some
continuous-valued state s ∈ S and we need to pick an action to execute, we
compute the corresponding discretized state ¯s, and execute action π∗(¯s).

This discretization approach can work well for many problems. However,
there are two downsides. First, it uses a fairly naive representation for V ∗
(and π∗). Speciﬁcally, it assumes that the value function is takes a constant
value over each of the discretization intervals (i.e., that the value function is
piecewise constant in each of the gridcells).

To better understand the limitations of such a representation, consider a

supervised learning problem of ﬁtting a function to this dataset:

[t]

123456781.522.533.544.555.5xyClearly, linear regression would do ﬁne on this problem. However, if we
instead discretize the x-axis, and then use a representation that is piecewise
constant in each of the discretization intervals, then our ﬁt to the data would
look like this:

196

[t]

This piecewise constant representation just isn’t a good representation for
many smooth functions. It results in little smoothing over the inputs, and no
generalization over the diﬀerent grid cells. Using this sort of representation,
we would also need a very ﬁne discretization (very small grid cells) to get a
good approximation.

A second downside of this representation is called the curse of dimen-
sionality. Suppose S = Rd, and we discretize each of the d dimensions of the
state into k values. Then the total number of discrete states we have is kd.
This grows exponentially quickly in the dimension of the state space d, and
thus does not scale well to large problems. For example, with a 10d state, if
we discretize each state variable into 100 values, we would have 10010 = 1020
discrete states, which is far too many to represent even on a modern desktop
computer.

As a rule of thumb, discretization usually works extremely well for 1d
and 2d problems (and has the advantage of being simple and quick to im-
plement). Perhaps with a little bit of cleverness and some care in choosing
the discretization method, it often works well for problems with up to 4d
states. If you’re extremely clever, and somewhat lucky, you may even get it
to work for some 6d problems. But it very rarely works for problems any
higher dimensional than that.

123456781.522.533.544.555.5xy197

15.4.2 Value function approximation

We now describe an alternative method for ﬁnding policies in continuous-
state MDPs, in which we approximate V ∗ directly, without resorting to dis-
cretization. This approach, called value function approximation, has been
successfully applied to many RL problems.

Using a model or simulator

To develop a value function approximation algorithm, we will assume that
we have a model, or simulator, for the MDP. Informally, a simulator is
a black-box that takes as input any (continuous-valued) state st and action
at, and outputs a next-state st+1 sampled according to the state transition
probabilities Pstat:

[t]

There are several ways that one can get such a model. One is to use
physics simulation. For example, the simulator for the inverted pendulum
in PS4 was obtained by using the laws of physics to calculate what position
and orientation the cart/pole will be in at time t + 1, given the current state
at time t and the action a taken, assuming that we know all the parameters
of the system such as the length of the pole, the mass of the pole, and so
on. Alternatively, one can also use an oﬀ-the-shelf physics simulation software
package which takes as input a complete physical description of a mechanical
system, the current state st and action at, and computes the state st+1 of the
system a small fraction of a second into the future.4

An alternative way to get a model is to learn one from data collected in
the MDP. For example, suppose we execute n trials in which we repeatedly
take actions in an MDP, each trial for T timesteps. This can be done picking
actions at random, executing some speciﬁc policy, or via some other way of

4Open Dynamics Engine (http://www.ode.com) is one example of a free/open-source
physics simulator that can be used to simulate systems like the inverted pendulum, and
that has been a reasonably popular choice among RL researchers.

choosing actions. We would then observe n state sequences like the following:

198

a(1)
0−→ s(1)
1
a(2)
0−→ s(2)
1

a(1)
1−→ s(1)
2
a(2)
1−→ s(2)
2

a(1)
2−→ · · ·

a(2)
2−→ · · ·

a(1)
T −1−→ s(1)
T
a(2)
T −1−→ s(2)
T

s(1)
0

s(2)
0
· · ·

s(n)
0

a(n)
0−→ s(n)

1

a(n)
1−→ s(n)

2

a(n)
2−→ · · ·

a(n)
T −1−→ s(n)
T

We can then apply a learning algorithm to predict st+1 as a function of st
and at.

For example, one may choose to learn a linear model of the form

st+1 = Ast + Bat,

(15.6)

using an algorithm similar to linear regression. Here, the parameters of the
model are the matrices A and B, and we can estimate them using the data
collected from our n trials, by picking

arg min
A,B

n
(cid:88)

T −1
(cid:88)

i=1

t=0

(cid:13)
(cid:13)s(i)
(cid:13)

t+1 −

(cid:16)

As(i)

t + Ba(i)

t

(cid:17)(cid:13)
2
(cid:13)
(cid:13)
2

.

We could also potentially use other loss functions for learning the model.
For example, it has been found in recent work Luo et al. [2018] that using
(cid:107) · (cid:107)2 norm (without the square) may be helpful in certain cases.

Having learned A and B, one option is to build a deterministic model,
in which given an input st and at, the output st+1 is exactly determined.
Speciﬁcally, we always compute st+1 according to Equation (15.6). Alter-
natively, we may also build a stochastic model, in which st+1 is a random
function of the inputs, by modeling it as

st+1 = Ast + Bat + (cid:15)t,

where here (cid:15)t is a noise term, usually modeled as (cid:15)t ∼ N (0, Σ). (The covari-
ance matrix Σ can also be estimated from data in a straightforward way.)

Here, we’ve written the next-state st+1 as a linear function of the current
state and action; but of course, non-linear functions are also possible. Specif-
ically, one can learn a model st+1 = Aφs(st) + Bφa(at), where φs and φa are
some non-linear feature mappings of the states and actions. Alternatively,
one can also use non-linear learning algorithms, such as locally weighted lin-
ear regression, to learn to estimate st+1 as a function of st and at. These
approaches can also be used to build either deterministic or stochastic sim-
ulators of an MDP.

199

Fitted value iteration

We now describe the ﬁtted value iteration algorithm for approximating
the value function of a continuous state MDP. In the sequel, we will assume
that the problem has a continuous state space S = Rd, but that the action
space A is small and discrete.5

Recall that in value iteration, we would like to perform the update

V (s)

:= R(s) + γ max

a

= R(s) + γ max

a

(cid:90)

Psa(s(cid:48))V (s(cid:48))ds(cid:48)

s(cid:48)
Es(cid:48)∼Psa[V (s(cid:48))]

(15.7)

(15.8)

(In Section 15.2, we had written the value iteration update with a summation
s(cid:48) Psa(s(cid:48))V (s(cid:48)) rather than an integral over states;
V (s) := R(s) + γ maxa
the new notation reﬂects that we are now working in continuous states rather
than discrete states.)

(cid:80)

The main idea of ﬁtted value iteration is that we are going to approxi-
mately carry out this step, over a ﬁnite sample of states s(1), . . . , s(n). Specif-
ically, we will use a supervised learning algorithm—linear regression in our
description below—to approximate the value function as a linear or non-linear
function of the states:

V (s) = θT φ(s).

Here, φ is some appropriate feature mapping of the states.

For each state s in our ﬁnite sample of n states, ﬁtted value iteration
will ﬁrst compute a quantity y(i), which will be our approximation to R(s) +
γ maxa Es(cid:48)∼Psa[V (s(cid:48))] (the right hand side of Equation 15.8). Then, it will
apply a supervised learning algorithm to try to get V (s) close to R(s) +
γ maxa Es(cid:48)∼Psa[V (s(cid:48))] (or, in other words, to try to get V (s) close to y(i)).

In detail, the algorithm is as follows:

1. Randomly sample n states s(1), s(2), . . . s(n) ∈ S.

2. Initialize θ := 0.

3. Repeat {

For i = 1, . . . , n {

5In practice, most MDPs have much smaller action spaces than state spaces. E.g., a car
has a 6d state space, and a 2d action space (steering and velocity controls); the inverted
pendulum has a 4d state space, and a 1d action space; a helicopter has a 12d state space,
and a 4d action space. So, discretizing this set of actions is usually less of a problem than
discretizing the state space would have been.

For each action a ∈ A {

200

1, . . . , s(cid:48)
(cid:80)k

Sample s(cid:48)
Set q(a) = 1
k
// Hence, q(a) is an estimate of R(s(i)) +

k ∼ Ps(i)a (using a model of the MDP).
j=1 R(s(i)) + γV (s(cid:48)
j)

γEs(cid:48)∼P

s(i)a

[V (s(cid:48))].

}
Set y(i) = maxa q(a).

// Hence, y(i)

is an estimate of R(s(i)) +

γ maxa Es(cid:48)∼P

s(i)a

[V (s(cid:48))].

}

// In the original value iteration algorithm (over discrete states)
// we updated the value function according to V (s(i)) := y(i).
// In this algorithm, we want V (s(i)) ≈ y(i), which we’ll achieve

// using supervised learning (linear regression).

Set θ := arg minθ

(cid:80)n

i=1

1
2

(cid:0)θT φ(s(i)) − y(i)(cid:1)2

}

Above, we had written out ﬁtted value iteration using linear regression
as the algorithm to try to make V (s(i)) close to y(i). That step of the algo-
rithm is completely analogous to a standard supervised learning (regression)
problem in which we have a training set (x(1), y(1)), (x(2), y(2)), . . . , (x(n), y(n)),
and want to learn a function mapping from x to y; the only diﬀerence is that
here s plays the role of x. Even though our description above used linear re-
gression, clearly other regression algorithms (such as locally weighted linear
regression) can also be used.

Unlike value iteration over a discrete set of states, ﬁtted value iteration
cannot be proved to always to converge. However, in practice, it often does
converge (or approximately converge), and works well for many problems.
Note also that if we are using a deterministic simulator/model of the MDP,
then ﬁtted value iteration can be simpliﬁed by setting k = 1 in the algorithm.
This is because the expectation in Equation (15.8) becomes an expectation
over a deterministic distribution, and so a single example is suﬃcient to
exactly compute that expectation. Otherwise, in the algorithm above, we
had to draw k samples, and average to try to approximate that expectation
(see the deﬁnition of q(a), in the algorithm pseudo-code).

201

Finally, ﬁtted value iteration outputs V , which is an approximation to
V ∗. This implicitly deﬁnes our policy. Speciﬁcally, when our system is in
some state s, and we need to choose an action, we would like to choose the
action

arg max

a

Es(cid:48)∼Psa[V (s(cid:48))]

(15.9)

The process for computing/approximating this is similar to the inner-loop of
ﬁtted value iteration, where for each action, we sample s(cid:48)
k ∼ Psa to
approximate the expectation. (And again, if the simulator is deterministic,
we can set k = 1.)

1, . . . , s(cid:48)

In practice, there are often other ways to approximate this step as well.
For example, one very common case is if the simulator is of the form st+1 =
f (st, at) + (cid:15)t, where f is some deterministic function of the states (such as
f (st, at) = Ast + Bat), and (cid:15) is zero-mean Gaussian noise. In this case, we
can pick the action given by

arg max

a

V (f (s, a)).

In other words, here we are just setting (cid:15)t = 0 (i.e., ignoring the noise in
the simulator), and setting k = 1. Equivalent, this can be derived from
Equation (15.9) using the approximation

Es(cid:48)[V (s(cid:48))] ≈ V (Es(cid:48)[s(cid:48)])
= V (f (s, a)),

(15.10)
(15.11)

where here the expectation is over the random s(cid:48) ∼ Psa. So long as the noise
terms (cid:15)t are small, this will usually be a reasonable approximation.

However, for problems that don’t lend themselves to such approximations,
having to sample k|A| states using the model, in order to approximate the
expectation above, can be computationally expensive.

15.5 Connections between Policy and Value

Iteration (Optional)

In the policy iteration, line 3 of Algorithm 5, we typically use linear system
solver to compute V π. Alternatively, one can also the iterative Bellman
updates, similarly to the value iteration, to evaluate V π, as in the Procedure
VE(·) in Line 1 of Algorithm 6 below. Here if we take option 1 in Line 2 of
the Procedure VE, then the diﬀerence between the Procedure VE from the

202

Algorithm 6 Variant of Policy Iteration
1: procedure VE(π, k)
2:

(cid:46) To evaluate V π
Option 1: initialize V (s) := 0; Option 2: Initialize from the current

V in the main algorithm.
for i = 0 to k − 1 do

For every state s, update

V (s) := R(s) + γ

(cid:88)

s(cid:48)

Psπ(s)(s(cid:48))V (s(cid:48)).

(15.12)

return V

3:
4:

5:

Require: hyperparameter k.

6: Initialize π randomly.
7: for until convergence do
8:
9:

Let V = VE(π, k).
For each state s, let

π(s) := arg max
a∈A

(cid:88)

s(cid:48)

Psa(s(cid:48))V (s(cid:48)).

(15.13)

203

value iteration (Algorithm 4) is that on line 4, the procedure is using the
action from π instead of the greedy action.

Using the Procedure VE, we can build Algorithm 6, which is a variant
of policy iteration that serves an intermediate algorithm that connects pol-
icy iteration and value iteration. Here we are going to use option 2 in VE
to maximize the re-use of knowledge learned before. One can verify indeed
that if we take k = 1 and use option 2 in Line 2 in Algorithm 6, then Algo-
rithm 6 is semantically equivalent to value iteration (Algorithm 4). In other
words, both Algorithm 6 and value iteration interleave the updates in (15.13)
and (15.12). Algorithm 6 alternate between k steps of update (15.12) and
one step of (15.13), whereas value iteration alternates between 1 steps of up-
date (15.12) and one step of (15.13). Therefore generally Algorithm 6 should
not be faster than value iteration, because assuming that update (15.12)
and (15.13) are equally useful and time-consuming, then the optimal balance
of the update frequencies could be just k = 1 or k ≈ 1.

On the other hand, if k steps of update (15.12) can be done much faster
than k times a single step of (15.12), then taking additional steps of equa-
tion (15.12) in group might be useful. This is what policy iteration is lever-
aging — the linear system solver can give us the result of Procedure VE with
k = ∞ much faster than using the Procedure VE for a large k. On the ﬂip
side, when such a speeding-up eﬀect no longer exists, e.g.,, when the state
space is large and linear system solver is also not fast, then value iteration is
more preferable.

Chapter 16

LQR, DDP and LQG

16.1 Finite-horizon MDPs

In Chapter 15, we deﬁned Markov Decision Processes (MDPs) and covered
Value Iteration / Policy Iteration in a simpliﬁed setting. More speciﬁcally we
introduced the optimal Bellman equation that deﬁnes the optimal value
function V π∗ of the optimal policy π∗.

V π∗(s) = R(s) + max
a∈A

γ

Psa(s(cid:48))V π∗(s(cid:48))

(cid:88)

s(cid:48)∈S

Recall that from the optimal value function, we were able to recover the

optimal policy π∗ with

π∗(s) = argmaxa∈A

Psa(s(cid:48))V ∗(s(cid:48))

(cid:88)

s(cid:48)∈S

In this chapter, we’ll place ourselves in a more general setting:

1. We want to write equations that make sense for both the discrete and

the continuous case. We’ll therefore write

Es(cid:48)∼Psa
(cid:88)

(cid:2)V π∗(s(cid:48))(cid:3)
Psa(s(cid:48))V π∗(s(cid:48))

s(cid:48)∈S

instead of

meaning that we take the expectation of the value function at the next
state. In the ﬁnite case, we can rewrite the expectation as a sum over

204

205

In the continuous case, we can rewrite the expectation as an
states.
integral. The notation s(cid:48) ∼ Psa means that the state s(cid:48) is sampled from
the distribution Psa.

2. We’ll assume that the rewards depend on both states and actions. In
other words, R : S × A → R. This implies that the previous mechanism
for computing the optimal action is changed into

π∗(s) = argmaxa∈A R(s, a) + γEs(cid:48)∼Psa

(cid:2)V π∗(s(cid:48))(cid:3)

3. Instead of considering an inﬁnite horizon MDP, we’ll assume that we

have a ﬁnite horizon MDP that will be deﬁned as a tuple

(S, A, Psa, T, R)

with T > 0 the time horizon (for instance T = 100). In this setting,
our deﬁnition of payoﬀ is going to be (slightly) diﬀerent:

R(s0, a0) + R(s1, a1) + · · · + R(sT , aT )

instead of (inﬁnite horizon case)

R(s0, a0) + γR(s1, a1) + γ2R(s2, a2) + . . .
∞
(cid:88)

R(st, at)γt

t=0

What happened to the discount factor γ? Remember that the intro-
duction of γ was (partly) justiﬁed by the necessity of making sure that
If the rewards are
the inﬁnite sum would be ﬁnite and well-deﬁned.
bounded by a constant ¯R, the payoﬀ is indeed bounded by

∞
(cid:88)

|

t=0

R(st)γt| ≤ ¯R

∞
(cid:88)

t=0

γt

and we recognize a geometric sum! Here, as the payoﬀ is a ﬁnite sum,
the discount factor γ is not necessary anymore.

206

In this new setting, things behave quite diﬀerently. First, the optimal
policy π∗ might be non-stationary, meaning that it changes over time.
In other words, now we have

π(t) : S → A

where the superscript (t) denotes the policy at time step t. The dynam-
ics of the ﬁnite horizon MDP following policy π(t) proceeds as follows:
we start in some state s0, take some action a0 := π(0)(s0) according to
our policy at time step 0. The MDP transitions to a successor s1, drawn
according to Ps0a0. Then, we get to pick another action a1 := π(1)(s1)
following our new policy at time step 1 and so on...

Why does the optimal policy happen to be non-stationary in the ﬁnite-
horizon setting? Intuitively, as we have a ﬁnite numbers of actions to
take, we might want to adopt diﬀerent strategies depending on where
we are in the environment and how much time we have left. Imagine
a grid with 2 goals with rewards +1 and +10. At the beginning, we
might want to take actions to aim for the +10 goal. But if after some
steps, dynamics somehow pushed us closer to the +1 goal and we don’t
have enough steps left to be able to reach the +10 goal, then a better
strategy would be to aim for the +1 goal...

4. This observation allows us to use time dependent dynamics

st+1 ∼ P (t)
st,at

meaning that the transition’s distribution P (t)
st,at changes over time. The
same thing can be said about R(t). Note that this setting is a better
In a car, the gas tank empties, traﬃc changes,
model for real life.
etc. Combining the previous remarks, we’ll use the following general
formulation for our ﬁnite horizon MDP

(cid:0)S, A, P (t)

sa , T, R(t)(cid:1)

Remark: notice that the above formulation would be equivalent to
adding the time into the state.

207

The value function at time t for a policy π is then deﬁned in the same
way as before, as an expectation over trajectories generated following
policy π starting in state s.

Vt(s) = E (cid:2)R(t)(st, at) + · · · + R(T )(sT , aT )|st = s, π(cid:3)

Now, the question is

In this ﬁnite-horizon setting, how do we ﬁnd the optimal value function

V ∗
t (s) = max

π

V π
t (s)

It turns out that Bellman’s equation for Value Iteration is made for Dy-
namic Programming. This may come as no surprise as Bellman is one of
the fathers of dynamic programming and the Bellman equation is strongly
related to the ﬁeld. To understand how we can simplify the problem by
adopting an iteration-based approach, we make the following observations:

1. Notice that at the end of the game (for time step T ), the optimal value

is obvious

∀s ∈ S : V ∗

T (s) := max
a∈A

R(T )(s, a)

(16.1)

2. For another time step 0 ≤ t < T , if we suppose that we know the

optimal value function for the next time step V ∗

t+1, then we have

∀t < T, s ∈ S : V ∗

t (s) := max
a∈A

(cid:104)

R(t)(s, a) + E

s(cid:48)∼P (t)
sa

(cid:2)V ∗

t+1(s(cid:48))(cid:3)(cid:105)

(16.2)

With these observations in mind, we can come up with a clever algorithm

to solve for the optimal value function:

1. compute V ∗

T using equation (16.1).

2. for t = T − 1, . . . , 0:

compute V ∗

t using V ∗

t+1 using equation (16.2)

208

Side note We can interpret standard value iteration as a special case
of this general case, but without keeping track of time.
It turns out that
in the standard setting, if we run value iteration for T steps, we get a γT
approximation of the optimal value iteration (geometric convergence). See
problem set 4 for a proof of the following result:

Theorem Let B denote the Bellman update and ||f (x)||∞ := supx |f (x)|.

If Vt denotes the value function at the t-th step, then

||Vt+1 − V ∗||∞ = ||B(Vt) − V ∗||∞

≤ γ||Vt − V ∗||∞
≤ γt||V1 − V ∗||∞

In other words, the Bellman operator B is a γ-contracting operator.

16.2 Linear Quadratic Regulation (LQR)

In this section, we’ll cover a special case of the ﬁnite-horizon setting described
in Section 16.1, for which the exact solution is (easily) tractable. This
model is widely used in robotics, and a common technique in many problems
is to reduce the formulation to this framework.

First, let’s describe the model’s assumptions. We place ourselves in the

continuous setting, with

and we’ll assume linear transitions (with noise)

S = Rd, A = Rd

st+1 = Atst + Btat + wt

where At ∈ Rd×d, Bt ∈ Rd×d are matrices and wt ∼ N (0, Σt) is some
gaussian noise (with zero mean). As we’ll show in the following paragraphs,
it turns out that the noise, as long as it has zero mean, does not impact the
optimal policy!

We’ll also assume quadratic rewards

R(t)(st, at) = −s(cid:62)

t Utst − a(cid:62)

t Wtat

209

where Ut ∈ Rd×n, Wt ∈ Rd×d are positive deﬁnite matrices (meaning that

the reward is always negative).

Remark Note that the quadratic formulation of the reward is equivalent
to saying that we want our state to be close to the origin (where the reward
is higher). For example, if Ut = Id (the identity matrix) and Wt = Id, then
Rt = −||st||2 − ||at||2, meaning that we want to take smooth actions (small
norm of at) to go back to the origin (small norm of st). This could model a
car trying to stay in the middle of lane without making impulsive moves...

Now that we have deﬁned the assumptions of our LQR model, let’s cover

the 2 steps of the LQR algorithm

step 1 suppose that we don’t know the matrices A, B, Σ.

To esti-
mate them, we can follow the ideas outlined in the Value Ap-
proximation section of the RL notes.
First, collect transitions
from an arbitrary policy.
Then, use linear regression to ﬁnd
(cid:13)
As(i)
(cid:13)s(i)
(cid:13)

t+1 −
argminA,B
nique seen in Gaussian Discriminant Analysis to learn Σ.

. Finally, use a tech-

t + Ba(i)

(cid:80)T −1
t=0

(cid:17)(cid:13)
2
(cid:13)
(cid:13)

(cid:80)n

i=1

(cid:16)

t

step 2 assuming that the parameters of our model are known (given or esti-
mated with step 1), we can derive the optimal policy using dynamic
programming.

In other words, given

(cid:40)

st+1
R(t)(st, at) = −s(cid:62)

= Atst + Btat + wt
t Utst − a(cid:62)

t Wtat

At, Bt, Ut, Wt, Σt known

we want to compute V ∗
t .

If we go back to section 16.1, we can apply

dynamic programming, which yields

1. Initialization step

For the last time step T ,

V ∗
T (sT ) = max
aT ∈A
= max
aT ∈A
= −s(cid:62)

T UtsT

RT (sT , aT )

−s(cid:62)

T UT sT − a(cid:62)

T WtaT

(maximized for aT = 0)

210

2. Recurrence step

Let t < T . Suppose we know V ∗
t+1.
t+1 is a quadratic function in st, then V ∗
Fact 1: It can be shown that if V ∗
t
is also a quadratic function. In other words, there exists some matrix Φ
and some scalar Ψ such that

if V ∗
then V ∗

t+1(st+1) = s(cid:62)
t (st) = s(cid:62)

t+1Φt+1st+1 + Ψt+1
t Φtst + Ψt

For time step t = T , we had Φt = −UT and ΨT = 0.
Fact 2: We can show that the optimal policy is just a linear function of
the state.
Knowing V ∗
t+1 is equivalent to knowing Φt+1 and Ψt+1, so we just need
to explain how we compute Φt and Ψt from Φt+1 and Ψt+1 and the other
parameters of the problem.

t (st) = s(cid:62)
V ∗

t Φtst + Ψt
(cid:104)
R(t)(st, at) + E
(cid:2)−s(cid:62)

t Utst − a(cid:62)

= max
at
= max
at

(cid:105)
t+1(st+1)]

[V ∗

st+1∼P (t)

st,at

t Vtat + Est+1∼N (Atst+Btat,Σt)[s(cid:62)

t+1Φt+1st+1 + Ψt+1](cid:3)

where the second line is just the deﬁnition of the optimal value function
and the third line is obtained by plugging in the dynamics of our model
along with the quadratic assumption. Notice that the last expression is
a quadratic function in at and can thus be (easily) optimized1. We get
the optimal action a∗
t

t = (cid:2)(B(cid:62)
a∗
= Lt · st

t Φt+1Bt − Vt)−1BtΦt+1At

(cid:3) · st

where

1Use the identity E (cid:2)w(cid:62)

t Φt+1wt

Lt := (cid:2)(B(cid:62)

t Φt+1Bt − Wt)−1BtΦt+1At
(cid:3) = Tr(ΣtΦt+1) with wt ∼ N (0, Σt)

(cid:3)

211

which is an impressive result: our optimal policy is linear in st. Given
a∗
t we can solve for Φt and Ψt. We ﬁnally get the Discrete Ricatti
equations

(cid:16)

Φt = A(cid:62)
t

Φt+1 − Φt+1Bt

(cid:0)B(cid:62)

t Φt+1Bt − Wt

(cid:1)−1

BtΦt+1

(cid:17)

At − Ut

Ψt = − tr (ΣtΦt+1) + Ψt+1

Fact 3: we notice that Φt depends on neither Ψ nor the noise Σt! As Lt
is a function of At, Bt and Φt+1, it implies that the optimal policy also
does not depend on the noise! (But Ψt does depend on Σt, which
implies that V ∗

t depends on Σt.)

Then, to summarize, the LQR algorithm works as follows

1. (if necessary) estimate parameters At, Bt, Σt

2. initialize ΦT := −UT and ΨT := 0.

3. iterate from t = T − 1 . . . 0 to update Φt and Ψt using Φt+1 and Ψt+1
using the discrete Ricatti equations. If there exists a policy that drives
the state towards zero, then convergence is guaranteed!

Using Fact 3, we can be even more clever and make our algorithm run
(slightly) faster! As the optimal policy does not depend on Ψt, and the
update of Φt only depends on Φt, it is suﬃcient to update only Φt!

16.3 From non-linear dynamics to LQR

It turns out that a lot of problems can be reduced to LQR, even if dynamics
are non-linear. While LQR is a nice formulation because we are able to come
up with a nice exact solution, it is far from being general. Let’s take for
instance the case of the inverted pendulum. The transitions between states
look like













xt+1
˙xt+1
θt+1
˙θt+1







= F







xt
˙xt
θt
˙θt













, at

where the function F depends on the cos of the angle etc. Now, the

question we may ask is

Can we linearize this system?

212

16.3.1 Linearization of dynamics

Let’s suppose that at time t, the system spends most of its time in some state
¯st and the actions we perform are around ¯at. For the inverted pendulum, if
we reached some kind of optimal, this is true: our actions are small and we
don’t deviate much from the vertical.

We are going to use Taylor expansion to linearize the dynamics. In the
simple case where the state is one-dimensional and the transition function F
does not depend on the action, we would write something like

st+1 = F (st) ≈ F ( ¯st) + F (cid:48)( ¯st) · (st − ¯st)

In the more general setting, the formula looks the same, with gradients

instead of simple derivatives

st+1 ≈ F ( ¯st, ¯at) + ∇sF ( ¯st, ¯at) · (st − ¯st) + ∇aF ( ¯st, ¯at) · (at − ¯at)

(16.3)

and now, st+1 is linear in st and at, because we can rewrite equation (16.3)

as

st+1 ≈ Ast + Bst + κ

where κ is some constant and A, B are matrices. Now, this writing looks
awfully similar to the assumptions made for LQR. We just have to get rid
of the constant term κ! It turns out that the constant term can be absorbed
into st by artiﬁcially increasing the dimension by one. This is the same trick
that we used at the beginning of the class for linear regression...

16.3.2 Diﬀerential Dynamic Programming (DDP)

The previous method works well for cases where the goal is to stay around
some state s∗ (think about the inverted pendulum, or a car having to stay
in the middle of a lane). However, in some cases, the goal can be more
complicated.

We’ll cover a method that applies when our system has to follow some
trajectory (think about a rocket). This method is going to discretize the
trajectory into discrete time steps, and create intermediary goals around
which we will be able to use the previous technique! This method is called
Diﬀerential Dynamic Programming. The main steps are

step 1 come up with a nominal trajectory using a naive controller, that approx-
imate the trajectory we want to follow. In other words, our controller
is able to approximate the gold trajectory with

213

step 2 linearize the dynamics around each trajectory point s∗

t , in other words

0, a∗
s∗

0 → s∗

1, a∗

1 → . . .

st+1 ≈ F (s∗

t , a∗

t ) + ∇sF (s∗

t , a∗

t )(st − s∗

t ) + ∇aF (s∗

t , a∗

t )(at − a∗
t )

where st, at would be our current state and action. Now that we have
a linear approximation around each of these points, we can use the
previous section and rewrite

st+1 = At · st + Bt · at

(notice that in that case, we use the non-stationary dynamics setting
that we mentioned at the beginning of these lecture notes)
Note We can apply a similar derivation for the reward R(t), with a
second-order Taylor expansion.

R(st, at) ≈ R(s∗

t , a∗

t ) + ∇sR(s∗

t , a∗

t )(st − s∗

t ) + ∇aR(s∗

t , a∗

t )(at − a∗
t )

+

+

1
2
1
2

(st − s∗

t )(cid:62)Hss(st − s∗

t ) + (st − s∗

t )(cid:62)Hsa(at − a∗
t )

(at − a∗

t )(cid:62)Haa(at − a∗
t )

where Hxy refers to the entry of the Hessian of R with respect to x and
y evaluated in (s∗
t ) (omitted for readability). This expression can be
re-written as

t , a∗

Rt(st, at) = −s(cid:62)

t Utst − a(cid:62)

t Wtat

for some matrices Ut, Wt, with the same trick of adding an extra dimen-
sion of ones. To convince yourself, notice that

(cid:0)1 x(cid:1) ·

(cid:19)

(cid:18)a b
c
b

(cid:19)

(cid:18)1
x

·

= a + 2bx + cx2

214

step 3 Now, you can convince yourself that our problem is strictly re-written
in the LQR framework. Let’s just use LQR to ﬁnd the optimal policy
πt. As a result, our new controller will (hopefully) be better!
Note: Some problems might arise if the LQR trajectory deviates too
much from the linearized approximation of the trajectory, but that can
be ﬁxed with reward-shaping...

step 4 Now that we get a new controller (our new policy πt), we use it to

produce a new trajectory

0, π0(s∗
s∗

0) → s∗

1, π1(s∗

1) → . . . → s∗
T

note that when we generate this new trajectory, we use the real F and
not its linear approximation to compute transitions, meaning that

s∗
t+1 = F (s∗

t , a∗
t )

then, go back to step 2 and repeat until some stopping criterion.

16.4 Linear Quadratic Gaussian (LQG)

Often, in the real word, we don’t get to observe the full state st. For example,
an autonomous car could receive an image from a camera, which is merely
an observation, and not the full state of the world. So far, we assumed
that the state was available. As this might not hold true for most of the
real-world problems, we need a new tool to model this situation: Partially
Observable MDPs.

A POMDP is an MDP with an extra observation layer. In other words,
we introduce a new variable ot, that follows some conditional distribution
given the current state st

Formally, a ﬁnite-horizon POMDP is given by a tuple

ot|st ∼ O(o|s)

(S, O, A, Psa, T, R)

Within this framework, the general strategy is to maintain a belief state
(distribution over states) based on the observation o1, . . . , ot. Then, a policy
in a POMDP maps this belief states to actions.

215

In this section, we’ll present a extension of LQR to this new setting.

Assume that we observe yt ∈ Rn with m < n such that

(cid:40)

= C · st + vt
yt
st+1 = A · st + B · at + wt

where C ∈ Rn×d is a compression matrix and vt is the sensor noise (also
gaussian, like wt). Note that the reward function R(t) is left unchanged, as a
function of the state (not the observation) and action. Also, as distributions
are gaussian, the belief state is also going to be gaussian. In this new frame-
work, let’s give an overview of the strategy we are going to adopt to ﬁnd the
optimal policy:

step 1 ﬁrst, compute the distribution on the possible states (the belief state),
based on the observations we have. In other words, we want to compute
the mean st|t and the covariance Σt|t of

st|y1, . . . , yt ∼ N (cid:0)st|t, Σt|t

(cid:1)

to perform the computation eﬃciently over time, we’ll use the Kalman
Filter algorithm (used on-board Apollo Lunar Module!).

step 2 now that we have the distribution, we’ll use the mean st|t as the best

approximation for st

step 3 then set the action at := Ltst|t where Lt comes from the regular LQR

algorithm.

Intuitively, to understand why this works, notice that st|t is a noisy ap-
proximation of st (equivalent to adding more noise to LQR) but we proved
that LQR is independent of the noise!

Step 1 needs to be explicated. We’ll cover a simple case where there is
no action dependence in our dynamics (but the general case follows the same
idea). Suppose that

(cid:40)

st+1 = A · st + wt, wt ∼ N (0, Σs)
vt ∼ N (0, Σy)
yt

= C · st + vt,

As noises are Gaussians, we can easily prove that the joint distribution is

also Gaussian

216























s1
...
st
y1
...
yt

∼ N (µ, Σ)

for some µ, Σ

then, using the marginal formulas of gaussians (see Factor Analysis notes),

we would get

st|y1, . . . , yt ∼ N (cid:0)st|t, Σt|t

(cid:1)

However, computing the marginal distribution parameters using these
formulas would be computationally expensive! It would require manipulating
matrices of shape t × t. Recall that inverting a matrix can be done in O(t3),
and it would then have to be repeated over the time steps, yielding a cost in
O(t4)!

The Kalman ﬁlter algorithm provides a much better way of computing
the mean and variance, by updating them over time in constant time in
t! The kalman ﬁlter is based on two basics steps. Assume that we know the
distribution of st|y1, . . . , yt:

predict step compute st+1|y1, . . . , yt

update step compute st+1|y1, . . . , yt+1

and iterate over time steps! The combination of the predict and update

steps updates our belief states. In other words, the process looks like

(st|y1, . . . , yt)

predict
−−−−→ (st+1|y1, . . . , yt)

update
−−−−→ (st+1|y1, . . . , yt+1)

predict
−−−−→ . . .

predict step Suppose that we know the distribution of

st|y1, . . . , yt ∼ N (cid:0)st|t, Σt|t

(cid:1)

then, the distribution over the next state is also a gaussian distribution

st+1|y1, . . . , yt ∼ N (cid:0)st+1|t, Σt+1|t

(cid:1)

where

217

(cid:40)

st+1|t = A · st|t
Σt+1|t = A · Σt|t · A(cid:62) + Σs

update step given st+1|t and Σt+1|t such that

st+1|y1, . . . , yt ∼ N (cid:0)st+1|t, Σt+1|t

(cid:1)

we can prove that

st+1|y1, . . . , yt+1 ∼ N (cid:0)st+1|t+1, Σt+1|t+1

(cid:1)

where

with

(cid:40)

st+1|t+1 = st+1|t + Kt(yt+1 − Cst+1|t)
Σt+1|t+1 = Σt+1|t − Kt · C · Σt+1|t

Kt := Σt+1|tC (cid:62)(CΣt+1|tC (cid:62) + Σy)−1

The matrix Kt is called the Kalman gain.

Now, if we have a closer look at the formulas, we notice that we don’t
need the observations prior to time step t! The update steps only depends
on the previous distribution. Putting it all together, the algorithm ﬁrst runs
a forward pass to compute the Kt, Σt|t and st|t (sometimes referred to as
ˆs in the literature). Then, it runs a backward pass (the LQR updates) to
compute the quantities Ψt, Ψt and Lt. Finally, we recover the optimal policy
with a∗

t = Ltst|t.

Chapter 17

Policy Gradient
(REINFORCE)

We will present a model-free algorithm called REINFORCE that does not
require the notion of value functions and Q functions. It turns out to be more
convenient to introduce REINFORCE in the ﬁnite horizon case, which will
be assumed throughout this note: we use τ = (s0, a0, . . . , sT −1, aT −1, sT ) to
denote a trajectory, where T < ∞ is the length of the trajectory. Moreover,
REINFORCE only applies to learning a randomized policy. We use πθ(a|s)
to denote the probability of the policy πθ outputting the action a at state s.
The other notations will be the same as in previous lecture notes.

The advantage of applying REINFORCE is that we only need to assume
that we can sample from the transition probabilities {Psa} and can query the
reward function R(s, a) at state s and action a,1 but we do not need to know
the analytical form of the transition probabilities or the reward function.
We do not explicitly learn the transition probabilities or the reward function
either.

Let s0 be sampled from some distribution µ. We consider optimizing the

expected total payoﬀ of the policy πθ over the parameter θ deﬁned as.

η(θ) (cid:44) E

(cid:34)T −1
(cid:88)

(cid:35)
γtR(st, at)

t=0

(17.1)

Recall that st ∼ Pst−1at−1 and at ∼ πθ(·|st). Also note that η(θ) =
Es0∼P [V πθ(s0)] if we ignore the diﬀerence between ﬁnite and inﬁnite hori-
zon.

1In this notes we will work with the general setting where the reward depends on both

the state and the action.

218

219

We aim to use gradient ascent to maximize η(θ). The main challenge
we face here is to compute (or estimate) the gradient of η(θ) without the
knowledge of the form of the reward function and the transition probabilities.
Let Pθ(τ ) denote the distribution of τ (generated by the policy πθ), and

let f (τ ) = (cid:80)T −1

t=0 γtR(st, at). We can rewrite η(θ) as

η(θ) = Eτ ∼Pθ [f (τ )]

(17.2)

We face a similar situations in the variational auto-encoder (VAE) setting
covered in the previous lectures, where the we need to take the gradient w.r.t
to a variable that shows up under the expectation — the distribution Pθ
depends on θ. Recall that in VAE, we used the re-parametrization techniques
to address this problem. However it does not apply here because we do
know not how to compute the gradient of the function f . (We only have
an eﬃcient way to evaluate the function f by taking a weighted sum of the
observed rewards, but we do not necessarily know the reward function itself
to compute the gradient.)

The REINFORCE algorithm uses an another approach to estimate the

gradient of η(θ). We start with the following derivation:

∇θEτ ∼Pθ [f (τ )] = ∇θ

(cid:90)

Pθ(τ )f (τ )dτ

(cid:90)

(cid:90)

(cid:90)

=

=

=

∇θ(Pθ(τ )f (τ ))dτ

(swap integration with gradient)

(∇θPθ(τ ))f (τ )dτ

(becaue f does not depend on θ)

Pθ(τ )(∇θ log Pθ(τ ))f (τ )dτ

= Eτ ∼Pθ [(∇θ log Pθ(τ ))f (τ )]

(because ∇ log Pθ(τ ) = ∇Pθ(τ )
Pθ(τ ) )
(17.3)

Now we have a sample-based estimator for ∇θEτ ∼Pθ [f (τ )]. Let τ (1), . . . , τ (n)
be n empirical samples from Pθ (which are obtained by running the policy
πθ for n times, with T steps for each run). We can estimate the gradient of
η(θ) by

∇θEτ ∼Pθ [f (τ )] = Eτ ∼Pθ [(∇θ log Pθ(τ ))f (τ )]
n
(cid:88)

(∇θ log Pθ(τ (i)))f (τ (i))

≈

1
n

i=1

(17.4)

(17.5)

220

The next question is how to compute log Pθ(τ ). We derive an analyt-
ical formula for log Pθ(τ ) and compute its gradient w.r.t θ (using auto-
diﬀerentiation). Using the deﬁnition of τ , we have

Pθ(τ ) = µ(s0)πθ(a0|s0)Ps0a0(s1)πθ(a1|s1)Ps1a1(s2) · · · PsT −1aT −1(sT )

(17.6)

Here recall that µ to used to denote the density of the distribution of s0. It
follows that

log Pθ(τ ) = log µ(s0) + log πθ(a0|s0) + log Ps0a0(s1) + log πθ(a1|s1)

+ log Ps1a1(s2) + · · · + log PsT −1aT −1(sT )

(17.7)

Taking gradient w.r.t to θ, we obtain

∇θ log Pθ(τ ) = ∇θ log πθ(a0|s0) + ∇θ log πθ(a1|s1) + · · · + ∇θ log πθ(aT −1|sT −1)

Note that many of the terms disappear because they don’t depend on θ and
thus have zero gradients. (This is somewhat important — we don’t know how
to evaluate those terms such as log Ps0a0(s1) because we don’t have access to
the transition probabilities, but luckily those terms have zero gradients!)
Plugging the equation above into equation (17.4), we conclude that

∇θη(θ) = ∇θEτ ∼Pθ [f (τ )] = Eτ ∼Pθ

= Eτ ∼Pθ

(cid:34)(cid:32)T −1
(cid:88)

t=0
(cid:34)(cid:32)T −1
(cid:88)

t=0

(cid:33)

(cid:35)

∇θ log πθ(at|st)

· f (τ )

(cid:33)

∇θ log πθ(at|st)

·

(cid:33)(cid:35)

γtR(st, at)

(cid:32)T −1
(cid:88)

t=0

(17.8)

We estimate the RHS of the equation above by empirical sample trajectories,
and the estimate is unbiased. The vanilla REINFORCE algorithm iteratively
updates the parameter by gradient ascent using the estimated gradients.

The quantity
Interpretation of the policy gradient formula (17.8).
∇θPθ(τ ) = (cid:80)T −1
t=0 ∇θ log πθ(at|st) is intuitively the direction of the change
of θ that will make the trajectory τ more likely to occur (or increase the
probability of choosing action a0, . . . , at−1), and f (τ ) is the total payoﬀ of
this trajectory. Thus, by taking a gradient step, intuitively we are trying to
improve the likelihood of all the trajectories, but with a diﬀerent emphasis
or weight for each τ (or for each set of actions a0, a1, . . . , at−1). If τ is very
rewarding (that is, f (τ ) is large), we try very hard to move in the direction

221

that can increase the probability of the trajectory τ (or the direction that
increases the probability of choosing a0, . . . , at−1), and if τ has low payoﬀ,
we try less hard with a smaller weight.

An interesting fact that follows from formula (17.3) is that

Eτ ∼Pθ

(cid:34)T −1
(cid:88)

t=0

(cid:35)

∇θ log πθ(at|st)

= 0

(17.9)

To see this, we take f (τ ) = 1 (that is, the reward is always a constant),
then the LHS of (17.8) is zero because the payoﬀ is always a ﬁxed constant
(cid:80)T

t=0 γt. Thus the RHS of (17.8) is also zero, which implies (17.9).
In fact, one can verify that Eat∼πθ(·|st)∇θ log πθ(at|st) = 0 for any ﬁxed t
and st.2 This fact has two consequences. First, we can simplify formula (17.8)
to

∇θη(θ) =

=

T −1
(cid:88)

t=0

T −1
(cid:88)

t=0

Eτ ∼Pθ

(cid:34)

(cid:34)

∇θ log πθ(at|st) ·

Eτ ∼Pθ

∇θ log πθ(at|st) ·

where the second equality follows from

(cid:33)(cid:35)

γjR(sj, aj)

(cid:33)(cid:35)

γjR(sj, aj)

(17.10)

(cid:32)T −1
(cid:88)

j=0
(cid:32)T −1
(cid:88)

j≥t

(cid:33)(cid:35)

(cid:34)

Eτ ∼Pθ

∇θ log πθ(at|st) ·

(cid:32)

(cid:88)

0≤j<t

(cid:34)

γjR(sj, aj)

= E

E [∇θ log πθ(at|st)|s0, a0, . . . , st−1, at−1, st] ·

(cid:33)(cid:35)

γjR(sj, aj)

(cid:32)

(cid:88)

0≤j<t

= 0

(because E [∇θ log πθ(at|st)|s0, a0, . . . , st−1, at−1, st] = 0)

Note that here we used the law of total expectation. The outer expecta-
tion in the second line above is over the randomness of s0, a0, . . . , at−1, st,
whereas the inner expectation is over the randomness of at (conditioned on
s0, a0, . . . , at−1, st.) We see that we’ve made the estimator slightly simpler.
The second consequence of Eat∼πθ(·|st)∇θ log πθ(at|st) = 0 is the following: for
any value B(st) that only depends on st, it holds that

Eτ ∼Pθ [∇θ log πθ(at|st) · B(st)]
= E [E [∇θ log πθ(at|st)|s0, a0, . . . , st−1, at−1, st] B(st)]
= 0

(because E [∇θ log πθ(at|st)|s0, a0, . . . , st−1, at−1, st] = 0)

2In general, it’s true that Ex∼pθ [∇ log pθ(x)] = 0.

222

Again here we used the law of total expectation. The outer expecta-
tion in the second line above is over the randomness of s0, a0, . . . , at−1, st,
whereas the inner expectation is over the randomness of at (conditioned on
s0, a0, . . . , at−1, st.) It follows from equation (17.10) and the equation above
that

Eτ ∼Pθ

(cid:34)

(cid:34)

∇θη(θ) =

=

T −1
(cid:88)

t=0

T −1
(cid:88)

t=0

∇θ log πθ(at|st) ·

(cid:32)T −1
(cid:88)

γjR(sj, aj) − γtB(st)

(cid:33)(cid:35)

(cid:33)(cid:35)

j≥t
(cid:32)T −1
(cid:88)

j≥t

γj−tR(sj, aj) − B(st)

(17.11)

Eτ ∼Pθ

∇θ log πθ(at|st) · γt

(cid:104)(cid:80)T −1

Therefore, we will get a diﬀerent estimator for estimating the ∇η(θ) with a
diﬀerence choice of B(·). The beneﬁt of introducing a proper B(·) — which
is often referred to as a baseline — is that it helps reduce the variance of the
estimator.3 It turns out that a near optimal estimator would be the expected
(cid:105)
, which is pretty much the same as the
future payoﬀ E
value function V πθ(st) (if we ignore the diﬀerence between ﬁnite and inﬁnite
horizon.) Here one could estimate the value function V πθ(·) in a crude way,
because its precise value doesn’t inﬂuence the mean of the estimator but only
the variance. This leads to a policy gradient algorithm with baselines stated
in Algorithm 7.4

j≥t γj−tR(sj, aj)|st

3As a heuristic but illustrating example, suppose for a ﬁxed t, the future reward
(cid:80)T −1
j≥t γj−tR(sj, aj) randomly takes two values 1000 + 1 and 1000 − 2 with equal proba-
bility, and the corresponding values for ∇θ log πθ(at|st) are vector z and −z. (Note that
because E [∇θ log πθ(at|st)] = 0, if ∇θ log πθ(at|st) can only take two values uniformly,
then the two values have to two vectors in an opposite direction.) In this case, without
subtracting the baseline, the estimators take two values (1000 + 1)z and −(1000 − 2)z,
whereas after subtracting a baseline of 1000, the estimator has two values z and 2z. The
latter estimator has much lower variance compared to the original estimator.

4We note that the estimator of the gradient in the algorithm does not exactly match
the equation 17.11. If we multiply γt in the summand of equation (17.13), then they will
exactly match. Removing such discount factors empirically works well because it gives a
large update.

223

Algorithm 7 Vanilla policy gradient with baseline

for i = 1, · · · do

Collect a set of trajectories by executing the current policy. Use R≥t

as a shorthand for (cid:80)T −1

j≥t γj−tR(sj, aj)
Fit the baseline by ﬁnding a function B that minimizes

(cid:88)

(cid:88)

(R≥t − B(st))2

τ

t

(17.12)

Update the policy parameter θ with the gradient estimator

(cid:88)

(cid:88)

τ

t

∇θ log πθ(at|st) · (R≥t − B(st))

(17.13)