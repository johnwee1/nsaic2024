]), 'mpg')

Typing hp_func? will show that it has two arguments D and idx — it is a
version of boot_OLS() with the first two arguments frozen — and hence is
ideal as the first argument for boot_SE().
The hp_func() function can now be used in order to create bootstrap
estimates for the intercept and slope terms by randomly sampling from
among the observations with replacement. We first demonstrate its utility
on 10 bootstrap samples.
In [22]: rng = np.random.default_rng (0)
np.array ([ hp_func(Auto ,
rng.choice (392,
392,
replace=True)) for _ in range (10) ])
Out[22]: array ([[39.8806 ,
[38.733 ,
[38.3173 ,
[39.9145 ,
[39.4335 ,
[40.3663 ,
[39.6233 ,
[39.0581 ,
[38.6669 ,
[39.6428 ,

-0.1568] ,
-0.147 ],
-0.1444] ,
-0.1578] ,
-0.1507] ,
-0.1591] ,
-0.1545] ,
-0.1495] ,
-0.1452] ,
-0.1556]])

5.3 Lab: Cross-Validation and the Bootstrap

223

Next, we use the boot_SE() function to compute the standard errors of
1,000 bootstrap estimates for the intercept and slope terms.
In [23]: hp_se = boot_SE(hp_func ,
Auto ,
B=1000 ,
seed =10)
hp_se
Out[23]: intercept
0.8488
horsepower
0.0074
dtype: float64

This indicates that the bootstrap estimate for SE(β̂0 ) is 0.85, and that
the bootstrap estimate for SE(β̂1 ) is 0.0074. As discussed in Section 3.1.2,
standard formulas can be used to compute the standard errors for the
regression coefficients in a linear model. These can be obtained using the
summarize() function from ISLP.sm.
In [24]: hp_model.fit(Auto , Auto['mpg'])
model_se = summarize(hp_model.results_)['std err']
model_se
Out[24]: intercept
0.717
horsepower
0.006
Name: std err , dtype: float64

The standard error estimates for β̂0 and β̂1 obtained using the formulas
from Section 3.1.2 are 0.717 for the intercept and 0.006 for the slope. Interestingly, these are somewhat different from the estimates obtained using
the bootstrap. Does this indicate a problem with the bootstrap? In fact,
it suggests the opposite. Recall that the standard formulas given in Equation 3.8 on page 75 rely on certain assumptions. For example, they depend
on the unknown parameter σ 2 , the noise variance. We then estimate σ 2
using the RSS. Now although the formula for the standard errors do not
rely on the linear model being correct, the estimate for σ 2 does. We see in
Figure 3.8 on page 99 that there is a non-linear relationship in the data,
and so the residuals from a linear fit will be inflated, and so will σ̂ 2 . Secondly, the standard formulas assume (somewhat unrealistically) that the
xi are fixed, and all the variability comes from the variation in the errors
"i . The bootstrap approach does not rely on any of these assumptions, and
so it is likely giving a more accurate estimate of the standard errors of β̂0
and β̂1 than the results from sm.OLS.
Below we compute the bootstrap standard error estimates and the standard linear regression estimates that result from fitting the quadratic model
to the data. Since this model provides a good fit to the data (Figure 3.8),
there is now a better correspondence between the bootstrap estimates and
the standard estimates of SE(β̂0 ), SE(β̂1 ) and SE(β̂2 ).
In [25]: quad_model = MS([ poly('horsepower ', 2, raw=True)])
quad_func = partial(boot_OLS ,
quad_model ,
'mpg')
boot_SE(quad_func , Auto , B=1000)

224

5. Resampling Methods

Out[25]: intercept
poly(horsepower , 2, raw=True)[0]
poly(horsepower , 2, raw=True)[1]
dtype: float64

2.067840
0.033019
0.000120

We compare the results to the standard errors computed using sm.OLS().
In [26]: M = sm.OLS(Auto['mpg'],
quad_model.fit_transform(Auto))
summarize(M.fit())['std err']
Out[26]: intercept
poly(horsepower , 2, raw=True)[0]
poly(horsepower , 2, raw=True)[1]
Name: std err , dtype: float64

5.4

1.800
0.031
0.000

Exercises

Conceptual
1. Using basic statistical properties of the variance, as well as singlevariable calculus, derive (5.6). In other words, prove that α given by
(5.6) does indeed minimize Var(αX + (1 − α)Y ).

2. We will now derive the probability that a given observation is part
of a bootstrap sample. Suppose that we obtain a bootstrap sample
from a set of n observations.
(a) What is the probability that the first bootstrap observation is
not the jth observation from the original sample? Justify your
answer.
(b) What is the probability that the second bootstrap observation
is not the jth observation from the original sample?
(c) Argue that the probability that the jth observation is not in the
bootstrap sample is (1 − 1/n)n .

(d) When n = 5, what is the probability that the jth observation is
in the bootstrap sample?

(e) When n = 100, what is the probability that the jth observation
is in the bootstrap sample?
(f) When n = 10, 000, what is the probability that the jth observation is in the bootstrap sample?
(g) Create a plot that displays, for each integer value of n from 1
to 100, 000, the probability that the jth observation is in the
bootstrap sample. Comment on what you observe.
(h) We will now investigate numerically the probability that a bootstrap sample of size n = 100 contains the jth observation. Here
j = 4. We first create an array store with values that will subsequently be overwritten using the function np.empty(). We then

np.empty()

5.4 Exercises

225

repeatedly create bootstrap samples, and each time we record
whether or not the fifth observation is contained in the bootstrap
sample.
rng = np.random.default_rng (10)
store = np.empty (10000)
for i in range (10000):
store[i] = np.sum(rng.choice (100, replace=True) == 4)
> 0
np.mean(store)

Comment on the results obtained.
3. We now review k-fold cross-validation.
(a) Explain how k-fold cross-validation is implemented.
(b) What are the advantages and disadvantages of k-fold crossvalidation relative to:
i. The validation set approach?
ii. LOOCV?
4. Suppose that we use some statistical learning method to make a prediction for the response Y for a particular value of the predictor X.
Carefully describe how we might estimate the standard deviation of
our prediction.

Applied
5. In Chapter 4, we used logistic regression to predict the probability of
default using income and balance on the Default data set. We will
now estimate the test error of this logistic regression model using the
validation set approach. Do not forget to set a random seed before
beginning your analysis.
(a) Fit a logistic regression model that uses income and balance to
predict default.
(b) Using the validation set approach, estimate the test error of this
model. In order to do this, you must perform the following steps:
i. Split the sample set into a training set and a validation set.
ii. Fit a multiple logistic regression model using only the training observations.
iii. Obtain a prediction of default status for each individual in
the validation set by computing the posterior probability of
default for that individual, and classifying the individual to
the default category if the posterior probability is greater
than 0.5.
iv. Compute the validation set error, which is the fraction of
the observations in the validation set that are misclassified.
(c) Repeat the process in (b) three times, using three different splits
of the observations into a training set and a validation set. Comment on the results obtained.

226

5. Resampling Methods

(d) Now consider a logistic regression model that predicts the probability of default using income, balance, and a dummy variable
for student. Estimate the test error for this model using the validation set approach. Comment on whether or not including a
dummy variable for student leads to a reduction in the test error
rate.
6. We continue to consider the use of a logistic regression model to
predict the probability of default using income and balance on the
Default data set. In particular, we will now compute estimates for the
standard errors of the income and balance logistic regression coefficients in two different ways: (1) using the bootstrap, and (2) using the
standard formula for computing the standard errors in the sm.GLM()
function. Do not forget to set a random seed before beginning your
analysis.
(a) Using the summarize() and sm.GLM() functions, determine the
estimated standard errors for the coefficients associated with
income and balance in a multiple logistic regression model that
uses both predictors.
(b) Write a function, boot_fn(), that takes as input the Default data
set as well as an index of the observations, and that outputs
the coefficient estimates for income and balance in the multiple
logistic regression model.
(c) Following the bootstrap example in the lab, use your boot_fn()
function to estimate the standard errors of the logistic regression
coefficients for income and balance.
(d) Comment on the estimated standard errors obtained using the
sm.GLM() function and using the bootstrap.
7. In Sections 5.1.2 and 5.1.3, we saw that the cross_validate() function
can be used in order to compute the LOOCV test error estimate.
Alternatively, one could compute those quantities using just sm.GLM()
and the predict() method of the fitted model within a for loop. You
will now take this approach in order to compute the LOOCV error
for a simple logistic regression model on the Weekly data set. Recall
that in the context of classification problems, the LOOCV error is
given in (5.4).
(a) Fit a logistic regression model that predicts Direction using Lag1
and Lag2.
(b) Fit a logistic regression model that predicts Direction using Lag1
and Lag2 using all but the first observation.
(c) Use the model from (b) to predict the direction of the first observation. You can do this by predicting that the first observation
will go up if P (Direction = "Up"|Lag1, Lag2) > 0.5. Was this
observation correctly classified?
(d) Write a for loop from i = 1 to i = n, where n is the number of
observations in the data set, that performs each of the following
steps:

5.4 Exercises

227

i. Fit a logistic regression model using all but the ith observation to predict Direction using Lag1 and Lag2.
ii. Compute the posterior probability of the market moving up
for the ith observation.
iii. Use the posterior probability for the ith observation in order
to predict whether or not the market moves up.
iv. Determine whether or not an error was made in predicting
the direction for the ith observation. If an error was made,
then indicate this as a 1, and otherwise indicate it as a 0.
(e) Take the average of the n numbers obtained in (d)iv in order to
obtain the LOOCV estimate for the test error. Comment on the
results.
8. We will now perform cross-validation on a simulated data set.
(a) Generate a simulated data set as follows:
rng = np.random.default_rng (1)
x = rng.normal(size =100)
y = x - 2 * x**2 + rng.normal(size =100)

In this data set, what is n and what is p? Write out the model
used to generate the data in equation form.
(b) Create a scatterplot of X against Y . Comment on what you find.
(c) Set a random seed, and then compute the LOOCV errors that
result from fitting the following four models using least squares:
i. Y = β0 + β1 X + "
ii. Y = β0 + β1 X + β2 X 2 + "
iii. Y = β0 + β1 X + β2 X 2 + β3 X 3 + "
iv. Y = β0 + β1 X + β2 X 2 + β3 X 3 + β4 X 4 + ".
Note you may find it helpful to use the data.frame() function
to create a single data set containing both X and Y .
(d) Repeat (c) using another random seed, and report your results.
Are your results the same as what you got in (c)? Why?
(e) Which of the models in (c) had the smallest LOOCV error? Is
this what you expected? Explain your answer.
(f) Comment on the statistical significance of the coefficient estimates that results from fitting each of the models in (c) using
least squares. Do these results agree with the conclusions drawn
based on the cross-validation results?
9. We will now consider the Boston housing data set, from the ISLP
library.
(a) Based on this data set, provide an estimate for the population
mean of medv. Call this estimate µ̂.

228

5. Resampling Methods

(b) Provide an estimate of the standard error of µ̂. Interpret this
result.
Hint: We can compute the standard error of the sample mean by
dividing the sample standard deviation by the square root of the
number of observations.
(c) Now estimate the standard error of µ̂ using the bootstrap. How
does this compare to your answer from (b)?
(d) Based on your bootstrap estimate from (c), provide a 95 % confidence interval for the mean of medv. Compare it to the results
obtained by using Boston['medv'].std() and the two standard
error rule (3.9).
Hint: You can approximate a 95 % confidence interval using the
formula [µ̂ − 2SE(µ̂), µ̂ + 2SE(µ̂)].
(e) Based on this data set, provide an estimate, µ̂med , for the median
value of medv in the population.

(f) We now would like to estimate the standard error of µ̂med . Unfortunately, there is no simple formula for computing the standard
error of the median. Instead, estimate the standard error of the
median using the bootstrap. Comment on your findings.
(g) Based on this data set, provide an estimate for the tenth percentile of medv in Boston census tracts. Call this quantity µ̂0.1 .
(You can use the np.percentile() function.)
np.

(h) Use the bootstrap to estimate the standard error of µ̂0.1 . Com- percentile()
ment on your findings.

6
Linear Model Selection
and Regularization

In the regression setting, the standard linear model
Y = β 0 + β 1 X1 + · · · + β p Xp + "

(6.1)

is commonly used to describe the relationship between a response Y and
a set of variables X1 , X2 , . . . , Xp . We have seen in Chapter 3 that one
typically fits this model using least squares.
In the chapters that follow, we consider some approaches for extending
the linear model framework. In Chapter 7 we generalize (6.1) in order to
accommodate non-linear, but still additive, relationships, while in Chapters 8 and 10 we consider even more general non-linear models. However,
the linear model has distinct advantages in terms of inference and, on realworld problems, is often surprisingly competitive in relation to non-linear
methods. Hence, before moving to the non-linear world, we discuss in this
chapter some ways in which the simple linear model can be improved, by replacing plain least squares fitting with some alternative fitting procedures.
Why might we want to use another fitting procedure instead of least
squares? As we will see, alternative fitting procedures can yield better prediction accuracy and model interpretability.
• Prediction Accuracy: Provided that the true relationship between the
response and the predictors is approximately linear, the least squares
estimates will have low bias. If n + p—that is, if n, the number of
observations, is much larger than p, the number of variables—then the
least squares estimates tend to also have low variance, and hence will
perform well on test observations. However, if n is not much larger
than p, then there can be a lot of variability in the least squares fit,
resulting in overfitting and consequently poor predictions on future
observations not used in model training. And if p > n, then there is no
longer a unique least squares coefficient estimate: there are infinitely
© Springer Nature Switzerland AG 2023
G. James et al., An Introduction to Statistical Learning, Springer Texts in Statistics,
https://doi.org/10.1007/978-3-031-38747-0_6

229

230

6. Linear Model Selection and Regularization

many solutions. Each of these least squares solutions gives zero error
on the training data, but