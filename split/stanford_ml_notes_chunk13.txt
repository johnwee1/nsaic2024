ed over the random draw of
the training set S and the randomness of Î¾)56

MSE(x) = ES,Î¾[(y âˆ’ hS(x))2]

(8.2)

We will decompose the MSE into a bias and variance term. We start by
stating a following simple mathematical tool that will be used twice below.

Claim 8.1.1: Suppose A and B are two independent real random variables
and E[A] = 0. Then, E[(A + B)2] = E[A2] + E[B2].

As a corollary, because a random variable A is independent with a con-

stant c, when E[A] = 0, we have E[(A + c)2] = E[A2] + c2.

The proof of the claim follows from expanding the square: E[(A + B)2] =
E[A2] + E[B2] + 2E[AB] = E[A2] + E[B2]. Here we used the independence to
show that E[AB] = E[A]E[B] = 0.

Using Claim 8.1.1 with A = Î¾ and B = h(cid:63)(x) âˆ’ Ë†hS(x), we have

MSE(x) = E[(y âˆ’ hS(x))2] = E[(Î¾ + (h(cid:63)(x) âˆ’ hS(x)))2]

(8.3)
= E[Î¾2] + E[(h(cid:63)(x) âˆ’ hS(x))2] (by Claim 8.1.1)
= Ïƒ2 + E[(h(cid:63)(x) âˆ’ hS(x))2]
(8.4)

Then, letâ€™s deï¬ne havg(x) = ES[hS(x)] as the â€œaverage modelâ€â€”the model
obtained by drawing an inï¬nite number of datasets, training on them, and
averaging their predictions on x. Note that havg is a hypothetical model for
analytical purposes that can not be obtained in reality (because we donâ€™t

5For simplicity, the test input x is considered to be ï¬xed here, but the same conceptual

message holds when we average over the choice of xâ€™s.

6The subscript under the expectation symbol is to emphasize the variables that are

considered as random by the expectation operation.

121

It turns out that for many cases, havg
have inï¬nite number of datasets).
is (approximately) equal to the the model obtained by training on a single
dataset with inï¬nite samples. Thus, we can also intuitively interpret havg this
way, which is consistent with our intuitive deï¬nition of bias in the previous
subsection.

We can further decompose MSE(x) by letting c = h(cid:63)(x)âˆ’havg(x) (which is
a constant that does not depend on the choice of S!) and A = havg(x)âˆ’hS(x)
in the corollary part of Claim 8.1.1:

MSE(x) = Ïƒ2 + E[(h(cid:63)(x) âˆ’ hS(x))2]

= Ïƒ2 + (h(cid:63)(x) âˆ’ havg(x))2 + E[(havg âˆ’ hS(x))2]
=

+ (h(cid:63)(x) âˆ’ havg(x))2
(cid:123)(cid:122)
(cid:125)
(cid:44) bias2

(cid:124)

+ var(hS(x))
(cid:125)
(cid:123)(cid:122)
(cid:44) variance

(cid:124)

Ïƒ2
(cid:124)(cid:123)(cid:122)(cid:125)
unavoidable

(8.5)
(8.6)
(8.7)

We call the second term the bias (square) and the third term the variance. As
discussed before, the bias captures the part of the error that are introduced
due to the lack of expressivity of the model. Recall that havg can be thought
of as the best possible model learned even with inï¬nite data. Thus, the bias is
not due to the lack of data, but is rather caused by that the family of models
fundamentally cannot approximate the h(cid:63). For example, in the illustrating
example in Figure 8.2, because any linear model cannot approximate the
true quadratic function h(cid:63), neither can havg, and thus the bias term has to
be large.

The variance term captures how the random nature of the ï¬nite dataset
It measures the sensitivity of the
introduces errors in the learned model.
learned model to the randomness in the dataset. It often decreases as the
size of the dataset increases.

There is nothing we can do about the ï¬rst term Ïƒ2 as we can not predict

the noise Î¾ by deï¬nition.

Finally, we note that the bias-variance decomposition for classiï¬cation
is much less clear than for regression problems. There have been several
proposals, but there is as yet no agreement on what is the â€œrightâ€ and/or
the most useful formalism.

8.2 The double descent phenomenon

Model-wise double descent. Recent works have demonstrated that the
test error can present a â€œdouble descentâ€ phenomenon in a range of machine

122

learning models including linear models and deep neural networks.7 The
conventional wisdom, as discussed in Section 8.1, is that as we increase the
model complexity, the test error ï¬rst decreases and then increases, as illus-
trated in Figure 8.8. However, in many cases, we empirically observe that
the test error can have a second descentâ€”it ï¬rst decreases, then increases
to a peak around when the model size is large enough to ï¬t all the training
data very well, and then decreases again in the so-called overparameterized
regime, where the number of parameters is larger than the number of data
points. See Figure 8.10 for an illustration of the typical curves of test errors
against model complexity (measured by the number of parameters). To some
extent, the overparameterized regime with the second descent is considered as
new to the machine learning communityâ€”partly because lightly-regularized,
overparameterized models are only extensively used in the deep learning era.
A practical implication of the phenomenon is that one should not hold back
from scaling into and experimenting with over-parametrized models because
the test error may well decrease again to a level even smaller than the previ-
ous lowest point. Actually, in many cases, larger overparameterized models
always lead to a better test performance (meaning there wonâ€™t be a second
ascent after the second descent).

Figure 8.10: A typical model-wise double descent phenomenon. As the num-
ber of parameters increases, the test error ï¬rst decreases when the number of
parameters is smaller than the training data. Then in the overparameterized
regime, the test error decreases again.

7The discovery of the phenomenon perhaps dates back to Opper [1995, 2001], and has

been recently popularized by Belkin et al. [2020], Hastie et al. [2019], etc.

# parameterstesterrortypicallywhen # parametersis sufficient to fit the dataclassical regime:bias-variance tradeoffmodern regime:over-parameterization123

Sample-wise double descent. A priori, we would expect that more
training examples always lead to smaller test errorsâ€”more samples give
strictly more information for the algorithm to learn from. However, recent
work [Nakkiran, 2019] observes that the test error is not monotonically de-
creasing as we increase the sample size. Instead, as shown in Figure 8.11, the
test error decreases, and then increases and peaks around when the number
of examples (denoted by n) is similar to the number of parameters (denoted
by d), and then decreases again. We refer to this as the sample-wise dou-
ble descent phenomenon. To some extent, sample-wise double descent and
model-wise double descent are essentially describing similar phenomenaâ€”the
test error is peaked when n â‰ˆ d.

Explanation and mitigation strategy. The sample-wise double descent,
or, in particular, the peak of test error at n â‰ˆ d, suggests that the existing
training algorithms evaluated in these experiments are far from optimal when
n â‰ˆ d. We will be better oï¬€ by tossing away some examples and run the
algorithms with a smaller sample size to steer clear of the peak. In other
words, in principle, there are other algorithms that can achieve smaller test
error when n â‰ˆ d, but the algorithms evaluated in these experiments fail to
do so. The sub-optimality of the learning procedure appears to be the culprit
of the peak in both sample-wise and model-wise double descent.

Indeed, with an optimally-tuned regularization (which will be discussed
more in Section 9), the test error in the n â‰ˆ d regime can be dramatically
improved, and the model-wise and sample-wise double descent are both mit-
igated. See Figure 8.11.

The intuition above only explains the peak in the model-wise and sample-
wise double descent, but does not explain the second descent in the model-
wise double descentâ€”why overparameterized models are able to generalize
so well. The theoretical understanding of overparameterized models is an ac-
tive research area with many recent advances. A typical explanation is that
the commonly-used optimizers such as gradient descent provide an implicit
regularization eï¬€ect (which will be discussed in more detail in Section 9.2).
In other words, even in the overparameterized regime and with an unregular-
ized loss function, the model is still implicitly regularized, and thus exhibits
a better test performance than an arbitrary solution that ï¬ts the data. For
example, for linear models, when n (cid:28) d, the gradient descent optimizer with
zero initialization ï¬nds the minimum norm solution that ï¬ts the data (in-
stead of an arbitrary solution that ï¬ts the data), and the minimum norm reg-
ularizer turns out to be a suï¬ƒciently good for the overparameterized regime
(but itâ€™s not a good regularizer when n â‰ˆ d, resulting in the peak of test

error).

124

Figure 8.11: Left: The sample-wise double descent phenomenon for linear
models. Right: The sample-wise double descent with diï¬€erent regularization
strength for linear models. Using the optimal regularization parameter Î»
(optimally tuned for each n, shown in green solid curve) mitigates double
descent. Setup: The data distribution of (x, y) is x âˆ¼ N (0, Id) and y âˆ¼
x(cid:62)Î² + N (0, Ïƒ2) where d = 500, Ïƒ = 0.5 and (cid:107)Î²(cid:107)2 = 1.8

Finally, we also remark that the double descent phenomenon has been
mostly observed when the model complexity is measured by the number of
parameters. It is unclear if and when the number of parameters is the best
complexity measure of a model. For example, in many situations, the norm
of the models is used as a complexity measure. As shown in Figure 8.12
right, for a particular linear case, if we plot the test error against the norm
of the learnt model, the double descent phenomenon no longer occurs. This
is partly because the norm of the learned model is also peaked around n â‰ˆ d
(See Figure 8.12 (middle) or Belkin et al. [2019], Mei and Montanari [2022],
and discussions in Section 10.8 of James et al. [2021]). For deep neural
networks, the correct complexity measure is even more elusive. The study of
double descent phenomenon is an active research topic.

8The ï¬gure is reproduced from Figure 1 of Nakkiran et al. [2020]. Similar phenomenon

are also observed in Hastie et al. [2022], Mei and Montanari [2022]

02004006008001000Num Samples0.000.250.500.751.001.251.501.752.00Test ErrorTest Error vs. # SamplesTest Error125

Figure 8.12: Left: The double descent phenomenon, where the number of pa-
rameters is used as the model complexity. Middle: The norm of the learned
model is peaked around n â‰ˆ d. Right: The test error against the norm of
the learnt model. The color bar indicate the number of parameters and the
arrows indicates the direction of increasing model size. Their relationship
are closer to the convention wisdom than to a double descent. Setup: We
consider a linear regression with a ï¬xed dataset of size n = 500. The input
x is a random ReLU feature on Fashion-MNIST, and output y âˆˆ R10 is the
one-hot label. This is the same setting as in Section 5.2 of Nakkiran et al.
[2020].

02505007501000# parameters0.00.20.40.60.81.0test errortest error vs. # params02004006008001000# parameters010203040normnorm vs. # params010203040norm0.00.20.40.60.81.0test errord=n# parameterstest error vs. norm020040060080010008.3 Sample

complexity bounds

(optional

126

readings)

8.3.1 Preliminaries

In this set of notes, we begin our foray into learning theory. Apart from
being interesting and enlightening in its own right, this discussion will also
help us hone our intuitions and derive rules of thumb about how to best
apply learning algorithms in diï¬€erent settings. We will also seek to answer
a few questions: First, can we make formal the bias/variance tradeoï¬€ that
was just discussed? This will also eventually lead us to talk about model
selection methods, which can, for instance, automatically decide what order
polynomial to ï¬t to a training set. Second, in machine learning itâ€™s really
generalization error that we care about, but most learning algorithms ï¬t their
models to the training set. Why should doing well on the training set tell us
anything about generalization error? Speciï¬cally, can we relate error on the
training set to generalization error? Third and ï¬nally, are there conditions
under which we can actually prove that learning algorithms will work well?

We start with two simple but very useful lemmas.

Lemma. (The union bound). Let A1, A2, . . . , Ak be k diï¬€erent events (that
may not be independent). Then

P (A1 âˆª Â· Â· Â· âˆª Ak) â‰¤ P (A1) + . . . + P (Ak).

In probability theory, the union bound is usually stated as an axiom
(and thus we wonâ€™t try to prove it), but it also makes intuitive sense: The
probability of any one of k events happening is at most the sum of the
probabilities of the k diï¬€erent events.

Lemma. (Hoeï¬€ding inequality) Let Z1, . . . , Zn be n independent and iden-
tically distributed (iid) random variables drawn from a Bernoulli(Ï†) distri-
bution. I.e., P (Zi = 1) = Ï†, and P (Zi = 0) = 1 âˆ’ Ï†. Let Ë†Ï† = (1/n) (cid:80)n
i=1 Zi
be the mean of these random variables, and let any Î³ > 0 be ï¬xed. Then

P (|Ï† âˆ’ Ë†Ï†| > Î³) â‰¤ 2 exp(âˆ’2Î³2n)

This lemma (which in learning theory is also called the Chernoï¬€ bound)
says that if we take Ë†Ï†â€”the average of n Bernoulli(Ï†) random variablesâ€”to
be our estimate of Ï†, then the probability of our being far from the true value
is small, so long as n is large. Another way of saying this is that if you have
a biased coin whose chance of landing on heads is Ï†, then if you toss it n

127

times and calculate the fraction of times that it came up heads, that will be
a good estimate of Ï† with high probability (if n is large).

Using just these two lemmas, we will be able to prove some of the deepest

and most important results in learning theory.

To simplify our exposition, letâ€™s restrict our attention to binary classiï¬ca-
tion in which the labels are y âˆˆ {0, 1}. Everything weâ€™ll say here generalizes
to other problems, including regression and multi-class classiï¬cation.

We assume we are given a training set S = {(x(i), y(i)); i = 1, . . . , n} of size
n, where the training examples (x(i), y(i)) are drawn iid from some probability
distribution D. For a hypothesis h, we deï¬ne the training error (also called
the empirical risk or empirical error in learning theory) to be

Ë†Îµ(h) =

1
n

n
(cid:88)

i=1

1{h(x(i)) (cid:54)= y(i)}.

This is just the fraction of training examples that h misclassiï¬es. When we
want to make explicit the dependence of Ë†Îµ(h) on the training set S, we may
also write this a Ë†ÎµS(h). We also deï¬ne the generalization error to be

Îµ(h) = P(x,y)âˆ¼D(h(x) (cid:54)= y).

I.e. this is the probability that, if we now draw a new example (x, y) from
the distribution D, h will misclassify it.

Note that we have assumed that the training data was drawn from the
same distribution D with which weâ€™re going to evaluate our hypotheses (in
the deï¬nition of generalization error). This is sometimes also referred to as
one of the PAC assumptions.9

Consider the setting of linear classiï¬cation, and let hÎ¸(x) = 1{Î¸T x â‰¥ 0}.
Whatâ€™s a reasonable way of ï¬tting the parameters Î¸? One approach is to try
to minimize the training error, and pick

Ë†Î¸ = arg min

Î¸

Ë†Îµ(hÎ¸).

We call this process empirical risk minimization (ERM), and the resulting
hypothesis output by the learning algorithm is Ë†h = hË†Î¸. We think of ERM
as the most â€œbasicâ€ learning algorithm, and it will be this algorithm that we

9PAC stands for â€œprobably approximately correc