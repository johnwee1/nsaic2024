o master’s and PhD students in fields as disparate as business
administration, biology, and computer science, as well as to quantitativelyoriented upper-division undergraduates. It is important for this diverse
group to be able to understand the models, intuitions, and strengths and
weaknesses of the various approaches. But for this audience, many of the
technical details behind statistical learning methods, such as optimization algorithms and theoretical properties, are not of primary interest.
We believe that these students do not need a deep understanding of these
aspects in order to become informed users of the various methodologies, and
in order to contribute to their chosen fields through the use of statistical
learning tools.
ISL is based on the following four premises.
1. Many statistical learning methods are relevant and useful in a wide
range of academic and non-academic disciplines, beyond just the statistical sciences. We believe that many contemporary statistical learning procedures should, and will, become as widely available and used
as is currently the case for classical methods such as linear regression. As a result, rather than attempting to consider every possible
approach (an impossible task), we have concentrated on presenting
the methods that we believe are most widely applicable.
2. Statistical learning should not be viewed as a series of black boxes. No
single approach will perform well in all possible applications. Without understanding all of the cogs inside the box, or the interaction
between those cogs, it is impossible to select the best box. Hence, we
have attempted to carefully describe the model, intuition, assumptions, and trade-offs behind each of the methods that we consider.
3. While it is important to know what job is performed by each cog, it is
not necessary to have the skills to construct the machine inside the
box! Thus, we have minimized discussion of technical details related
to fitting procedures and theoretical properties. We assume that the
reader is comfortable with basic mathematical concepts, but we do
not assume a graduate degree in the mathematical sciences. For instance, we have almost completely avoided the use of matrix algebra,
and it is possible to understand the entire book without a detailed
knowledge of matrices and vectors.
4. We presume that the reader is interested in applying statistical learning methods to real-world problems. In order to facilitate this, as well
as to motivate the techniques discussed, we have devoted a section
within each chapter to computer labs. In each lab, we walk the reader
through a realistic application of the methods considered in that chapter. When we have taught this material in our courses, we have allocated roughly one-third of classroom time to working through the
labs, and we have found them to be extremely useful. Many of the
less computationally-oriented students who were initially intimidated
by the labs got the hang of things over the course of the quarter or
semester. This book originally appeared (2013, second edition 2021)

8

1. Introduction

with computer labs written in the R language. Since then, there has
been increasing demand for Python implementations of the important techniques in statistical learning. Consequently, this version has
labs in Python. There are a rapidly growing number of Python packages available, and by examination of the imports at the beginning of
each lab, readers will see that we have carefully selected and used the
most appropriate. We have also supplied some additional code and
functionality in our package ISLP. However, the labs in ISL are selfcontained, and can be skipped if the reader wishes to use a different
software package or does not wish to apply the methods discussed to
real-world problems.

Who Should Read This Book?
This book is intended for anyone who is interested in using modern statistical methods for modeling and prediction from data. This group includes
scientists, engineers, data analysts, data scientists, and quants, but also less
technical individuals with degrees in non-quantitative fields such as the social sciences or business. We expect that the reader will have had at least
one elementary course in statistics. Background in linear regression is also
useful, though not required, since we review the key concepts behind linear
regression in Chapter 3. The mathematical level of this book is modest,
and a detailed knowledge of matrix operations is not required. This book
provides an introduction to Python. Previous exposure to a programming
language, such as MATLAB or R, is useful but not required.
The first edition of this textbook has been used to teach master’s and
PhD students in business, economics, computer science, biology, earth sciences, psychology, and many other areas of the physical and social sciences.
It has also been used to teach advanced undergraduates who have already
taken a course on linear regression. In the context of a more mathematically rigorous course in which ESL serves as the primary textbook, ISL
could be used as a supplementary text for teaching computational aspects
of the various approaches.

Notation and Simple Matrix Algebra
Choosing notation for a textbook is always a difficult task. For the most
part we adopt the same notational conventions as ESL.
We will use n to represent the number of distinct data points, or observations, in our sample. We will let p denote the number of variables that are
available for use in making predictions. For example, the Wage data set consists of 11 variables for 3,000 people, so we have n = 3,000 observations and
p = 11 variables (such as year, age, race, and more). Note that throughout
this book, we indicate variable names using colored font: Variable Name.
In some examples, p might be quite large, such as on the order of thousands or even millions; this situation arises quite often, for example, in the
analysis of modern biological data or web-based advertising data.

1. Introduction

9

In general, we will let xij represent the value of the jth variable for the
ith observation, where i = 1, 2, . . . , n and j = 1, 2, . . . , p. Throughout this
book, i will be used to index the samples or observations (from 1 to n) and
j will be used to index the variables (from 1 to p). We let X denote an
n × p matrix whose (i, j)th element is xij . That is,


x11 x12 . . . x1p
 x21 x22 . . . x2p 


X= .
..
..  .
..
 ..
.
.
. 
xn1 xn2 . . . xnp

For readers who are unfamiliar with matrices, it is useful to visualize X as
a spreadsheet of numbers with n rows and p columns.
At times we will be interested in the rows of X, which we write as
x1 , x2 , . . . , xn . Here xi is a vector of length p, containing the p variable
measurements for the ith observation. That is,
 
xi1
xi2 
 
xi =  .  .
(1.1)
 .. 
xip

(Vectors are by default represented as columns.) For example, for the Wage
data, xi is a vector of length 11, consisting of year, age, race, and other
values for the ith individual. At other times we will instead be interested
in the columns of X, which we write as x1 , x2 , . . . , xp . Each is a vector of
length n. That is,
 
x1j
 x2j 
 
xj =  .  .
 .. 
xnj

For example, for the Wage data, x1 contains the n = 3,000 values for year.
Using this notation, the matrix X can be written as
'
(
X = x1 x2 · · · xp ,
or

 T
x1
xT2 
 
X =  . .
 .. 
xTn

The T notation denotes the transpose of a matrix or vector. So, for example,


x11 x21 . . . xn1
x12 x22 . . . xn2 


XT =  .
..
..  ,
 ..
.
. 
x1p x2p . . . xnp

10

1. Introduction

while

'
xTi = xi1

xi2

···

(
xip .

We use yi to denote the ith observation of the variable on which we
wish to make predictions, such as wage. Hence, we write the set of all n
observations in vector form as
 
y1
 y2 
 
y =  . .
 .. 
yn

Then our observed data consists of {(x1 , y1 ), (x2 , y2 ), . . . , (xn , yn )}, where
each xi is a vector of length p. (If p = 1, then xi is simply a scalar.)
In this text, a vector of length n will always be denoted in lower case
bold; e.g.
 
a1
 a2 
 
a =  . .
 .. 
an

However, vectors that are not of length n (such as feature vectors of length
p, as in (1.1)) will be denoted in lower case normal font, e.g. a. Scalars will
also be denoted in lower case normal font, e.g. a. In the rare cases in which
these two uses for lower case normal font lead to ambiguity, we will clarify
which use is intended. Matrices will be denoted using bold capitals, such
as A. Random variables will be denoted using capital normal font, e.g. A,
regardless of their dimensions.
Occasionally we will want to indicate the dimension of a particular object.
To indicate that an object is a scalar, we will use the notation a ∈ R. To
indicate that it is a vector of length k, we will use a ∈ Rk (or a ∈ Rn if
it is of length n). We will indicate that an object is an r × s matrix using
A ∈ Rr×s .
We have avoided using matrix algebra whenever possible. However, in
a few instances it becomes too cumbersome to avoid it entirely. In these
rare instances it is important to understand the concept of multiplying
two matrices. Suppose that A ∈ Rr×d and B ∈ Rd×s . Then the product
of A and B is denoted AB. The (i, j)th element of AB is computed by
multiplying each element of the ith row of A )
by the corresponding element
d
of the jth column of B. That is, (AB)ij = k=1 aik bkj . As an example,
consider
*
+
*
+
1 2
5 6
A=
and B =
.
3 4
7 8
Then

AB =

*

1 2
3 4

+*

5 6
7 8

+

=

*

1×5+2×7
3×5+4×7

+ *
+
1×6+2×8
19 22
=
.
3×6+4×8
43 50

Note that this operation produces an r × s matrix. It is only possible to
compute AB if the number of columns of A is the same as the number of
rows of B.

1. Introduction

11

Organization of This Book
Chapter 2 introduces the basic terminology and concepts behind statistical learning. This chapter also presents the K-nearest neighbor classifier, a
very simple method that works surprisingly well on many problems. Chapters 3 and 4 cover classical linear methods for regression and classification.
In particular, Chapter 3 reviews linear regression, the fundamental starting point for all regression methods. In Chapter 4 we discuss two of the
most important classical classification methods, logistic regression and linear discriminant analysis.
A central problem in all statistical learning situations involves choosing
the best method for a given application. Hence, in Chapter 5 we introduce cross-validation and the bootstrap, which can be used to estimate the
accuracy of a number of different methods in order to choose the best one.
Much of the recent research in statistical learning has concentrated on
non-linear methods. However, linear methods often have advantages over
their non-linear competitors in terms of interpretability and sometimes also
accuracy. Hence, in Chapter 6 we consider a host of linear methods, both
classical and more modern, which offer potential improvements over standard linear regression. These include stepwise selection, ridge regression,
principal components regression, and the lasso.
The remaining chapters move into the world of non-linear statistical
learning. We first introduce in Chapter 7 a number of non-linear methods that work well for problems with a single input variable. We then
show how these methods can be used to fit non-linear additive models for
which there is more than one input. In Chapter 8, we investigate tree-based
methods, including bagging, boosting, and random forests. Support vector
machines, a set of approaches for performing both linear and non-linear
classification, are discussed in Chapter 9. We cover deep learning, an approach for non-linear regression and classification that has received a lot
of attention in recent years, in Chapter 10. Chapter 11 explores survival
analysis, a regression approach that is specialized to the setting in which
the output variable is censored, i.e. not fully observed.
In Chapter 12, we consider the unsupervised setting in which we have
input variables but no output variable. In particular, we present principal components analysis, K-means clustering, and hierarchical clustering.
Finally, in Chapter 13 we cover the very important topic of multiple hypothesis testing.
At the end of each chapter, we present one or more Python lab sections
in which we systematically work through applications of the various methods discussed in that chapter. These labs demonstrate the strengths and
weaknesses of the various approaches, and also provide a useful reference
for the syntax required to implement the various methods. The reader may
choose to work through the labs at their own pace, or the labs may be the
focus of group sessions as part of a classroom environment. Within each
Python lab, we present the results that we obtained when we performed the
lab at the time of writing this book. However, new versions of Python are
continuously released, and over time, the packages called in the labs will
be updated. Therefore, in the future, it is possible that the results shown in

12

1. Introduction

Name

Auto
Bikeshare
Boston
BrainCancer
Caravan
Carseats
College
Credit
Default
Fund
Hitters
Khan
NCI60
NYSE
OJ
Portfolio
Publication
Smarket
USArrests
Wage
Weekly

Description

Gas mileage, horsepower, and other information for cars.
Hourly usage of a bike sharing program in Washington, DC.
Housing values and other information about Boston census tracts.
Survival times for patients diagnosed with brain cancer.
Information about individuals offered caravan insurance.
Information about car seat sales in 400 stores.
Demographic characteristics, tuition, and more for USA colleges.
Information about credit card debt for 400 customers.
Customer default records for a credit card company.
Returns of 2,000 hedge fund managers over 50 months.
Records and salaries for baseball players.
Gene expression measurements for four cancer types.
Gene expression measurements for 64 cancer cell lines.
Returns, volatility, and volume for the New York Stock Exchange.
Sales information for Citrus Hill and Minute Maid orange juice.
Past values of financial assets, for use in portfolio allocation.
Time to publication for 244 clinical trials.
Daily percentage returns for S&P 500 over a 5-year period.
Crime statistics per 100,000 residents in 50 states of USA.
Income survey data for men in central Atlantic region of USA.
1,089 weekly stock market returns for 21 years.

TABLE 1.1. A list of data sets needed to perform the labs and exercises in this
textbook. All data sets are available in the ISLP package, with the exception of
USArrests, which is part of the base R distribution, but accessible from Python.

the lab sections may no longer correspond precisely to the results obtained
by the reader who performs the labs. As necessary, we will post updates to
the labs on the book website.
We use the
symbol to denote sections or exercises that contain more
challenging concepts. These can be easily skipped by readers who do not
wish to delve as deeply into the material, or who lack the mathematical
background.

Data Sets Used in Labs and Exercises
In this textbook, we illustrate statistical learning methods using applications from marketing, finance, biology, and other areas. The ISLP package
contains a number of data sets that are required in order to perform the
labs and exercises associated with this book. One other data set is part of
the base R distribu