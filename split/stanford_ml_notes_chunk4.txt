er of words modeled and hence reducing our computational and space requirements,
this also has the advantage of allowing us to model/include as a feature many words
that may appear in your email (such as “cs229”) but that you won’t ﬁnd in a dictionary.
Sometimes (as in the homework), we also exclude the very high frequency words (which
will be words like “the,” “of,” “and”; these high frequency, “content free” words are called
stop words) since they occur in so many documents and do little to indicate whether an
email is spam or non-spam.

43

the Naive Bayes assumption is an extremely strong assumptions, the resulting
algorithm works well on many problems.

Our model is parameterized by φj|y=1 = p(xj = 1|y = 1), φj|y=0 = p(xj =
1|y = 0), and φy = p(y = 1). As usual, given a training set {(x(i), y(i)); i =
1, . . . , n}, we can write down the joint likelihood of the data:

L(φy, φj|y=0, φj|y=1) =

n
(cid:89)

i=1

p(x(i), y(i)).

Maximizing this with respect to φy, φj|y=0 and φj|y=1 gives the maximum
likelihood estimates:

φj|y=1 =

φj|y=0 =

φy =

(cid:80)n

i=1 1{x(i)
(cid:80)n

(cid:80)n

i=1 1{x(i)
(cid:80)n

j = 1 ∧ y(i) = 1}

i=1 1{y(i) = 1}

j = 1 ∧ y(i) = 0}

i=1 1{y(i) = 0}

(cid:80)n

i=1 1{y(i) = 1}
n

In the equations above, the “∧” symbol means “and.” The parameters have
a very natural interpretation. For instance, φj|y=1 is just the fraction of the
spam (y = 1) emails in which word j does appear.

Having ﬁt all these parameters, to make a prediction on a new example

with features x, we then simply calculate

p(y = 1|x) =

p(x|y = 1)p(y = 1)
p(x)

(cid:16)(cid:81)d

(cid:17)
j=1 p(xj|y = 1)
(cid:17)
j=1 p(xj|y = 1)

p(y = 1) +

(cid:16)(cid:81)d

=

(cid:16)(cid:81)d

p(y = 1)

(cid:17)
j=1 p(xj|y = 0)

,

p(y = 0)

and pick whichever class has the higher posterior probability.

Lastly, we note that while we have developed the Naive Bayes algorithm
mainly for the case of problems where the features xj are binary-valued, the
generalization to where xj can take values in {1, 2, . . . , kj} is straightforward.
Here, we would simply model p(xj|y) as multinomial rather than as Bernoulli.
Indeed, even if some original input attribute (say, the living area of a house,
as in our earlier example) were continuous valued, it is quite common to
discretize it—that is, turn it into a small set of discrete values—and apply
Naive Bayes. For instance, if we use some feature xj to represent living area,
we might discretize the continuous values as follows:

44

1

xi

1200-1600 >1600

800-1200
3

Living area (sq. feet) < 400

400-800
2
Thus, for a house with living area 890 square feet, we would set the value
of the corresponding feature xj to 3. We can then apply the Naive Bayes
algorithm, and model p(xj|y) with a multinomial distribution, as described
previously. When the original, continuous-valued attributes are not well-
modeled by a multivariate normal distribution, discretizing the features and
using Naive Bayes (instead of GDA) will often result in a better classiﬁer.

5

4

4.2.1 Laplace smoothing

The Naive Bayes algorithm as we have described it will work fairly well
for many problems, but there is a simple change that makes it work much
better, especially for text classiﬁcation. Let’s brieﬂy discuss a problem with
the algorithm in its current form, and then talk about how we can ﬁx it.

Consider spam/email classiﬁcation, and let’s suppose that, we are in the
year of 20xx, after completing CS229 and having done excellent work on the
project, you decide around May 20xx to submit work you did to the NeurIPS
conference for publication.3 Because you end up discussing the conference
in your emails, you also start getting messages with the word “neurips”
in it. But this is your ﬁrst NeurIPS paper, and until this time, you had
not previously seen any emails containing the word “neurips”; in particular
“neurips” did not ever appear in your training set of spam/non-spam emails.
Assuming that “neurips” was the 35000th word in the dictionary, your Naive
Bayes spam ﬁlter therefore had picked its maximum likelihood estimates of
the parameters φ35000|y to be

φ35000|y=1 =

φ35000|y=0 =

(cid:80)n

i=1 1{x(i)
(cid:80)n

(cid:80)n

i=1 1{x(i)
(cid:80)n

35000 = 1 ∧ y(i) = 1}
i=1 1{y(i) = 1}
35000 = 1 ∧ y(i) = 0}
i=1 1{y(i) = 0}

= 0

= 0

I.e., because it has never seen “neurips” before in either spam or non-spam
training examples, it thinks the probability of seeing it in either type of email
is zero. Hence, when trying to decide if one of these messages containing

3NeurIPS is one of the top machine learning conferences. The deadline for submitting

a paper is typically in May-June.

“neurips” is spam, it calculates the class posterior probabilities, and obtains

45

p(y = 1|x) =

(cid:81)d
j=1 p(xj|y = 1)p(y = 1) + (cid:81)d

j=1 p(xj|y = 1)p(y = 1)

(cid:81)d

j=1 p(xj|y = 0)p(y = 0)

=

0
0

.

This is because each of the terms “(cid:81)d
j=1 p(xj|y)” includes a term p(x35000|y) =
0 that is multiplied into it. Hence, our algorithm obtains 0/0, and doesn’t
know how to make a prediction.

Stating the problem more broadly, it is statistically a bad idea to esti-
mate the probability of some event to be zero just because you haven’t seen
it before in your ﬁnite training set. Take the problem of estimating the mean
of a multinomial random variable z taking values in {1, . . . , k}. We can pa-
rameterize our multinomial with φj = p(z = j). Given a set of n independent
observations {z(1), . . . , z(n)}, the maximum likelihood estimates are given by

φj =

(cid:80)n

i=1 1{z(i) = j}
n

.

As we saw previously, if we were to use these maximum likelihood estimates,
then some of the φj’s might end up as zero, which was a problem. To avoid
this, we can use Laplace smoothing, which replaces the above estimate
with

φj =

1 + (cid:80)n

i=1 1{z(i) = j}
k + n

.

Here, we’ve added 1 to the numerator, and k to the denominator. Note that
(cid:80)k
j=1 φj = 1 still holds (check this yourself!), which is a desirable property
since the φj’s are estimates for probabilities that we know must sum to 1.
Also, φj (cid:54)= 0 for all values of j, solving our problem of probabilities being
estimated as zero. Under certain (arguably quite strong) conditions, it can
be shown that the Laplace smoothing actually gives the optimal estimator
of the φj’s.

Returning to our Naive Bayes classiﬁer, with Laplace smoothing, we

therefore obtain the following estimates of the parameters:

φj|y=1 =

φj|y=0 =

1 + (cid:80)n

1 + (cid:80)n

i=1 1{x(i)
2 + (cid:80)n
i=1 1{x(i)
2 + (cid:80)n

j = 1 ∧ y(i) = 1}

i=1 1{y(i) = 1}

j = 1 ∧ y(i) = 0}

i=1 1{y(i) = 0}

46

(In practice, it usually doesn’t matter much whether we apply Laplace smooth-
ing to φy or not, since we will typically have a fair fraction each of spam and
non-spam messages, so φy will be a reasonable estimate of p(y = 1) and will
be quite far from 0 anyway.)

4.2.2 Event models for text classiﬁcation

To close oﬀ our discussion of generative learning algorithms, let’s talk about
one more model that is speciﬁcally for text classiﬁcation. While Naive Bayes
as we’ve presented it will work well for many classiﬁcation problems, for text
classiﬁcation, there is a related model that does even better.

In the speciﬁc context of text classiﬁcation, Naive Bayes as presented uses
the what’s called the Bernoulli event model (or sometimes multi-variate
Bernoulli event model). In this model, we assumed that the way an email
is generated is that ﬁrst it is randomly determined (according to the class
priors p(y)) whether a spammer or non-spammer will send you your next
message. Then, the person sending the email runs through the dictionary,
deciding whether to include each word j in that email independently and
according to the probabilities p(xj = 1|y) = φj|y. Thus, the probability of a
message was given by p(y) (cid:81)d

j=1 p(xj|y).

Here’s a diﬀerent model, called the Multinomial event model. To
describe this model, we will use a diﬀerent notation and set of features for
representing emails. We let xj denote the identity of the j-th word in the
email. Thus, xj is now an integer taking values in {1, . . . , |V |}, where |V |
is the size of our vocabulary (dictionary). An email of d words is now rep-
resented by a vector (x1, x2, . . . , xd) of length d; note that d can vary for
diﬀerent documents. For instance, if an email starts with “A NeurIPS . . . ,”
then x1 = 1 (“a” is the ﬁrst word in the dictionary), and x2 = 35000 (if
“neurips” is the 35000th word in the dictionary).

In the multinomial event model, we assume that the way an email is
generated is via a random process in which spam/non-spam is ﬁrst deter-
mined (according to p(y)) as before. Then, the sender of the email writes the
email by ﬁrst generating x1 from some multinomial distribution over words
(p(x1|y)). Next, the second word x2 is chosen independently of x1 but from
the same multinomial distribution, and similarly for x3, x4, and so on, until
all d words of the email have been generated. Thus, the overall probability of
a message is given by p(y) (cid:81)d
j=1 p(xj|y). Note that this formula looks like the
one we had earlier for the probability of a message under the Bernoulli event
model, but that the terms in the formula now mean very diﬀerent things. In
particular xj|y is now a multinomial, rather than a Bernoulli distribution.

47

The parameters for our new model are φy = p(y) as before, φk|y=1 =
p(xj = k|y = 1) (for any j) and φk|y=0 = p(xj = k|y = 0). Note that we have
assumed that p(xj|y) is the same for all values of j (i.e., that the distribution
according to which a word is generated does not depend on its position j
within the email).

If we are given a training set {(x(i), y(i)); i = 1, . . . , n} where x(i) =
1 , x(i)
) (here, di is the number of words in the i-training example),

2 , . . . , x(i)
di

(x(i)
the likelihood of the data is given by

L(φy, φk|y=0, φk|y=1) =

=

n
(cid:89)

i=1

n
(cid:89)

p(x(i), y(i))

(cid:32) di(cid:89)

p(x(i)

j |y; φk|y=0, φk|y=1)

p(y(i); φy).

(cid:33)

i=1

j=1

Maximizing this yields the maximum likelihood estimates of the parameters:

φk|y=1 =

φk|y=0 =

φy =

j = k ∧ y(i) = 1}

j = k ∧ y(i) = 0}

(cid:80)n

i=1

(cid:80)n

i=1

(cid:80)di
j=1 1{x(i)
(cid:80)n
i=1 1{y(i) = 1}di
(cid:80)di
j=1 1{x(i)
(cid:80)n
i=1 1{y(i) = 0}di

(cid:80)n

i=1 1{y(i) = 1}
n

.

If we were to apply Laplace smoothing (which is needed in practice for good
performance) when estimating φk|y=0 and φk|y=1, we add 1 to the numerators
and |V | to the denominators, and obtain:

φk|y=1 =

φk|y=0 =

1 + (cid:80)n

j=1 1{x(i)

j = k ∧ y(i) = 1}

i=1 1{y(i) = 1}di

1 + (cid:80)n

j=1 1{x(i)

j = k ∧ y(i) = 0}

.

i=1 1{y(i) = 0}di

i=1

(cid:80)di
|V | + (cid:80)n
(cid:80)di
|V | + (cid:80)n

i=1

While not necessarily the very best classiﬁcation algorithm, the Naive Bayes
classiﬁer often works surprisingly well. It is often also a very good “ﬁrst thing
to try,” given its simplicity and ease of implementation.

Chapter 5

Kernel methods

5.1 Feature maps

Recall that in our discussion about linear regression, we considered the prob-
lem of predicting the price of a house (denoted by y) from the living area of
the house (denoted by x), and we ﬁt a linear function of x to the training
data. What if the price y can be more accurately represented as a non-linear
function of x? In this case, we need a more expressive family of models than
linear models.

We start by considering ﬁtting cubic functions y = θ3x3 + θ2x2 + θ1x + θ0.
It turns out that we can view the cubic function as a linear function over
the a diﬀerent set of feature variables (deﬁned below). Concretely, let the
function φ : R → R4 be deﬁned as

φ(x) =













1
x
x2
x3

∈ R4.

(5.1)

Let θ ∈ R4 be the vector containing θ0, θ1, θ2, θ3 as entries. Then we can

rewrite the cubic function in x as:

θ3x3 + θ2x2 + θ1x + θ0 = θT φ(x)

Thus, a cubic function of the variable x can be viewed as a linear function
over the variables φ(x). To distinguish between these two sets of variables,
in the context of kernel methods, we will call the “original” input value the
input attributes of a problem (in this case, x, the living area). When the

48

49

original input is mapped to some new set of quantities φ(x), we will call those
new quantities the features variables. (Unfortunately, diﬀerent authors use
diﬀerent terms to describe these two things in diﬀerent contexts.) We will
call φ a feature map, which maps the attributes to the features.

5.2 LMS (least mean squares) with features

We will derive the gradient descent algorithm for ﬁtting the model θT φ(x).
First recall that for ordinary least square problem where we were to ﬁt θT x,
the batch gradient descent update is (see the ﬁrst lecture note for its deriva-
tion):

θ := θ + α

:= θ + α

n
(cid:88)

i=1
n
(cid:88)

i=1

(cid:0)y(i) − hθ(x(i))(cid:1) x(i)

(cid:0)y(i) − θT x(i)(cid:1) x(i).

(5.2)

Let φ : Rd → Rp be a feature map that maps attribute x (in Rd) to the
features φ(x) in Rp. (In the motivating example in the previous subsection,
we have d = 1 and p = 4.) Now our goal is to ﬁt the function θT φ(x), with
θ being a vector in Rp instead of Rd. We can replace all the occurrences of
x(i) in the algorithm above by φ(x(i)) to obtain the new update:

θ := θ + α

n
(cid:88)

i=1

(cid:0)y(i) − θT φ(x(i))(cid:1) φ(x(i))

Similarly, the corresponding stochastic gradient descent update rule is

θ := θ + α (cid:0)y(i) − θT φ(x(i))(cid:1) φ(x(i))

(5.3)

(5.4)

5.3 LMS with the kernel trick

The gradient descent update, or stochastic gradient update above becomes
computationally expensive when the features φ(x) is high-dimensional. For
example, consider the direct extension of the feature map in equation (5.1)
to high-dimensional input x: suppose x ∈ Rd, and let φ(x) be the vector that

50

(5.5)

contains all the monomials of x with degree ≤ 3

φ(x) =




























1
x1
x2
...
x2
1
x1x2
x1x3
...
x2x1
...
x3
1
x2
1x2
...




























.

The dimension of the features φ(x) is on the order of d3.1 This is a pro-
hibitively long vector for computational purpose — when d = 1000, each
update requires at least computing and storing a 10003 = 109 dimensional
vector, which is 106 times slower than the update rule for for ordinary least
squares updates (5.2).

It may appear at ﬁrst that such d3 runtime per update and memory usage
are inevitable, because the vector θ itself is of dimension p ≈ d3, and we may
need to update every entry of θ and store it. However, we will introduce the
kernel trick with which we will not need to store θ explicitly, and the runtime
can be signiﬁcantly improved.

For simplicity, we assume the initialize the value θ = 0, and we focus
on the iterative update (5.3). The main observation is that at any time, θ
can be represented as a linear combination of the vectors φ(x(1)), . . . , φ(x(n)).
Indeed, we can show this inductively as follows. At initialization, θ = 0 =
(cid:80)n

i=1 0 · φ(x(i)). Assume at some point, θ can be represented as

θ =

n
(cid:88)

i=1

βiφ(x(i))

(5.6)

1Here, for simplicity, we include all the monomials with repetitions (so that, e.g., x1x2x3
and x2x3x1 both appear in φ(x)). Therefore, there are totally 1 + d + d2 + d3 entries in
φ(x).

51

for some β1, . . . , βn ∈ R. Then we claim that in the next round, θ is still a
linear combination of φ(x(1)), . . . , φ(x(n)) because

θ := θ + α

n
(cid